#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {}
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; }
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; }
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr;
  size_t sz0, sz1;
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {}
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T>
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow;
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline int      safe_add(int32_t a, int32_t b) { return safe_add_<int64_t>(a,b); }
static inline int64_t  safe_add(int64_t a, int64_t b) { return safe_add_<int64_t>(a,b); }
static inline int64_t  safe_add(int32_t a, int64_t b) { return safe_add_<int64_t>(a,b); }
static inline int64_t  safe_add(int64_t a, int32_t b) { return safe_add_<int64_t>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow;
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<int64_t>(a,b); }
static inline int64_t safe_mul(int64_t a, int64_t b) { return safe_mul_<int64_t>(a,b); }
static inline int64_t safe_mul(int a, int64_t b) { return safe_mul_<int64_t>(a,b); }
static inline int64_t safe_mul(int64_t a, int b) { return safe_mul_<int64_t>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::DJCDomainType val)
{
  switch (val)
  {
    case DJCDomainType::EqualTo: os << "DJCDomainType::EqualTo"; break;
    case DJCDomainType::LessThan: os << "DJCDomainType::LessThan"; break;
    case DJCDomainType::GreaterThan: os << "DJCDomainType::GreaterThan"; break;
    case DJCDomainType::IsFree: os << "DJCDomainType::IsFree"; break;
    case DJCDomainType::InRange: os << "DJCDomainType::InRange"; break;
    case DJCDomainType::InQCone: os << "DJCDomainType::InQCone"; break;
    case DJCDomainType::InRotatedQCone: os << "DJCDomainType::InRotatedQCone"; break;
    case DJCDomainType::InPExpCone: os << "DJCDomainType::InPExpCone"; break;
    case DJCDomainType::InPPowCone: os << "DJCDomainType::InPPowCone"; break;
    case DJCDomainType::InDExpCone: os << "DJCDomainType::InDExpCone"; break;
    case DJCDomainType::InDPowCone: os << "DJCDomainType::InDPowCone"; break;
    case DJCDomainType::InOneNormCone: os << "DJCDomainType::InOneNormCone"; break;
    case DJCDomainType::InInfNormCone: os << "DJCDomainType::InInfNormCone"; break;
    case DJCDomainType::InPGeoMeanCone: os << "DJCDomainType::InPGeoMeanCone"; break;
    case DJCDomainType::InDGeoMeanCone: os << "DJCDomainType::InDGeoMeanCone"; break;
    case DJCDomainType::InPSDCone: os << "DJCDomainType::InPSDCone"; break;
    default: os << "DJCDomainType.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val)
{
  switch (val)
  {
    case StatusKey::Unknown: os << "StatusKey::Unknown"; break;
    case StatusKey::Basic: os << "StatusKey::Basic"; break;
    case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;
    case StatusKey::OnBound: os << "StatusKey::OnBound"; break;
    case StatusKey::Infinity: os << "StatusKey::Infinity"; break;
    default: os << "StatusKey.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val)
{
  switch (val)
  {
    case SolutionType::Default: os << "SolutionType::Default"; break;
    case SolutionType::Basic: os << "SolutionType::Basic"; break;
    case SolutionType::Interior: os << "SolutionType::Interior"; break;
    case SolutionType::Integer: os << "SolutionType::Integer"; break;
    default: os << "SolutionType.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolverStatus val)
{
  switch (val)
  {
    case SolverStatus::OK: os << "SolverStatus::OK"; break;
    case SolverStatus::Error: os << "SolverStatus::Error"; break;
    case SolverStatus::LostRace: os << "SolverStatus::LostRace"; break;
    default: os << "SolverStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val)
{
  switch (val)
  {
    case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;
    case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;
    case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;
    case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;
    case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;
    case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;
    case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;
    case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;
    case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;
    default: os << "ProblemStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val)
{
  switch (val)
  {
    case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;
    case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;
    case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;
    case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;
    default: os << "AccSolutionStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val)
{
  switch (val)
  {
    case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;
    case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;
    case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;
    case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;
    case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;
    case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;
    default: os << "SolutionStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val)
{
  switch (val)
  {
    case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;
    case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;
    case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;
    default: os << "ObjectiveSense.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val)
{
  switch (val)
  {
    case QConeKey::InQCone: os << "QConeKey::InQCone"; break;
    case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;
    case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;
    case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;
    case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;
    case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;
    case QConeKey::InPGeoMeanCone: os << "QConeKey::InPGeoMeanCone"; break;
    case QConeKey::InDGeoMeanCone: os << "QConeKey::InDGeoMeanCone"; break;
    case QConeKey::Positive: os << "QConeKey::Positive"; break;
    case QConeKey::Negative: os << "QConeKey::Negative"; break;
    case QConeKey::Unbounded: os << "QConeKey::Unbounded"; break;
    case QConeKey::Zero: os << "QConeKey::Zero"; break;
    case QConeKey::InPSDCone: os << "QConeKey::InPSDCone"; break;
    case QConeKey::InSVecPSDCone: os << "QConeKey::InSVecPSDCone"; break;
    default: os << "QConeKey.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val)
{
  switch (val)
  {
    case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;
    case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;
    default: os << "PSDKey.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val)
{
  switch (val)
  {
    case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;
    case RelationKey::LessThan: os << "RelationKey::LessThan"; break;
    case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;
    case RelationKey::IsFree: os << "RelationKey::IsFree"; break;
    case RelationKey::InRange: os << "RelationKey::InRange"; break;
    default: os << "RelationKey.<invalid>"; break;
  }
  return os;
}
// class Disjunction { // @ src/fusion/Disjunction.mbi:275:4-280:5
mosek::fusion::Disjunction::Disjunction(mosek::fusion::p_Disjunction *_impl) : _impl(_impl) { /*std::cout << "Disjunction() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Disjunction::~Disjunction() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Disjunction::p_Disjunction
  (::mosek::fusion::Disjunction * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Disjunction.ctor @ src/fusion/Disjunction.mbi:277:6-279:7
mosek::fusion::Disjunction::t mosek::fusion::p_Disjunction::_new_Disjunction
  (int64_t _7_id)
{ return new mosek::fusion::Disjunction(_7_id); }
mosek::fusion::Disjunction::Disjunction
  (int64_t _7_id) : 
   Disjunction(new mosek::fusion::p_Disjunction(this))
{ mosek::fusion::p_Disjunction::_get_impl(this)->_initialize(_7_id); }
void mosek::fusion::p_Disjunction::_initialize  (int64_t _7_id)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Disjunction::_get_impl(::mosek::fusion::Disjunction::t(_pubthis))->id = _7_id;
  }
}
// mosek.fusion.Disjunction.ctor

void mosek::fusion::p_Disjunction::destroy()
{
}
void mosek::fusion::Disjunction::destroy() { mosek::fusion::p_Disjunction::_get_impl(this)->destroy(); }
// } class Disjunction
// class Term { // @ src/fusion/Disjunction.mbi:208:4-269:5
mosek::fusion::Term::Term(mosek::fusion::p_Term *_impl) : _impl(_impl) { /*std::cout << "Term() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Term::~Term() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Term::p_Term
  (::mosek::fusion::Term * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Term.ctor @ src/fusion/Disjunction.mbi:222:6-90
mosek::fusion::Term::t mosek::fusion::p_Term::_new_Term
  (monty::rc_ptr< ::mosek::fusion::Expression > _8_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _9_d)
{ return new mosek::fusion::Term(_8_e,_9_d); }
mosek::fusion::Term::Term
  (monty::rc_ptr< ::mosek::fusion::Expression > _8_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _9_d) : 
   Term(new mosek::fusion::p_Term(this))
{ mosek::fusion::p_Term::_get_impl(this)->_initialize(_8_e,_9_d); }
void mosek::fusion::p_Term::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _8_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _9_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    exprs = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_8_e.get())});
    domains = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 >{::monty::rc_ptr<::mosek::fusion::DJCDomain>(_9_d.get())});
  }
}
// mosek.fusion.Term.ctor

// mosek.fusion.Term.ctor @ src/fusion/Disjunction.mbi:212:6-220:7
mosek::fusion::Term::t mosek::fusion::p_Term::_new_Term
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _10_t)
{ return new mosek::fusion::Term(_10_t); }
mosek::fusion::Term::Term
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _10_t) : 
   Term(new mosek::fusion::p_Term(this))
{ mosek::fusion::p_Term::_get_impl(this)->_initialize(_10_t); }
void mosek::fusion::p_Term::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _10_t)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    int32_t _11_n = (int)((_10_t)->size(0));
    exprs = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_11_n)));
    domains = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 >(monty::shape(_11_n)));
    int32_t _9004_ = (int)0;
    int32_t _9005_ = _11_n;
    for (int32_t _12_i = _9004_; _12_i < _9005_; ++_12_i)
    {
      {
        ((*exprs)(_12_i)) = ((*mosek::fusion::p_Term::_get_impl(((*_10_t)(_12_i)))->exprs)((int)0));
        ((*domains)(_12_i)) = ((*mosek::fusion::p_Term::_get_impl(((*_10_t)(_12_i)))->domains)((int)0));
      }
    }
  }
}
// mosek.fusion.Term.ctor

// Begin mosek.fusion.Term.numaccterms
// Method mosek.fusion.Term.numaccterms @ src/fusion/Disjunction.mbi:268:6-128
int32_t mosek::fusion::p_Term::numaccterms()
{
  int32_t _13_n = (int)0;
  int32_t _9006_ = (int)0;
  int32_t _9007_ = (int)((domains)->size(0));
  for (int32_t _14_i = _9006_; _14_i < _9007_; ++_14_i)
  {
    {
      _13_n += mosek::fusion::p_DJCDomain::_get_impl(((*domains)(_14_i)).get())->numaccterms();
    }
  }
  return _13_n;
}
// End mosek.fusion.Term.numaccterms

// Begin mosek.fusion.Term.numaccrows
// Method mosek.fusion.Term.numaccrows @ src/fusion/Disjunction.mbi:267:6-127
int32_t mosek::fusion::p_Term::numaccrows()
{
  int32_t _15_n = (int)0;
  int32_t _9008_ = (int)0;
  int32_t _9009_ = (int)((domains)->size(0));
  for (int32_t _16_i = _9008_; _16_i < _9009_; ++_16_i)
  {
    {
      _15_n += mosek::fusion::p_DJCDomain::_get_impl(((*domains)(_16_i)).get())->numaccrows();
    }
  }
  return _15_n;
}
// End mosek.fusion.Term.numaccrows

// Begin mosek.fusion.Term.num
// Method mosek.fusion.Term.num @ src/fusion/Disjunction.mbi:266:6-67
int32_t mosek::fusion::p_Term::num()
{
  return (int)((domains)->size(0));
}
// End mosek.fusion.Term.num

// Begin mosek.fusion.Term.size
// Method mosek.fusion.Term.size @ src/fusion/Disjunction.mbi:265:6-121
int32_t mosek::fusion::Term :: size() { return mosek::fusion::p_Term::_get_impl(this)->size(); }
int32_t mosek::fusion::p_Term::size()
{
  int32_t _17_s = (int)0;
  int32_t _9010_ = (int)0;
  int32_t _9011_ = (int)((domains)->size(0));
  for (int32_t _18_i = _9010_; _18_i < _9011_; ++_18_i)
  {
    {
      _17_s += ((*domains)(_18_i))->size();
    }
  }
  return _17_s;
}
// End mosek.fusion.Term.size

void mosek::fusion::p_Term::destroy()
{
  domains.reset();
  exprs.reset();
}
void mosek::fusion::Term::destroy() { mosek::fusion::p_Term::_get_impl(this)->destroy(); }
// } class Term
// class SimpleTerm { // @ src/fusion/Disjunction.mbi:193:4-195:5
mosek::fusion::SimpleTerm::SimpleTerm(mosek::fusion::p_SimpleTerm *_impl) : mosek::fusion::Term(_impl) { /*std::cout << "SimpleTerm()" << this << std::endl; */ }
mosek::fusion::SimpleTerm::~SimpleTerm() {  /* std::cout << "~SimpleTerm()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SimpleTerm::p_SimpleTerm
  (::mosek::fusion::SimpleTerm * _pubthis) :     mosek::fusion::p_Term(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SimpleTerm.ctor @ src/fusion/Disjunction.mbi:194:6-64
mosek::fusion::SimpleTerm::t mosek::fusion::p_SimpleTerm::_new_SimpleTerm
  (monty::rc_ptr< ::mosek::fusion::Expression > _19_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _20_d)
{ return new mosek::fusion::SimpleTerm(_19_e,_20_d); }
mosek::fusion::SimpleTerm::SimpleTerm
  (monty::rc_ptr< ::mosek::fusion::Expression > _19_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _20_d) : 
   SimpleTerm(new mosek::fusion::p_SimpleTerm(this))
{ mosek::fusion::p_SimpleTerm::_get_impl(this)->_initialize(_19_e,_20_d); }
void mosek::fusion::p_SimpleTerm::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _19_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _20_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Term::_initialize(_19_e,_20_d);
  }
}
// mosek.fusion.SimpleTerm.ctor

void mosek::fusion::p_SimpleTerm::destroy()
{
}
void mosek::fusion::SimpleTerm::destroy() { mosek::fusion::p_SimpleTerm::_get_impl(this)->destroy(); }
// } class SimpleTerm
// class DJCDomain { // @ src/fusion/Disjunction.mbi:136:4-182:5
mosek::fusion::DJCDomain::DJCDomain(mosek::fusion::p_DJCDomain *_impl) : _impl(_impl) { /*std::cout << "DJCDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::DJCDomain::~DJCDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_DJCDomain::p_DJCDomain
  (::mosek::fusion::DJCDomain * _pubthis) :     _pubthis(_pubthis)
{}
mosek::fusion::DJCDomainType mosek::fusion::DJCDomain::get_dom() { return _impl->dom; }
void mosek::fusion::DJCDomain::set_dom(mosek::fusion::DJCDomainType _val) { _impl->dom = _val; }
int32_t mosek::fusion::DJCDomain::get_conedim() { return _impl->conedim; }
void mosek::fusion::DJCDomain::set_conedim(int32_t _val) { _impl->conedim = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::DJCDomain::get_shape() { return _impl->shape; }
void mosek::fusion::DJCDomain::set_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->shape = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DJCDomain::get_par() { return _impl->par; }
void mosek::fusion::DJCDomain::set_par(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->par = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DJCDomain::get_b() { return _impl->b; }
void mosek::fusion::DJCDomain::set_b(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->b = _val; }
// mosek.fusion.DJCDomain.ctor @ src/fusion/Disjunction.mbi:155:6-164:7
mosek::fusion::DJCDomain::t mosek::fusion::p_DJCDomain::_new_DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _21_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _22_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _23_shape_,
    mosek::fusion::DJCDomainType _24_dom_)
{ return new mosek::fusion::DJCDomain(_21_b_,_22_par_,_23_shape_,_24_dom_); }
mosek::fusion::DJCDomain::DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _21_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _22_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _23_shape_,
    mosek::fusion::DJCDomainType _24_dom_) : 
   DJCDomain(new mosek::fusion::p_DJCDomain(this))
{ mosek::fusion::p_DJCDomain::_get_impl(this)->_initialize(_21_b_,_22_par_,_23_shape_,_24_dom_); }
void mosek::fusion::p_DJCDomain::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _21_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _22_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _23_shape_,
    mosek::fusion::DJCDomainType _24_dom_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__21_b_(_21_b_ ? _21_b_->raw() : nullptr, _21_b_ ? _21_b_->size(0) : 0);
    _checked_ptr_1<double> _ptr__22_par_(_22_par_ ? _22_par_->raw() : nullptr, _22_par_ ? _22_par_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__23_shape_(_23_shape_ ? _23_shape_->raw() : nullptr, _23_shape_ ? _23_shape_->size(0) : 0);
    b = _21_b_;
    par = _22_par_;
    shape = _23_shape_;
    dom = _24_dom_;
    conedim = ((int)((_23_shape_)->size(0)) - (int)1);
  }
}
// mosek.fusion.DJCDomain.ctor

// mosek.fusion.DJCDomain.ctor @ src/fusion/Disjunction.mbi:143:6-153:7
mosek::fusion::DJCDomain::t mosek::fusion::p_DJCDomain::_new_DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _25_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _26_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _27_shape_,
    int32_t _28_conedim_,
    mosek::fusion::DJCDomainType _29_dom_)
{ return new mosek::fusion::DJCDomain(_25_b_,_26_par_,_27_shape_,_28_conedim_,_29_dom_); }
mosek::fusion::DJCDomain::DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _25_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _26_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _27_shape_,
    int32_t _28_conedim_,
    mosek::fusion::DJCDomainType _29_dom_) : 
   DJCDomain(new mosek::fusion::p_DJCDomain(this))
{ mosek::fusion::p_DJCDomain::_get_impl(this)->_initialize(_25_b_,_26_par_,_27_shape_,_28_conedim_,_29_dom_); }
void mosek::fusion::p_DJCDomain::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _25_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _26_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _27_shape_,
    int32_t _28_conedim_,
    mosek::fusion::DJCDomainType _29_dom_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__25_b_(_25_b_ ? _25_b_->raw() : nullptr, _25_b_ ? _25_b_->size(0) : 0);
    _checked_ptr_1<double> _ptr__26_par_(_26_par_ ? _26_par_->raw() : nullptr, _26_par_ ? _26_par_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__27_shape_(_27_shape_ ? _27_shape_->raw() : nullptr, _27_shape_ ? _27_shape_->size(0) : 0);
    b = _25_b_;
    par = _26_par_;
    shape = _27_shape_;
    dom = _29_dom_;
    conedim = _28_conedim_;
  }
}
// mosek.fusion.DJCDomain.ctor

// Begin mosek.fusion.DJCDomain.numaccterms
// Method mosek.fusion.DJCDomain.numaccterms @ src/fusion/Disjunction.mbi:176:6-181:7
int32_t mosek::fusion::p_DJCDomain::numaccterms()
{
  if ((dom == ::mosek::fusion::DJCDomainType::InRange))
  {
    {
      return (int)2;
    }
  }
  else
  {
    {
      return (int)1;
    }
  }
}
// End mosek.fusion.DJCDomain.numaccterms

// Begin mosek.fusion.DJCDomain.numaccrows
// Method mosek.fusion.DJCDomain.numaccrows @ src/fusion/Disjunction.mbi:170:6-175:7
int32_t mosek::fusion::p_DJCDomain::numaccrows()
{
  if ((dom == ::mosek::fusion::DJCDomainType::InRange))
  {
    {
      return safe_mul( _pubthis->size(),(int)2 );
    }
  }
  else
  {
    {
      return _pubthis->size();
    }
  }
}
// End mosek.fusion.DJCDomain.numaccrows

// Begin mosek.fusion.DJCDomain.size
// Method mosek.fusion.DJCDomain.size @ src/fusion/Disjunction.mbi:166:6-169:7
int32_t mosek::fusion::DJCDomain :: size() { return mosek::fusion::p_DJCDomain::_get_impl(this)->size(); }
int32_t mosek::fusion::p_DJCDomain::size()
{
  int32_t _30_s = (int)1;
  int32_t _9012_ = (int)0;
  int32_t _9013_ = (int)((shape)->size(0));
  for (int32_t _31_i = _9012_; _31_i < _9013_; ++_31_i)
  {
    {
      _30_s *= ((*shape)(_31_i));
    }
  }
  return _30_s;
}
// End mosek.fusion.DJCDomain.size

void mosek::fusion::p_DJCDomain::destroy()
{
  shape.reset();
  par.reset();
  b.reset();
}
void mosek::fusion::DJCDomain::destroy() { mosek::fusion::p_DJCDomain::_get_impl(this)->destroy(); }
// } class DJCDomain
// class DJC { // @ src/fusion/Disjunction.mbi:32:4-104:5
mosek::fusion::DJC::DJC(mosek::fusion::p_DJC *_impl) : _impl(_impl) { /*std::cout << "DJC() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::DJC::~DJC() { delete _impl; _impl = nullptr; }
mosek::fusion::p_DJC::p_DJC
  (::mosek::fusion::DJC * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ src/fusion/Disjunction.mbi:103:6-114
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( monty::rc_ptr< ::mosek::fusion::SimpleTerm > _32_s1,
    monty::rc_ptr< ::mosek::fusion::SimpleTerm > _33_s2,
    monty::rc_ptr< ::mosek::fusion::SimpleTerm > _34_s3) { return mosek::fusion::p_DJC::AND(_32_s1,_33_s2,_34_s3); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(monty::rc_ptr< ::mosek::fusion::SimpleTerm > _32_s1,monty::rc_ptr< ::mosek::fusion::SimpleTerm > _33_s2,monty::rc_ptr< ::mosek::fusion::SimpleTerm > _34_s3)
{
  return ::mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 >{::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_32_s1.get()),::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_33_s2.get()),::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_34_s3.get())}));
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ src/fusion/Disjunction.mbi:102:6-96
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( monty::rc_ptr< ::mosek::fusion::SimpleTerm > _35_s1,
    monty::rc_ptr< ::mosek::fusion::SimpleTerm > _36_s2) { return mosek::fusion::p_DJC::AND(_35_s1,_36_s2); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(monty::rc_ptr< ::mosek::fusion::SimpleTerm > _35_s1,monty::rc_ptr< ::mosek::fusion::SimpleTerm > _36_s2)
{
  return ::mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 >{::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_35_s1.get()),::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_36_s2.get())}));
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ src/fusion/Disjunction.mbi:101:6-78
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( monty::rc_ptr< ::mosek::fusion::SimpleTerm > _37_s1) { return mosek::fusion::p_DJC::AND(_37_s1); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(monty::rc_ptr< ::mosek::fusion::SimpleTerm > _37_s1)
{
  return ::mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 >{::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_37_s1.get())}));
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ src/fusion/Disjunction.mbi:100:6-84
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _38_slist) { return mosek::fusion::p_DJC::AND(_38_slist); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _38_slist)
{
  return ::mosek::fusion::p_Term::_new_Term(_38_slist);
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ src/fusion/Disjunction.mbi:69:6-98:7
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Expression > _39_expr,
    monty::rc_ptr< ::mosek::fusion::RangeDomain > _40_dom) { return mosek::fusion::p_DJC::term(_39_expr,_40_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Expression > _39_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _40_dom)
{
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_40_dom)->sparsity.get()))
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Sparse domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_40_dom)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _41_domlb = mosek::fusion::p_RangeDomain::_get_impl(_40_dom)->lb;
  _checked_ptr_1<double> _ptr__41_domlb(_41_domlb ? _41_domlb->raw() : nullptr,_41_domlb ? _41_domlb->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _42_domub = mosek::fusion::p_RangeDomain::_get_impl(_40_dom)->ub;
  _checked_ptr_1<double> _ptr__42_domub(_42_domub ? _42_domub->raw() : nullptr,_42_domub ? _42_domub->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _43_eshape = _39_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__43_eshape(_43_eshape ? _43_eshape->raw() : nullptr,_43_eshape ? _43_eshape->size(0) : 0);
  int64_t _44_esize = _39_expr->getSize();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _45_shape = mosek::fusion::p_RangeDomain::_get_impl(_40_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__45_shape(_45_shape ? _45_shape->raw() : nullptr,_45_shape ? _45_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _46_bl;
  _checked_ptr_1<double> _ptr__46_bl(_46_bl ? _46_bl->raw() : nullptr,_46_bl ? _46_bl->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _47_bu;
  _checked_ptr_1<double> _ptr__47_bu(_47_bu ? _47_bu->raw() : nullptr,_47_bu ? _47_bu->size(0) : 0);
  if ((NULL == _45_shape.get()))
  {
    {
      _45_shape = _43_eshape;
      _ptr__45_shape.update(_45_shape ? _45_shape->raw() : nullptr, _45_shape ? _45_shape->size(0) : 0);
    }
  }
  else
  {
    {
      if (((int)((_45_shape)->size(0)) != (int)((_43_eshape)->size(0))))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
        }
      }
      else
      {
        {
          int32_t _9014_ = (int)0;
          int32_t _9015_ = (int)((_45_shape)->size(0));
          for (int32_t _48_i = _9014_; _48_i < _9015_; ++_48_i)
          {
            {
              if ((_ptr__45_shape[_48_i] != _ptr__43_eshape[_48_i]))
              {
                {
                  throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if (mosek::fusion::p_RangeDomain::_get_impl(_40_dom)->scalable)
  {
    {
      std::vector<double> _9016_;
      for (int64_t _49_i = (int)0, _9017_ = _44_esize; _49_i < _9017_ ; ++_49_i)
      {
        _9016_.push_back(_ptr__41_domlb[(int)0]);
      }
      auto _9018_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9016_.size()),_9016_.begin(),_9016_.end()));
      _46_bl = _9018_;
      _ptr__46_bl.update(_46_bl ? _46_bl->raw() : nullptr, _46_bl ? _46_bl->size(0) : 0);
      std::vector<double> _9019_;
      for (int64_t _50_i = (int)0, _9020_ = _44_esize; _50_i < _9020_ ; ++_50_i)
      {
        _9019_.push_back(_ptr__42_domub[(int)0]);
      }
      auto _9021_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9019_.size()),_9019_.begin(),_9019_.end()));
      _47_bu = _9021_;
      _ptr__47_bu.update(_47_bu ? _47_bu->raw() : nullptr, _47_bu ? _47_bu->size(0) : 0);
    }
  }
  else
  {
    {
      _46_bl = _41_domlb;
      _ptr__46_bl.update(_46_bl ? _46_bl->raw() : nullptr, _46_bl ? _46_bl->size(0) : 0);
      _47_bu = _42_domub;
      _ptr__47_bu.update(_47_bu ? _47_bu->raw() : nullptr, _47_bu ? _47_bu->size(0) : 0);
    }
  }
  return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_39_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_46_bl,_47_bu,_45_shape,::mosek::fusion::DJCDomainType::InRange));
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ src/fusion/Disjunction.mbi:68:6-105
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Variable > _51_x,
    monty::rc_ptr< ::mosek::fusion::RangeDomain > _52_dom) { return mosek::fusion::p_DJC::term(_51_x,_52_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Variable > _51_x,monty::rc_ptr< ::mosek::fusion::RangeDomain > _52_dom)
{
  return ::mosek::fusion::p_DJC::term(_51_x->__mosek_2fusion_2Variable__asExpr(),_52_dom);
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ src/fusion/Disjunction.mbi:34:6-66:7
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Expression > _53_expr,
    monty::rc_ptr< ::mosek::fusion::LinearDomain > _54_dom) { return mosek::fusion::p_DJC::term(_53_expr,_54_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Expression > _53_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _54_dom)
{
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->sparsity.get()))
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Sparse domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _55_dombnd = mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->bnd;
  _checked_ptr_1<double> _ptr__55_dombnd(_55_dombnd ? _55_dombnd->raw() : nullptr,_55_dombnd ? _55_dombnd->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _56_eshape = _53_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__56_eshape(_56_eshape ? _56_eshape->raw() : nullptr,_56_eshape ? _56_eshape->size(0) : 0);
  int64_t _57_esize = _53_expr->getSize();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _58_shape = mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__58_shape(_58_shape ? _58_shape->raw() : nullptr,_58_shape ? _58_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _59_b;
  _checked_ptr_1<double> _ptr__59_b(_59_b ? _59_b->raw() : nullptr,_59_b ? _59_b->size(0) : 0);
  if ((NULL == _58_shape.get()))
  {
    {
      _58_shape = _56_eshape;
      _ptr__58_shape.update(_58_shape ? _58_shape->raw() : nullptr, _58_shape ? _58_shape->size(0) : 0);
    }
  }
  else
  {
    {
      if (((int)((_58_shape)->size(0)) != (int)((_56_eshape)->size(0))))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
        }
      }
      else
      {
        {
          int32_t _9022_ = (int)0;
          int32_t _9023_ = (int)((_58_shape)->size(0));
          for (int32_t _60_i = _9022_; _60_i < _9023_; ++_60_i)
          {
            {
              if ((_ptr__58_shape[_60_i] != _ptr__56_eshape[_60_i]))
              {
                {
                  throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if ((NULL == mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->bnd.get()))
  {
    {
      _59_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_57_esize)));
      _ptr__59_b.update(_59_b ? _59_b->raw() : nullptr, _59_b ? _59_b->size(0) : 0);
    }
  }
  else if(mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->scalable)
  {
    {
      std::vector<double> _9024_;
      for (int64_t _61_i = (int)0, _9025_ = _57_esize; _61_i < _9025_ ; ++_61_i)
      {
        _9024_.push_back(_ptr__55_dombnd[(int)0]);
      }
      auto _9026_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9024_.size()),_9024_.begin(),_9024_.end()));
      _59_b = _9026_;
      _ptr__59_b.update(_59_b ? _59_b->raw() : nullptr, _59_b ? _59_b->size(0) : 0);
    }
  }
  else if(mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->empty)
  {
    {
      _59_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_57_esize)));
      _ptr__59_b.update(_59_b ? _59_b->raw() : nullptr, _59_b ? _59_b->size(0) : 0);
    }
  }
  else
  {
    {
      _59_b = _55_dombnd;
      _ptr__59_b.update(_59_b ? _59_b->raw() : nullptr, _59_b ? _59_b->size(0) : 0);
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_53_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_59_b,nullptr,_58_shape,::mosek::fusion::DJCDomainType::EqualTo));
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_53_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_59_b,nullptr,_58_shape,::mosek::fusion::DJCDomainType::LessThan));
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_53_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_59_b,nullptr,_58_shape,::mosek::fusion::DJCDomainType::GreaterThan));
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_54_dom)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_53_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_59_b,nullptr,_58_shape,::mosek::fusion::DJCDomainType::IsFree));
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Invalid linear domain"));
    }
  }
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ src/fusion/Disjunction.mbi:33:6-105
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Variable > _62_x,
    monty::rc_ptr< ::mosek::fusion::LinearDomain > _63_dom) { return mosek::fusion::p_DJC::term(_62_x,_63_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Variable > _62_x,monty::rc_ptr< ::mosek::fusion::LinearDomain > _63_dom)
{
  return ::mosek::fusion::p_DJC::term(_62_x->__mosek_2fusion_2Variable__asExpr(),_63_dom);
}
// End mosek.fusion.DJC.term

void mosek::fusion::p_DJC::destroy()
{
}
void mosek::fusion::DJC::destroy() { mosek::fusion::p_DJC::_get_impl(this)->destroy(); }
// } class DJC
// class Sort { // @ src/fusion/Sort.mbi:6:4-262:5
mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Sort::p_Sort
  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Sort.argTransposeSort
// Method mosek.fusion.Sort.argTransposeSort @ src/fusion/Sort.mbi:249:6-261:7
void mosek::fusion::Sort::argTransposeSort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _269_perm,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _270_ptrb,
    int32_t _271_m,
    int32_t _272_n,
    int32_t _273_p,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _274_val) { mosek::fusion::p_Sort::argTransposeSort(_269_perm,_270_ptrb,_271_m,_272_n,_273_p,_274_val); }
void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< int64_t,1 > > _269_perm,std::shared_ptr< monty::ndarray< int64_t,1 > > _270_ptrb,int32_t _271_m,int32_t _272_n,int32_t _273_p,std::shared_ptr< monty::ndarray< int64_t,1 > > _274_val)
{
  _checked_ptr_1<int64_t> _ptr__269_perm(_269_perm ? _269_perm->raw() : nullptr, _269_perm ? _269_perm->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__270_ptrb(_270_ptrb ? _270_ptrb->raw() : nullptr, _270_ptrb ? _270_ptrb->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__274_val(_274_val ? _274_val->raw() : nullptr, _274_val ? _274_val->size(0) : 0);
  int32_t _9027_ = (int)0;
  int32_t _9028_ = safe_add( safe_mul( _271_m,_273_p ),(int)1 );
  for (int32_t _275_q = _9027_; _275_q < _9028_; ++_275_q)
  {
    {
      _ptr__270_ptrb[_275_q] = (int)0;
    }
  }
  int32_t _9029_ = (int)0;
  int32_t _9030_ = (int)((_274_val)->size(0));
  for (int32_t _276_q = _9029_; _276_q < _9030_; ++_276_q)
  {
    {
      ++ _ptr__270_ptrb[safe_add( safe_add( safe_mul( (_ptr__274_val[_ptr__269_perm[_276_q]] / safe_mul( _272_n,_273_p )),_273_p ),(_ptr__274_val[_ptr__269_perm[_276_q]] % _273_p) ),(int)1 )];
    }
  }
  int32_t _9031_ = (int)0;
  int32_t _9032_ = safe_mul( _271_m,_273_p );
  for (int32_t _277_i = _9031_; _277_i < _9032_; ++_277_i)
  {
    {
      _ptr__270_ptrb[safe_add( _277_i,(int)1 )] = safe_add( _ptr__270_ptrb[safe_add( _277_i,(int)1 )],_ptr__270_ptrb[_277_i] );
    }
  }
  std::vector<int64_t> _9033_;
  for (int32_t _279_i = (int)0, _9034_ = (int)((_269_perm)->size(0)); _279_i < _9034_ ; ++_279_i)
  {
    _9033_.push_back(_ptr__269_perm[_279_i]);
  }
  auto _9035_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9033_.size()),_9033_.begin(),_9033_.end()));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _278_per2 = _9035_;
  _checked_ptr_1<int64_t> _ptr__278_per2(_278_per2 ? _278_per2->raw() : nullptr,_278_per2 ? _278_per2->size(0) : 0);
  int64_t _9036_ = (int64_t)0;
  int64_t _9037_ = (int64_t)((_274_val)->size(0));
  for (int64_t _280_q = _9036_; _280_q < _9037_; ++_280_q)
  {
    {
      int64_t _281_k = safe_add( safe_mul( (_ptr__274_val[_ptr__278_per2[_280_q]] / safe_mul( _272_n,_273_p )),_273_p ),(_ptr__274_val[_ptr__278_per2[_280_q]] % _273_p) );
      _ptr__269_perm[_ptr__270_ptrb[_281_k]] = _ptr__278_per2[_280_q];
      ++ _ptr__270_ptrb[_281_k];
    }
  }
}
// End mosek.fusion.Sort.argTransposeSort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:207:6-210:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _282_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _283_vals1) { mosek::fusion::p_Sort::argsort(_282_idx,_283_vals1); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _282_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _283_vals1)
{
  _checked_ptr_1<int64_t> _ptr__282_idx(_282_idx ? _282_idx->raw() : nullptr, _282_idx ? _282_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__283_vals1(_283_vals1 ? _283_vals1->raw() : nullptr, _283_vals1 ? _283_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_282_idx,_283_vals1,(int64_t)((int)0),(int64_t)((int)((_282_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:202:6-205:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _284_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _285_vals1) { mosek::fusion::p_Sort::argsort(_284_idx,_285_vals1); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _284_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _285_vals1)
{
  _checked_ptr_1<int64_t> _ptr__284_idx(_284_idx ? _284_idx->raw() : nullptr, _284_idx ? _284_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__285_vals1(_285_vals1 ? _285_vals1->raw() : nullptr, _285_vals1 ? _285_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_284_idx,_285_vals1,(int64_t)((int)0),(int64_t)((int)((_284_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:197:6-200:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _286_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _287_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _288_vals2) { mosek::fusion::p_Sort::argsort(_286_idx,_287_vals1,_288_vals2); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _286_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _287_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _288_vals2)
{
  _checked_ptr_1<int64_t> _ptr__286_idx(_286_idx ? _286_idx->raw() : nullptr, _286_idx ? _286_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__287_vals1(_287_vals1 ? _287_vals1->raw() : nullptr, _287_vals1 ? _287_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__288_vals2(_288_vals2 ? _288_vals2->raw() : nullptr, _288_vals2 ? _288_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_286_idx,_287_vals1,_288_vals2,(int64_t)((int)0),(int64_t)((int)((_286_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:193:6-196:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _289_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _290_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _291_vals2) { mosek::fusion::p_Sort::argsort(_289_idx,_290_vals1,_291_vals2); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _289_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _290_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _291_vals2)
{
  _checked_ptr_1<int64_t> _ptr__289_idx(_289_idx ? _289_idx->raw() : nullptr, _289_idx ? _289_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__290_vals1(_290_vals1 ? _290_vals1->raw() : nullptr, _290_vals1 ? _290_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__291_vals2(_291_vals2 ? _291_vals2->raw() : nullptr, _291_vals2 ? _291_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_289_idx,_290_vals1,_291_vals2,(int64_t)((int)0),(int64_t)((int)((_289_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:188:6-191:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _292_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _293_vals1,
    int64_t _294_first,
    int64_t _295_last) { mosek::fusion::p_Sort::argsort(_292_idx,_293_vals1,_294_first,_295_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _292_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _293_vals1,int64_t _294_first,int64_t _295_last)
{
  _checked_ptr_1<int64_t> _ptr__292_idx(_292_idx ? _292_idx->raw() : nullptr, _292_idx ? _292_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__293_vals1(_293_vals1 ? _293_vals1->raw() : nullptr, _293_vals1 ? _293_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_292_idx,_293_vals1,_294_first,_295_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:183:6-186:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _296_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _297_vals1,
    int64_t _298_first,
    int64_t _299_last) { mosek::fusion::p_Sort::argsort(_296_idx,_297_vals1,_298_first,_299_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _296_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _297_vals1,int64_t _298_first,int64_t _299_last)
{
  _checked_ptr_1<int64_t> _ptr__296_idx(_296_idx ? _296_idx->raw() : nullptr, _296_idx ? _296_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__297_vals1(_297_vals1 ? _297_vals1->raw() : nullptr, _297_vals1 ? _297_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_296_idx,_297_vals1,_298_first,_299_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:178:6-181:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _300_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _301_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _302_vals2,
    int64_t _303_first,
    int64_t _304_last) { mosek::fusion::p_Sort::argsort(_300_idx,_301_vals1,_302_vals2,_303_first,_304_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _300_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _301_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _302_vals2,int64_t _303_first,int64_t _304_last)
{
  _checked_ptr_1<int64_t> _ptr__300_idx(_300_idx ? _300_idx->raw() : nullptr, _300_idx ? _300_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__301_vals1(_301_vals1 ? _301_vals1->raw() : nullptr, _301_vals1 ? _301_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__302_vals2(_302_vals2 ? _302_vals2->raw() : nullptr, _302_vals2 ? _302_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_300_idx,_301_vals1,_302_vals2,_303_first,_304_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:174:6-177:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _305_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _306_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _307_vals2,
    int64_t _308_first,
    int64_t _309_last) { mosek::fusion::p_Sort::argsort(_305_idx,_306_vals1,_307_vals2,_308_first,_309_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _305_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _306_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _307_vals2,int64_t _308_first,int64_t _309_last)
{
  _checked_ptr_1<int64_t> _ptr__305_idx(_305_idx ? _305_idx->raw() : nullptr, _305_idx ? _305_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__306_vals1(_306_vals1 ? _306_vals1->raw() : nullptr, _306_vals1 ? _306_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__307_vals2(_307_vals2 ? _307_vals2->raw() : nullptr, _307_vals2 ? _307_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_305_idx,_306_vals1,_307_vals2,_308_first,_309_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:156:6-171:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _310_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _311_vals1,
    int64_t _312_first,
    int64_t _313_last,
    bool _314_check) { mosek::fusion::p_Sort::argsort(_310_idx,_311_vals1,_312_first,_313_last,_314_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _310_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _311_vals1,int64_t _312_first,int64_t _313_last,bool _314_check)
{
  _checked_ptr_1<int64_t> _ptr__310_idx(_310_idx ? _310_idx->raw() : nullptr, _310_idx ? _310_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__311_vals1(_311_vals1 ? _311_vals1->raw() : nullptr, _311_vals1 ? _311_vals1->size(0) : 0);
  if (((!_314_check) || ((_313_last - _312_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_310_idx,_311_vals1,_312_first,_313_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_310_idx,_311_vals1,_312_first,_313_last,_314_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _315_minmax = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int64_t> _ptr__315_minmax(_315_minmax ? _315_minmax->raw() : nullptr,_315_minmax ? _315_minmax->size(0) : 0);
      int32_t _316_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_310_idx,_311_vals1,nullptr,_312_first,_313_last,_315_minmax);
      if (((_ptr__315_minmax[(int)1] - _ptr__315_minmax[(int)0]) < safe_mul( _316_scale,(_313_last - _312_first) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_310_idx,_311_vals1,_312_first,_313_last,_ptr__315_minmax[(int)0],_ptr__315_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_310_idx,_311_vals1,_312_first,_313_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:137:6-154:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _317_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _318_vals1,
    int64_t _319_first,
    int64_t _320_last,
    bool _321_check) { mosek::fusion::p_Sort::argsort(_317_idx,_318_vals1,_319_first,_320_last,_321_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _317_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _318_vals1,int64_t _319_first,int64_t _320_last,bool _321_check)
{
  _checked_ptr_1<int64_t> _ptr__317_idx(_317_idx ? _317_idx->raw() : nullptr, _317_idx ? _317_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__318_vals1(_318_vals1 ? _318_vals1->raw() : nullptr, _318_vals1 ? _318_vals1->size(0) : 0);
  if (((!_321_check) || ((_320_last - _319_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_317_idx,_318_vals1,_319_first,_320_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_317_idx,_318_vals1,_319_first,_320_last,_321_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _322_minmax = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int32_t> _ptr__322_minmax(_322_minmax ? _322_minmax->raw() : nullptr,_322_minmax ? _322_minmax->size(0) : 0);
      int32_t _323_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_317_idx,_318_vals1,nullptr,_319_first,_320_last,_322_minmax);
      if (((_ptr__322_minmax[(int)1] - _ptr__322_minmax[(int)0]) < safe_mul( _323_scale,(_320_last - _319_first) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_317_idx,_318_vals1,_319_first,_320_last,_ptr__322_minmax[(int)0],_ptr__322_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_317_idx,_318_vals1,_319_first,_320_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:116:6-135:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _324_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _325_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _326_vals2,
    int64_t _327_first,
    int64_t _328_last,
    bool _329_check) { mosek::fusion::p_Sort::argsort(_324_idx,_325_vals1,_326_vals2,_327_first,_328_last,_329_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _324_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _325_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _326_vals2,int64_t _327_first,int64_t _328_last,bool _329_check)
{
  _checked_ptr_1<int64_t> _ptr__324_idx(_324_idx ? _324_idx->raw() : nullptr, _324_idx ? _324_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__325_vals1(_325_vals1 ? _325_vals1->raw() : nullptr, _325_vals1 ? _325_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__326_vals2(_326_vals2 ? _326_vals2->raw() : nullptr, _326_vals2 ? _326_vals2->size(0) : 0);
  if (((!_329_check) || ((_328_last - _327_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_324_idx,_325_vals1,_326_vals2,_327_first,_328_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_324_idx,_325_vals1,_326_vals2,_327_first,_328_last,_329_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _330_minmax = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int64_t> _ptr__330_minmax(_330_minmax ? _330_minmax->raw() : nullptr,_330_minmax ? _330_minmax->size(0) : 0);
      int32_t _331_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_324_idx,_325_vals1,_326_vals2,_327_first,_328_last,_330_minmax);
      if ((((_ptr__330_minmax[(int)1] - _ptr__330_minmax[(int)0]) < safe_mul( _331_scale,(_328_last - _327_first) )) && ((_ptr__330_minmax[(int)3] - _ptr__330_minmax[(int)2]) < safe_mul( _331_scale,(_328_last - _327_first) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_324_idx,_326_vals2,_327_first,_328_last,_ptr__330_minmax[(int)2],_ptr__330_minmax[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_324_idx,_325_vals1,_327_first,_328_last,_ptr__330_minmax[(int)0],_ptr__330_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_324_idx,_325_vals1,_326_vals2,_327_first,_328_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:95:6-114:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _332_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _333_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _334_vals2,
    int64_t _335_first,
    int64_t _336_last,
    bool _337_check) { mosek::fusion::p_Sort::argsort(_332_idx,_333_vals1,_334_vals2,_335_first,_336_last,_337_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _332_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _333_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _334_vals2,int64_t _335_first,int64_t _336_last,bool _337_check)
{
  _checked_ptr_1<int64_t> _ptr__332_idx(_332_idx ? _332_idx->raw() : nullptr, _332_idx ? _332_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__333_vals1(_333_vals1 ? _333_vals1->raw() : nullptr, _333_vals1 ? _333_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__334_vals2(_334_vals2 ? _334_vals2->raw() : nullptr, _334_vals2 ? _334_vals2->size(0) : 0);
  if (((!_337_check) || ((_336_last - _335_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_332_idx,_333_vals1,_334_vals2,_335_first,_336_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_332_idx,_333_vals1,_334_vals2,_335_first,_336_last,_337_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _338_minmax = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int32_t> _ptr__338_minmax(_338_minmax ? _338_minmax->raw() : nullptr,_338_minmax ? _338_minmax->size(0) : 0);
      int32_t _339_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_332_idx,_333_vals1,_334_vals2,_335_first,_336_last,_338_minmax);
      if ((((_ptr__338_minmax[(int)1] - _ptr__338_minmax[(int)0]) < safe_mul( _339_scale,(_336_last - _335_first) )) && ((_ptr__338_minmax[(int)3] - _ptr__338_minmax[(int)2]) < safe_mul( _339_scale,(_336_last - _335_first) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_332_idx,_334_vals2,_335_first,_336_last,_ptr__338_minmax[(int)2],_ptr__338_minmax[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_332_idx,_333_vals1,_335_first,_336_last,_ptr__338_minmax[(int)0],_ptr__338_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_332_idx,_333_vals1,_334_vals2,_335_first,_336_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argbucketsort
// Method mosek.fusion.Sort.argbucketsort @ src/fusion/Sort.mbi:90:6-93:7
void mosek::fusion::Sort::argbucketsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _340_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _341_vals,
    int64_t _342_first,
    int64_t _343_last,
    int64_t _344_minv,
    int64_t _345_maxv) { mosek::fusion::p_Sort::argbucketsort(_340_idx,_341_vals,_342_first,_343_last,_344_minv,_345_maxv); }
void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _340_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _341_vals,int64_t _342_first,int64_t _343_last,int64_t _344_minv,int64_t _345_maxv)
{
  _checked_ptr_1<int64_t> _ptr__340_idx(_340_idx ? _340_idx->raw() : nullptr, _340_idx ? _340_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__341_vals(_341_vals ? _341_vals->raw() : nullptr, _341_vals ? _341_vals->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_340_idx,_342_first,_343_last,_341_vals,_344_minv,_345_maxv);
}
// End mosek.fusion.Sort.argbucketsort

// Begin mosek.fusion.Sort.argbucketsort
// Method mosek.fusion.Sort.argbucketsort @ src/fusion/Sort.mbi:85:6-88:7
void mosek::fusion::Sort::argbucketsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _346_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _347_vals,
    int64_t _348_first,
    int64_t _349_last,
    int32_t _350_minv,
    int32_t _351_maxv) { mosek::fusion::p_Sort::argbucketsort(_346_idx,_347_vals,_348_first,_349_last,_350_minv,_351_maxv); }
void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _346_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _347_vals,int64_t _348_first,int64_t _349_last,int32_t _350_minv,int32_t _351_maxv)
{
  _checked_ptr_1<int64_t> _ptr__346_idx(_346_idx ? _346_idx->raw() : nullptr, _346_idx ? _346_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__347_vals(_347_vals ? _347_vals->raw() : nullptr, _347_vals ? _347_vals->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_346_idx,_348_first,_349_last,_347_vals,_350_minv,_351_maxv);
}
// End mosek.fusion.Sort.argbucketsort

// Begin mosek.fusion.Sort.getminmax
// Method mosek.fusion.Sort.getminmax @ src/fusion/Sort.mbi:61:6-80:7
void mosek::fusion::Sort::getminmax
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _352_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _353_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _354_vals2,
    int64_t _355_first,
    int64_t _356_last,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _357_res) { mosek::fusion::p_Sort::getminmax(_352_idx,_353_vals1,_354_vals2,_355_first,_356_last,_357_res); }
void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< int64_t,1 > > _352_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _353_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _354_vals2,int64_t _355_first,int64_t _356_last,std::shared_ptr< monty::ndarray< int64_t,1 > > _357_res)
{
  _checked_ptr_1<int64_t> _ptr__352_idx(_352_idx ? _352_idx->raw() : nullptr, _352_idx ? _352_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__353_vals1(_353_vals1 ? _353_vals1->raw() : nullptr, _353_vals1 ? _353_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__354_vals2(_354_vals2 ? _354_vals2->raw() : nullptr, _354_vals2 ? _354_vals2->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__357_res(_357_res ? _357_res->raw() : nullptr, _357_res ? _357_res->size(0) : 0);
  _ptr__357_res[(int)0] = _ptr__353_vals1[_ptr__352_idx[_355_first]];
  _ptr__357_res[(int)1] = _ptr__353_vals1[_ptr__352_idx[_355_first]];
  int64_t _9038_ = safe_add( _355_first,(int)1 );
  int64_t _9039_ = _356_last;
  for (int64_t _358_i = _9038_; _358_i < _9039_; ++_358_i)
  {
    {
      if ((_ptr__357_res[(int)0] > _ptr__353_vals1[_ptr__352_idx[_358_i]]))
      {
        {
          _ptr__357_res[(int)0] = _ptr__353_vals1[_ptr__352_idx[_358_i]];
        }
      }
      {}
      if ((_ptr__357_res[(int)1] < _ptr__353_vals1[_ptr__352_idx[_358_i]]))
      {
        {
          _ptr__357_res[(int)1] = _ptr__353_vals1[_ptr__352_idx[_358_i]];
        }
      }
      {}
    }
  }
  if ((NULL != _354_vals2.get()))
  {
    {
      _ptr__357_res[(int)2] = _ptr__354_vals2[_ptr__352_idx[_355_first]];
      _ptr__357_res[(int)3] = _ptr__354_vals2[_ptr__352_idx[_355_first]];
      int64_t _9040_ = safe_add( _355_first,(int)1 );
      int64_t _9041_ = _356_last;
      for (int64_t _359_i = _9040_; _359_i < _9041_; ++_359_i)
      {
        {
          if ((_ptr__357_res[(int)2] > _ptr__354_vals2[_ptr__352_idx[_359_i]]))
          {
            {
              _ptr__357_res[(int)2] = _ptr__354_vals2[_ptr__352_idx[_359_i]];
            }
          }
          {}
          if ((_ptr__357_res[(int)3] < _ptr__354_vals2[_ptr__352_idx[_359_i]]))
          {
            {
              _ptr__357_res[(int)3] = _ptr__354_vals2[_ptr__352_idx[_359_i]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.getminmax

// Begin mosek.fusion.Sort.getminmax
// Method mosek.fusion.Sort.getminmax @ src/fusion/Sort.mbi:40:6-59:7
void mosek::fusion::Sort::getminmax
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _360_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _361_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _362_vals2,
    int64_t _363_first,
    int64_t _364_last,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _365_res) { mosek::fusion::p_Sort::getminmax(_360_idx,_361_vals1,_362_vals2,_363_first,_364_last,_365_res); }
void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< int64_t,1 > > _360_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _361_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _362_vals2,int64_t _363_first,int64_t _364_last,std::shared_ptr< monty::ndarray< int32_t,1 > > _365_res)
{
  _checked_ptr_1<int64_t> _ptr__360_idx(_360_idx ? _360_idx->raw() : nullptr, _360_idx ? _360_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__361_vals1(_361_vals1 ? _361_vals1->raw() : nullptr, _361_vals1 ? _361_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__362_vals2(_362_vals2 ? _362_vals2->raw() : nullptr, _362_vals2 ? _362_vals2->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__365_res(_365_res ? _365_res->raw() : nullptr, _365_res ? _365_res->size(0) : 0);
  _ptr__365_res[(int)0] = _ptr__361_vals1[_ptr__360_idx[_363_first]];
  _ptr__365_res[(int)1] = _ptr__361_vals1[_ptr__360_idx[_363_first]];
  int64_t _9042_ = safe_add( _363_first,(int)1 );
  int64_t _9043_ = _364_last;
  for (int64_t _366_i = _9042_; _366_i < _9043_; ++_366_i)
  {
    {
      if ((_ptr__365_res[(int)0] > _ptr__361_vals1[_ptr__360_idx[_366_i]]))
      {
        {
          _ptr__365_res[(int)0] = _ptr__361_vals1[_ptr__360_idx[_366_i]];
        }
      }
      {}
      if ((_ptr__365_res[(int)1] < _ptr__361_vals1[_ptr__360_idx[_366_i]]))
      {
        {
          _ptr__365_res[(int)1] = _ptr__361_vals1[_ptr__360_idx[_366_i]];
        }
      }
      {}
    }
  }
  if ((NULL != _362_vals2.get()))
  {
    {
      _ptr__365_res[(int)2] = _ptr__362_vals2[_ptr__360_idx[_363_first]];
      _ptr__365_res[(int)3] = _ptr__362_vals2[_ptr__360_idx[_363_first]];
      int64_t _9044_ = safe_add( _363_first,(int)1 );
      int64_t _9045_ = _364_last;
      for (int64_t _367_i = _9044_; _367_i < _9045_; ++_367_i)
      {
        {
          if ((_ptr__365_res[(int)2] > _ptr__362_vals2[_ptr__360_idx[_367_i]]))
          {
            {
              _ptr__365_res[(int)2] = _ptr__362_vals2[_ptr__360_idx[_367_i]];
            }
          }
          {}
          if ((_ptr__365_res[(int)3] < _ptr__362_vals2[_ptr__360_idx[_367_i]]))
          {
            {
              _ptr__365_res[(int)3] = _ptr__362_vals2[_ptr__360_idx[_367_i]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.getminmax

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ src/fusion/Sort.mbi:32:6-38:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _368_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _369_vals1,
    int64_t _370_first,
    int64_t _371_last,
    bool _372_check) { return mosek::fusion::p_Sort::issorted(_368_idx,_369_vals1,_370_first,_371_last,_372_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _368_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _369_vals1,int64_t _370_first,int64_t _371_last,bool _372_check)
{
  _checked_ptr_1<int64_t> _ptr__368_idx(_368_idx ? _368_idx->raw() : nullptr, _368_idx ? _368_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__369_vals1(_369_vals1 ? _369_vals1->raw() : nullptr, _369_vals1 ? _369_vals1->size(0) : 0);
  int64_t _9046_ = _370_first;
  int64_t _9047_ = (_371_last - (int)1);
  for (int64_t _373_i = _9046_; _373_i < _9047_; ++_373_i)
  {
    {
      if ((_ptr__369_vals1[_ptr__368_idx[_373_i]] > _ptr__369_vals1[_ptr__368_idx[safe_add( _373_i,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ src/fusion/Sort.mbi:24:6-30:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _374_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _375_vals1,
    int64_t _376_first,
    int64_t _377_last,
    bool _378_check) { return mosek::fusion::p_Sort::issorted(_374_idx,_375_vals1,_376_first,_377_last,_378_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _374_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _375_vals1,int64_t _376_first,int64_t _377_last,bool _378_check)
{
  _checked_ptr_1<int64_t> _ptr__374_idx(_374_idx ? _374_idx->raw() : nullptr, _374_idx ? _374_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__375_vals1(_375_vals1 ? _375_vals1->raw() : nullptr, _375_vals1 ? _375_vals1->size(0) : 0);
  int64_t _9048_ = _376_first;
  int64_t _9049_ = (_377_last - (int)1);
  for (int64_t _379_i = _9048_; _379_i < _9049_; ++_379_i)
  {
    {
      if ((_ptr__375_vals1[_ptr__374_idx[_379_i]] > _ptr__375_vals1[_ptr__374_idx[safe_add( _379_i,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ src/fusion/Sort.mbi:16:6-22:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _380_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _381_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _382_vals2,
    int64_t _383_first,
    int64_t _384_last,
    bool _385_check) { return mosek::fusion::p_Sort::issorted(_380_idx,_381_vals1,_382_vals2,_383_first,_384_last,_385_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _380_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _381_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _382_vals2,int64_t _383_first,int64_t _384_last,bool _385_check)
{
  _checked_ptr_1<int64_t> _ptr__380_idx(_380_idx ? _380_idx->raw() : nullptr, _380_idx ? _380_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__381_vals1(_381_vals1 ? _381_vals1->raw() : nullptr, _381_vals1 ? _381_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__382_vals2(_382_vals2 ? _382_vals2->raw() : nullptr, _382_vals2 ? _382_vals2->size(0) : 0);
  int64_t _9050_ = _383_first;
  int64_t _9051_ = (_384_last - (int)1);
  for (int64_t _386_i = _9050_; _386_i < _9051_; ++_386_i)
  {
    {
      if (((_ptr__381_vals1[_ptr__380_idx[_386_i]] > _ptr__381_vals1[_ptr__380_idx[safe_add( _386_i,(int)1 )]]) || ((_ptr__381_vals1[_ptr__380_idx[safe_add( _386_i,(int)1 )]] == _ptr__381_vals1[_ptr__380_idx[_386_i]]) && (_ptr__382_vals2[_ptr__380_idx[_386_i]] > _ptr__382_vals2[_ptr__380_idx[safe_add( _386_i,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ src/fusion/Sort.mbi:8:6-14:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _387_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _388_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _389_vals2,
    int64_t _390_first,
    int64_t _391_last,
    bool _392_check) { return mosek::fusion::p_Sort::issorted(_387_idx,_388_vals1,_389_vals2,_390_first,_391_last,_392_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _387_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _388_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _389_vals2,int64_t _390_first,int64_t _391_last,bool _392_check)
{
  _checked_ptr_1<int64_t> _ptr__387_idx(_387_idx ? _387_idx->raw() : nullptr, _387_idx ? _387_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__388_vals1(_388_vals1 ? _388_vals1->raw() : nullptr, _388_vals1 ? _388_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__389_vals2(_389_vals2 ? _389_vals2->raw() : nullptr, _389_vals2 ? _389_vals2->size(0) : 0);
  int64_t _9052_ = _390_first;
  int64_t _9053_ = (_391_last - (int)1);
  for (int64_t _393_i = _9052_; _393_i < _9053_; ++_393_i)
  {
    {
      if (((_ptr__388_vals1[_ptr__387_idx[_393_i]] > _ptr__388_vals1[_ptr__387_idx[safe_add( _393_i,(int)1 )]]) || ((_ptr__388_vals1[_ptr__387_idx[_393_i]] == _ptr__388_vals1[_ptr__387_idx[safe_add( _393_i,(int)1 )]]) && (_ptr__389_vals2[_ptr__387_idx[_393_i]] > _ptr__389_vals2[_ptr__387_idx[safe_add( _393_i,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

void mosek::fusion::p_Sort::destroy()
{
}
void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }
// } class Sort
// class IndexCounter { // @ src/fusion/CommonUtil.mbi:448:4-525:5
mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }
mosek::fusion::p_IndexCounter::p_IndexCounter
  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.IndexCounter.ctor @ src/fusion/CommonUtil.mbi:488:6-498:7
mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _394_shape)
{ return new mosek::fusion::IndexCounter(_394_shape); }
mosek::fusion::IndexCounter::IndexCounter
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _394_shape) : 
   IndexCounter(new mosek::fusion::p_IndexCounter(this))
{ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_394_shape); }
void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _394_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__394_shape(_394_shape ? _394_shape->raw() : nullptr, _394_shape ? _394_shape->size(0) : 0);
    n = (int)((_394_shape)->size(0));
    ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
    start = (int64_t)0;
    strides = ::mosek::fusion::p_Set::strides(_394_shape);
    std::vector<int32_t> _9054_;
    for (int32_t _395_i = (int)0, _9055_ = (int)((_394_shape)->size(0)); _395_i < _9055_ ; ++_395_i)
    {
      _9054_.push_back(_ptr__394_shape[_395_i]);
    }
    auto _9056_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9054_.size()),_9054_.begin(),_9054_.end()));
    dims = _9056_;
  }
}
// mosek.fusion.IndexCounter.ctor

// mosek.fusion.IndexCounter.ctor @ src/fusion/CommonUtil.mbi:473:6-486:7
mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter
  (int64_t _396_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _397_dims_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _398_shape)
{ return new mosek::fusion::IndexCounter(_396_start_,_397_dims_,_398_shape); }
mosek::fusion::IndexCounter::IndexCounter
  (int64_t _396_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _397_dims_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _398_shape) : 
   IndexCounter(new mosek::fusion::p_IndexCounter(this))
{ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_396_start_,_397_dims_,_398_shape); }
void mosek::fusion::p_IndexCounter::_initialize  (int64_t _396_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _397_dims_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _398_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__397_dims_(_397_dims_ ? _397_dims_->raw() : nullptr, _397_dims_ ? _397_dims_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__398_shape(_398_shape ? _398_shape->raw() : nullptr, _398_shape ? _398_shape->size(0) : 0);
    int32_t _399_nd = (int)((_398_shape)->size(0));
    n = (int)((_397_dims_)->size(0));
    ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
    int32_t _9057_ = (int)0;
    int32_t _9058_ = n;
    for (int32_t _400_i = _9057_; _400_i < _9058_; ++_400_i)
    {
      {
        ((*st)(_400_i)) = _396_start_;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_398_shape);
    dims = _397_dims_;
    start = _396_start_;
  }
}
// mosek.fusion.IndexCounter.ctor

// mosek.fusion.IndexCounter.ctor @ src/fusion/CommonUtil.mbi:459:6-471:7
mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter
  (int64_t _401_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _402_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _403_strides_)
{ return new mosek::fusion::IndexCounter(_401_start_,_402_dims_,_403_strides_); }
mosek::fusion::IndexCounter::IndexCounter
  (int64_t _401_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _402_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _403_strides_) : 
   IndexCounter(new mosek::fusion::p_IndexCounter(this))
{ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_401_start_,_402_dims_,_403_strides_); }
void mosek::fusion::p_IndexCounter::_initialize  (int64_t _401_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _402_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _403_strides_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__402_dims_(_402_dims_ ? _402_dims_->raw() : nullptr, _402_dims_ ? _402_dims_->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__403_strides_(_403_strides_ ? _403_strides_->raw() : nullptr, _403_strides_ ? _403_strides_->size(0) : 0);
    n = (int)((_402_dims_)->size(0));
    ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
    int32_t _9059_ = (int)0;
    int32_t _9060_ = n;
    for (int32_t _404_i = _9059_; _404_i < _9060_; ++_404_i)
    {
      {
        ((*st)(_404_i)) = _401_start_;
      }
    }
    strides = _403_strides_;
    dims = _402_dims_;
    start = _401_start_;
  }
}
// mosek.fusion.IndexCounter.ctor

// Begin mosek.fusion.IndexCounter.atEnd
// Method mosek.fusion.IndexCounter.atEnd @ src/fusion/CommonUtil.mbi:524:6-66
bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }
bool mosek::fusion::p_IndexCounter::atEnd()
{
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
// End mosek.fusion.IndexCounter.atEnd

// Begin mosek.fusion.IndexCounter.getIndex
// Method mosek.fusion.IndexCounter.getIndex @ src/fusion/CommonUtil.mbi:522:6-54
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_IndexCounter::getIndex()
{
  return ii;
}
// End mosek.fusion.IndexCounter.getIndex

// Begin mosek.fusion.IndexCounter.next
// Method mosek.fusion.IndexCounter.next @ src/fusion/CommonUtil.mbi:521:6-68
int64_t mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }
int64_t mosek::fusion::p_IndexCounter::next()
{
  int64_t _405_r = _pubthis->get();
  _pubthis->inc();
  return _405_r;
}
// End mosek.fusion.IndexCounter.next

// Begin mosek.fusion.IndexCounter.get
// Method mosek.fusion.IndexCounter.get @ src/fusion/CommonUtil.mbi:519:6-49
int64_t mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }
int64_t mosek::fusion::p_IndexCounter::get()
{
  return ((*st)((int)0));
}
// End mosek.fusion.IndexCounter.get

// Begin mosek.fusion.IndexCounter.inc
// Method mosek.fusion.IndexCounter.inc @ src/fusion/CommonUtil.mbi:505:6-517:7
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }
void mosek::fusion::p_IndexCounter::inc()
{
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int32_t _406_i;
  {
    _406_i = (int)0;
    for(;((_406_i < (n - (int)1)) && (((*ii)(_406_i)) == ((*dims)(((n - _406_i) - (int)1)))));++ _406_i)
    {
      {
        ((*ii)(_406_i)) = (int)0;
        ++ ((*ii)(safe_add( _406_i,(int)1 )));
        ((*st)(safe_add( _406_i,(int)1 ))) = safe_add( ((*st)(safe_add( _406_i,(int)1 ))),((*strides)(((n - _406_i) - (int)2))) );
      }
    }
  }
  int32_t _9061_ = (int)0;
  int32_t _9062_ = _406_i;
  for (int32_t _407_j = _9061_; _407_j < _9062_; ++_407_j)
  {
    {
      ((*st)(_407_j)) = ((*st)(_406_i));
    }
  }
}
// End mosek.fusion.IndexCounter.inc

// Begin mosek.fusion.IndexCounter.reset
// Method mosek.fusion.IndexCounter.reset @ src/fusion/CommonUtil.mbi:500:6-503:7
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }
void mosek::fusion::p_IndexCounter::reset()
{
  st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
  int32_t _9063_ = (int)0;
  int32_t _9064_ = n;
  for (int32_t _408_i = _9063_; _408_i < _9064_; ++_408_i)
  {
    {
      ((*st)(_408_i)) = start;
    }
  }
}
// End mosek.fusion.IndexCounter.reset

void mosek::fusion::p_IndexCounter::destroy()
{
  dims.reset();
  strides.reset();
  st.reset();
  ii.reset();
}
void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }
// } class IndexCounter
// class CommonTools { // @ src/fusion/CommonUtil.mbi:6:4-445:5
mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }
mosek::fusion::p_CommonTools::p_CommonTools
  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.CommonTools.resize
// Method mosek.fusion.CommonTools.resize @ src/fusion/CommonUtil.mbi:433:6-444:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::CommonTools::resize
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _409_values,
    int32_t _410_newsize) { return mosek::fusion::p_CommonTools::resize(_409_values,_410_newsize); }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int64_t,1 > > _409_values,int32_t _410_newsize)
{
  _checked_ptr_1<int64_t> _ptr__409_values(_409_values ? _409_values->raw() : nullptr, _409_values ? _409_values->size(0) : 0);
  if ((_410_newsize == (int)((_409_values)->size(0))))
  {
    {
      return _409_values;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _411_newvals = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_410_newsize)));
      _checked_ptr_1<int64_t> _ptr__411_newvals(_411_newvals ? _411_newvals->raw() : nullptr,_411_newvals ? _411_newvals->size(0) : 0);
      if ((_410_newsize > (int)((_409_values)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_409_values,(int)0,_411_newvals,(int)0,(int)((_409_values)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_409_values,(int)0,_411_newvals,(int)0,_410_newsize);
        }
      }
      return _411_newvals;
    }
  }
}
// End mosek.fusion.CommonTools.resize

// Begin mosek.fusion.CommonTools.resize
// Method mosek.fusion.CommonTools.resize @ src/fusion/CommonUtil.mbi:421:6-432:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::CommonTools::resize
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _412_values,
    int32_t _413_newsize) { return mosek::fusion::p_CommonTools::resize(_412_values,_413_newsize); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int32_t,1 > > _412_values,int32_t _413_newsize)
{
  _checked_ptr_1<int32_t> _ptr__412_values(_412_values ? _412_values->raw() : nullptr, _412_values ? _412_values->size(0) : 0);
  if ((_413_newsize == (int)((_412_values)->size(0))))
  {
    {
      return _412_values;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _414_newvals = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_413_newsize)));
      _checked_ptr_1<int32_t> _ptr__414_newvals(_414_newvals ? _414_newvals->raw() : nullptr,_414_newvals ? _414_newvals->size(0) : 0);
      if ((_413_newsize > (int)((_412_values)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_412_values,(int)0,_414_newvals,(int)0,(int)((_412_values)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_412_values,(int)0,_414_newvals,(int)0,_413_newsize);
        }
      }
      return _414_newvals;
    }
  }
}
// End mosek.fusion.CommonTools.resize

// Begin mosek.fusion.CommonTools.resize
// Method mosek.fusion.CommonTools.resize @ src/fusion/CommonUtil.mbi:409:6-420:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize
  ( std::shared_ptr< monty::ndarray< double,1 > > _415_values,
    int32_t _416_newsize) { return mosek::fusion::p_CommonTools::resize(_415_values,_416_newsize); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _415_values,int32_t _416_newsize)
{
  _checked_ptr_1<double> _ptr__415_values(_415_values ? _415_values->raw() : nullptr, _415_values ? _415_values->size(0) : 0);
  if ((_416_newsize == (int)((_415_values)->size(0))))
  {
    {
      return _415_values;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _417_newvals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_416_newsize)));
      _checked_ptr_1<double> _ptr__417_newvals(_417_newvals ? _417_newvals->raw() : nullptr,_417_newvals ? _417_newvals->size(0) : 0);
      if ((_416_newsize > (int)((_415_values)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_415_values,(int)0,_417_newvals,(int)0,(int)((_415_values)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_415_values,(int)0,_417_newvals,(int)0,_416_newsize);
        }
      }
      return _417_newvals;
    }
  }
}
// End mosek.fusion.CommonTools.resize

// Begin mosek.fusion.CommonTools.binarySearch
// Method mosek.fusion.CommonTools.binarySearch @ src/fusion/CommonUtil.mbi:391:6-407:7
int32_t mosek::fusion::CommonTools::binarySearch
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _418_values,
    int32_t _419_target) { return mosek::fusion::p_CommonTools::binarySearch(_418_values,_419_target); }
int32_t mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int32_t,1 > > _418_values,int32_t _419_target)
{
  _checked_ptr_1<int32_t> _ptr__418_values(_418_values ? _418_values->raw() : nullptr, _418_values ? _418_values->size(0) : 0);
  int32_t _420_i0 = (int)0;
  int32_t _421_i1 = (int)((_418_values)->size(0));
  if ((_ptr__418_values[_420_i0] == _419_target))
  {
    {
      return _420_i0;
    }
  }
  else if((_ptr__418_values[(_421_i1 - (int)1)] == _419_target))
  {
    {
      return (_421_i1 - (int)1);
    }
  }
  {}
  while ( (_420_i0 < (_421_i1 - (int)1)) )
  {
    {
      int32_t _422_p = ((_421_i1 - _420_i0) / (int)2);
      if ((_419_target < _ptr__418_values[_422_p]))
      {
        {
          _420_i0 = safe_add( _422_p,(int)1 );
        }
      }
      else if((_419_target > _ptr__418_values[_422_p]))
      {
        {
          _421_i1 = _422_p;
        }
      }
      else
      {
        {
          return _422_p;
        }
      }
    }
  }
  return (-(int)1);
}
// End mosek.fusion.CommonTools.binarySearch

// Begin mosek.fusion.CommonTools.binarySearch
// Method mosek.fusion.CommonTools.binarySearch @ src/fusion/CommonUtil.mbi:383:6-389:7
int32_t mosek::fusion::CommonTools::binarySearch
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _423_values,
    int64_t _424_target) { return mosek::fusion::p_CommonTools::binarySearch(_423_values,_424_target); }
int32_t mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int64_t,1 > > _423_values,int64_t _424_target)
{
  _checked_ptr_1<int64_t> _ptr__423_values(_423_values ? _423_values->raw() : nullptr, _423_values ? _423_values->size(0) : 0);
  int32_t _425_i = ::mosek::fusion::p_CommonTools::binarySearchL(_423_values,_424_target);
  if (((_425_i < (int)((_423_values)->size(0))) && (_ptr__423_values[_425_i] == _424_target)))
  {
    {
      return _425_i;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
// End mosek.fusion.CommonTools.binarySearch

// Begin mosek.fusion.CommonTools.binarySearchR
// Method mosek.fusion.CommonTools.binarySearchR @ src/fusion/CommonUtil.mbi:367:6-381:7
int32_t mosek::fusion::CommonTools::binarySearchR
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _426_values,
    int64_t _427_target) { return mosek::fusion::p_CommonTools::binarySearchR(_426_values,_427_target); }
int32_t mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< int64_t,1 > > _426_values,int64_t _427_target)
{
  _checked_ptr_1<int64_t> _ptr__426_values(_426_values ? _426_values->raw() : nullptr, _426_values ? _426_values->size(0) : 0);
  int32_t _428_i0 = (int)0;
  int32_t _429_i1 = (int)((_426_values)->size(0));
  if ((_ptr__426_values[_428_i0] > _427_target))
  {
    {
      return _428_i0;
    }
  }
  {}
  while ( (_428_i0 < (_429_i1 - (int)1)) )
  {
    {
      int32_t _430_p = (safe_add( _429_i1,_428_i0 ) / (int)2);
      if ((_427_target >= _ptr__426_values[_430_p]))
      {
        {
          _428_i0 = _430_p;
        }
      }
      else
      {
        {
          _429_i1 = _430_p;
        }
      }
    }
  }
  return _429_i1;
}
// End mosek.fusion.CommonTools.binarySearchR

// Begin mosek.fusion.CommonTools.binarySearchL
// Method mosek.fusion.CommonTools.binarySearchL @ src/fusion/CommonUtil.mbi:350:6-364:7
int32_t mosek::fusion::CommonTools::binarySearchL
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _431_values,
    int64_t _432_target) { return mosek::fusion::p_CommonTools::binarySearchL(_431_values,_432_target); }
int32_t mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< int64_t,1 > > _431_values,int64_t _432_target)
{
  _checked_ptr_1<int64_t> _ptr__431_values(_431_values ? _431_values->raw() : nullptr, _431_values ? _431_values->size(0) : 0);
  int32_t _433_i0 = (int)0;
  int32_t _434_i1 = (int)((_431_values)->size(0));
  if ((_432_target <= _ptr__431_values[_433_i0]))
  {
    {
      return _433_i0;
    }
  }
  {}
  while ( (_433_i0 < (_434_i1 - (int)1)) )
  {
    {
      int32_t _435_p = (safe_add( _434_i1,_433_i0 ) / (int)2);
      if ((_ptr__431_values[_435_p] < _432_target))
      {
        {
          _433_i0 = _435_p;
        }
      }
      else
      {
        {
          _434_i1 = _435_p;
        }
      }
    }
  }
  return _434_i1;
}
// End mosek.fusion.CommonTools.binarySearchL

// Begin mosek.fusion.CommonTools.ndIncr
// Method mosek.fusion.CommonTools.ndIncr @ src/fusion/CommonUtil.mbi:337:6-346:7
void mosek::fusion::CommonTools::ndIncr
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _436_ndidx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _437_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _438_last) { mosek::fusion::p_CommonTools::ndIncr(_436_ndidx,_437_first,_438_last); }
void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int32_t,1 > > _436_ndidx,std::shared_ptr< monty::ndarray< int32_t,1 > > _437_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _438_last)
{
  _checked_ptr_1<int32_t> _ptr__436_ndidx(_436_ndidx ? _436_ndidx->raw() : nullptr, _436_ndidx ? _436_ndidx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__437_first(_437_first ? _437_first->raw() : nullptr, _437_first ? _437_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__438_last(_438_last ? _438_last->raw() : nullptr, _438_last ? _438_last->size(0) : 0);
  int32_t _439_i = ((int)((_436_ndidx)->size(0)) - (int)1);
  ++ _ptr__436_ndidx[_439_i];
  while ( ((_439_i > (int)0) && (_ptr__436_ndidx[_439_i] >= _ptr__438_last[_439_i])) )
  {
    {
      _ptr__436_ndidx[_439_i] = _ptr__437_first[_439_i];
      ++ _ptr__436_ndidx[(_439_i - (int)1)];
    }
  }
}
// End mosek.fusion.CommonTools.ndIncr

// Begin mosek.fusion.CommonTools.transposeTriplets
// Method mosek.fusion.CommonTools.transposeTriplets @ src/fusion/CommonUtil.mbi:290:6-335:7
void mosek::fusion::CommonTools::transposeTriplets
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _440_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _441_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _442_val,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _443_tsubi_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _444_tsubj_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _445_tval_,
    int64_t _446_nelm,
    int32_t _447_dimi,
    int32_t _448_dimj) { mosek::fusion::p_CommonTools::transposeTriplets(_440_subi,_441_subj,_442_val,_443_tsubi_,_444_tsubj_,_445_tval_,_446_nelm,_447_dimi,_448_dimj); }
void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _440_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _441_subj,std::shared_ptr< monty::ndarray< double,1 > > _442_val,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _443_tsubi_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _444_tsubj_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _445_tval_,int64_t _446_nelm,int32_t _447_dimi,int32_t _448_dimj)
{
  _checked_ptr_1<int32_t> _ptr__440_subi(_440_subi ? _440_subi->raw() : nullptr, _440_subi ? _440_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__441_subj(_441_subj ? _441_subj->raw() : nullptr, _441_subj ? _441_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__442_val(_442_val ? _442_val->raw() : nullptr, _442_val ? _442_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _449_rptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _447_dimi,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__449_rptrb(_449_rptrb ? _449_rptrb->raw() : nullptr,_449_rptrb ? _449_rptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _450_cptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _448_dimj,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__450_cptrb(_450_cptrb ? _450_cptrb->raw() : nullptr,_450_cptrb ? _450_cptrb->size(0) : 0);
  {
    int64_t _451_i = (int64_t)0;
    for(;(_451_i < _446_nelm);++ _451_i)
    {
      {
        _ptr__450_cptrb[safe_add( _ptr__441_subj[_451_i],(int)2 )] = safe_add( _ptr__450_cptrb[safe_add( _ptr__441_subj[_451_i],(int)2 )],(int)1 );
        _ptr__449_rptrb[safe_add( _ptr__440_subi[_451_i],(int)2 )] = safe_add( _ptr__449_rptrb[safe_add( _ptr__440_subi[_451_i],(int)2 )],(int)1 );
      }
    }
  }
  {
    int32_t _452_i = (int)1;
    for(;(_452_i < _447_dimi);++ _452_i)
    {
      {
        _ptr__449_rptrb[safe_add( _452_i,(int)1 )] = safe_add( _ptr__449_rptrb[safe_add( _452_i,(int)1 )],_ptr__449_rptrb[_452_i] );
      }
    }
  }
  {
    int32_t _453_i = (int)1;
    for(;(_453_i < _448_dimj);++ _453_i)
    {
      {
        _ptr__450_cptrb[safe_add( _453_i,(int)1 )] = safe_add( _ptr__450_cptrb[safe_add( _453_i,(int)1 )],_ptr__450_cptrb[_453_i] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _454_tsubi = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_446_nelm)));
  _checked_ptr_1<int64_t> _ptr__454_tsubi(_454_tsubi ? _454_tsubi->raw() : nullptr,_454_tsubi ? _454_tsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _455_tsubj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_446_nelm)));
  _checked_ptr_1<int64_t> _ptr__455_tsubj(_455_tsubj ? _455_tsubj->raw() : nullptr,_455_tsubj ? _455_tsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _456_tval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_446_nelm)));
  _checked_ptr_1<double> _ptr__456_tval(_456_tval ? _456_tval->raw() : nullptr,_456_tval ? _456_tval->size(0) : 0);
  int32_t _9065_ = (int)0;
  int32_t _9066_ = _447_dimi;
  for (int32_t _457_i = _9065_; _457_i < _9066_; ++_457_i)
  {
    {
      {
        int64_t _458_k = _ptr__449_rptrb[_457_i];
        for(;(_458_k < _ptr__449_rptrb[safe_add( _457_i,(int)1 )]);++ _458_k)
        {
          {
            int32_t _459_j = _ptr__441_subj[_458_k];
            int64_t _460_cidx = _ptr__450_cptrb[_459_j];
            _ptr__454_tsubi[_460_cidx] = _457_i;
            _ptr__455_tsubj[_460_cidx] = _459_j;
            _ptr__456_tval[_460_cidx] = _ptr__442_val[_458_k];
            _ptr__450_cptrb[_459_j] = safe_add( _460_cidx,(int)1 );
          }
        }
      }
    }
  }
  ((*_443_tsubi_)((int)0)) = _455_tsubj;
  ((*_444_tsubj_)((int)0)) = _454_tsubi;
  ((*_445_tval_)((int)0)) = _456_tval;
}
// End mosek.fusion.CommonTools.transposeTriplets

// Begin mosek.fusion.CommonTools.transposeTriplets
// Method mosek.fusion.CommonTools.transposeTriplets @ src/fusion/CommonUtil.mbi:242:6-287:7
void mosek::fusion::CommonTools::transposeTriplets
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _461_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _462_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _463_val,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _464_tsubi_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _465_tsubj_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _466_tval_,
    int64_t _467_nelm,
    int32_t _468_dimi,
    int32_t _469_dimj) { mosek::fusion::p_CommonTools::transposeTriplets(_461_subi,_462_subj,_463_val,_464_tsubi_,_465_tsubj_,_466_tval_,_467_nelm,_468_dimi,_469_dimj); }
void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _461_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _462_subj,std::shared_ptr< monty::ndarray< double,1 > > _463_val,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _464_tsubi_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _465_tsubj_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _466_tval_,int64_t _467_nelm,int32_t _468_dimi,int32_t _469_dimj)
{
  _checked_ptr_1<int32_t> _ptr__461_subi(_461_subi ? _461_subi->raw() : nullptr, _461_subi ? _461_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__462_subj(_462_subj ? _462_subj->raw() : nullptr, _462_subj ? _462_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__463_val(_463_val ? _463_val->raw() : nullptr, _463_val ? _463_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _470_rptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _468_dimi,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__470_rptrb(_470_rptrb ? _470_rptrb->raw() : nullptr,_470_rptrb ? _470_rptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _471_cptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _469_dimj,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__471_cptrb(_471_cptrb ? _471_cptrb->raw() : nullptr,_471_cptrb ? _471_cptrb->size(0) : 0);
  {
    int64_t _472_i = (int64_t)0;
    for(;(_472_i < _467_nelm);++ _472_i)
    {
      {
        _ptr__471_cptrb[safe_add( _ptr__462_subj[_472_i],(int)2 )] = safe_add( _ptr__471_cptrb[safe_add( _ptr__462_subj[_472_i],(int)2 )],(int)1 );
        _ptr__470_rptrb[safe_add( _ptr__461_subi[_472_i],(int)2 )] = safe_add( _ptr__470_rptrb[safe_add( _ptr__461_subi[_472_i],(int)2 )],(int)1 );
      }
    }
  }
  {
    int32_t _473_i = (int)1;
    for(;(_473_i < _468_dimi);++ _473_i)
    {
      {
        _ptr__470_rptrb[safe_add( _473_i,(int)1 )] = safe_add( _ptr__470_rptrb[safe_add( _473_i,(int)1 )],_ptr__470_rptrb[_473_i] );
      }
    }
  }
  {
    int32_t _474_i = (int)1;
    for(;(_474_i < _469_dimj);++ _474_i)
    {
      {
        _ptr__471_cptrb[safe_add( _474_i,(int)1 )] = safe_add( _ptr__471_cptrb[safe_add( _474_i,(int)1 )],_ptr__471_cptrb[_474_i] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _475_tsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_467_nelm)));
  _checked_ptr_1<int32_t> _ptr__475_tsubi(_475_tsubi ? _475_tsubi->raw() : nullptr,_475_tsubi ? _475_tsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _476_tsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_467_nelm)));
  _checked_ptr_1<int32_t> _ptr__476_tsubj(_476_tsubj ? _476_tsubj->raw() : nullptr,_476_tsubj ? _476_tsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _477_tval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_467_nelm)));
  _checked_ptr_1<double> _ptr__477_tval(_477_tval ? _477_tval->raw() : nullptr,_477_tval ? _477_tval->size(0) : 0);
  {
    int32_t _478_i = (int)0;
    for(;(_478_i < _468_dimi);++ _478_i)
    {
      {
        int64_t _9067_ = _ptr__470_rptrb[_478_i];
        int64_t _9068_ = _ptr__470_rptrb[safe_add( _478_i,(int)1 )];
        for (int64_t _479_k = _9067_; _479_k < _9068_; ++_479_k)
        {
          {
            int32_t _480_j = _ptr__462_subj[_479_k];
            int64_t _481_cidx = _ptr__471_cptrb[_480_j];
            _ptr__475_tsubi[_481_cidx] = _478_i;
            _ptr__476_tsubj[_481_cidx] = _480_j;
            _ptr__477_tval[_481_cidx] = _ptr__463_val[_479_k];
            _ptr__471_cptrb[_480_j] = safe_add( _481_cidx,(int)1 );
          }
        }
      }
    }
  }
  ((*_464_tsubi_)((int)0)) = _476_tsubj;
  ((*_465_tsubj_)((int)0)) = _475_tsubi;
  ((*_466_tval_)((int)0)) = _477_tval;
}
// End mosek.fusion.CommonTools.transposeTriplets

// Begin mosek.fusion.CommonTools.tripletSort
// Method mosek.fusion.CommonTools.tripletSort @ src/fusion/CommonUtil.mbi:115:6-214:7
void mosek::fusion::CommonTools::tripletSort
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _482_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _483_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _484_val,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _485_tsubi_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _486_tsubj_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _487_tval_,
    int64_t _488_nelm,
    int32_t _489_dimi,
    int32_t _490_dimj) { mosek::fusion::p_CommonTools::tripletSort(_482_subi,_483_subj,_484_val,_485_tsubi_,_486_tsubj_,_487_tval_,_488_nelm,_489_dimi,_490_dimj); }
void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int32_t,1 > > _482_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _483_subj,std::shared_ptr< monty::ndarray< double,1 > > _484_val,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _485_tsubi_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _486_tsubj_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _487_tval_,int64_t _488_nelm,int32_t _489_dimi,int32_t _490_dimj)
{
  _checked_ptr_1<int32_t> _ptr__482_subi(_482_subi ? _482_subi->raw() : nullptr, _482_subi ? _482_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__483_subj(_483_subj ? _483_subj->raw() : nullptr, _483_subj ? _483_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__484_val(_484_val ? _484_val->raw() : nullptr, _484_val ? _484_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _491_cols = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_488_nelm)));
  _checked_ptr_1<int32_t> _ptr__491_cols(_491_cols ? _491_cols->raw() : nullptr,_491_cols ? _491_cols->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _492_cptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _490_dimj,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__492_cptrb(_492_cptrb ? _492_cptrb->raw() : nullptr,_492_cptrb ? _492_cptrb->size(0) : 0);
  int64_t _9069_ = (int64_t)0;
  int64_t _9070_ = _488_nelm;
  for (int64_t _493_i = _9069_; _493_i < _9070_; ++_493_i)
  {
    {
      _ptr__492_cptrb[safe_add( _ptr__483_subj[_493_i],(int)2 )] = safe_add( _ptr__492_cptrb[safe_add( _ptr__483_subj[_493_i],(int)2 )],(int)1 );
    }
  }
  int32_t _9071_ = (int)1;
  int32_t _9072_ = _490_dimj;
  for (int32_t _494_i = _9071_; _494_i < _9072_; ++_494_i)
  {
    {
      _ptr__492_cptrb[safe_add( _494_i,(int)1 )] = safe_add( _ptr__492_cptrb[safe_add( _494_i,(int)1 )],_ptr__492_cptrb[_494_i] );
    }
  }
  int32_t _9073_ = (int)0;
  int32_t _9074_ = (int32_t)_488_nelm;
  for (int32_t _495_i = _9073_; _495_i < _9074_; ++_495_i)
  {
    {
      int32_t _496_cidx = _ptr__483_subj[_495_i];
      _ptr__491_cols[_ptr__492_cptrb[safe_add( _496_cidx,(int)1 )]] = _495_i;
      _ptr__492_cptrb[safe_add( _496_cidx,(int)1 )] = safe_add( _ptr__492_cptrb[safe_add( _496_cidx,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _497_rptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _489_dimi,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__497_rptrb(_497_rptrb ? _497_rptrb->raw() : nullptr,_497_rptrb ? _497_rptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _498_rows = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_488_nelm)));
  _checked_ptr_1<int32_t> _ptr__498_rows(_498_rows ? _498_rows->raw() : nullptr,_498_rows ? _498_rows->size(0) : 0);
  {
    int32_t _499_i = (int)0;
    for(;(_499_i < _488_nelm);++ _499_i)
    {
      {
        _ptr__497_rptrb[safe_add( _ptr__482_subi[_499_i],(int)2 )] = safe_add( _ptr__497_rptrb[safe_add( _ptr__482_subi[_499_i],(int)2 )],(int)1 );
      }
    }
  }
  {
    int32_t _500_i = (int)1;
    for(;(_500_i < _489_dimi);++ _500_i)
    {
      {
        _ptr__497_rptrb[safe_add( _500_i,(int)1 )] = safe_add( _ptr__497_rptrb[safe_add( _500_i,(int)1 )],_ptr__497_rptrb[_500_i] );
      }
    }
  }
  {
    int32_t _501_j = (int)0;
    for(;(_501_j < _490_dimj);++ _501_j)
    {
      {
        {
          int64_t _502_i = _ptr__492_cptrb[_501_j];
          for(;(_502_i < _ptr__492_cptrb[safe_add( _501_j,(int)1 )]);++ _502_i)
          {
            {
              int32_t _503_ridx = _ptr__482_subi[_ptr__491_cols[_502_i]];
              _ptr__498_rows[_ptr__497_rptrb[safe_add( _503_ridx,(int)1 )]] = _ptr__491_cols[_502_i];
              _ptr__497_rptrb[safe_add( _503_ridx,(int)1 )] = safe_add( _ptr__497_rptrb[safe_add( _503_ridx,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int32_t _504_nunique = (int)1;
  {
    int32_t _505_si = _ptr__482_subi[_ptr__498_rows[(int)0]];
    int32_t _506_sj = _ptr__483_subj[_ptr__498_rows[(int)0]];
    {
      int32_t _507_i = (int)1;
      for(;(_507_i < _488_nelm);++ _507_i)
      {
        {
          int32_t _508_idx = _ptr__498_rows[_507_i];
          if (((_505_si != _ptr__482_subi[_508_idx]) || (_506_sj != _ptr__483_subj[_508_idx])))
          {
            {
              _505_si = _ptr__482_subi[_508_idx];
              _506_sj = _ptr__483_subj[_508_idx];
              ++ _504_nunique;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _509_tsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_504_nunique)));
  _checked_ptr_1<int32_t> _ptr__509_tsubi(_509_tsubi ? _509_tsubi->raw() : nullptr,_509_tsubi ? _509_tsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _510_tsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_504_nunique)));
  _checked_ptr_1<int32_t> _ptr__510_tsubj(_510_tsubj ? _510_tsubj->raw() : nullptr,_510_tsubj ? _510_tsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _511_tval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_504_nunique)));
  _checked_ptr_1<double> _ptr__511_tval(_511_tval ? _511_tval->raw() : nullptr,_511_tval ? _511_tval->size(0) : 0);
  {
    int32_t _512_idx = _ptr__498_rows[(int)0];
    _ptr__509_tsubi[(int)0] = _ptr__482_subi[_512_idx];
    _ptr__510_tsubj[(int)0] = _ptr__483_subj[_512_idx];
    _ptr__511_tval[(int)0] = _ptr__484_val[_512_idx];
  }
  int32_t _513_di = (int)1;
  int32_t _9075_ = (int)1;
  int64_t _9076_ = _488_nelm;
  for (int64_t _514_i = _9075_; _514_i < _9076_; ++_514_i)
  {
    {
      int32_t _515_idx = _ptr__498_rows[_514_i];
      if (((_ptr__509_tsubi[(_513_di - (int)1)] == _ptr__482_subi[_515_idx]) && (_ptr__510_tsubj[(_513_di - (int)1)] == _ptr__483_subj[_515_idx])))
      {
        {
          _ptr__511_tval[(_513_di - (int)1)] = (_ptr__511_tval[(_513_di - (int)1)] + _ptr__484_val[_515_idx]);
        }
      }
      else
      {
        {
          _ptr__509_tsubi[_513_di] = _ptr__482_subi[_515_idx];
          _ptr__510_tsubj[_513_di] = _ptr__483_subj[_515_idx];
          _ptr__511_tval[_513_di] = _ptr__484_val[_515_idx];
          ++ _513_di;
        }
      }
    }
  }
  ((*_485_tsubi_)((int)0)) = _509_tsubi;
  ((*_486_tsubj_)((int)0)) = _510_tsubj;
  ((*_487_tval_)((int)0)) = _511_tval;
}
// End mosek.fusion.CommonTools.tripletSort

// Begin mosek.fusion.CommonTools.argMSort
// Method mosek.fusion.CommonTools.argMSort @ src/fusion/CommonUtil.mbi:67:6-87:7
void mosek::fusion::CommonTools::argMSort
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _516_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _517_vals) { mosek::fusion::p_CommonTools::argMSort(_516_idx,_517_vals); }
void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int32_t,1 > > _516_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _517_vals)
{
  _checked_ptr_1<int32_t> _ptr__516_idx(_516_idx ? _516_idx->raw() : nullptr, _516_idx ? _516_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__517_vals(_517_vals ? _517_vals->raw() : nullptr, _517_vals ? _517_vals->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _518_temp = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_516_idx)->size(0)))));
  _checked_ptr_1<int32_t> _ptr__518_temp(_518_temp ? _518_temp->raw() : nullptr,_518_temp ? _518_temp->size(0) : 0);
  bool _519_alt = false;
  {
    int32_t _520_intvlen = (int)1;
    for(;(_520_intvlen < (int)((_516_idx)->size(0)));_520_intvlen *= (int)2)
    {
      {
        _519_alt = (!_519_alt);
        int32_t _9077_ = (int)0;
        int32_t _9078_ = (int)((_516_idx)->size(0));
        int32_t _9079_ = safe_mul( _520_intvlen,(int)2 );
        for (int32_t _521_i = _9077_; _521_i < _9078_; _521_i += _9079_)
        {
          {
            if (_519_alt)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_516_idx,_518_temp,_517_vals,_521_i,safe_add( _521_i,_520_intvlen ),safe_add( _521_i,safe_mul( (int)2,_520_intvlen ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_518_temp,_516_idx,_517_vals,_521_i,safe_add( _521_i,_520_intvlen ),safe_add( _521_i,safe_mul( (int)2,_520_intvlen ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_519_alt)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_518_temp,(int)0,_516_idx,(int)0,(int)((_516_idx)->size(0)));
    }
  }
  {}
}
// End mosek.fusion.CommonTools.argMSort

// Begin mosek.fusion.CommonTools.mergeInto
// Method mosek.fusion.CommonTools.mergeInto @ src/fusion/CommonUtil.mbi:29:6-54:7
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int32_t,1 > > _522_src,std::shared_ptr< monty::ndarray< int32_t,1 > > _523_tgt,std::shared_ptr< monty::ndarray< int32_t,1 > > _524_vals,int32_t _525_si0,int32_t _526_si1_,int32_t _527_si2_)
{
  _checked_ptr_1<int32_t> _ptr__522_src(_522_src ? _522_src->raw() : nullptr, _522_src ? _522_src->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__523_tgt(_523_tgt ? _523_tgt->raw() : nullptr, _523_tgt ? _523_tgt->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__524_vals(_524_vals ? _524_vals->raw() : nullptr, _524_vals ? _524_vals->size(0) : 0);
  int32_t _9080_;
  bool _9081_ = (_527_si2_ > (int)((_522_src)->size(0)));
  if (_9081_)
  {
    _9080_ = (int)((_522_src)->size(0));
  }
  else
  {
    _9080_ = _527_si2_;
  }
  int32_t _528_si2 = _9080_;
  int32_t _9082_;
  bool _9083_ = (_526_si1_ > _528_si2);
  if (_9083_)
  {
    _9082_ = _528_si2;
  }
  else
  {
    _9082_ = _526_si1_;
  }
  int32_t _529_si1 = _9082_;
  if ((_529_si1 == _528_si2))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_522_src,_525_si0,_523_tgt,_525_si0,(_529_si1 - _525_si0));
    }
  }
  else
  {
    {
      int32_t _530_i0 = _525_si0;
      int32_t _531_i1 = _529_si1;
      int32_t _532_i;
      {
        _532_i = _525_si0;
        for(;((_530_i0 < _529_si1) && (_531_i1 < _528_si2));++ _532_i)
        {
          {
            if ((_ptr__524_vals[_ptr__522_src[_530_i0]] < _ptr__524_vals[_ptr__522_src[_531_i1]]))
            {
              {
                _ptr__523_tgt[_532_i] = _ptr__522_src[_530_i0];
                ++ _530_i0;
              }
            }
            else
            {
              {
                _ptr__523_tgt[_532_i] = _ptr__522_src[_531_i1];
                ++ _531_i1;
              }
            }
          }
        }
      }
      while ( (_530_i0 < _529_si1) )
      {
        {
          _ptr__523_tgt[_532_i] = _ptr__522_src[_530_i0];
          ++ _530_i0;
          ++ _532_i;
        }
      }
      while ( (_531_i1 < _528_si2) )
      {
        {
          _ptr__523_tgt[_532_i] = _ptr__522_src[_531_i1];
          ++ _531_i1;
          ++ _532_i;
        }
      }
    }
  }
}
// End mosek.fusion.CommonTools.mergeInto

// Begin mosek.fusion.CommonTools.argQsort
// Method mosek.fusion.CommonTools.argQsort @ src/fusion/CommonUtil.mbi:16:6-22:7
void mosek::fusion::CommonTools::argQsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _533_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _534_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _535_vals2,
    int64_t _536_first,
    int64_t _537_last) { mosek::fusion::p_CommonTools::argQsort(_533_idx,_534_vals1,_535_vals2,_536_first,_537_last); }
void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _533_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _534_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _535_vals2,int64_t _536_first,int64_t _537_last)
{
  _checked_ptr_1<int64_t> _ptr__533_idx(_533_idx ? _533_idx->raw() : nullptr, _533_idx ? _533_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__534_vals1(_534_vals1 ? _534_vals1->raw() : nullptr, _534_vals1 ? _534_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__535_vals2(_535_vals2 ? _535_vals2->raw() : nullptr, _535_vals2 ? _535_vals2->size(0) : 0);
  if ((NULL == _535_vals2.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_533_idx,_534_vals1,_536_first,_537_last);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_533_idx,_534_vals1,_535_vals2,_536_first,_537_last);
    }
  }
}
// End mosek.fusion.CommonTools.argQsort

// Begin mosek.fusion.CommonTools.argQsort
// Method mosek.fusion.CommonTools.argQsort @ src/fusion/CommonUtil.mbi:8:6-14:7
void mosek::fusion::CommonTools::argQsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _538_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _539_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _540_vals2,
    int64_t _541_first,
    int64_t _542_last) { mosek::fusion::p_CommonTools::argQsort(_538_idx,_539_vals1,_540_vals2,_541_first,_542_last); }
void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _538_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _539_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _540_vals2,int64_t _541_first,int64_t _542_last)
{
  _checked_ptr_1<int64_t> _ptr__538_idx(_538_idx ? _538_idx->raw() : nullptr, _538_idx ? _538_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__539_vals1(_539_vals1 ? _539_vals1->raw() : nullptr, _539_vals1 ? _539_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__540_vals2(_540_vals2 ? _540_vals2->raw() : nullptr, _540_vals2 ? _540_vals2->size(0) : 0);
  if ((NULL == _540_vals2.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_538_idx,_539_vals1,_541_first,_542_last);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_538_idx,_539_vals1,_540_vals2,_541_first,_542_last);
    }
  }
}
// End mosek.fusion.CommonTools.argQsort

void mosek::fusion::p_CommonTools::destroy()
{
}
void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }
// } class CommonTools
// class SolutionStruct { // @ src/fusion/Model.mbi:5332:4-5667:5
mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }
mosek::fusion::p_SolutionStruct::p_SolutionStruct
  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis)
{}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_accy() { return _impl->accy; }
void mosek::fusion::SolutionStruct::set_accy(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->accy = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_accx() { return _impl->accx; }
void mosek::fusion::SolutionStruct::set_accx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->accx = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::SolutionStruct::get_accptr() { return _impl->accptr; }
void mosek::fusion::SolutionStruct::set_accptr(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->accptr = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int32_t _val) { _impl->sol_numbarvar = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numaccelm() { return _impl->sol_numaccelm; }
void mosek::fusion::SolutionStruct::set_sol_numaccelm(int32_t _val) { _impl->sol_numaccelm = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numacc() { return _impl->sol_numacc; }
void mosek::fusion::SolutionStruct::set_sol_numacc(int32_t _val) { _impl->sol_numacc = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int32_t _val) { _impl->sol_numvar = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int32_t _val) { _impl->sol_numcon = _val; }
// mosek.fusion.SolutionStruct.ctor @ src/fusion/Model.mbi:5607:6-5666:7
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct
  (int32_t _543_numvar,
    int32_t _544_numcon,
    int32_t _545_numbarvar,
    int32_t _546_numacc,
    int32_t _547_numaccelm)
{ return new mosek::fusion::SolutionStruct(_543_numvar,_544_numcon,_545_numbarvar,_546_numacc,_547_numaccelm); }
mosek::fusion::SolutionStruct::SolutionStruct
  (int32_t _543_numvar,
    int32_t _544_numcon,
    int32_t _545_numbarvar,
    int32_t _546_numacc,
    int32_t _547_numaccelm) : 
   SolutionStruct(new mosek::fusion::p_SolutionStruct(this))
{ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_543_numvar,_544_numcon,_545_numbarvar,_546_numacc,_547_numaccelm); }
void mosek::fusion::p_SolutionStruct::_initialize  (int32_t _543_numvar,
    int32_t _544_numcon,
    int32_t _545_numbarvar,
    int32_t _546_numacc,
    int32_t _547_numaccelm)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _543_numvar;
    sol_numcon = _544_numcon;
    sol_numbarvar = _545_numbarvar;
    sol_numacc = _546_numacc;
    sol_numaccelm = _547_numaccelm;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    barx = nullptr;
    bars = nullptr;
    accx = nullptr;
    accy = nullptr;
    accptr = nullptr;
    if ((_543_numvar > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_543_numvar)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_543_numvar)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_543_numvar)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_543_numvar)));
      }
    }
    {}
    if ((_545_numbarvar > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_545_numbarvar)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_545_numbarvar)));
      }
    }
    {}
    if ((_544_numcon > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_544_numcon)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_544_numcon)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_544_numcon)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_544_numcon)));
      }
    }
    {}
    if ((_546_numacc > (int)0))
    {
      {
        accx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_547_numaccelm)));
        accy = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_547_numaccelm)));
        accptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _546_numacc,(int)1 ))));
      }
    }
    {}
  }
}
// mosek.fusion.SolutionStruct.ctor

// mosek.fusion.SolutionStruct.ctor @ src/fusion/Model.mbi:5574:6-5604:7
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct
  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _548_that)
{ return new mosek::fusion::SolutionStruct(_548_that); }
mosek::fusion::SolutionStruct::SolutionStruct
  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _548_that) : 
   SolutionStruct(new mosek::fusion::p_SolutionStruct(this))
{ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_548_that); }
void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _548_that)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->sol_numvar;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->sol_numbarvar;
    sol_numacc = mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->sol_numacc;
    sol_numaccelm = mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->sol_numaccelm;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _9084_;
    bool _9085_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->xc.get());
    if (_9085_)
    {
      _9084_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->xc);
    }
    else
    {
      _9084_ = nullptr;
    }
    xc = _9084_;
    std::shared_ptr< monty::ndarray< double,1 > > _9086_;
    bool _9087_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->xx.get());
    if (_9087_)
    {
      _9086_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->xx);
    }
    else
    {
      _9086_ = nullptr;
    }
    xx = _9086_;
    std::shared_ptr< monty::ndarray< double,1 > > _9088_;
    bool _9089_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->yx.get());
    if (_9089_)
    {
      _9088_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->yx);
    }
    else
    {
      _9088_ = nullptr;
    }
    yx = _9088_;
    std::shared_ptr< monty::ndarray< double,1 > > _9090_;
    bool _9091_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->slc.get());
    if (_9091_)
    {
      _9090_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->slc);
    }
    else
    {
      _9090_ = nullptr;
    }
    slc = _9090_;
    std::shared_ptr< monty::ndarray< double,1 > > _9092_;
    bool _9093_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->suc.get());
    if (_9093_)
    {
      _9092_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->suc);
    }
    else
    {
      _9092_ = nullptr;
    }
    suc = _9092_;
    std::shared_ptr< monty::ndarray< double,1 > > _9094_;
    bool _9095_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->y.get());
    if (_9095_)
    {
      _9094_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->y);
    }
    else
    {
      _9094_ = nullptr;
    }
    y = _9094_;
    barx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->barx);
    bars = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->bars);
    std::shared_ptr< monty::ndarray< double,1 > > _9096_;
    bool _9097_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->slx.get());
    if (_9097_)
    {
      _9096_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->slx);
    }
    else
    {
      _9096_ = nullptr;
    }
    slx = _9096_;
    std::shared_ptr< monty::ndarray< double,1 > > _9098_;
    bool _9099_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->sux.get());
    if (_9099_)
    {
      _9098_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->sux);
    }
    else
    {
      _9098_ = nullptr;
    }
    sux = _9098_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9100_;
    bool _9101_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->accptr.get());
    if (_9101_)
    {
      _9100_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->accptr);
    }
    else
    {
      _9100_ = nullptr;
    }
    accptr = _9100_;
    std::shared_ptr< monty::ndarray< double,1 > > _9102_;
    bool _9103_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->accx.get());
    if (_9103_)
    {
      _9102_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->accx);
    }
    else
    {
      _9102_ = nullptr;
    }
    accx = _9102_;
    std::shared_ptr< monty::ndarray< double,1 > > _9104_;
    bool _9105_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->accy.get());
    if (_9105_)
    {
      _9104_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_548_that)->accy);
    }
    else
    {
      _9104_ = nullptr;
    }
    accy = _9104_;
  }
}
// mosek.fusion.SolutionStruct.ctor

// Begin mosek.fusion.SolutionStruct.clone
// Method mosek.fusion.SolutionStruct.clone @ src/fusion/Model.mbi:5605:6-79
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone()
{
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
// End mosek.fusion.SolutionStruct.clone

// Begin mosek.fusion.SolutionStruct.resize
// Method mosek.fusion.SolutionStruct.resize @ src/fusion/Model.mbi:5399:6-5569:7
void mosek::fusion::SolutionStruct :: resize(int32_t _549_numvar,int32_t _550_numcon,int32_t _551_numbarvar,int32_t _552_numacc,int32_t _553_numaccelm) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_549_numvar,_550_numcon,_551_numbarvar,_552_numacc,_553_numaccelm); }
void mosek::fusion::p_SolutionStruct::resize(int32_t _549_numvar,int32_t _550_numcon,int32_t _551_numbarvar,int32_t _552_numacc,int32_t _553_numaccelm)
{
  if ((_552_numacc <= (int)0))
  {
    {
      sol_numacc = (int)0;
    }
  }
  else if((_552_numacc <= ((int)((accptr)->size(0)) - (int)1)))
  {
    {
      sol_numacc = _552_numacc;
    }
  }
  else
  {
    {
      int32_t _554_newnum = safe_mul( ((int)((accptr)->size(0)) - (int)1),(int)2 );
      if ((_554_newnum < _552_numacc))
      {
        {
          _554_newnum = _552_numacc;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int32_t,1 > > _555_new_accptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _554_newnum,(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__555_new_accptr(_555_new_accptr ? _555_new_accptr->raw() : nullptr,_555_new_accptr ? _555_new_accptr->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(accptr,(int)0,_555_new_accptr,(int)0,safe_add( _552_numacc,(int)1 ));
      accptr = _555_new_accptr;
      sol_numacc = _552_numacc;
    }
  }
  if ((_553_numaccelm <= (int)0))
  {
    {
      sol_numaccelm = (int)0;
    }
  }
  else if((_553_numaccelm > (int)((accx)->size(0))))
  {
    {
      sol_numaccelm = _553_numaccelm;
    }
  }
  else
  {
    {
      int32_t _556_newnum = safe_mul( (int)((accx)->size(0)),(int)2 );
      if ((_556_newnum < _553_numaccelm))
      {
        {
          _556_newnum = _553_numaccelm;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< double,1 > > _557_new_accx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_556_newnum)));
      _checked_ptr_1<double> _ptr__557_new_accx(_557_new_accx ? _557_new_accx->raw() : nullptr,_557_new_accx ? _557_new_accx->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _558_new_accy = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_556_newnum)));
      _checked_ptr_1<double> _ptr__558_new_accy(_558_new_accy ? _558_new_accy->raw() : nullptr,_558_new_accy ? _558_new_accy->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(accx,(int)0,_557_new_accx,(int)0,_553_numaccelm);
      ::mosek::fusion::Utils::Tools::arraycopy(accy,(int)0,_558_new_accy,(int)0,_553_numaccelm);
      accx = _557_new_accx;
      accy = _558_new_accy;
      sol_numaccelm = _553_numaccelm;
    }
  }
  if ((_551_numbarvar < (int)0))
  {
    {
    }
  }
  else if((_551_numbarvar <= sol_numbarvar))
  {
    {
      sol_numbarvar = _551_numbarvar;
    }
  }
  else if((_551_numbarvar <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int32_t _559_newsize;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _551_numbarvar,(int)100 )))
      {
        {
          _559_newsize = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _559_newsize = safe_add( _551_numbarvar,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_559_newsize);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_559_newsize);
      sol_numbarvar = _559_newsize;
    }
  }
  if ((_549_numvar < (int)0))
  {
    {
    }
  }
  else if((_549_numvar <= sol_numvar))
  {
    {
      sol_numvar = _549_numvar;
    }
  }
  else if((_549_numvar <= (int)((xx)->size(0))))
  {
    {
      int32_t _9106_ = sol_numvar;
      int32_t _9107_ = _549_numvar;
      for (int32_t _560_i = _9106_; _560_i < _9107_; ++_560_i)
      {
        {
          ((*slx)(_560_i)) = 0.0;
          ((*sux)(_560_i)) = 0.0;
          ((*xx)(_560_i)) = 0.0;
          ((*yx)(_560_i)) = 0.0;
        }
      }
      sol_numvar = _549_numvar;
    }
  }
  else
  {
    {
      int32_t _561_newsize;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _549_numvar,(int)100 )))
      {
        {
          _561_newsize = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _561_newsize = safe_add( _549_numvar,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _562_newslx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_561_newsize)));
      _checked_ptr_1<double> _ptr__562_newslx(_562_newslx ? _562_newslx->raw() : nullptr,_562_newslx ? _562_newslx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_562_newslx,(int)0,(int)((slx)->size(0)));
      slx = _562_newslx;
      std::shared_ptr< monty::ndarray< double,1 > > _563_newsux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_561_newsize)));
      _checked_ptr_1<double> _ptr__563_newsux(_563_newsux ? _563_newsux->raw() : nullptr,_563_newsux ? _563_newsux->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_563_newsux,(int)0,(int)((sux)->size(0)));
      sux = _563_newsux;
      std::shared_ptr< monty::ndarray< double,1 > > _564_newxx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_561_newsize)));
      _checked_ptr_1<double> _ptr__564_newxx(_564_newxx ? _564_newxx->raw() : nullptr,_564_newxx ? _564_newxx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_564_newxx,(int)0,(int)((xx)->size(0)));
      xx = _564_newxx;
      std::shared_ptr< monty::ndarray< double,1 > > _565_newyx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_561_newsize)));
      _checked_ptr_1<double> _ptr__565_newyx(_565_newyx ? _565_newyx->raw() : nullptr,_565_newyx ? _565_newyx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_565_newyx,(int)0,(int)((yx)->size(0)));
      yx = _565_newyx;
      {
        int32_t _566_i = sol_numvar;
        for(;(_566_i < _549_numvar);++ _566_i)
        {
          {
            ((*slx)(_566_i)) = 0.0;
            ((*sux)(_566_i)) = 0.0;
            ((*xx)(_566_i)) = 0.0;
          }
        }
      }
      sol_numvar = _549_numvar;
    }
  }
  if ((_550_numcon < (int)0))
  {
    {
    }
  }
  else if((_550_numcon <= sol_numcon))
  {
    {
      sol_numcon = _550_numcon;
    }
  }
  else if((_550_numcon <= (int)((xx)->size(0))))
  {
    {
      int32_t _9108_ = sol_numcon;
      int32_t _9109_ = _550_numcon;
      for (int32_t _567_i = _9108_; _567_i < _9109_; ++_567_i)
      {
        {
          ((*slc)(_567_i)) = 0.0;
          ((*suc)(_567_i)) = 0.0;
          ((*xc)(_567_i)) = 0.0;
          ((*y)(_567_i)) = 0.0;
        }
      }
      sol_numcon = _550_numcon;
    }
  }
  else
  {
    {
      int32_t _568_newsize;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _550_numcon,(int)100 )))
      {
        {
          _568_newsize = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _568_newsize = safe_add( _550_numcon,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _569_newslc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_568_newsize)));
      _checked_ptr_1<double> _ptr__569_newslc(_569_newslc ? _569_newslc->raw() : nullptr,_569_newslc ? _569_newslc->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_569_newslc,(int)0,(int)((slc)->size(0)));
      slc = _569_newslc;
      std::shared_ptr< monty::ndarray< double,1 > > _570_newsuc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_568_newsize)));
      _checked_ptr_1<double> _ptr__570_newsuc(_570_newsuc ? _570_newsuc->raw() : nullptr,_570_newsuc ? _570_newsuc->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_570_newsuc,(int)0,(int)((suc)->size(0)));
      suc = _570_newsuc;
      std::shared_ptr< monty::ndarray< double,1 > > _571_newxc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_568_newsize)));
      _checked_ptr_1<double> _ptr__571_newxc(_571_newxc ? _571_newxc->raw() : nullptr,_571_newxc ? _571_newxc->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_571_newxc,(int)0,(int)((xc)->size(0)));
      xc = _571_newxc;
      std::shared_ptr< monty::ndarray< double,1 > > _572_newy = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_568_newsize)));
      _checked_ptr_1<double> _ptr__572_newy(_572_newy ? _572_newy->raw() : nullptr,_572_newy ? _572_newy->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_572_newy,(int)0,(int)((y)->size(0)));
      y = _572_newy;
      int32_t _9110_ = sol_numcon;
      int32_t _9111_ = _550_numcon;
      for (int32_t _573_i = _9110_; _573_i < _9111_; ++_573_i)
      {
        {
          ((*slc)(_573_i)) = 0.0;
          ((*suc)(_573_i)) = 0.0;
          ((*xc)(_573_i)) = 0.0;
          ((*y)(_573_i)) = 0.0;
        }
      }
      sol_numcon = _550_numcon;
    }
  }
}
// End mosek.fusion.SolutionStruct.resize

// Begin mosek.fusion.SolutionStruct.isDualAcceptable
// Method mosek.fusion.SolutionStruct.isDualAcceptable @ src/fusion/Model.mbi:5394:6-5397:7
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _574_acceptable_sol) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_574_acceptable_sol); }
bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _574_acceptable_sol)
{
  return isAcceptable(dstatus,_574_acceptable_sol);
}
// End mosek.fusion.SolutionStruct.isDualAcceptable

// Begin mosek.fusion.SolutionStruct.isPrimalAcceptable
// Method mosek.fusion.SolutionStruct.isPrimalAcceptable @ src/fusion/Model.mbi:5389:6-5392:7
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _575_acceptable_sol) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_575_acceptable_sol); }
bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _575_acceptable_sol)
{
  return isAcceptable(pstatus,_575_acceptable_sol);
}
// End mosek.fusion.SolutionStruct.isPrimalAcceptable

// Begin mosek.fusion.SolutionStruct.isAcceptable
// Method mosek.fusion.SolutionStruct.isAcceptable @ src/fusion/Model.mbi:5363:6-5387:7
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _576_stat,mosek::fusion::AccSolutionStatus _577_accstat)
{
  if ((_577_accstat == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_577_accstat == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_576_stat == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_577_accstat == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_576_stat == ::mosek::fusion::SolutionStatus::Optimal) || (_576_stat == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_577_accstat == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_576_stat == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
// End mosek.fusion.SolutionStruct.isAcceptable

void mosek::fusion::p_SolutionStruct::destroy()
{
  accy.reset();
  accx.reset();
  accptr.reset();
  yx.reset();
  sux.reset();
  slx.reset();
  bars.reset();
  barx.reset();
  y.reset();
  suc.reset();
  slc.reset();
  xx.reset();
  xc.reset();
}
void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }
// } class SolutionStruct
// class RowBlockManager { // @ src/fusion/Model.mbi:4917:4-5327:5
mosek::fusion::RowBlockManager::RowBlockManager(mosek::fusion::p_RowBlockManager *_impl) : _impl(_impl) { /*std::cout << "RowBlockManager() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::RowBlockManager::~RowBlockManager() { delete _impl; _impl = nullptr; }
mosek::fusion::p_RowBlockManager::p_RowBlockManager
  (::mosek::fusion::RowBlockManager * _pubthis) :     _pubthis(_pubthis)
{}
int32_t mosek::fusion::RowBlockManager::get_varidx_used() { return _impl->varidx_used; }
void mosek::fusion::RowBlockManager::set_varidx_used(int32_t _val) { _impl->varidx_used = _val; }
int32_t mosek::fusion::RowBlockManager::get_code_used() { return _impl->code_used; }
void mosek::fusion::RowBlockManager::set_code_used(int32_t _val) { _impl->code_used = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::RowBlockManager::get_cconst() { return _impl->cconst; }
void mosek::fusion::RowBlockManager::set_cconst(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cconst = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_code() { return _impl->code; }
void mosek::fusion::RowBlockManager::set_code(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->code = _val; }
int32_t mosek::fusion::RowBlockManager::get_first_free_codeitem() { return _impl->first_free_codeitem; }
void mosek::fusion::RowBlockManager::set_first_free_codeitem(int32_t _val) { _impl->first_free_codeitem = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_param_code_sizes() { return _impl->param_code_sizes; }
void mosek::fusion::RowBlockManager::set_param_code_sizes(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->param_code_sizes = _val; }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::RowBlockManager::get_param_varidx() { return _impl->param_varidx; }
void mosek::fusion::RowBlockManager::set_param_varidx(std::shared_ptr< monty::ndarray< int64_t,1 > > _val) { _impl->param_varidx = _val; }
int32_t mosek::fusion::RowBlockManager::get_first_free_entry() { return _impl->first_free_entry; }
void mosek::fusion::RowBlockManager::set_first_free_entry(int32_t _val) { _impl->first_free_entry = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_row_code_ptr() { return _impl->row_code_ptr; }
void mosek::fusion::RowBlockManager::set_row_code_ptr(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->row_code_ptr = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_row_param_ptre() { return _impl->row_param_ptre; }
void mosek::fusion::RowBlockManager::set_row_param_ptre(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->row_param_ptre = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_row_param_ptrb() { return _impl->row_param_ptrb; }
void mosek::fusion::RowBlockManager::set_row_param_ptrb(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->row_param_ptrb = _val; }
monty::rc_ptr< ::mosek::fusion::LinkedBlocks > mosek::fusion::RowBlockManager::get_blocks() { return _impl->blocks; }
void mosek::fusion::RowBlockManager::set_blocks(monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _val) { _impl->blocks = _val; }
// mosek.fusion.RowBlockManager.ctor @ src/fusion/Model.mbi:4980:6-4996:7
mosek::fusion::RowBlockManager::t mosek::fusion::p_RowBlockManager::_new_RowBlockManager
  (monty::rc_ptr< ::mosek::fusion::RowBlockManager > _578_that)
{ return new mosek::fusion::RowBlockManager(_578_that); }
mosek::fusion::RowBlockManager::RowBlockManager
  (monty::rc_ptr< ::mosek::fusion::RowBlockManager > _578_that) : 
   RowBlockManager(new mosek::fusion::p_RowBlockManager(this))
{ mosek::fusion::p_RowBlockManager::_get_impl(this)->_initialize(_578_that); }
void mosek::fusion::p_RowBlockManager::_initialize  (monty::rc_ptr< ::mosek::fusion::RowBlockManager > _578_that)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    blocks = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->blocks);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9112_;
    bool _9113_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->row_param_ptrb.get());
    if (_9113_)
    {
      _9112_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->row_param_ptrb);
    }
    else
    {
      _9112_ = nullptr;
    }
    row_param_ptrb = _9112_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9114_;
    bool _9115_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->row_param_ptre.get());
    if (_9115_)
    {
      _9114_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->row_param_ptre);
    }
    else
    {
      _9114_ = nullptr;
    }
    row_param_ptre = _9114_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9116_;
    bool _9117_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->row_code_ptr.get());
    if (_9117_)
    {
      _9116_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->row_code_ptr);
    }
    else
    {
      _9116_ = nullptr;
    }
    row_code_ptr = _9116_;
    first_free_entry = mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->first_free_entry;
    std::shared_ptr< monty::ndarray< int64_t,1 > > _9118_;
    bool _9119_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->param_varidx.get());
    if (_9119_)
    {
      _9118_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->param_varidx);
    }
    else
    {
      _9118_ = nullptr;
    }
    param_varidx = _9118_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9120_;
    bool _9121_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->param_code_sizes.get());
    if (_9121_)
    {
      _9120_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->param_code_sizes);
    }
    else
    {
      _9120_ = nullptr;
    }
    param_code_sizes = _9120_;
    first_free_codeitem = mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->first_free_codeitem;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9122_;
    bool _9123_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->code.get());
    if (_9123_)
    {
      _9122_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->code);
    }
    else
    {
      _9122_ = nullptr;
    }
    code = _9122_;
    std::shared_ptr< monty::ndarray< double,1 > > _9124_;
    bool _9125_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->cconst.get());
    if (_9125_)
    {
      _9124_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->cconst);
    }
    else
    {
      _9124_ = nullptr;
    }
    cconst = _9124_;
    code_used = mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->code_used;
    varidx_used = mosek::fusion::p_RowBlockManager::_get_impl(_578_that)->varidx_used;
  }
}
// mosek.fusion.RowBlockManager.ctor

// mosek.fusion.RowBlockManager.ctor @ src/fusion/Model.mbi:4964:6-4978:7
mosek::fusion::RowBlockManager::t mosek::fusion::p_RowBlockManager::_new_RowBlockManager
  ()
{ return new mosek::fusion::RowBlockManager(); }
mosek::fusion::RowBlockManager::RowBlockManager
  () : 
   RowBlockManager(new mosek::fusion::p_RowBlockManager(this))
{ mosek::fusion::p_RowBlockManager::_get_impl(this)->_initialize(); }
void mosek::fusion::p_RowBlockManager::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    blocks = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    row_param_ptrb = nullptr;
    row_param_ptre = nullptr;
    row_code_ptr = nullptr;
    first_free_entry = (int)0;
    param_varidx = nullptr;
    param_code_sizes = nullptr;
    first_free_codeitem = (int)0;
    code = nullptr;
    cconst = nullptr;
    code_used = (int)0;
    varidx_used = (int)0;
  }
}
// mosek.fusion.RowBlockManager.ctor

// Begin mosek.fusion.RowBlockManager.num_parameterized
// Method mosek.fusion.RowBlockManager.num_parameterized @ src/fusion/Model.mbi:5326:6-69
int32_t mosek::fusion::RowBlockManager :: num_parameterized() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->num_parameterized(); }
int32_t mosek::fusion::p_RowBlockManager::num_parameterized()
{
  return varidx_used;
}
// End mosek.fusion.RowBlockManager.num_parameterized

// Begin mosek.fusion.RowBlockManager.is_parameterized
// Method mosek.fusion.RowBlockManager.is_parameterized @ src/fusion/Model.mbi:5325:6-69
bool mosek::fusion::RowBlockManager :: is_parameterized() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->is_parameterized(); }
bool mosek::fusion::p_RowBlockManager::is_parameterized()
{
  return (code_used > (int)0);
}
// End mosek.fusion.RowBlockManager.is_parameterized

// Begin mosek.fusion.RowBlockManager.blocksize
// Method mosek.fusion.RowBlockManager.blocksize @ src/fusion/Model.mbi:5324:6-79
int32_t mosek::fusion::RowBlockManager :: blocksize(int32_t _579_id) { return mosek::fusion::p_RowBlockManager::_get_impl(this)->blocksize(_579_id); }
int32_t mosek::fusion::p_RowBlockManager::blocksize(int32_t _579_id)
{
  return blocks->blocksize(_579_id);
}
// End mosek.fusion.RowBlockManager.blocksize

// Begin mosek.fusion.RowBlockManager.block_capacity
// Method mosek.fusion.RowBlockManager.block_capacity @ src/fusion/Model.mbi:5323:6-79
int32_t mosek::fusion::RowBlockManager :: block_capacity() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->block_capacity(); }
int32_t mosek::fusion::p_RowBlockManager::block_capacity()
{
  return blocks->block_capacity();
}
// End mosek.fusion.RowBlockManager.block_capacity

// Begin mosek.fusion.RowBlockManager.capacity
// Method mosek.fusion.RowBlockManager.capacity @ src/fusion/Model.mbi:5322:6-67
int32_t mosek::fusion::RowBlockManager :: capacity() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->capacity(); }
int32_t mosek::fusion::p_RowBlockManager::capacity()
{
  return blocks->capacity();
}
// End mosek.fusion.RowBlockManager.capacity

// Begin mosek.fusion.RowBlockManager.get
// Method mosek.fusion.RowBlockManager.get @ src/fusion/Model.mbi:5321:6-102
void mosek::fusion::RowBlockManager :: get(int32_t _580_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _581_target,int32_t _582_offset) { mosek::fusion::p_RowBlockManager::_get_impl(this)->get(_580_id,_581_target,_582_offset); }
void mosek::fusion::p_RowBlockManager::get(int32_t _580_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _581_target,int32_t _582_offset)
{
  _checked_ptr_1<int32_t> _ptr__581_target(_581_target ? _581_target->raw() : nullptr, _581_target ? _581_target->size(0) : 0);
  blocks->get(_580_id,_581_target,_582_offset);
}
// End mosek.fusion.RowBlockManager.get

// Begin mosek.fusion.RowBlockManager.evaluate
// Method mosek.fusion.RowBlockManager.evaluate @ src/fusion/Model.mbi:5253:6-5319:7
void mosek::fusion::RowBlockManager :: evaluate(monty::rc_ptr< ::mosek::fusion::WorkStack > _583_xs,std::shared_ptr< monty::ndarray< double,1 > > _584_param_value,std::shared_ptr< monty::ndarray< int32_t,1 > > _585_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _586_subj,std::shared_ptr< monty::ndarray< double,1 > > _587_val) { mosek::fusion::p_RowBlockManager::_get_impl(this)->evaluate(_583_xs,_584_param_value,_585_subi,_586_subj,_587_val); }
void mosek::fusion::p_RowBlockManager::evaluate(monty::rc_ptr< ::mosek::fusion::WorkStack > _583_xs,std::shared_ptr< monty::ndarray< double,1 > > _584_param_value,std::shared_ptr< monty::ndarray< int32_t,1 > > _585_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _586_subj,std::shared_ptr< monty::ndarray< double,1 > > _587_val)
{
  _checked_ptr_1<double> _ptr__584_param_value(_584_param_value ? _584_param_value->raw() : nullptr, _584_param_value ? _584_param_value->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__585_subi(_585_subi ? _585_subi->raw() : nullptr, _585_subi ? _585_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__586_subj(_586_subj ? _586_subj->raw() : nullptr, _586_subj ? _586_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__587_val(_587_val ? _587_val->raw() : nullptr, _587_val ? _587_val->size(0) : 0);
  int32_t _588_stack = _583_xs->allocf64(code_used);
  int32_t _589_stackp = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _590_xf64 = mosek::fusion::p_WorkStack::_get_impl(_583_xs)->f64;
  _checked_ptr_1<double> _ptr__590_xf64(_590_xf64 ? _590_xf64->raw() : nullptr,_590_xf64 ? _590_xf64->size(0) : 0);
  int32_t _591_idx = (int)0;
  int32_t _9126_ = (int)0;
  int32_t _9127_ = (int)((row_param_ptrb)->size(0));
  for (int32_t _592_i = _9126_; _592_i < _9127_; ++_592_i)
  {
    {
      if ((((*row_param_ptrb)(_592_i)) < ((*row_param_ptre)(_592_i))))
      {
        {
          int32_t _593_k = ((*row_code_ptr)(_592_i));
          int32_t _9128_ = ((*row_param_ptrb)(_592_i));
          int32_t _9129_ = ((*row_param_ptre)(_592_i));
          for (int32_t _594_j = _9128_; _594_j < _9129_; ++_594_j)
          {
            {
              int32_t _9130_ = (int)0;
              int32_t _9131_ = ((*param_code_sizes)(_594_j));
              for (int32_t _595_l = _9130_; _595_l < _9131_; ++_595_l)
              {
                {
                  if ((((*code)(_593_k)) == 0))
                  {
                    {
                    }
                  }
                  else
                  {
                    {
                      if ((((*code)(_593_k)) == 1))
                      {
                        {
                          _ptr__590_xf64[safe_add( _588_stack,_589_stackp )] = _ptr__584_param_value[(int32_t)((*cconst)(_593_k))];
                          ++ _589_stackp;
                        }
                      }
                      else
                      {
                        {
                          if ((((*code)(_593_k)) == 2))
                          {
                            {
                              _ptr__590_xf64[safe_add( _588_stack,_589_stackp )] = ((*cconst)(_593_k));
                              ++ _589_stackp;
                            }
                          }
                          else
                          {
                            {
                              if ((((*code)(_593_k)) == 3))
                              {
                                {
                                  _ptr__590_xf64[(safe_add( _588_stack,_589_stackp ) - (int)2)] += _ptr__590_xf64[(safe_add( _588_stack,_589_stackp ) - (int)1)];
                                  -- _589_stackp;
                                }
                              }
                              else
                              {
                                {
                                  if ((((*code)(_593_k)) == 4))
                                  {
                                    {
                                      _ptr__590_xf64[(safe_add( _588_stack,_589_stackp ) - (int)1)] = (-_ptr__590_xf64[(safe_add( _588_stack,_589_stackp ) - (int)1)]);
                                    }
                                  }
                                  else
                                  {
                                    {
                                      if ((((*code)(_593_k)) == 5))
                                      {
                                        {
                                          _ptr__590_xf64[(safe_add( _588_stack,_589_stackp ) - (int)2)] *= _ptr__590_xf64[(safe_add( _588_stack,_589_stackp ) - (int)1)];
                                          -- _589_stackp;
                                        }
                                      }
                                      else
                                      {
                                        {
                                          if ((((*code)(_593_k)) == 6))
                                          {
                                            {
                                              _ptr__590_xf64[(safe_add( _588_stack,_589_stackp ) - (int)1)] = (1.0 / _ptr__590_xf64[(safe_add( _588_stack,_589_stackp ) - (int)1)]);
                                            }
                                          }
                                          else
                                          {
                                            {
                                              if ((((*code)(_593_k)) == 8))
                                              {
                                                {
                                                  double _596_v = 0.0;
                                                  int32_t _9132_ = (int)0;
                                                  int32_t _9133_ = (int32_t)((*cconst)(_593_k));
                                                  for (int32_t _597_i = _9132_; _597_i < _9133_; ++_597_i)
                                                  {
                                                    {
                                                      _596_v += _ptr__590_xf64[(safe_add( _588_stack,_589_stackp ) - (int)1)];
                                                      -- _589_stackp;
                                                    }
                                                  }
                                                  _ptr__590_xf64[safe_add( _588_stack,_589_stackp )] = _596_v;
                                                  ++ _589_stackp;
                                                }
                                              }
                                              else
                                              {
                                                {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  ++ _593_k;
                }
              }
              _ptr__585_subi[_591_idx] = _592_i;
              _ptr__586_subj[_591_idx] = (int32_t)((*param_varidx)(_594_j));
              _ptr__587_val[_591_idx] = _ptr__590_xf64[_588_stack];
              _589_stackp = (int)0;
              ++ _591_idx;
            }
          }
        }
      }
      {}
    }
  }
  _583_xs->popf64(code_used);
}
// End mosek.fusion.RowBlockManager.evaluate

// Begin mosek.fusion.RowBlockManager.replace_row_code
// Method mosek.fusion.RowBlockManager.replace_row_code @ src/fusion/Model.mbi:5140:6-5251:7
void mosek::fusion::RowBlockManager :: replace_row_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _598_rs,std::shared_ptr< monty::ndarray< int32_t,1 > > _599_nativeidxs,int32_t _600_ptr,int32_t _601_nidxs,int32_t _602_codeptr,int32_t _603_code_p,int32_t _604_cconst_p) { mosek::fusion::p_RowBlockManager::_get_impl(this)->replace_row_code(_598_rs,_599_nativeidxs,_600_ptr,_601_nidxs,_602_codeptr,_603_code_p,_604_cconst_p); }
void mosek::fusion::p_RowBlockManager::replace_row_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _598_rs,std::shared_ptr< monty::ndarray< int32_t,1 > > _599_nativeidxs,int32_t _600_ptr,int32_t _601_nidxs,int32_t _602_codeptr,int32_t _603_code_p,int32_t _604_cconst_p)
{
  _checked_ptr_1<int32_t> _ptr__599_nativeidxs(_599_nativeidxs ? _599_nativeidxs->raw() : nullptr, _599_nativeidxs ? _599_nativeidxs->size(0) : 0);
  int32_t _605_nelem = (int)((_599_nativeidxs)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _606_ri32 = mosek::fusion::p_WorkStack::_get_impl(_598_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__606_ri32(_606_ri32 ? _606_ri32->raw() : nullptr,_606_ri32 ? _606_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _607_ri64 = mosek::fusion::p_WorkStack::_get_impl(_598_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__607_ri64(_607_ri64 ? _607_ri64->raw() : nullptr,_607_ri64 ? _607_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _608_rf64 = mosek::fusion::p_WorkStack::_get_impl(_598_rs)->f64;
  _checked_ptr_1<double> _ptr__608_rf64(_608_rf64 ? _608_rf64->raw() : nullptr,_608_rf64 ? _608_rf64->size(0) : 0);
  bool _609_ok = true;
  {
    int32_t _610_numop = (int)0;
    int32_t _611_nentry = (int)0;
    {
      int32_t _9134_ = (int)0;
      int32_t _9135_ = _605_nelem;
      for (int32_t _612_i = _9134_; _612_i < _9135_; ++_612_i)
      {
        {
          int32_t _9136_ = _ptr__606_ri32[safe_add( _600_ptr,_612_i )];
          int32_t _9137_ = _ptr__606_ri32[safe_add( safe_add( _600_ptr,_612_i ),(int)1 )];
          for (int32_t _613_j = _9136_; _613_j < _9137_; ++_613_j)
          {
            {
              if ((((_ptr__606_ri32[safe_add( safe_add( _602_codeptr,_613_j ),(int)1 )] - _ptr__606_ri32[safe_add( _602_codeptr,_613_j )]) == (int)1) && ((_ptr__606_ri32[safe_add( _603_code_p,_ptr__606_ri32[safe_add( _602_codeptr,_613_j )] )] == 10) || (_ptr__606_ri32[safe_add( _603_code_p,_ptr__606_ri32[safe_add( _602_codeptr,_613_j )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _611_nentry;
                  _610_numop += (_ptr__606_ri32[safe_add( safe_add( _602_codeptr,_613_j ),(int)1 )] - _ptr__606_ri32[safe_add( _602_codeptr,_613_j )]);
                }
              }
            }
          }
        }
      }
      _pubthis->clear_row_code(_599_nativeidxs);
    }
    ensure_code_cap(_611_nentry,_610_numop);
    code_used += _610_numop;
    varidx_used += _611_nentry;
  }
  if ((first_free_codeitem > safe_mul( code_used,(int)2 )))
  {
    {
      compress();
    }
  }
  {}
  {
    int32_t _9138_ = (int)0;
    int32_t _9139_ = _605_nelem;
    for (int32_t _614_i = _9138_; _614_i < _9139_; ++_614_i)
    {
      {
        int32_t _615_subi = _ptr__599_nativeidxs[_614_i];
        int32_t _616_cnnz = (int)0;
        int32_t _617_rncodeatom = (int)0;
        int32_t _9140_ = _ptr__606_ri32[safe_add( _600_ptr,_614_i )];
        int32_t _9141_ = _ptr__606_ri32[safe_add( safe_add( _600_ptr,_614_i ),(int)1 )];
        for (int32_t _618_j = _9140_; _618_j < _9141_; ++_618_j)
        {
          {
            if ((((_ptr__606_ri32[safe_add( safe_add( _602_codeptr,_618_j ),(int)1 )] - _ptr__606_ri32[safe_add( _602_codeptr,_618_j )]) == (int)1) && ((_ptr__606_ri32[safe_add( _603_code_p,_ptr__606_ri32[safe_add( _602_codeptr,_618_j )] )] == 10) || (_ptr__606_ri32[safe_add( _603_code_p,_ptr__606_ri32[safe_add( _602_codeptr,_618_j )] )] == 2))))
            {
              {
              }
            }
            else
            {
              {
                ++ _616_cnnz;
                _617_rncodeatom += (_ptr__606_ri32[safe_add( safe_add( _602_codeptr,_618_j ),(int)1 )] - _ptr__606_ri32[safe_add( _602_codeptr,_618_j )]);
              }
            }
          }
        }
        int32_t _619_ni = _ptr__599_nativeidxs[_614_i];
        int32_t _620_n = (((*row_param_ptre)(_619_ni)) - ((*row_param_ptrb)(_619_ni)));
        if ((_616_cnnz > (int)0))
        {
          {
            ((*row_param_ptrb)(_615_subi)) = first_free_entry;
            ((*row_param_ptre)(_615_subi)) = safe_add( first_free_entry,_616_cnnz );
            ((*row_code_ptr)(_615_subi)) = first_free_codeitem;
            first_free_entry += _616_cnnz;
            first_free_codeitem += _617_rncodeatom;
          }
        }
        {}
      }
    }
  }
  int32_t _9142_ = (int)0;
  int32_t _9143_ = _605_nelem;
  for (int32_t _621_i = _9142_; _621_i < _9143_; ++_621_i)
  {
    {
      int32_t _622_subi = _ptr__599_nativeidxs[_621_i];
      int32_t _623_codei = ((*row_code_ptr)(_622_subi));
      int32_t _624_elmi = ((*row_param_ptrb)(_622_subi));
      int32_t _9144_ = _ptr__606_ri32[safe_add( _600_ptr,_621_i )];
      int32_t _9145_ = _ptr__606_ri32[safe_add( safe_add( _600_ptr,_621_i ),(int)1 )];
      for (int32_t _625_j = _9144_; _625_j < _9145_; ++_625_j)
      {
        {
          if ((((_ptr__606_ri32[safe_add( safe_add( _602_codeptr,_625_j ),(int)1 )] - _ptr__606_ri32[safe_add( _602_codeptr,_625_j )]) == (int)1) && ((_ptr__606_ri32[safe_add( _603_code_p,_ptr__606_ri32[safe_add( _602_codeptr,_625_j )] )] == 10) || (_ptr__606_ri32[safe_add( _603_code_p,_ptr__606_ri32[safe_add( _602_codeptr,_625_j )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              int32_t _9146_ = _ptr__606_ri32[safe_add( _602_codeptr,_625_j )];
              int32_t _9147_ = _ptr__606_ri32[safe_add( safe_add( _602_codeptr,_625_j ),(int)1 )];
              for (int32_t _626_k = _9146_; _626_k < _9147_; ++_626_k)
              {
                {
                  ((*code)(_623_codei)) = _ptr__606_ri32[safe_add( _603_code_p,_626_k )];
                  ((*cconst)(_623_codei)) = _ptr__608_rf64[safe_add( _604_cconst_p,_626_k )];
                  ++ _623_codei;
                }
              }
              ((*param_code_sizes)(_624_elmi)) = (_ptr__606_ri32[safe_add( safe_add( _602_codeptr,_625_j ),(int)1 )] - _ptr__606_ri32[safe_add( _602_codeptr,_625_j )]);
              ((*param_varidx)(_624_elmi)) = _ptr__607_ri64[safe_add( _601_nidxs,_625_j )];
              _609_ok = (_ptr__607_ri64[safe_add( _601_nidxs,_625_j )] >= (int)0);
              ++ _624_elmi;
            }
          }
        }
      }
    }
  }
  if ((!_609_ok))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
    }
  }
  {}
}
// End mosek.fusion.RowBlockManager.replace_row_code

// Begin mosek.fusion.RowBlockManager.clear_row_code
// Method mosek.fusion.RowBlockManager.clear_row_code @ src/fusion/Model.mbi:5113:6-5129:7
void mosek::fusion::RowBlockManager :: clear_row_code(std::shared_ptr< monty::ndarray< int32_t,1 > > _627_nativeidxs) { mosek::fusion::p_RowBlockManager::_get_impl(this)->clear_row_code(_627_nativeidxs); }
void mosek::fusion::p_RowBlockManager::clear_row_code(std::shared_ptr< monty::ndarray< int32_t,1 > > _627_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__627_nativeidxs(_627_nativeidxs ? _627_nativeidxs->raw() : nullptr, _627_nativeidxs ? _627_nativeidxs->size(0) : 0);
  if ((NULL != row_param_ptrb.get()))
  {
    {
      int32_t _9148_ = (int)0;
      int32_t _9149_ = (int)((_627_nativeidxs)->size(0));
      for (int32_t _628_i = _9148_; _628_i < _9149_; ++_628_i)
      {
        {
          int32_t _9150_ = ((*row_param_ptrb)(_ptr__627_nativeidxs[_628_i]));
          int32_t _9151_ = ((*row_param_ptre)(_ptr__627_nativeidxs[_628_i]));
          for (int32_t _629_j = _9150_; _629_j < _9151_; ++_629_j)
          {
            {
              code_used -= ((*param_code_sizes)(_629_j));
            }
          }
          varidx_used -= (((*row_param_ptre)(_ptr__627_nativeidxs[_628_i])) - ((*row_param_ptrb)(_ptr__627_nativeidxs[_628_i])));
          ((*row_param_ptrb)(_ptr__627_nativeidxs[_628_i])) = (int)0;
          ((*row_param_ptre)(_ptr__627_nativeidxs[_628_i])) = (int)0;
        }
      }
    }
  }
  {}
}
// End mosek.fusion.RowBlockManager.clear_row_code

// Begin mosek.fusion.RowBlockManager.compress
// Method mosek.fusion.RowBlockManager.compress @ src/fusion/Model.mbi:5069:6-5111:7
void mosek::fusion::p_RowBlockManager::compress()
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _630_newcode = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(code_used)));
  _checked_ptr_1<int32_t> _ptr__630_newcode(_630_newcode ? _630_newcode->raw() : nullptr,_630_newcode ? _630_newcode->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _631_newcconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(code_used)));
  _checked_ptr_1<double> _ptr__631_newcconst(_631_newcconst ? _631_newcconst->raw() : nullptr,_631_newcconst ? _631_newcconst->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _632_newvaridx = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(first_free_entry)));
  _checked_ptr_1<int64_t> _ptr__632_newvaridx(_632_newvaridx ? _632_newvaridx->raw() : nullptr,_632_newvaridx ? _632_newvaridx->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _633_newcodesizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(first_free_entry)));
  _checked_ptr_1<int32_t> _ptr__633_newcodesizes(_633_newcodesizes ? _633_newcodesizes->raw() : nullptr,_633_newcodesizes ? _633_newcodesizes->size(0) : 0);
  int32_t _634_tgtptr = (int)0;
  int32_t _635_tgtcptr = (int)0;
  int32_t _9152_ = (int)0;
  int32_t _9153_ = (int)((row_param_ptrb)->size(0));
  for (int32_t _636_i = _9152_; _636_i < _9153_; ++_636_i)
  {
    {
      int32_t _637_codesize = (int)0;
      int32_t _638_n = (((*row_param_ptre)(_636_i)) - ((*row_param_ptrb)(_636_i)));
      ::mosek::fusion::Utils::Tools::arraycopy(param_varidx,((*row_param_ptrb)(_636_i)),_632_newvaridx,_634_tgtptr,_638_n);
      ::mosek::fusion::Utils::Tools::arraycopy(param_code_sizes,((*row_param_ptrb)(_636_i)),_633_newcodesizes,_634_tgtptr,_638_n);
      int32_t _9154_ = ((*row_param_ptrb)(_636_i));
      int32_t _9155_ = ((*row_param_ptre)(_636_i));
      for (int32_t _639_j = _9154_; _639_j < _9155_; ++_639_j)
      {
        {
          _637_codesize += ((*param_code_sizes)(_639_j));
        }
      }
      ::mosek::fusion::Utils::Tools::arraycopy(code,((*row_code_ptr)(_636_i)),_630_newcode,_635_tgtcptr,_637_codesize);
      ::mosek::fusion::Utils::Tools::arraycopy(cconst,((*row_code_ptr)(_636_i)),_631_newcconst,_635_tgtcptr,_637_codesize);
      ((*row_param_ptrb)(_636_i)) = _634_tgtptr;
      ((*row_param_ptre)(_636_i)) = safe_add( _634_tgtptr,_638_n );
      ((*row_code_ptr)(_636_i)) = _635_tgtcptr;
      _635_tgtcptr += _637_codesize;
      _634_tgtptr += _638_n;
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_632_newvaridx,(int)0,param_varidx,(int)0,_634_tgtptr);
  ::mosek::fusion::Utils::Tools::arraycopy(_633_newcodesizes,(int)0,param_code_sizes,(int)0,_634_tgtptr);
  ::mosek::fusion::Utils::Tools::arraycopy(_630_newcode,(int)0,code,(int)0,_635_tgtcptr);
  ::mosek::fusion::Utils::Tools::arraycopy(_631_newcconst,(int)0,cconst,(int)0,_635_tgtcptr);
  first_free_codeitem = _635_tgtcptr;
  first_free_entry = _634_tgtptr;
}
// End mosek.fusion.RowBlockManager.compress

// Begin mosek.fusion.RowBlockManager.ensure_code_cap
// Method mosek.fusion.RowBlockManager.ensure_code_cap @ src/fusion/Model.mbi:5033:6-5067:7
void mosek::fusion::p_RowBlockManager::ensure_code_cap(int32_t _640_nentry,int32_t _641_codesize)
{
  if ((NULL == row_code_ptr.get()))
  {
    {
      int32_t _642_n = (int)1024;
      while ( (_642_n < _640_nentry) )
      {
        {
          _642_n *= (int)2;
        }
      }
      int32_t _643_m = (int)1024;
      while ( (_643_m < _641_codesize) )
      {
        {
          _643_m *= (int)2;
        }
      }
      row_param_ptrb = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      row_param_ptre = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      row_code_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      param_varidx = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_642_n)));
      param_code_sizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_642_n)));
      code = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_643_m)));
      cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_643_m)));
    }
  }
  else
  {
    {
      if ((_640_nentry > ((int)((param_varidx)->size(0)) - first_free_entry)))
      {
        {
          int32_t _644_n = (int)((param_varidx)->size(0));
          while ( ((_644_n - first_free_entry) < _640_nentry) )
          {
            {
              _644_n *= (int)2;
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _645_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_644_n)));
          _checked_ptr_1<int32_t> _ptr__645_ptr(_645_ptr ? _645_ptr->raw() : nullptr,_645_ptr ? _645_ptr->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _646_varidx = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_644_n)));
          _checked_ptr_1<int64_t> _ptr__646_varidx(_646_varidx ? _646_varidx->raw() : nullptr,_646_varidx ? _646_varidx->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _647_code_sizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_644_n)));
          _checked_ptr_1<int32_t> _ptr__647_code_sizes(_647_code_sizes ? _647_code_sizes->raw() : nullptr,_647_code_sizes ? _647_code_sizes->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(param_varidx,(int)0,_646_varidx,(int)0,first_free_entry);
          ::mosek::fusion::Utils::Tools::arraycopy(param_code_sizes,(int)0,_647_code_sizes,(int)0,first_free_entry);
          param_varidx = _646_varidx;
          param_code_sizes = _647_code_sizes;
        }
      }
      {}
      if ((_641_codesize > ((int)((code)->size(0)) - first_free_codeitem)))
      {
        {
          int32_t _648_n = (int)((code)->size(0));
          while ( (_641_codesize > (_648_n - first_free_codeitem)) )
          {
            {
              _648_n *= (int)2;
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _649_tcode = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_648_n)));
          _checked_ptr_1<int32_t> _ptr__649_tcode(_649_tcode ? _649_tcode->raw() : nullptr,_649_tcode ? _649_tcode->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(code,(int)0,_649_tcode,(int)0,first_free_codeitem);
          std::shared_ptr< monty::ndarray< double,1 > > _650_tcconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_648_n)));
          _checked_ptr_1<double> _ptr__650_tcconst(_650_tcconst ? _650_tcconst->raw() : nullptr,_650_tcconst ? _650_tcconst->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(cconst,(int)0,_650_tcconst,(int)0,first_free_codeitem);
          code = _649_tcode;
          cconst = _650_tcconst;
        }
      }
      {}
    }
  }
}
// End mosek.fusion.RowBlockManager.ensure_code_cap

// Begin mosek.fusion.RowBlockManager.release
// Method mosek.fusion.RowBlockManager.release @ src/fusion/Model.mbi:5020:6-5031:7
void mosek::fusion::RowBlockManager :: release(int32_t _651_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _652_nativeidxs) { mosek::fusion::p_RowBlockManager::_get_impl(this)->release(_651_id,_652_nativeidxs); }
void mosek::fusion::p_RowBlockManager::release(int32_t _651_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _652_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__652_nativeidxs(_652_nativeidxs ? _652_nativeidxs->raw() : nullptr, _652_nativeidxs ? _652_nativeidxs->size(0) : 0);
  int32_t _653_num = blocks->blocksize(_651_id);
  blocks->get(_651_id,_652_nativeidxs,(int)0);
  blocks->free(_651_id);
  if ((NULL != row_code_ptr.get()))
  {
    {
      int32_t _9156_ = (int)0;
      int32_t _9157_ = _653_num;
      for (int32_t _654_i = _9156_; _654_i < _9157_; ++_654_i)
      {
        {
          int32_t _655_ni = _ptr__652_nativeidxs[_654_i];
          code_used -= (((*row_param_ptre)(_655_ni)) - ((*row_param_ptrb)(_655_ni)));
          ((*row_param_ptre)(_655_ni)) = (int)0;
          ((*row_param_ptrb)(_655_ni)) = (int)0;
        }
      }
    }
  }
  {}
}
// End mosek.fusion.RowBlockManager.release

// Begin mosek.fusion.RowBlockManager.allocate
// Method mosek.fusion.RowBlockManager.allocate @ src/fusion/Model.mbi:5002:6-5018:7
int32_t mosek::fusion::RowBlockManager :: allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _656_nativeidxs) { return mosek::fusion::p_RowBlockManager::_get_impl(this)->allocate(_656_nativeidxs); }
int32_t mosek::fusion::p_RowBlockManager::allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _656_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__656_nativeidxs(_656_nativeidxs ? _656_nativeidxs->raw() : nullptr, _656_nativeidxs ? _656_nativeidxs->size(0) : 0);
  int32_t _657_num = (int)((_656_nativeidxs)->size(0));
  int32_t _658_id = blocks->alloc(_657_num);
  blocks->get(_658_id,_656_nativeidxs,(int)0);
  if (((NULL != row_code_ptr.get()) && (blocks->capacity() > (int)((row_param_ptrb)->size(0)))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _659_ptrb = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__659_ptrb(_659_ptrb ? _659_ptrb->raw() : nullptr,_659_ptrb ? _659_ptrb->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(row_param_ptrb,(int)0,_659_ptrb,(int)0,(int)((row_param_ptrb)->size(0)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _660_ptre = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__660_ptre(_660_ptre ? _660_ptre->raw() : nullptr,_660_ptre ? _660_ptre->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(row_param_ptre,(int)0,_660_ptre,(int)0,(int)((row_param_ptre)->size(0)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _661_cptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__661_cptr(_661_cptr ? _661_cptr->raw() : nullptr,_661_cptr ? _661_cptr->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(row_code_ptr,(int)0,_661_cptr,(int)0,(int)((row_code_ptr)->size(0)));
      row_param_ptrb = _659_ptrb;
      row_param_ptre = _660_ptre;
      row_code_ptr = _661_cptr;
    }
  }
  {}
  return _658_id;
}
// End mosek.fusion.RowBlockManager.allocate

// Begin mosek.fusion.RowBlockManager.row_is_parameterized
// Method mosek.fusion.RowBlockManager.row_is_parameterized @ src/fusion/Model.mbi:4998:6-5000:7
bool mosek::fusion::RowBlockManager :: row_is_parameterized(int32_t _662_i) { return mosek::fusion::p_RowBlockManager::_get_impl(this)->row_is_parameterized(_662_i); }
bool mosek::fusion::p_RowBlockManager::row_is_parameterized(int32_t _662_i)
{
  return ((NULL != row_param_ptrb.get()) && (((*row_param_ptrb)(_662_i)) < ((*row_param_ptre)(_662_i))));
}
// End mosek.fusion.RowBlockManager.row_is_parameterized

void mosek::fusion::p_RowBlockManager::destroy()
{
  cconst.reset();
  code.reset();
  param_code_sizes.reset();
  param_varidx.reset();
  row_code_ptr.reset();
  row_param_ptre.reset();
  row_param_ptrb.reset();
  blocks.reset();
}
void mosek::fusion::RowBlockManager::destroy() { mosek::fusion::p_RowBlockManager::_get_impl(this)->destroy(); }
// } class RowBlockManager
// class Model { // @ src/fusion/Model.mbi:342:4-4914:5
mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }
mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }
mosek::fusion::p_Model::p_Model
  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.Model.ctor @ src/fusion/Model.mbi:568:6-635:7
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (monty::rc_ptr< ::mosek::fusion::Model > _663_m)
{ return new mosek::fusion::Model(_663_m); }
mosek::fusion::Model::Model
  (monty::rc_ptr< ::mosek::fusion::Model > _663_m) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_663_m); }
void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _663_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseModel::_initialize(_663_m);
    monty::rc_ptr< ::mosek::fusion::Model > _664_self = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_663_m)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_663_m)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_663_m)->solutionptr;
    monty::rc_ptr< ::mosek::fusion::SolutionStruct > _9158_;
    bool _9159_ = (NULL != mosek::fusion::p_Model::_get_impl(_663_m)->sol_itr.get());
    if (_9159_)
    {
      _9158_ = mosek::fusion::p_Model::_get_impl(_663_m)->sol_itr->__mosek_2fusion_2SolutionStruct__clone();
    }
    else
    {
      _9158_ = nullptr;
    }
    sol_itr = _9158_;
    monty::rc_ptr< ::mosek::fusion::SolutionStruct > _9160_;
    bool _9161_ = (NULL != mosek::fusion::p_Model::_get_impl(_663_m)->sol_itg.get());
    if (_9161_)
    {
      _9160_ = mosek::fusion::p_Model::_get_impl(_663_m)->sol_itg->__mosek_2fusion_2SolutionStruct__clone();
    }
    else
    {
      _9160_ = nullptr;
    }
    sol_itg = _9160_;
    monty::rc_ptr< ::mosek::fusion::SolutionStruct > _9162_;
    bool _9163_ = (NULL != mosek::fusion::p_Model::_get_impl(_663_m)->sol_bas.get());
    if (_9163_)
    {
      _9162_ = mosek::fusion::p_Model::_get_impl(_663_m)->sol_bas->__mosek_2fusion_2SolutionStruct__clone();
    }
    else
    {
      _9162_ = nullptr;
    }
    sol_bas = _9162_;
    num_task_afe = mosek::fusion::p_Model::_get_impl(_663_m)->num_task_afe;
    num_task_con = mosek::fusion::p_Model::_get_impl(_663_m)->num_task_con;
    num_task_acc = mosek::fusion::p_Model::_get_impl(_663_m)->num_task_acc;
    con_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager(mosek::fusion::p_Model::_get_impl(_663_m)->con_blocks);
    afe_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager(mosek::fusion::p_Model::_get_impl(_663_m)->afe_blocks);
    obj_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager(mosek::fusion::p_Model::_get_impl(_663_m)->obj_blocks);
    acc_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_663_m)->acc_block_map);
    acon_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_663_m)->acon_block_map);
    acon_acc = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->acon_acc);
    acon_afe = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->acon_afe);
    acon_elm_accid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->acon_elm_accid);
    acon_elm_scale = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->acon_elm_scale);
    acon_elm_ofs = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->acon_elm_ofs);
    acon_elm_afe = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->acon_elm_afe);
    task_numaferow = mosek::fusion::p_Model::_get_impl(_663_m)->task_numaferow;
    var_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_663_m)->var_block_map);
    var_block_acc_id = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->var_block_acc_id);
    var_elm_acc_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->var_elm_acc_idx);
    var_elm_acc_ofs = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->var_elm_acc_ofs);
    barvar_num = (int)0;
    barvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->barvar_dim);
    barvar_block_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->barvar_block_ptr);
    barvar_block_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->barvar_block_dim);
    barvar_block_elm_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->barvar_block_elm_ptr);
    barvar_block_elm_barj = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->barvar_block_elm_barj);
    barvar_block_elm_i = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->barvar_block_elm_i);
    barvar_block_elm_j = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->barvar_block_elm_j);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9164_;
    for (int32_t _665_i = (int)0, _9165_ = (int)((mosek::fusion::p_Model::_get_impl(_663_m)->vars)->size(0)); _665_i < _9165_ ; ++_665_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _9166_;
      bool _9167_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_663_m)->vars)(_665_i)).get());
      if (_9167_)
      {
        _9166_ = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_663_m)->vars)(_665_i)).get())->__mosek_2fusion_2ModelVariable__clone(_664_self);
      }
      else
      {
        _9166_ = nullptr;
      }
      _9164_.push_back(_9166_);
    }
    auto _9168_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9164_.size()),_9164_.begin(),_9164_.end()));
    vars = _9168_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9169_;
    for (int32_t _666_i = (int)0, _9170_ = (int)((mosek::fusion::p_Model::_get_impl(_663_m)->barvars)->size(0)); _666_i < _9170_ ; ++_666_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _9171_;
      bool _9172_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_663_m)->barvars)(_666_i)).get());
      if (_9172_)
      {
        _9171_ = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_663_m)->barvars)(_666_i)).get())->__mosek_2fusion_2ModelVariable__clone(_664_self);
      }
      else
      {
        _9171_ = nullptr;
      }
      _9169_.push_back(_9171_);
    }
    auto _9173_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9169_.size()),_9169_.begin(),_9169_.end()));
    barvars = _9173_;
    var_map = mosek::fusion::p_Model::_get_impl(_663_m)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9174_;
    for (int32_t _667_i = (int)0, _9175_ = (int)((mosek::fusion::p_Model::_get_impl(_663_m)->cons)->size(0)); _667_i < _9175_ ; ++_667_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _9176_;
      bool _9177_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_663_m)->cons)(_667_i)).get());
      if (_9177_)
      {
        _9176_ = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_663_m)->cons)(_667_i)).get())->__mosek_2fusion_2ModelConstraint__clone(_664_self);
      }
      else
      {
        _9176_ = nullptr;
      }
      _9174_.push_back(_9176_);
    }
    auto _9178_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9174_.size()),_9174_.begin(),_9174_.end()));
    cons = _9178_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9179_;
    for (int32_t _668_i = (int)0, _9180_ = (int)((mosek::fusion::p_Model::_get_impl(_663_m)->acons)->size(0)); _668_i < _9180_ ; ++_668_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _9181_;
      bool _9182_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_663_m)->acons)(_668_i)).get());
      if (_9182_)
      {
        _9181_ = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_663_m)->acons)(_668_i)).get())->__mosek_2fusion_2ModelConstraint__clone(_664_self);
      }
      else
      {
        _9181_ = nullptr;
      }
      _9179_.push_back(_9181_);
    }
    auto _9183_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9179_.size()),_9179_.begin(),_9179_.end()));
    acons = _9183_;
    con_map = mosek::fusion::p_Model::_get_impl(_663_m)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    numparameter = mosek::fusion::p_Model::_get_impl(_663_m)->numparameter;
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _9184_;
    bool _9185_ = (NULL == mosek::fusion::p_Model::_get_impl(_663_m)->parameters.get());
    if (_9185_)
    {
      _9184_ = nullptr;
    }
    else
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _9186_;
      for (int32_t _669_i = (int)0, _9187_ = (int)((mosek::fusion::p_Model::_get_impl(_663_m)->parameters)->size(0)); _669_i < _9187_ ; ++_669_i)
      {
        monty::rc_ptr< ::mosek::fusion::Parameter > _9188_;
        bool _9189_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_663_m)->parameters)(_669_i)).get());
        if (_9189_)
        {
          _9188_ = ((*mosek::fusion::p_Model::_get_impl(_663_m)->parameters)(_669_i))->__mosek_2fusion_2Parameter__clone(_664_self);
        }
        else
        {
          _9188_ = nullptr;
        }
        _9186_.push_back(_9188_);
      }
      auto _9190_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_9186_.size()),_9186_.begin(),_9186_.end()));
      _9184_ = _9190_;
    }
    parameters = _9184_;
    par_map = mosek::fusion::p_Model::_get_impl(_663_m)->par_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    param_num = mosek::fusion::p_Model::_get_impl(_663_m)->param_num;
    std::shared_ptr< monty::ndarray< double,1 > > _9191_;
    bool _9192_ = (NULL != mosek::fusion::p_Model::_get_impl(_663_m)->param_value.get());
    if (_9192_)
    {
      _9191_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_663_m)->param_value);
    }
    else
    {
      _9191_ = nullptr;
    }
    param_value = _9191_;
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_663_m)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ src/fusion/Model.mbi:490:6-565:7
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (const std::string &  _670_name,
    int32_t _671_basesize)
{ return new mosek::fusion::Model(_670_name,_671_basesize); }
mosek::fusion::Model::Model
  (const std::string &  _670_name,
    int32_t _671_basesize) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_670_name,_671_basesize); }
void mosek::fusion::p_Model::_initialize  (const std::string &  _670_name,
    int32_t _671_basesize)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseModel::_initialize(_670_name,std::string (""));
    model_name = _670_name;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    sol_itr = nullptr;
    sol_itg = nullptr;
    sol_bas = nullptr;
    num_task_afe = (int)0;
    num_task_con = (int)0;
    num_task_acc = (int)0;
    con_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager();
    afe_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager();
    obj_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager();
    acc_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    acon_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    task_numaferow = (int)0;
    acon_acc = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->block_capacity())));
    acon_afe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->block_capacity())));
    acon_elm_accid = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->capacity())));
    std::vector<double> _9193_;
    for (int32_t _672_i = (int)0, _9194_ = acon_block_map->capacity(); _672_i < _9194_ ; ++_672_i)
    {
      _9193_.push_back(1.0);
    }
    auto _9195_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9193_.size()),_9193_.begin(),_9193_.end()));
    acon_elm_scale = _9195_;
    acon_elm_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->capacity())));
    acon_elm_afe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->capacity())));
    var_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    var_block_acc_id = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(var_block_map->block_capacity())));
    var_elm_acc_idx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(var_block_map->capacity())));
    var_elm_acc_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(var_block_map->capacity())));
    barvar_num = (int)0;
    barvar_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_671_basesize)));
    barvar_block_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _671_basesize,(int)1 ))));
    barvar_block_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_671_basesize)));
    barvar_block_elm_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _671_basesize,(int)1 ))));
    barvar_block_elm_barj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_671_basesize)));
    barvar_block_elm_i = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_671_basesize)));
    barvar_block_elm_j = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_671_basesize)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9196_;
    for (int32_t _673_i = (int)0, _9197_ = safe_mul( _671_basesize,(int)8 ); _673_i < _9197_ ; ++_673_i)
    {
      _9196_.push_back(nullptr);
    }
    auto _9198_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9196_.size()),_9196_.begin(),_9196_.end()));
    vars = _9198_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9199_;
    for (int32_t _674_i = (int)0, _9200_ = _671_basesize; _674_i < _9200_ ; ++_674_i)
    {
      _9199_.push_back(nullptr);
    }
    auto _9201_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9199_.size()),_9199_.begin(),_9199_.end()));
    barvars = _9201_;
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9202_;
    for (int32_t _675_i = (int)0, _9203_ = safe_mul( _671_basesize,(int)8 ); _675_i < _9203_ ; ++_675_i)
    {
      _9202_.push_back(nullptr);
    }
    auto _9204_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9202_.size()),_9202_.begin(),_9202_.end()));
    cons = _9204_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9205_;
    for (int32_t _676_i = (int)0, _9206_ = safe_mul( _671_basesize,(int)8 ); _676_i < _9206_ ; ++_676_i)
    {
      _9205_.push_back(nullptr);
    }
    auto _9207_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9205_.size()),_9205_.begin(),_9205_.end()));
    acons = _9207_;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    numparameter = (int)0;
    parameters = nullptr;
    par_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    param_num = (int)0;
    param_value = nullptr;
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _677_natvarbfixidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)1)));
      _checked_ptr_1<int32_t> _ptr__677_natvarbfixidx(_677_natvarbfixidx ? _677_natvarbfixidx->raw() : nullptr,_677_natvarbfixidx ? _677_natvarbfixidx->size(0) : 0);
      int32_t _678_bfixvarid = linearvar_alloc((int)1,_677_natvarbfixidx);
      bfixidx = _ptr__677_natvarbfixidx[(int)0];
    }
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    task_append_domain_empty();
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ src/fusion/Model.mbi:482:6-58
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (int32_t _679_basesize)
{ return new mosek::fusion::Model(_679_basesize); }
mosek::fusion::Model::Model
  (int32_t _679_basesize) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_679_basesize); }
void mosek::fusion::p_Model::_initialize  (int32_t _679_basesize)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Model::_initialize(std::string (""),_679_basesize);
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ src/fusion/Model.mbi:476:6-52
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (const std::string &  _680_name)
{ return new mosek::fusion::Model(_680_name); }
mosek::fusion::Model::Model
  (const std::string &  _680_name) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_680_name); }
void mosek::fusion::p_Model::_initialize  (const std::string &  _680_name)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Model::_initialize(_680_name,(int)128);
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ src/fusion/Model.mbi:470:6-33
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  ()
{ return new mosek::fusion::Model(); }
mosek::fusion::Model::Model
  () : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }
void mosek::fusion::p_Model::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}
// mosek.fusion.Model.ctor

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4795:6-4913:7
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _681_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _682_terms) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_681_name,_682_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _681_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _682_terms) { return __mosek_2fusion_2Model__disjunction(_681_name,_682_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _681_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _682_terms)
{
  int32_t _683_n = (int)((_682_terms)->size(0));
  int32_t _684_nrows = (int)0;
  int32_t _685_nterms = (int)0;
  int32_t _686_naccterms = (int)0;
  int32_t _687_naccrows = (int)0;
  int32_t _9208_ = (int)0;
  int32_t _9209_ = _683_n;
  for (int32_t _688_i = _9208_; _688_i < _9209_; ++_688_i)
  {
    {
      _684_nrows += ((*_682_terms)(_688_i))->size();
      _685_nterms += mosek::fusion::p_Term::_get_impl(((*_682_terms)(_688_i)).get())->num();
      _687_naccrows += mosek::fusion::p_Term::_get_impl(((*_682_terms)(_688_i)).get())->numaccrows();
      _686_naccterms += mosek::fusion::p_Term::_get_impl(((*_682_terms)(_688_i)).get())->numaccterms();
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _689_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_684_nrows)));
  _checked_ptr_1<int32_t> _ptr__689_afeidxs(_689_afeidxs ? _689_afeidxs->raw() : nullptr,_689_afeidxs ? _689_afeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _690_accafeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_687_naccrows)));
  _checked_ptr_1<int32_t> _ptr__690_accafeidxs(_690_accafeidxs ? _690_accafeidxs->raw() : nullptr,_690_accafeidxs ? _690_accafeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _691_accb = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_687_naccrows)));
  _checked_ptr_1<double> _ptr__691_accb(_691_accb ? _691_accb->raw() : nullptr,_691_accb ? _691_accb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _692_domidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_686_naccterms)));
  _checked_ptr_1<int64_t> _ptr__692_domidxs(_692_domidxs ? _692_domidxs->raw() : nullptr,_692_domidxs ? _692_domidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _693_termsize = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_683_n)));
  _checked_ptr_1<int64_t> _ptr__693_termsize(_693_termsize ? _693_termsize->raw() : nullptr,_693_termsize ? _693_termsize->size(0) : 0);
  int32_t _694_afeblockid = afe_allocate(_689_afeidxs);
  int32_t _695_term_index = (int)0;
  int32_t _696_acctermptr = (int)0;
  int32_t _697_afetgtptr = (int)0;
  int32_t _698_afeptr = (int)0;
  int32_t _9210_ = (int)0;
  int32_t _9211_ = _683_n;
  for (int32_t _699_term_i = _9210_; _699_term_i < _9211_; ++_699_term_i)
  {
    {
      int32_t _9212_ = (int)0;
      int32_t _9213_ = mosek::fusion::p_Term::_get_impl(((*_682_terms)(_699_term_i)).get())->num();
      for (int32_t _700_simpterm_i = _9212_; _700_simpterm_i < _9213_; ++_700_simpterm_i)
      {
        {
          monty::rc_ptr< ::mosek::fusion::DJCDomain > _701_dom = ((*mosek::fusion::p_Term::_get_impl(((*_682_terms)(_699_term_i)))->domains)(_700_simpterm_i));
          monty::rc_ptr< ::mosek::fusion::ExprDense > _702_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(((*mosek::fusion::p_Term::_get_impl(((*_682_terms)(_699_term_i)))->exprs)(_700_simpterm_i)))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
          _702_e->eval(rs,ws,xs);
          rs->pop_expr();
          std::shared_ptr< monty::ndarray< int32_t,1 > > _703_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
          _checked_ptr_1<int32_t> _ptr__703_ri32(_703_ri32 ? _703_ri32->raw() : nullptr,_703_ri32 ? _703_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _704_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
          _checked_ptr_1<int64_t> _ptr__704_ri64(_704_ri64 ? _704_ri64->raw() : nullptr,_704_ri64 ? _704_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _705_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
          _checked_ptr_1<double> _ptr__705_rf64(_705_rf64 ? _705_rf64->raw() : nullptr,_705_rf64 ? _705_rf64->size(0) : 0);
          int32_t _706_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
          int32_t _707_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
          int32_t _708_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
          int32_t _709_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
          int32_t _710_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
          bool _711_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
          int32_t _712_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
          int32_t _713_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
          int32_t _714_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
          int32_t _715_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
          int32_t _716_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
          int32_t _717_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
          std::vector<int32_t> _9214_;
          for (int32_t _719_i = (int)0, _9215_ = _706_nd; _719_i < _9215_ ; ++_719_i)
          {
            _9214_.push_back(_ptr__703_ri32[safe_add( _707_shape_base,_719_i )]);
          }
          auto _9216_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9214_.size()),_9214_.begin(),_9214_.end()));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _718_shape = _9216_;
          _checked_ptr_1<int32_t> _ptr__718_shape(_718_shape ? _718_shape->raw() : nullptr,_718_shape ? _718_shape->size(0) : 0);
          putfrows(_689_afeidxs,_698_afeptr,rs,_708_nelem,_709_nnz,_712_ptr_base,_713_nidxs_base,_714_cof_base);
          if ((mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->dom == ::mosek::fusion::DJCDomainType::InRange))
          {
            {
              std::shared_ptr< monty::ndarray< double,1 > > _720_lb = mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->b;
              _checked_ptr_1<double> _ptr__720_lb(_720_lb ? _720_lb->raw() : nullptr,_720_lb ? _720_lb->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _721_ub = mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->par;
              _checked_ptr_1<double> _ptr__721_ub(_721_ub ? _721_ub->raw() : nullptr,_721_ub ? _721_ub->size(0) : 0);
              int32_t _9217_ = (int)0;
              int32_t _9218_ = _708_nelem;
              for (int32_t _722_i = _9217_; _722_i < _9218_; ++_722_i)
              {
                {
                  _ptr__690_accafeidxs[safe_add( _697_afetgtptr,_722_i )] = _ptr__689_afeidxs[safe_add( _698_afeptr,_722_i )];
                  _ptr__690_accafeidxs[safe_add( safe_add( _697_afetgtptr,_708_nelem ),_722_i )] = _ptr__689_afeidxs[safe_add( _698_afeptr,_722_i )];
                  _ptr__691_accb[safe_add( _697_afetgtptr,_722_i )] = _ptr__720_lb[_722_i];
                  _ptr__691_accb[safe_add( safe_add( _697_afetgtptr,_708_nelem ),_722_i )] = _ptr__721_ub[_722_i];
                }
              }
              _ptr__692_domidxs[_696_acctermptr] = task_append_domain_rpos(_708_nelem);
              _ptr__692_domidxs[safe_add( _696_acctermptr,(int)1 )] = task_append_domain_rneg(_708_nelem);
              _ptr__693_termsize[_699_term_i] += (int)2;
              _696_acctermptr += (int)2;
              _697_afetgtptr += safe_mul( _708_nelem,(int)2 );
            }
          }
          else if(((mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->dom == ::mosek::fusion::DJCDomainType::EqualTo) || ((mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->dom == ::mosek::fusion::DJCDomainType::LessThan) || ((mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->dom == ::mosek::fusion::DJCDomainType::GreaterThan) || (mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->dom == ::mosek::fusion::DJCDomainType::IsFree)))))
          {
            {
              std::shared_ptr< monty::ndarray< double,1 > > _723_b = mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->b;
              _checked_ptr_1<double> _ptr__723_b(_723_b ? _723_b->raw() : nullptr,_723_b ? _723_b->size(0) : 0);
              int32_t _9219_ = (int)0;
              int32_t _9220_ = _708_nelem;
              for (int32_t _724_i = _9219_; _724_i < _9220_; ++_724_i)
              {
                {
                  _ptr__690_accafeidxs[safe_add( _697_afetgtptr,_724_i )] = _ptr__689_afeidxs[safe_add( _698_afeptr,_724_i )];
                  _ptr__691_accb[safe_add( _697_afetgtptr,_724_i )] = _ptr__723_b[_724_i];
                }
              }
              if ((mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->dom == ::mosek::fusion::DJCDomainType::EqualTo))
              {
                {
                  _ptr__692_domidxs[_696_acctermptr] = task_append_domain_rzero(_708_nelem);
                }
              }
              else if((mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->dom == ::mosek::fusion::DJCDomainType::LessThan))
              {
                {
                  _ptr__692_domidxs[_696_acctermptr] = task_append_domain_rneg(_708_nelem);
                }
              }
              else if((mosek::fusion::p_DJCDomain::_get_impl(_701_dom)->dom == ::mosek::fusion::DJCDomainType::GreaterThan))
              {
                {
                  _ptr__692_domidxs[_696_acctermptr] = task_append_domain_rpos(_708_nelem);
                }
              }
              else
              {
                {
                  _ptr__692_domidxs[_696_acctermptr] = task_append_domain_r(_708_nelem);
                }
              }
              _ptr__693_termsize[_699_term_i] += (int)1;
              _696_acctermptr += (int)1;
              _697_afetgtptr += _708_nelem;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Not implemented: Non-linear conic DJC constraints"));
            }
          }
          _698_afeptr += _708_nelem;
          if ((_710_ncodeatom > (int)0))
          {
            {
              afe_blocks->replace_row_code(rs,_689_afeidxs,_712_ptr_base,_713_nidxs_base,_716_codeptr,_715_code,_717_cconst);
            }
          }
          {}
          ++ _695_term_index;
        }
      }
    }
  }
  int64_t _725_djcidx = task_append_djc((int64_t)((int)1));
  std::vector<int64_t> _9221_;
  for (int32_t _726_i = (int)0, _9222_ = (int)((_690_accafeidxs)->size(0)); _726_i < _9222_ ; ++_726_i)
  {
    _9221_.push_back(_ptr__690_accafeidxs[_726_i]);
  }
  auto _9223_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9221_.size()),_9221_.begin(),_9221_.end()));
  task_putdjcslice(_725_djcidx,safe_add( _725_djcidx,(int)1 ),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >{(int64_t)((int64_t)_683_n)}),_693_termsize,_692_domidxs,_9223_,_691_accb);
  if (((int)((_681_name).size()) > (int)0))
  {
    {
      task_djc_name(_725_djcidx,::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_681_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
    }
  }
  {}
  return ::mosek::fusion::p_Disjunction::_new_Disjunction(_725_djcidx);
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4794:6-92
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _727_terms) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_727_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _727_terms) { return __mosek_2fusion_2Model__disjunction(_727_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _727_terms)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),_727_terms);
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4792:6-115
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _728_t1,monty::rc_ptr< ::mosek::fusion::Term > _729_t2,monty::rc_ptr< ::mosek::fusion::Term > _730_t3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_728_t1,_729_t2,_730_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::Term > _728_t1,monty::rc_ptr< ::mosek::fusion::Term > _729_t2,monty::rc_ptr< ::mosek::fusion::Term > _730_t3) { return __mosek_2fusion_2Model__disjunction(_728_t1,_729_t2,_730_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _728_t1,monty::rc_ptr< ::mosek::fusion::Term > _729_t2,monty::rc_ptr< ::mosek::fusion::Term > _730_t3)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_728_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_729_t2.get()),::monty::rc_ptr<::mosek::fusion::Term>(_730_t3.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4791:6-103
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _731_t1,monty::rc_ptr< ::mosek::fusion::Term > _732_t2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_731_t1,_732_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::Term > _731_t1,monty::rc_ptr< ::mosek::fusion::Term > _732_t2) { return __mosek_2fusion_2Model__disjunction(_731_t1,_732_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _731_t1,monty::rc_ptr< ::mosek::fusion::Term > _732_t2)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_731_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_732_t2.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4790:6-91
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _733_t1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_733_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::Term > _733_t1) { return __mosek_2fusion_2Model__disjunction(_733_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _733_t1)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_733_t1.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4788:6-129
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _734_name,monty::rc_ptr< ::mosek::fusion::Term > _735_t1,monty::rc_ptr< ::mosek::fusion::Term > _736_t2,monty::rc_ptr< ::mosek::fusion::Term > _737_t3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_734_name,_735_t1,_736_t2,_737_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _734_name,monty::rc_ptr< ::mosek::fusion::Term > _735_t1,monty::rc_ptr< ::mosek::fusion::Term > _736_t2,monty::rc_ptr< ::mosek::fusion::Term > _737_t3) { return __mosek_2fusion_2Model__disjunction(_734_name,_735_t1,_736_t2,_737_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _734_name,monty::rc_ptr< ::mosek::fusion::Term > _735_t1,monty::rc_ptr< ::mosek::fusion::Term > _736_t2,monty::rc_ptr< ::mosek::fusion::Term > _737_t3)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_734_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_735_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_736_t2.get()),::monty::rc_ptr<::mosek::fusion::Term>(_737_t3.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4787:6-117
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _738_name,monty::rc_ptr< ::mosek::fusion::Term > _739_t1,monty::rc_ptr< ::mosek::fusion::Term > _740_t2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_738_name,_739_t1,_740_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _738_name,monty::rc_ptr< ::mosek::fusion::Term > _739_t1,monty::rc_ptr< ::mosek::fusion::Term > _740_t2) { return __mosek_2fusion_2Model__disjunction(_738_name,_739_t1,_740_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _738_name,monty::rc_ptr< ::mosek::fusion::Term > _739_t1,monty::rc_ptr< ::mosek::fusion::Term > _740_t2)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_738_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_739_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_740_t2.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4786:6-105
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _741_name,monty::rc_ptr< ::mosek::fusion::Term > _742_t1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_741_name,_742_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _741_name,monty::rc_ptr< ::mosek::fusion::Term > _742_t1) { return __mosek_2fusion_2Model__disjunction(_741_name,_742_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _741_name,monty::rc_ptr< ::mosek::fusion::Term > _742_t1)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_741_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_742_t1.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.formstConstr
// Method mosek.fusion.Model.formstConstr @ src/fusion/Model.mbi:4778:6-4781:7
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _743_sb,std::shared_ptr< monty::ndarray< int32_t,1 > > _744_shape,std::shared_ptr< monty::ndarray< int32_t,1 > > _745_idxs)
{
  _checked_ptr_1<int32_t> _ptr__744_shape(_744_shape ? _744_shape->raw() : nullptr, _744_shape ? _744_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__745_idxs(_745_idxs ? _745_idxs->raw() : nullptr, _745_idxs ? _745_idxs->size(0) : 0);
  return _743_sb;
}
// End mosek.fusion.Model.formstConstr

// Begin mosek.fusion.Model.acon_release
// Method mosek.fusion.Model.acon_release @ src/fusion/Model.mbi:4668:6-4687:7
void mosek::fusion::p_Model::acon_release(int32_t _746_id)
{
  int32_t _747_num = acon_block_map->blocksize(_746_id);
  if ((_747_num >= (int)0))
  {
    {
      int32_t _748_numcone = acc_block_map->blocksize(((*acon_acc)(_746_id)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _749_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_748_numcone)));
      _checked_ptr_1<int32_t> _ptr__749_accidxs(_749_accidxs ? _749_accidxs->raw() : nullptr,_749_accidxs ? _749_accidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _750_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_747_num)));
      _checked_ptr_1<int32_t> _ptr__750_afeidxs(_750_afeidxs ? _750_afeidxs->raw() : nullptr,_750_afeidxs ? _750_afeidxs->size(0) : 0);
      acc_block_map->get(((*acon_acc)(_746_id)),_749_accidxs,(int)0);
      acc_block_map->free(((*acon_acc)(_746_id)));
      afe_blocks->get(((*acon_afe)(_746_id)),_750_afeidxs,(int)0);
      afe_release(((*acon_afe)(_746_id)));
      acon_block_map->free(_746_id);
      std::vector<int64_t> _9224_;
      for (int32_t _751_i = (int)0, _9225_ = _747_num; _751_i < _9225_ ; ++_751_i)
      {
        _9224_.push_back(_ptr__750_afeidxs[_751_i]);
      }
      auto _9226_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9224_.size()),_9224_.begin(),_9224_.end()));
      task_clearafelist(_9226_);
      std::vector<int64_t> _9227_;
      for (int32_t _752_i = (int)0, _9228_ = _748_numcone; _752_i < _9228_ ; ++_752_i)
      {
        _9227_.push_back(_ptr__749_accidxs[_752_i]);
      }
      auto _9229_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9227_.size()),_9227_.begin(),_9227_.end()));
      std::vector<int64_t> _9230_;
      for (int32_t _753_i = (int)0, _9231_ = _748_numcone; _753_i < _9231_ ; ++_753_i)
      {
        _9230_.push_back((int)0);
      }
      auto _9232_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9230_.size()),_9230_.begin(),_9230_.end()));
      task_putacclist(_9229_,_9232_,std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))));
    }
  }
  {}
}
// End mosek.fusion.Model.acon_release

// Begin mosek.fusion.Model.acon_allocate
// Method mosek.fusion.Model.acon_allocate @ src/fusion/Model.mbi:4587:6-4666:7
int32_t mosek::fusion::p_Model::acon_allocate(int64_t _754_domidx,int32_t _755_conesize,int32_t _756_numcone,std::shared_ptr< monty::ndarray< double,1 > > _757_g,std::shared_ptr< monty::ndarray< int32_t,1 > > _758_afeidxs,std::shared_ptr< monty::ndarray< int32_t,1 > > _759_accidxs)
{
  _checked_ptr_1<double> _ptr__757_g(_757_g ? _757_g->raw() : nullptr, _757_g ? _757_g->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__758_afeidxs(_758_afeidxs ? _758_afeidxs->raw() : nullptr, _758_afeidxs ? _758_afeidxs->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__759_accidxs(_759_accidxs ? _759_accidxs->raw() : nullptr, _759_accidxs ? _759_accidxs->size(0) : 0);
  int32_t _760_n = safe_mul( _756_numcone,_755_conesize );
  std::shared_ptr< monty::ndarray< int32_t,1 > > _761_aconidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_760_n)));
  _checked_ptr_1<int32_t> _ptr__761_aconidxs(_761_aconidxs ? _761_aconidxs->raw() : nullptr,_761_aconidxs ? _761_aconidxs->size(0) : 0);
  int32_t _762_aconid = acon_block_map->alloc(_760_n);
  int32_t _763_accid = acc_block_map->alloc(_756_numcone);
  int32_t _764_afeid = afe_allocate(_758_afeidxs);
  acon_block_map->get(_762_aconid,_761_aconidxs,(int)0);
  acc_block_map->get(_763_accid,_759_accidxs,(int)0);
  int32_t _765_acon_block_cap = acon_block_map->block_capacity();
  int32_t _766_acon_cap = acon_block_map->capacity();
  if ((_765_acon_block_cap > (int)((acon_acc)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _767_tmpacc = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_765_acon_block_cap)));
      _checked_ptr_1<int32_t> _ptr__767_tmpacc(_767_tmpacc ? _767_tmpacc->raw() : nullptr,_767_tmpacc ? _767_tmpacc->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _768_tmpafe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_765_acon_block_cap)));
      _checked_ptr_1<int32_t> _ptr__768_tmpafe(_768_tmpafe ? _768_tmpafe->raw() : nullptr,_768_tmpafe ? _768_tmpafe->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(acon_acc,(int)0,_767_tmpacc,(int)0,(int)((acon_acc)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_afe,(int)0,_768_tmpafe,(int)0,(int)((acon_afe)->size(0)));
      acon_acc = _767_tmpacc;
      acon_afe = _768_tmpafe;
    }
  }
  {}
  ((*acon_acc)(_762_aconid)) = _763_accid;
  ((*acon_afe)(_762_aconid)) = _764_afeid;
  if ((_762_aconid >= (int)((acons)->size(0))))
  {
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9233_;
      for (int32_t _770_i = (int)0, _9234_ = safe_mul( (int)((acons)->size(0)),(int)2 ); _770_i < _9234_ ; ++_770_i)
      {
        _9233_.push_back(nullptr);
      }
      auto _9235_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9233_.size()),_9233_.begin(),_9233_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _769_newacons = _9235_;
      int32_t _9236_ = (int)0;
      int32_t _9237_ = (int)((acons)->size(0));
      for (int32_t _771_i = _9236_; _771_i < _9237_; ++_771_i)
      {
        {
          ((*_769_newacons)(_771_i)) = ((*acons)(_771_i));
        }
      }
      acons = _769_newacons;
    }
  }
  {}
  if ((_766_acon_cap > (int)((acon_elm_accid)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _772_tmp_accid = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_766_acon_cap)));
      _checked_ptr_1<int32_t> _ptr__772_tmp_accid(_772_tmp_accid ? _772_tmp_accid->raw() : nullptr,_772_tmp_accid ? _772_tmp_accid->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _773_tmp_scale = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_766_acon_cap)));
      _checked_ptr_1<double> _ptr__773_tmp_scale(_773_tmp_scale ? _773_tmp_scale->raw() : nullptr,_773_tmp_scale ? _773_tmp_scale->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _774_tmp_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_766_acon_cap)));
      _checked_ptr_1<int32_t> _ptr__774_tmp_ofs(_774_tmp_ofs ? _774_tmp_ofs->raw() : nullptr,_774_tmp_ofs ? _774_tmp_ofs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _775_tmp_afe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_766_acon_cap)));
      _checked_ptr_1<int32_t> _ptr__775_tmp_afe(_775_tmp_afe ? _775_tmp_afe->raw() : nullptr,_775_tmp_afe ? _775_tmp_afe->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_accid,(int)0,_772_tmp_accid,(int)0,(int)((acon_elm_accid)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_scale,(int)0,_773_tmp_scale,(int)0,(int)((acon_elm_scale)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_ofs,(int)0,_774_tmp_ofs,(int)0,(int)((acon_elm_ofs)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_afe,(int)0,_775_tmp_afe,(int)0,(int)((acon_elm_afe)->size(0)));
      acon_elm_accid = _772_tmp_accid;
      acon_elm_ofs = _774_tmp_ofs;
      acon_elm_afe = _775_tmp_afe;
      acon_elm_scale = _773_tmp_scale;
    }
  }
  {}
  int32_t _776_maxaccidx = (int)0;
  int32_t _9238_ = (int)0;
  int32_t _9239_ = (int)((_759_accidxs)->size(0));
  for (int32_t _777_i = _9238_; _777_i < _9239_; ++_777_i)
  {
    {
      if ((_ptr__759_accidxs[_777_i] > _776_maxaccidx))
      {
        {
          _776_maxaccidx = _ptr__759_accidxs[_777_i];
        }
      }
      {}
    }
  }
  _776_maxaccidx += (int)1;
  int32_t _778_nacc = task_numacc();
  if ((_778_nacc < _776_maxaccidx))
  {
    {
      task_append_accs((int64_t)0,(_776_maxaccidx - _778_nacc),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))));
    }
  }
  {}
  std::vector<int64_t> _9240_;
  for (int32_t _779_i = (int)0, _9241_ = (int)((_759_accidxs)->size(0)); _779_i < _9241_ ; ++_779_i)
  {
    _9240_.push_back(_ptr__759_accidxs[_779_i]);
  }
  auto _9242_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9240_.size()),_9240_.begin(),_9240_.end()));
  std::vector<int64_t> _9243_;
  for (int32_t _780_i = (int)0, _9244_ = (int)((_759_accidxs)->size(0)); _780_i < _9244_ ; ++_780_i)
  {
    _9243_.push_back(_754_domidx);
  }
  auto _9245_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9243_.size()),_9243_.begin(),_9243_.end()));
  std::vector<int64_t> _9246_;
  for (int32_t _781_i = (int)0, _9247_ = (int)((_758_afeidxs)->size(0)); _781_i < _9247_ ; ++_781_i)
  {
    _9246_.push_back(_ptr__758_afeidxs[_781_i]);
  }
  auto _9248_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9246_.size()),_9246_.begin(),_9246_.end()));
  task_putacclist(_9242_,_9245_,_9248_,_757_g);
  {
    int32_t _782_k = (int)0;
    int32_t _9249_ = (int)0;
    int32_t _9250_ = _756_numcone;
    for (int32_t _783_i = _9249_; _783_i < _9250_; ++_783_i)
    {
      {
        int32_t _9251_ = (int)0;
        int32_t _9252_ = _755_conesize;
        for (int32_t _784_j = _9251_; _784_j < _9252_; ++_784_j)
        {
          {
            ((*acon_elm_accid)(_ptr__761_aconidxs[_782_k])) = _ptr__759_accidxs[_783_i];
            ((*acon_elm_ofs)(_ptr__761_aconidxs[_782_k])) = _784_j;
            ((*acon_elm_afe)(_ptr__761_aconidxs[_782_k])) = _ptr__758_afeidxs[_782_k];
            ((*acon_elm_scale)(_ptr__761_aconidxs[_782_k])) = 1.0;
            ++ _782_k;
          }
        }
      }
    }
  }
  return _762_aconid;
}
// End mosek.fusion.Model.acon_allocate

// Begin mosek.fusion.Model.afe_release
// Method mosek.fusion.Model.afe_release @ src/fusion/Model.mbi:4579:6-4585:7
void mosek::fusion::p_Model::afe_release(int32_t _785_id)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _786_nidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(afe_blocks->blocksize(_785_id))));
  _checked_ptr_1<int32_t> _ptr__786_nidxs(_786_nidxs ? _786_nidxs->raw() : nullptr,_786_nidxs ? _786_nidxs->size(0) : 0);
  afe_blocks->release(_785_id,_786_nidxs);
  std::vector<int64_t> _9253_;
  for (int32_t _787_i = (int)0, _9254_ = (int)((_786_nidxs)->size(0)); _787_i < _9254_ ; ++_787_i)
  {
    _9253_.push_back(_ptr__786_nidxs[_787_i]);
  }
  auto _9255_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9253_.size()),_9253_.begin(),_9253_.end()));
  task_clearafelist(_9255_);
}
// End mosek.fusion.Model.afe_release

// Begin mosek.fusion.Model.afe_allocate
// Method mosek.fusion.Model.afe_allocate @ src/fusion/Model.mbi:4564:6-4577:7
int32_t mosek::fusion::p_Model::afe_allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _788_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__788_nativeidxs(_788_nativeidxs ? _788_nativeidxs->raw() : nullptr, _788_nativeidxs ? _788_nativeidxs->size(0) : 0);
  int32_t _789_afeid = afe_blocks->allocate(_788_nativeidxs);
  if (((int)((_788_nativeidxs)->size(0)) > (int)0))
  {
    {
      int32_t _790_tasknum = task_numafe();
      int32_t _791_maxidx = _ptr__788_nativeidxs[(int)0];
      int32_t _9256_ = (int)1;
      int32_t _9257_ = (int)((_788_nativeidxs)->size(0));
      for (int32_t _792_i = _9256_; _792_i < _9257_; ++_792_i)
      {
        {
          if ((_ptr__788_nativeidxs[_792_i] > _791_maxidx))
          {
            {
              _791_maxidx = _ptr__788_nativeidxs[_792_i];
            }
          }
          {}
        }
      }
      if ((safe_add( _791_maxidx,(int)1 ) > _790_tasknum))
      {
        {
          int32_t _793_n = (safe_add( _791_maxidx,(int)1 ) - _790_tasknum);
          task_append_afes((int64_t)(_793_n));
          task_numaferow += _793_n;
        }
      }
      {}
    }
  }
  {}
  return _789_afeid;
}
// End mosek.fusion.Model.afe_allocate

// Begin mosek.fusion.Model.con_release
// Method mosek.fusion.Model.con_release @ src/fusion/Model.mbi:4549:6-4559:7
void mosek::fusion::p_Model::con_release(int32_t _794_id)
{
  int32_t _795_num = con_blocks->blocksize(_794_id);
  if ((_795_num >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _796_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_795_num)));
      _checked_ptr_1<int32_t> _ptr__796_nativeidxs(_796_nativeidxs ? _796_nativeidxs->raw() : nullptr,_796_nativeidxs ? _796_nativeidxs->size(0) : 0);
      con_blocks->release(_794_id,_796_nativeidxs);
      ((*cons)(_794_id)) = nullptr;
      task_con_putboundlist_fr(_796_nativeidxs);
    }
  }
  {}
}
// End mosek.fusion.Model.con_release

// Begin mosek.fusion.Model.con_allocate
// Method mosek.fusion.Model.con_allocate @ src/fusion/Model.mbi:4529:6-4547:7
int32_t mosek::fusion::p_Model::con_allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _797_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__797_nativeidxs(_797_nativeidxs ? _797_nativeidxs->raw() : nullptr, _797_nativeidxs ? _797_nativeidxs->size(0) : 0);
  int32_t _798_conid = con_blocks->allocate(_797_nativeidxs);
  if (((int)((_797_nativeidxs)->size(0)) > (int)0))
  {
    {
      int32_t _799_maxidx = _ptr__797_nativeidxs[(int)0];
      int32_t _9258_ = (int)1;
      int32_t _9259_ = (int)((_797_nativeidxs)->size(0));
      for (int32_t _800_i = _9258_; _800_i < _9259_; ++_800_i)
      {
        {
          if ((_ptr__797_nativeidxs[_800_i] > _799_maxidx))
          {
            {
              _799_maxidx = _ptr__797_nativeidxs[_800_i];
            }
          }
          {}
        }
      }
      if ((safe_add( _799_maxidx,(int)1 ) > num_task_con))
      {
        {
          int32_t _801_n = (safe_add( _799_maxidx,(int)1 ) - num_task_con);
          task_append_con(_801_n);
          num_task_con += _801_n;
        }
      }
      {}
    }
  }
  {}
  if ((_798_conid >= (int)((cons)->size(0))))
  {
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9260_;
      for (int32_t _803_i = (int)0, _9261_ = safe_mul( (int)((cons)->size(0)),(int)2 ); _803_i < _9261_ ; ++_803_i)
      {
        _9260_.push_back(nullptr);
      }
      auto _9262_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9260_.size()),_9260_.begin(),_9260_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _802_newcons = _9262_;
      int32_t _9263_ = (int)0;
      int32_t _9264_ = (int)((cons)->size(0));
      for (int32_t _804_i = _9263_; _804_i < _9264_; ++_804_i)
      {
        {
          ((*_802_newcons)(_804_i)) = ((*cons)(_804_i));
        }
      }
      cons = _802_newcons;
    }
  }
  {}
  return _798_conid;
}
// End mosek.fusion.Model.con_allocate

// Begin mosek.fusion.Model.barvar_alloc
// Method mosek.fusion.Model.barvar_alloc @ src/fusion/Model.mbi:4422:6-4523:7
int32_t mosek::fusion::p_Model::barvar_alloc(int32_t _805_conedim,int32_t _806_numcone,std::shared_ptr< monty::ndarray< int32_t,1 > > _807_barvaridxs,std::shared_ptr< monty::ndarray< int64_t,1 > > _808_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__807_barvaridxs(_807_barvaridxs ? _807_barvaridxs->raw() : nullptr, _807_barvaridxs ? _807_barvaridxs->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__808_nativeidxs(_808_nativeidxs ? _808_nativeidxs->raw() : nullptr, _808_nativeidxs ? _808_nativeidxs->size(0) : 0);
  int32_t _809_barvarid = barvar_num;
  ++ barvar_num;
  int32_t _810_conesize = (safe_mul( _805_conedim,safe_add( _805_conedim,(int)1 ) ) / (int)2);
  int32_t _811_domsize = safe_mul( _810_conesize,_806_numcone );
  int32_t _812_block_num = ((*barvar_block_ptr)(_809_barvarid));
  int32_t _813_block_cap = (int)((barvar_block_dim)->size(0));
  int32_t _814_block_elm_num = ((*barvar_block_elm_ptr)(_809_barvarid));
  int32_t _815_block_elm_cap = (int)((barvar_block_elm_barj)->size(0));
  if ((_813_block_cap < safe_add( _812_block_num,(int)1 )))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _816_new_barvar_block_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ))));
      _checked_ptr_1<int32_t> _ptr__816_new_barvar_block_dim(_816_new_barvar_block_dim ? _816_new_barvar_block_dim->raw() : nullptr,_816_new_barvar_block_dim ? _816_new_barvar_block_dim->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _817_new_barvar_block_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ),(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__817_new_barvar_block_ptr(_817_new_barvar_block_ptr ? _817_new_barvar_block_ptr->raw() : nullptr,_817_new_barvar_block_ptr ? _817_new_barvar_block_ptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _818_new_barvar_block_elm_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ),(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__818_new_barvar_block_elm_ptr(_818_new_barvar_block_elm_ptr ? _818_new_barvar_block_elm_ptr->raw() : nullptr,_818_new_barvar_block_elm_ptr ? _818_new_barvar_block_elm_ptr->size(0) : 0);
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9265_;
      for (int32_t _820_i = (int)0, _9266_ = safe_add( safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ),(int)1 ); _820_i < _9266_ ; ++_820_i)
      {
        _9265_.push_back(nullptr);
      }
      auto _9267_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9265_.size()),_9265_.begin(),_9265_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _819_new_barvars = _9267_;
      int32_t _9268_ = (int)0;
      int32_t _9269_ = (int)((barvars)->size(0));
      for (int32_t _821_i = _9268_; _821_i < _9269_; ++_821_i)
      {
        {
          ((*_819_new_barvars)(_821_i)) = ((*barvars)(_821_i));
        }
      }
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_dim,(int)0,_816_new_barvar_block_dim,(int)0,(int)((barvar_block_dim)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_ptr,(int)0,_817_new_barvar_block_ptr,(int)0,(int)((barvar_block_ptr)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_ptr,(int)0,_818_new_barvar_block_elm_ptr,(int)0,(int)((barvar_block_elm_ptr)->size(0)));
      barvar_block_dim = _816_new_barvar_block_dim;
      barvar_block_ptr = _817_new_barvar_block_ptr;
      barvar_block_elm_ptr = _818_new_barvar_block_elm_ptr;
      barvars = _819_new_barvars;
    }
  }
  {}
  if ((_815_block_elm_cap < safe_add( _814_block_elm_num,_811_domsize )))
  {
    {
      int32_t _822_addnum = (safe_add( _815_block_elm_cap,_811_domsize ) - _814_block_elm_num);
      if ((_822_addnum < _815_block_elm_cap))
      {
        {
          _822_addnum = _815_block_elm_cap;
        }
      }
      {}
      int32_t _823_newlen = safe_add( _815_block_elm_cap,_822_addnum );
      std::shared_ptr< monty::ndarray< int32_t,1 > > _824_new_barvar_block_elm_barj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_823_newlen)));
      _checked_ptr_1<int32_t> _ptr__824_new_barvar_block_elm_barj(_824_new_barvar_block_elm_barj ? _824_new_barvar_block_elm_barj->raw() : nullptr,_824_new_barvar_block_elm_barj ? _824_new_barvar_block_elm_barj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _825_new_barvar_block_elm_i = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_823_newlen)));
      _checked_ptr_1<int32_t> _ptr__825_new_barvar_block_elm_i(_825_new_barvar_block_elm_i ? _825_new_barvar_block_elm_i->raw() : nullptr,_825_new_barvar_block_elm_i ? _825_new_barvar_block_elm_i->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _826_new_barvar_block_elm_j = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_823_newlen)));
      _checked_ptr_1<int32_t> _ptr__826_new_barvar_block_elm_j(_826_new_barvar_block_elm_j ? _826_new_barvar_block_elm_j->raw() : nullptr,_826_new_barvar_block_elm_j ? _826_new_barvar_block_elm_j->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_barj,(int)0,_824_new_barvar_block_elm_barj,(int)0,(int)((barvar_block_elm_barj)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_i,(int)0,_825_new_barvar_block_elm_i,(int)0,(int)((barvar_block_elm_i)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_j,(int)0,_826_new_barvar_block_elm_j,(int)0,(int)((barvar_block_elm_j)->size(0)));
      barvar_block_elm_barj = _824_new_barvar_block_elm_barj;
      barvar_block_elm_i = _825_new_barvar_block_elm_i;
      barvar_block_elm_j = _826_new_barvar_block_elm_j;
    }
  }
  {}
  int32_t _827_firstcone = task_numbarvar();
  int32_t _9270_ = (int)0;
  int32_t _9271_ = _806_numcone;
  for (int32_t _828_i = _9270_; _828_i < _9271_; ++_828_i)
  {
    {
      _ptr__807_barvaridxs[_828_i] = safe_add( _827_firstcone,_828_i );
    }
  }
  if ((safe_add( _827_firstcone,_806_numcone ) >= (int)((barvar_dim)->size(0))))
  {
    {
      int32_t _829_addnum = (safe_add( _827_firstcone,_806_numcone ) - (int)((barvar_dim)->size(0)));
      if ((_829_addnum < (int)((barvar_dim)->size(0))))
      {
        {
          _829_addnum = (int)((barvar_dim)->size(0));
        }
      }
      {}
      int32_t _830_newnum = safe_add( _829_addnum,(int)((barvar_dim)->size(0)) );
      std::shared_ptr< monty::ndarray< int32_t,1 > > _831_new_barvar_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_830_newnum)));
      _checked_ptr_1<int32_t> _ptr__831_new_barvar_dim(_831_new_barvar_dim ? _831_new_barvar_dim->raw() : nullptr,_831_new_barvar_dim ? _831_new_barvar_dim->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_dim,(int)0,_831_new_barvar_dim,(int)0,(int)((barvar_dim)->size(0)));
      barvar_dim = _831_new_barvar_dim;
    }
  }
  {}
  ((*barvar_block_dim)(_809_barvarid)) = _805_conedim;
  ((*barvar_block_ptr)(safe_add( _809_barvarid,(int)1 ))) = safe_add( ((*barvar_block_ptr)(_809_barvarid)),_806_numcone );
  ((*barvar_block_elm_ptr)(safe_add( _809_barvarid,(int)1 ))) = safe_add( ((*barvar_block_elm_ptr)(_809_barvarid)),_811_domsize );
  {
    int32_t _832_k = (int)0;
    int32_t _833_b = ((*barvar_block_elm_ptr)(_809_barvarid));
    int32_t _9272_ = (int)0;
    int32_t _9273_ = _806_numcone;
    for (int32_t _834_i = _9272_; _834_i < _9273_; ++_834_i)
    {
      {
        int32_t _9274_ = (int)0;
        int32_t _9275_ = _805_conedim;
        for (int32_t _835_j1 = _9274_; _835_j1 < _9275_; ++_835_j1)
        {
          {
            int32_t _9276_ = _835_j1;
            int32_t _9277_ = _805_conedim;
            for (int32_t _836_j0 = _9276_; _836_j0 < _9277_; ++_836_j0)
            {
              {
                ((*barvar_block_elm_barj)(safe_add( _833_b,_832_k ))) = safe_add( _827_firstcone,_834_i );
                ((*barvar_block_elm_i)(safe_add( _833_b,_832_k ))) = _836_j0;
                ((*barvar_block_elm_j)(safe_add( _833_b,_832_k ))) = _835_j1;
                _ptr__808_nativeidxs[_832_k] = safe_add( _833_b,_832_k );
                ++ _832_k;
              }
            }
          }
        }
      }
    }
    int32_t _9278_ = (int)0;
    int32_t _9279_ = _806_numcone;
    for (int32_t _837_i = _9278_; _837_i < _9279_; ++_837_i)
    {
      {
        ((*barvar_dim)(safe_add( _827_firstcone,_837_i ))) = _805_conedim;
      }
    }
  }
  int32_t _838_barvaridx = task_append_barvar(_805_conedim,_806_numcone);
  return _809_barvarid;
}
// End mosek.fusion.Model.barvar_alloc

// Begin mosek.fusion.Model.conicvar_alloc
// Method mosek.fusion.Model.conicvar_alloc @ src/fusion/Model.mbi:4389:6-4420:7
int32_t mosek::fusion::p_Model::conicvar_alloc(int64_t _839_domidx,int32_t _840_conesize,int32_t _841_numcone,std::shared_ptr< monty::ndarray< int32_t,1 > > _842_accidxs,std::shared_ptr< monty::ndarray< int32_t,1 > > _843_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__842_accidxs(_842_accidxs ? _842_accidxs->raw() : nullptr, _842_accidxs ? _842_accidxs->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__843_nativeidxs(_843_nativeidxs ? _843_nativeidxs->raw() : nullptr, _843_nativeidxs ? _843_nativeidxs->size(0) : 0);
  int32_t _844_n = safe_mul( _840_conesize,_841_numcone );
  int32_t _845_varid = linearvar_alloc(_844_n,_843_nativeidxs);
  std::shared_ptr< monty::ndarray< double,1 > > _846_g = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_844_n)));
  _checked_ptr_1<double> _ptr__846_g(_846_g ? _846_g->raw() : nullptr,_846_g ? _846_g->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _847_conelmidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_844_n)));
  _checked_ptr_1<int32_t> _ptr__847_conelmidx(_847_conelmidx ? _847_conelmidx->raw() : nullptr,_847_conelmidx ? _847_conelmidx->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _848_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_844_n)));
  _checked_ptr_1<int32_t> _ptr__848_afeidxs(_848_afeidxs ? _848_afeidxs->raw() : nullptr,_848_afeidxs ? _848_afeidxs->size(0) : 0);
  int32_t _849_conid = acon_allocate(_839_domidx,_840_conesize,_841_numcone,_846_g,_848_afeidxs,_842_accidxs);
  ((*var_block_acc_id)(_845_varid)) = _849_conid;
  int32_t _9280_ = (int)0;
  int32_t _9281_ = _844_n;
  for (int32_t _850_i = _9280_; _850_i < _9281_; ++_850_i)
  {
    {
      ((*var_elm_acc_idx)(_ptr__843_nativeidxs[_850_i])) = _ptr__842_accidxs[(_850_i / _840_conesize)];
      ((*var_elm_acc_ofs)(_ptr__843_nativeidxs[_850_i])) = (_850_i % _840_conesize);
    }
  }
  std::vector<int64_t> _9282_;
  for (int32_t _851_i = (int)0, _9283_ = (int)((_848_afeidxs)->size(0)); _851_i < _9283_ ; ++_851_i)
  {
    _9282_.push_back(_ptr__848_afeidxs[_851_i]);
  }
  auto _9284_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9282_.size()),_9282_.begin(),_9282_.end()));
  std::vector<int32_t> _9285_;
  for (int32_t _852_i = (int)0, _9286_ = safe_add( _844_n,(int)1 ); _852_i < _9286_ ; ++_852_i)
  {
    _9285_.push_back(_852_i);
  }
  auto _9287_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9285_.size()),_9285_.begin(),_9285_.end()));
  std::vector<double> _9288_;
  for (int32_t _853_i = (int)0, _9289_ = _844_n; _853_i < _9289_ ; ++_853_i)
  {
    _9288_.push_back(1.0);
  }
  auto _9290_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9288_.size()),_9288_.begin(),_9288_.end()));
  std::vector<double> _9291_;
  for (int32_t _854_i = (int)0, _9292_ = _844_n; _854_i < _9292_ ; ++_854_i)
  {
    _9291_.push_back(0.0);
  }
  auto _9293_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9291_.size()),_9291_.begin(),_9291_.end()));
  task_putafeflist(_9284_,_9287_,_843_nativeidxs,_9290_,_9293_);
  return _845_varid;
}
// End mosek.fusion.Model.conicvar_alloc

// Begin mosek.fusion.Model.linearvar_alloc
// Method mosek.fusion.Model.linearvar_alloc @ src/fusion/Model.mbi:4351:6-4387:7
int32_t mosek::fusion::p_Model::linearvar_alloc(int32_t _855_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _856_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__856_nativeidxs(_856_nativeidxs ? _856_nativeidxs->raw() : nullptr, _856_nativeidxs ? _856_nativeidxs->size(0) : 0);
  int32_t _857_varid = var_block_map->alloc(_855_n);
  int32_t _858_maxvaridx = safe_add( var_block_map->maxidx(_857_varid),(int)1 );
  int32_t _859_cap = var_block_map->capacity();
  int32_t _860_numblocks = var_block_map->block_capacity();
  var_block_map->get(_857_varid,_856_nativeidxs,(int)0);
  if ((task_numvar() < _858_maxvaridx))
  {
    {
      task_append_var((_858_maxvaridx - task_numvar()));
    }
  }
  {}
  if ((_857_varid >= (int)((vars)->size(0))))
  {
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9294_;
      for (int32_t _862_i = (int)0, _9295_ = safe_mul( (int)((vars)->size(0)),(int)2 ); _862_i < _9295_ ; ++_862_i)
      {
        _9294_.push_back(nullptr);
      }
      auto _9296_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9294_.size()),_9294_.begin(),_9294_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _861_newvars = _9296_;
      int32_t _9297_ = (int)0;
      int32_t _9298_ = (int)((vars)->size(0));
      for (int32_t _863_i = _9297_; _863_i < _9298_; ++_863_i)
      {
        {
          ((*_861_newvars)(_863_i)) = ((*vars)(_863_i));
        }
      }
      vars = _861_newvars;
    }
  }
  {}
  if ((_860_numblocks > (int)((var_block_acc_id)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _864_new_var_block_acc_id = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_860_numblocks)));
      _checked_ptr_1<int32_t> _ptr__864_new_var_block_acc_id(_864_new_var_block_acc_id ? _864_new_var_block_acc_id->raw() : nullptr,_864_new_var_block_acc_id ? _864_new_var_block_acc_id->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(var_block_acc_id,(int)0,_864_new_var_block_acc_id,(int)0,(int)((var_block_acc_id)->size(0)));
      var_block_acc_id = _864_new_var_block_acc_id;
    }
  }
  {}
  if ((_859_cap > (int)((var_elm_acc_idx)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _865_new_var_elm_acc_idx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_859_cap)));
      _checked_ptr_1<int32_t> _ptr__865_new_var_elm_acc_idx(_865_new_var_elm_acc_idx ? _865_new_var_elm_acc_idx->raw() : nullptr,_865_new_var_elm_acc_idx ? _865_new_var_elm_acc_idx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(var_elm_acc_idx,(int)0,_865_new_var_elm_acc_idx,(int)0,(int)((var_elm_acc_idx)->size(0)));
      var_elm_acc_idx = _865_new_var_elm_acc_idx;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _866_new_var_elm_acc_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_859_cap)));
      _checked_ptr_1<int32_t> _ptr__866_new_var_elm_acc_ofs(_866_new_var_elm_acc_ofs ? _866_new_var_elm_acc_ofs->raw() : nullptr,_866_new_var_elm_acc_ofs ? _866_new_var_elm_acc_ofs->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(var_elm_acc_ofs,(int)0,_866_new_var_elm_acc_ofs,(int)0,(int)((var_elm_acc_ofs)->size(0)));
      var_elm_acc_ofs = _866_new_var_elm_acc_ofs;
    }
  }
  {}
  ((*var_block_acc_id)(_857_varid)) = (-(int)1);
  int32_t _9299_ = (int)0;
  int32_t _9300_ = _855_n;
  for (int32_t _867_i = _9299_; _867_i < _9300_; ++_867_i)
  {
    {
      ((*var_elm_acc_idx)(_ptr__856_nativeidxs[_867_i])) = (-(int)1);
    }
  }
  return _857_varid;
}
// End mosek.fusion.Model.linearvar_alloc

// Begin mosek.fusion.Model.make_continuous
// Method mosek.fusion.Model.make_continuous @ src/fusion/Model.mbi:4337:6-4348:7
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< int64_t,1 > > _868_idxs)
{
  _checked_ptr_1<int64_t> _ptr__868_idxs(_868_idxs ? _868_idxs->raw() : nullptr, _868_idxs ? _868_idxs->size(0) : 0);
  int32_t _869_count = (int)0;
  int32_t _9301_ = (int)0;
  int32_t _9302_ = (int)((_868_idxs)->size(0));
  for (int32_t _870_i = _9301_; _870_i < _9302_; ++_870_i)
  {
    {
      if ((_ptr__868_idxs[_870_i] > (int)0))
      {
        {
          ++ _869_count;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _871_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_869_count)));
  _checked_ptr_1<int32_t> _ptr__871_nativeidxs(_871_nativeidxs ? _871_nativeidxs->raw() : nullptr,_871_nativeidxs ? _871_nativeidxs->size(0) : 0);
  int32_t _872_k = (int)0;
  int32_t _9303_ = (int)0;
  int32_t _9304_ = (int)((_868_idxs)->size(0));
  for (int32_t _873_i = _9303_; _873_i < _9304_; ++_873_i)
  {
    {
      if ((_ptr__868_idxs[_873_i] > (int)0))
      {
        {
          _ptr__871_nativeidxs[_872_k] = (int32_t)_ptr__868_idxs[_873_i];
          ++ _872_k;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_871_nativeidxs);
}
// End mosek.fusion.Model.make_continuous

// Begin mosek.fusion.Model.make_integer
// Method mosek.fusion.Model.make_integer @ src/fusion/Model.mbi:4325:6-4335:7
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< int64_t,1 > > _874_idxs)
{
  _checked_ptr_1<int64_t> _ptr__874_idxs(_874_idxs ? _874_idxs->raw() : nullptr, _874_idxs ? _874_idxs->size(0) : 0);
  int32_t _875_count = (int)0;
  int32_t _9305_ = (int)0;
  int32_t _9306_ = (int)((_874_idxs)->size(0));
  for (int32_t _876_i = _9305_; _876_i < _9306_; ++_876_i)
  {
    {
      if ((_ptr__874_idxs[_876_i] > (int)0))
      {
        {
          ++ _875_count;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _877_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_875_count)));
  _checked_ptr_1<int32_t> _ptr__877_nativeidxs(_877_nativeidxs ? _877_nativeidxs->raw() : nullptr,_877_nativeidxs ? _877_nativeidxs->size(0) : 0);
  int32_t _878_k = (int)0;
  int32_t _9307_ = (int)0;
  int32_t _9308_ = (int)((_874_idxs)->size(0));
  for (int32_t _879_i = _9307_; _879_i < _9308_; ++_879_i)
  {
    {
      if ((_ptr__874_idxs[_879_i] > (int)0))
      {
        {
          _ptr__877_nativeidxs[_878_k] = (int32_t)_ptr__874_idxs[_879_i];
          ++ _878_k;
        }
      }
      {}
    }
  }
  task_var_putintlist(_877_nativeidxs);
}
// End mosek.fusion.Model.make_integer

// Begin mosek.fusion.Model.putlicensewait
// Method mosek.fusion.Model.putlicensewait @ src/fusion/Model.mbi:4323:6-87
void mosek::fusion::Model::putlicensewait
  ( bool _880_wait) { mosek::fusion::p_Model::putlicensewait(_880_wait); }
void mosek::fusion::p_Model::putlicensewait(bool _880_wait)
{
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_880_wait);
}
// End mosek.fusion.Model.putlicensewait

// Begin mosek.fusion.Model.putlicensepath
// Method mosek.fusion.Model.putlicensepath @ src/fusion/Model.mbi:4320:6-90
void mosek::fusion::Model::putlicensepath
  ( const std::string & _881_licfile) { mosek::fusion::p_Model::putlicensepath(_881_licfile); }
void mosek::fusion::p_Model::putlicensepath(const std::string & _881_licfile)
{
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_881_licfile);
}
// End mosek.fusion.Model.putlicensepath

// Begin mosek.fusion.Model.putlicensecode
// Method mosek.fusion.Model.putlicensecode @ src/fusion/Model.mbi:4318:6-87
void mosek::fusion::Model::putlicensecode
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _882_code) { mosek::fusion::p_Model::putlicensecode(_882_code); }
void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int32_t,1 > > _882_code)
{
  _checked_ptr_1<int32_t> _ptr__882_code(_882_code ? _882_code->raw() : nullptr, _882_code ? _882_code->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_882_code);
}
// End mosek.fusion.Model.putlicensecode

// Begin mosek.fusion.Model.dispose
// Method mosek.fusion.Model.dispose @ src/fusion/Model.mbi:4305:6-4314:7
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }
void mosek::fusion::p_Model::dispose()
{
  int32_t _9309_ = (int)0;
  int32_t _9310_ = (int)((vars)->size(0));
  for (int32_t _883_i = _9309_; _883_i < _9310_; ++_883_i)
  {
    {
      ((*vars)(_883_i)) = nullptr;
    }
  }
  int32_t _9311_ = (int)0;
  int32_t _9312_ = (int)((cons)->size(0));
  for (int32_t _884_i = _9311_; _884_i < _9312_; ++_884_i)
  {
    {
      ((*cons)(_884_i)) = nullptr;
    }
  }
  int32_t _9313_ = (int)0;
  int32_t _9314_ = (int)((acons)->size(0));
  for (int32_t _885_i = _9313_; _885_i < _9314_; ++_885_i)
  {
    {
      ((*acons)(_885_i)) = nullptr;
    }
  }
  int32_t _9315_ = (int)0;
  int32_t _9316_ = (int)((barvars)->size(0));
  for (int32_t _886_i = _9315_; _886_i < _9316_; ++_886_i)
  {
    {
      ((*barvars)(_886_i)) = nullptr;
    }
  }
  if ((NULL != parameters.get()))
  {
    {
      int32_t _9317_ = (int)0;
      int32_t _9318_ = (int)((parameters)->size(0));
      for (int32_t _887_i = _9317_; _887_i < _9318_; ++_887_i)
      {
        {
          ((*parameters)(_887_i)) = nullptr;
        }
      }
    }
  }
  {}
  ::mosek::fusion::p_BaseModel::dispose();
}
// End mosek.fusion.Model.dispose

// Begin mosek.fusion.Model.getTask
// Method mosek.fusion.Model.getTask @ src/fusion/Model.mbi:4285:6-64
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask()
{
  return __mosek_2fusion_2BaseModel__task_get();
}
// End mosek.fusion.Model.getTask

// Begin mosek.fusion.Model.getConstraintDuals
// Method mosek.fusion.Model.getConstraintDuals @ src/fusion/Model.mbi:4259:6-4274:7
void mosek::fusion::Model :: getConstraintDuals(bool _888_lower,std::shared_ptr< monty::ndarray< int32_t,1 > > _889_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _890_res,int32_t _891_offset) { mosek::fusion::p_Model::_get_impl(this)->getConstraintDuals(_888_lower,_889_nativeidxs,_890_res,_891_offset); }
void mosek::fusion::p_Model::getConstraintDuals(bool _888_lower,std::shared_ptr< monty::ndarray< int32_t,1 > > _889_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _890_res,int32_t _891_offset)
{
  _checked_ptr_1<int32_t> _ptr__889_nativeidxs(_889_nativeidxs ? _889_nativeidxs->raw() : nullptr, _889_nativeidxs ? _889_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__890_res(_890_res ? _890_res->raw() : nullptr, _890_res ? _890_res->size(0) : 0);
  int32_t _892_n = (int)((_889_nativeidxs)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _893_slc = getSolution_slc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__893_slc(_893_slc ? _893_slc->raw() : nullptr,_893_slc ? _893_slc->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _894_suc = getSolution_suc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__894_suc(_894_suc ? _894_suc->raw() : nullptr,_894_suc ? _894_suc->size(0) : 0);
  int32_t _9319_ = (int)0;
  int32_t _9320_ = _892_n;
  for (int32_t _895_p = _9319_; _895_p < _9320_; ++_895_p)
  {
    {
      if ((_ptr__889_nativeidxs[_895_p] >= (int)0))
      {
        {
          if (_888_lower)
          {
            {
              _ptr__890_res[safe_add( _891_offset,_895_p )] = _ptr__893_slc[_ptr__889_nativeidxs[_895_p]];
            }
          }
          else
          {
            {
              _ptr__890_res[safe_add( _891_offset,_895_p )] = (-_ptr__894_suc[_ptr__889_nativeidxs[_895_p]]);
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::SolutionError(std::string ("Requested invalid solution item"));
        }
      }
    }
  }
}
// End mosek.fusion.Model.getConstraintDuals

// Begin mosek.fusion.Model.getConstraintValues
// Method mosek.fusion.Model.getConstraintValues @ src/fusion/Model.mbi:4225:6-4256:7
void mosek::fusion::Model :: getConstraintValues(bool _896_primal,std::shared_ptr< monty::ndarray< int32_t,1 > > _897_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _898_res,int32_t _899_offset) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_896_primal,_897_nativeidxs,_898_res,_899_offset); }
void mosek::fusion::p_Model::getConstraintValues(bool _896_primal,std::shared_ptr< monty::ndarray< int32_t,1 > > _897_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _898_res,int32_t _899_offset)
{
  _checked_ptr_1<int32_t> _ptr__897_nativeidxs(_897_nativeidxs ? _897_nativeidxs->raw() : nullptr, _897_nativeidxs ? _897_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__898_res(_898_res ? _898_res->raw() : nullptr, _898_res ? _898_res->size(0) : 0);
  int32_t _900_n = (int)((_897_nativeidxs)->size(0));
  if (_896_primal)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _901_xc = getSolution_xc(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__901_xc(_901_xc ? _901_xc->raw() : nullptr,_901_xc ? _901_xc->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _902_accx = getSolution_accx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__902_accx(_902_accx ? _902_accx->raw() : nullptr,_902_accx ? _902_accx->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _903_accptr = getSolution_accptr(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<int32_t> _ptr__903_accptr(_903_accptr ? _903_accptr->raw() : nullptr,_903_accptr ? _903_accptr->size(0) : 0);
      int32_t _9321_ = (int)0;
      int32_t _9322_ = _900_n;
      for (int32_t _904_p = _9321_; _904_p < _9322_; ++_904_p)
      {
        {
          if ((_ptr__897_nativeidxs[_904_p] >= (int)0))
          {
            {
              _ptr__898_res[safe_add( _899_offset,_904_p )] = _ptr__901_xc[_ptr__897_nativeidxs[_904_p]];
            }
          }
          else
          {
            {
              int32_t _905_i = (-safe_add( (int)1,_ptr__897_nativeidxs[_904_p] ));
              _ptr__898_res[safe_add( _899_offset,_904_p )] = (_ptr__902_accx[safe_add( _ptr__903_accptr[((*acon_elm_accid)(_905_i))],((*acon_elm_ofs)(_905_i)) )] * ((*acon_elm_scale)(_905_i)));
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _906_y = getSolution_y(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__906_y(_906_y ? _906_y->raw() : nullptr,_906_y ? _906_y->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _907_accy = getSolution_accy(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__907_accy(_907_accy ? _907_accy->raw() : nullptr,_907_accy ? _907_accy->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _908_accptr = getSolution_accptr(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<int32_t> _ptr__908_accptr(_908_accptr ? _908_accptr->raw() : nullptr,_908_accptr ? _908_accptr->size(0) : 0);
      int32_t _9323_ = (int)0;
      int32_t _9324_ = _900_n;
      for (int32_t _909_p = _9323_; _909_p < _9324_; ++_909_p)
      {
        {
          if ((_ptr__897_nativeidxs[_909_p] >= (int)0))
          {
            {
              _ptr__898_res[safe_add( _899_offset,_909_p )] = _ptr__906_y[_ptr__897_nativeidxs[_909_p]];
            }
          }
          else
          {
            {
              int32_t _910_i = (-safe_add( (int)1,_ptr__897_nativeidxs[_909_p] ));
              _ptr__898_res[safe_add( _899_offset,_909_p )] = (_ptr__907_accy[safe_add( _ptr__908_accptr[((*acon_elm_accid)(_910_i))],((*acon_elm_ofs)(_910_i)) )] * ((*acon_elm_scale)(_910_i)));
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.Model.getConstraintValues

// Begin mosek.fusion.Model.getVariableDuals
// Method mosek.fusion.Model.getVariableDuals @ src/fusion/Model.mbi:4195:6-4222:7
void mosek::fusion::Model :: getVariableDuals(bool _911_lower,std::shared_ptr< monty::ndarray< int64_t,1 > > _912_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _913_res,int32_t _914_offset) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_911_lower,_912_nativeidxs,_913_res,_914_offset); }
void mosek::fusion::p_Model::getVariableDuals(bool _911_lower,std::shared_ptr< monty::ndarray< int64_t,1 > > _912_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _913_res,int32_t _914_offset)
{
  _checked_ptr_1<int64_t> _ptr__912_nativeidxs(_912_nativeidxs ? _912_nativeidxs->raw() : nullptr, _912_nativeidxs ? _912_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__913_res(_913_res ? _913_res->raw() : nullptr, _913_res ? _913_res->size(0) : 0);
  int32_t _915_n = (int)((_912_nativeidxs)->size(0));
  if (_911_lower)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _916_xx = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__916_xx(_916_xx ? _916_xx->raw() : nullptr,_916_xx ? _916_xx->size(0) : 0);
      int32_t _9325_ = (int)0;
      int32_t _9326_ = _915_n;
      for (int32_t _917_p = _9325_; _917_p < _9326_; ++_917_p)
      {
        {
          if ((_ptr__912_nativeidxs[_917_p] > (int)0))
          {
            {
              _ptr__913_res[safe_add( _914_offset,_917_p )] = _ptr__916_xx[_ptr__912_nativeidxs[_917_p]];
            }
          }
          else
          {
            {
              _ptr__913_res[safe_add( _914_offset,_917_p )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _918_xx = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__918_xx(_918_xx ? _918_xx->raw() : nullptr,_918_xx ? _918_xx->size(0) : 0);
      int32_t _9327_ = (int)0;
      int32_t _9328_ = _915_n;
      for (int32_t _919_p = _9327_; _919_p < _9328_; ++_919_p)
      {
        {
          if ((_ptr__912_nativeidxs[_919_p] > (int)0))
          {
            {
              _ptr__913_res[safe_add( _914_offset,_919_p )] = (-_ptr__918_xx[_ptr__912_nativeidxs[_919_p]]);
            }
          }
          else
          {
            {
              _ptr__913_res[safe_add( _914_offset,_919_p )] = (int)0;
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.Model.getVariableDuals

// Begin mosek.fusion.Model.getVariableValues
// Method mosek.fusion.Model.getVariableValues @ src/fusion/Model.mbi:4154:6-4191:7
void mosek::fusion::Model :: getVariableValues(bool _920_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _921_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _922_res,int32_t _923_offset) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_920_primal,_921_nativeidxs,_922_res,_923_offset); }
void mosek::fusion::p_Model::getVariableValues(bool _920_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _921_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _922_res,int32_t _923_offset)
{
  _checked_ptr_1<int64_t> _ptr__921_nativeidxs(_921_nativeidxs ? _921_nativeidxs->raw() : nullptr, _921_nativeidxs ? _921_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__922_res(_922_res ? _922_res->raw() : nullptr, _922_res ? _922_res->size(0) : 0);
  int32_t _924_n = (int)((_921_nativeidxs)->size(0));
  barvar_num = task_numbarvar();
  if (_920_primal)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _925_xx = getSolution_xx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__925_xx(_925_xx ? _925_xx->raw() : nullptr,_925_xx ? _925_xx->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _9329_;
      bool _9330_ = (barvar_num > (int)0);
      if (_9330_)
      {
        _9329_ = getSolution_barx(::mosek::fusion::SolutionType::Default);
      }
      else
      {
        _9329_ = nullptr;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _926_barx = _9329_;
      _checked_ptr_1<double> _ptr__926_barx(_926_barx ? _926_barx->raw() : nullptr,_926_barx ? _926_barx->size(0) : 0);
      int32_t _9331_ = (int)0;
      int32_t _9332_ = _924_n;
      for (int32_t _927_p = _9331_; _927_p < _9332_; ++_927_p)
      {
        {
          if ((_ptr__921_nativeidxs[_927_p] > (int)0))
          {
            {
              _ptr__922_res[safe_add( _923_offset,_927_p )] = _ptr__925_xx[_ptr__921_nativeidxs[_927_p]];
            }
          }
          else if((_ptr__921_nativeidxs[_927_p] < (int)0))
          {
            {
              int64_t _928_idx = (-safe_add( _ptr__921_nativeidxs[_927_p],(int)1 ));
              _ptr__922_res[safe_add( _923_offset,_927_p )] = _ptr__926_barx[_928_idx];
            }
          }
          else
          {
            {
              _ptr__922_res[safe_add( _923_offset,_927_p )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _929_yx = getSolution_yx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__929_yx(_929_yx ? _929_yx->raw() : nullptr,_929_yx ? _929_yx->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _9333_;
      bool _9334_ = (barvar_num > (int)0);
      if (_9334_)
      {
        _9333_ = getSolution_bars(::mosek::fusion::SolutionType::Default);
      }
      else
      {
        _9333_ = nullptr;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _930_bars = _9333_;
      _checked_ptr_1<double> _ptr__930_bars(_930_bars ? _930_bars->raw() : nullptr,_930_bars ? _930_bars->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _931_accy = getSolution_accy(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__931_accy(_931_accy ? _931_accy->raw() : nullptr,_931_accy ? _931_accy->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _932_accptr = getSolution_accptr(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<int32_t> _ptr__932_accptr(_932_accptr ? _932_accptr->raw() : nullptr,_932_accptr ? _932_accptr->size(0) : 0);
      int32_t _9335_ = (int)0;
      int32_t _9336_ = _924_n;
      for (int32_t _933_p = _9335_; _933_p < _9336_; ++_933_p)
      {
        {
          if ((_ptr__921_nativeidxs[_933_p] < (int)0))
          {
            {
              int64_t _934_idx = (-safe_add( _ptr__921_nativeidxs[_933_p],(int)1 ));
              _ptr__922_res[safe_add( _923_offset,_933_p )] = _ptr__930_bars[_934_idx];
            }
          }
          else if((_ptr__921_nativeidxs[_933_p] == (int)0))
          {
            {
              _ptr__922_res[safe_add( _923_offset,_933_p )] = (int)0;
            }
          }
          else if((((*var_elm_acc_idx)(_ptr__921_nativeidxs[_933_p])) >= (int)0))
          {
            {
              _ptr__922_res[safe_add( _923_offset,_933_p )] = _ptr__931_accy[safe_add( _ptr__932_accptr[((*var_elm_acc_idx)(_ptr__921_nativeidxs[_933_p]))],((*var_elm_acc_ofs)(_ptr__921_nativeidxs[_933_p])) )];
            }
          }
          else
          {
            {
              _ptr__922_res[safe_add( _923_offset,_933_p )] = _ptr__929_yx[_ptr__921_nativeidxs[_933_p]];
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.Model.getVariableValues

// Begin mosek.fusion.Model.setVariableValues
// Method mosek.fusion.Model.setVariableValues @ src/fusion/Model.mbi:4131:6-4151:7
void mosek::fusion::Model :: setVariableValues(bool _935_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _936_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _937_values) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_935_primal,_936_nativeidxs,_937_values); }
void mosek::fusion::p_Model::setVariableValues(bool _935_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _936_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _937_values)
{
  _checked_ptr_1<int64_t> _ptr__936_nativeidxs(_936_nativeidxs ? _936_nativeidxs->raw() : nullptr, _936_nativeidxs ? _936_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__937_values(_937_values ? _937_values->raw() : nullptr, _937_values ? _937_values->size(0) : 0);
  if (_935_primal)
  {
    {
      int32_t _938_numnz = (int)0;
      int32_t _9337_ = (int)0;
      int32_t _9338_ = (int)((_936_nativeidxs)->size(0));
      for (int32_t _939_i = _9337_; _939_i < _9338_; ++_939_i)
      {
        {
          if ((_ptr__936_nativeidxs[_939_i] >= (int)0))
          {
            {
              ++ _938_numnz;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _940_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_938_numnz)));
      _checked_ptr_1<int32_t> _ptr__940_subj(_940_subj ? _940_subj->raw() : nullptr,_940_subj ? _940_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _941_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_938_numnz)));
      _checked_ptr_1<double> _ptr__941_val(_941_val ? _941_val->raw() : nullptr,_941_val ? _941_val->size(0) : 0);
      int32_t _942_k = (int)0;
      int32_t _9339_ = (int)0;
      int32_t _9340_ = (int)((_936_nativeidxs)->size(0));
      for (int32_t _943_i = _9339_; _943_i < _9340_; ++_943_i)
      {
        {
          if ((_ptr__936_nativeidxs[_943_i] >= (int)0))
          {
            {
              _ptr__940_subj[_942_k] = (int32_t)_ptr__936_nativeidxs[_943_i];
              _ptr__941_val[_942_k] = _ptr__937_values[_943_i];
              ++ _942_k;
            }
          }
          {}
        }
      }
      setSolution_xx(_940_subj,_941_val);
    }
  }
  else
  {
    {
    }
  }
}
// End mosek.fusion.Model.setVariableValues

// Begin mosek.fusion.Model.flushNames
// Method mosek.fusion.Model.flushNames @ src/fusion/Model.mbi:4109:6-4123:7
void mosek::fusion::Model :: flushNames() { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }
void mosek::fusion::p_Model::flushNames()
{
  int32_t _9341_ = (int)0;
  int32_t _9342_ = (int)((vars)->size(0));
  for (int32_t _944_i = _9341_; _944_i < _9342_; ++_944_i)
  {
    {
      if ((NULL != ((*vars)(_944_i)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_944_i)).get())->flushNames();
        }
      }
      {}
    }
  }
  int32_t _9343_ = (int)0;
  int32_t _9344_ = (int)((barvars)->size(0));
  for (int32_t _945_i = _9343_; _945_i < _9344_; ++_945_i)
  {
    {
      if ((NULL != ((*barvars)(_945_i)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*barvars)(_945_i)).get())->flushNames();
        }
      }
      {}
    }
  }
  int32_t _9345_ = (int)0;
  int32_t _9346_ = (int)((cons)->size(0));
  for (int32_t _946_i = _9345_; _946_i < _9346_; ++_946_i)
  {
    {
      if ((NULL != ((*cons)(_946_i)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_946_i)).get())->flushNames();
        }
      }
      {}
    }
  }
  int32_t _9347_ = (int)0;
  int32_t _9348_ = (int)((acons)->size(0));
  for (int32_t _947_i = _9347_; _947_i < _9348_; ++_947_i)
  {
    {
      if ((NULL != ((*acons)(_947_i)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*acons)(_947_i)).get())->flushNames();
        }
      }
      {}
    }
  }
}
// End mosek.fusion.Model.flushNames

// Begin mosek.fusion.Model.writeTaskNoFlush
// Method mosek.fusion.Model.writeTaskNoFlush @ src/fusion/Model.mbi:4100:6-4104:7
void mosek::fusion::Model :: writeTaskNoFlush(const std::string & _948_filename) { mosek::fusion::p_Model::_get_impl(this)->writeTaskNoFlush(_948_filename); }
void mosek::fusion::p_Model::writeTaskNoFlush(const std::string & _948_filename)
{
  _pubthis->flushNames();
  task_write(_948_filename);
}
// End mosek.fusion.Model.writeTaskNoFlush

// Begin mosek.fusion.Model.writeTaskStream
// Method mosek.fusion.Model.writeTaskStream @ src/fusion/Model.mbi:4092:6-4097:7
void mosek::fusion::Model :: writeTaskStream(const std::string & _949_ext,std::ostream& _950_stream) { mosek::fusion::p_Model::_get_impl(this)->writeTaskStream(_949_ext,_950_stream); }
void mosek::fusion::p_Model::writeTaskStream(const std::string & _949_ext,std::ostream& _950_stream)
{
  _pubthis->flushNames();
  flush_parameters();
  task_write_stream(_949_ext,_950_stream);
}
// End mosek.fusion.Model.writeTaskStream

// Begin mosek.fusion.Model.writeTask
// Method mosek.fusion.Model.writeTask @ src/fusion/Model.mbi:4058:6-4063:7
void mosek::fusion::Model :: writeTask(const std::string & _951_filename) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_951_filename); }
void mosek::fusion::p_Model::writeTask(const std::string & _951_filename)
{
  _pubthis->flushNames();
  flush_parameters();
  task_write(_951_filename);
}
// End mosek.fusion.Model.writeTask

// Begin mosek.fusion.Model.getSolverLIntInfo
// Method mosek.fusion.Model.getSolverLIntInfo @ src/fusion/Model.mbi:4050:6-93
int64_t mosek::fusion::Model :: getSolverLIntInfo(const std::string & _952_name) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_952_name); }
int64_t mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _952_name)
{
  return task_get_liinf(_952_name);
}
// End mosek.fusion.Model.getSolverLIntInfo

// Begin mosek.fusion.Model.getSolverIntInfo
// Method mosek.fusion.Model.getSolverIntInfo @ src/fusion/Model.mbi:4040:6-92
int32_t mosek::fusion::Model :: getSolverIntInfo(const std::string & _953_name) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_953_name); }
int32_t mosek::fusion::p_Model::getSolverIntInfo(const std::string & _953_name)
{
  return task_get_iinf(_953_name);
}
// End mosek.fusion.Model.getSolverIntInfo

// Begin mosek.fusion.Model.getSolverDoubleInfo
// Method mosek.fusion.Model.getSolverDoubleInfo @ src/fusion/Model.mbi:4030:6-92
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _954_name) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_954_name); }
double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _954_name)
{
  return task_get_dinf(_954_name);
}
// End mosek.fusion.Model.getSolverDoubleInfo

// Begin mosek.fusion.Model.setCallbackHandler
// Method mosek.fusion.Model.setCallbackHandler @ src/fusion/Model.mbi:4020:6-110
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _955_h) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_955_h); }
void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _955_h)
{
  task_setCallbackHandler(_955_h);
}
// End mosek.fusion.Model.setCallbackHandler

// Begin mosek.fusion.Model.setDataCallbackHandler
// Method mosek.fusion.Model.setDataCallbackHandler @ src/fusion/Model.mbi:3999:6-114
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _956_h) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_956_h); }
void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _956_h)
{
  task_setDataCallbackHandler(_956_h);
}
// End mosek.fusion.Model.setDataCallbackHandler

// Begin mosek.fusion.Model.setLogHandler
// Method mosek.fusion.Model.setLogHandler @ src/fusion/Model.mbi:3977:6-89
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _957_h) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_957_h); }
void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _957_h)
{
  task_setLogHandler(_957_h);
}
// End mosek.fusion.Model.setLogHandler

// Begin mosek.fusion.Model.setSolverParam
// Method mosek.fusion.Model.setSolverParam @ src/fusion/Model.mbi:3937:6-132
void mosek::fusion::Model :: setSolverParam(const std::string & _958_name,double _959_floatval) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_958_name,_959_floatval); }
void mosek::fusion::p_Model::setSolverParam(const std::string & _958_name,double _959_floatval)
{
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_958_name,_959_floatval);
}
// End mosek.fusion.Model.setSolverParam

// Begin mosek.fusion.Model.setSolverParam
// Method mosek.fusion.Model.setSolverParam @ src/fusion/Model.mbi:3925:6-128
void mosek::fusion::Model :: setSolverParam(const std::string & _960_name,int32_t _961_intval) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_960_name,_961_intval); }
void mosek::fusion::p_Model::setSolverParam(const std::string & _960_name,int32_t _961_intval)
{
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_960_name,_961_intval);
}
// End mosek.fusion.Model.setSolverParam

// Begin mosek.fusion.Model.setSolverParam
// Method mosek.fusion.Model.setSolverParam @ src/fusion/Model.mbi:3913:6-128
void mosek::fusion::Model :: setSolverParam(const std::string & _962_name,const std::string & _963_strval) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_962_name,_963_strval); }
void mosek::fusion::p_Model::setSolverParam(const std::string & _962_name,const std::string & _963_strval)
{
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_962_name,_963_strval);
}
// End mosek.fusion.Model.setSolverParam

// Begin mosek.fusion.Model.breakSolver
// Method mosek.fusion.Model.breakSolver @ src/fusion/Model.mbi:3897:6-3900:7
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }
void mosek::fusion::p_Model::breakSolver()
{
  task_break_solve();
}
// End mosek.fusion.Model.breakSolver

// Begin mosek.fusion.Model.optserverHost
// Method mosek.fusion.Model.optserverHost @ src/fusion/Model.mbi:3883:6-3886:7
void mosek::fusion::Model :: optserverHost(const std::string & _964_addr) { mosek::fusion::p_Model::_get_impl(this)->optserverHost(_964_addr); }
void mosek::fusion::p_Model::optserverHost(const std::string & _964_addr)
{
  task_putoptserver_host(_964_addr);
}
// End mosek.fusion.Model.optserverHost

// Begin mosek.fusion.Model.report_solution
// Method mosek.fusion.Model.report_solution @ src/fusion/Model.mbi:3802:6-3878:7
void mosek::fusion::p_Model::report_solution(mosek::fusion::SolutionType _965_soltype,mosek::fusion::ProblemStatus _966_prosta,mosek::fusion::SolutionStatus _967_psolsta,mosek::fusion::SolutionStatus _968_dsolsta,double _969_pobj,double _970_dobj,int32_t _971_numvar,int32_t _972_numcon,int32_t _973_numbarelm,int32_t _974_numacc,int32_t _975_numaccelm,bool _976_hasprimal,bool _977_hasdual)
{
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _978_sol;
  if ((_965_soltype == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _978_sol = sol_itr;
    }
  }
  else if((_965_soltype == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _978_sol = sol_bas;
    }
  }
  else if((_965_soltype == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _978_sol = sol_itg;
    }
  }
  else
  {
    {
      _978_sol = nullptr;
    }
  }
  if ((NULL == _978_sol.get()))
  {
    {
      _978_sol = ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(_971_numvar,_972_numcon,_973_numbarelm,_974_numacc,_975_numaccelm);
    }
  }
  else
  {
    {
      _978_sol->resize(_971_numvar,_972_numcon,_973_numbarelm,_974_numacc,_975_numaccelm);
    }
  }
  mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->pobj = _969_pobj;
  mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->dobj = _970_dobj;
  mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->pstatus = _967_psolsta;
  mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->dstatus = _968_dsolsta;
  mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->probstatus = _966_prosta;
  if ((_971_numvar > (int)0))
  {
    {
      if (_976_hasprimal)
      {
        {
          report_solution_get_xx(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->xx);
        }
      }
      {}
      if (_977_hasdual)
      {
        {
          report_solution_get_slx(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->slx);
          report_solution_get_sux(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->sux);
          std::shared_ptr< monty::ndarray< double,1 > > _979_yx = mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->yx;
          _checked_ptr_1<double> _ptr__979_yx(_979_yx ? _979_yx->raw() : nullptr,_979_yx ? _979_yx->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _980_slx = mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->slx;
          _checked_ptr_1<double> _ptr__980_slx(_980_slx ? _980_slx->raw() : nullptr,_980_slx ? _980_slx->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _981_sux = mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->sux;
          _checked_ptr_1<double> _ptr__981_sux(_981_sux ? _981_sux->raw() : nullptr,_981_sux ? _981_sux->size(0) : 0);
          int32_t _9349_ = (int)0;
          int32_t _9350_ = _971_numvar;
          for (int32_t _982_i = _9349_; _982_i < _9350_; ++_982_i)
          {
            {
              _ptr__979_yx[_982_i] = (_ptr__980_slx[_982_i] - _ptr__981_sux[_982_i]);
            }
          }
        }
      }
      {}
    }
  }
  {}
  if ((_972_numcon > (int)0))
  {
    {
      if (_976_hasprimal)
      {
        {
          report_solution_get_xc(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->xc);
        }
      }
      {}
      if (_977_hasdual)
      {
        {
          report_solution_get_slc(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->slc);
          report_solution_get_suc(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->suc);
          std::shared_ptr< monty::ndarray< double,1 > > _983_y = mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->y;
          _checked_ptr_1<double> _ptr__983_y(_983_y ? _983_y->raw() : nullptr,_983_y ? _983_y->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _984_slc = mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->slc;
          _checked_ptr_1<double> _ptr__984_slc(_984_slc ? _984_slc->raw() : nullptr,_984_slc ? _984_slc->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _985_suc = mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->suc;
          _checked_ptr_1<double> _ptr__985_suc(_985_suc ? _985_suc->raw() : nullptr,_985_suc ? _985_suc->size(0) : 0);
          int32_t _9351_ = (int)0;
          int32_t _9352_ = _972_numcon;
          for (int32_t _986_i = _9351_; _986_i < _9352_; ++_986_i)
          {
            {
              _ptr__983_y[_986_i] = (_ptr__984_slc[_986_i] - _ptr__985_suc[_986_i]);
            }
          }
        }
      }
      {}
    }
  }
  {}
  if ((_973_numbarelm > (int)0))
  {
    {
      if (_976_hasprimal)
      {
        {
          report_solution_get_barx(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->barx);
        }
      }
      {}
      if (_977_hasdual)
      {
        {
          report_solution_get_bars(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->bars);
        }
      }
      {}
    }
  }
  {}
  if ((task_numacc() > (int)0))
  {
    {
      report_solution_get_accptr(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->accptr);
      if (_976_hasprimal)
      {
        {
          report_solution_get_accx(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->accx);
        }
      }
      {}
      if (_977_hasdual)
      {
        {
          report_solution_get_accy(mosek::fusion::p_SolutionStruct::_get_impl(_978_sol)->accy);
        }
      }
      {}
    }
  }
  {}
  if ((_965_soltype == ::mosek::fusion::SolutionType::Interior))
  {
    {
      sol_itr = _978_sol;
    }
  }
  else if((_965_soltype == ::mosek::fusion::SolutionType::Basic))
  {
    {
      sol_bas = _978_sol;
    }
  }
  else if((_965_soltype == ::mosek::fusion::SolutionType::Integer))
  {
    {
      sol_itg = _978_sol;
    }
  }
  {}
}
// End mosek.fusion.Model.report_solution

// Begin mosek.fusion.Model.clear_solutions
// Method mosek.fusion.Model.clear_solutions @ src/fusion/Model.mbi:3796:6-3800:7
void mosek::fusion::p_Model::clear_solutions()
{
  sol_itr = nullptr;
  sol_itg = nullptr;
  sol_bas = nullptr;
}
// End mosek.fusion.Model.clear_solutions

// Begin mosek.fusion.Model.solveBatch
// Method mosek.fusion.Model.solveBatch @ src/fusion/Model.mbi:3771:6-3794:7
std::shared_ptr< monty::ndarray< mosek::fusion::SolverStatus,1 > > mosek::fusion::Model::solveBatch
  ( bool _987_israce,
    double _988_maxtime,
    int32_t _989_numthreads,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Model >,1 > > _990_models) { return mosek::fusion::p_Model::solveBatch(_987_israce,_988_maxtime,_989_numthreads,_990_models); }
std::shared_ptr< monty::ndarray< mosek::fusion::SolverStatus,1 > > mosek::fusion::p_Model::solveBatch(bool _987_israce,double _988_maxtime,int32_t _989_numthreads,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Model >,1 > > _990_models)
{
  int32_t _991_n = (int)((_990_models)->size(0));
  int32_t _9353_ = (int)0;
  int32_t _9354_ = _991_n;
  for (int32_t _992_i = _9353_; _992_i < _9354_; ++_992_i)
  {
    {
      if ((NULL == ((*_990_models)(_992_i)).get()))
      {
        {
          throw ::mosek::fusion::OptimizeError(std::string ("One of the models is a null object"));
        }
      }
      {}
    }
  }
  int32_t _9355_ = (int)0;
  int32_t _9356_ = _991_n;
  for (int32_t _993_i = _9355_; _993_i < _9356_; ++_993_i)
  {
    {
      ((*_990_models)(_993_i))->flushSolutions();
      mosek::fusion::p_Model::_get_impl(((*_990_models)(_993_i)).get())->flush_parameters();
    }
  }
  std::shared_ptr< monty::ndarray< mosek::fusion::SolverStatus,1 > > _994_wasOK = ::mosek::fusion::p_BaseModel::env_solve_batch(_987_israce,_988_maxtime,_989_numthreads,_990_models);
  int32_t _9357_ = (int)0;
  int32_t _9358_ = _991_n;
  for (int32_t _995_i = _9357_; _995_i < _9358_; ++_995_i)
  {
    {
      mosek::fusion::p_Model::_get_impl(((*_990_models)(_995_i)).get())->task_post_solve();
    }
  }
  return _994_wasOK;
}
// End mosek.fusion.Model.solveBatch

// Begin mosek.fusion.Model.solve
// Method mosek.fusion.Model.solve @ src/fusion/Model.mbi:3762:6-3769:7
void mosek::fusion::Model :: solve(const std::string & _996_addr,const std::string & _997_accesstoken) { mosek::fusion::p_Model::_get_impl(this)->solve(_996_addr,_997_accesstoken); }
void mosek::fusion::p_Model::solve(const std::string & _996_addr,const std::string & _997_accesstoken)
{
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(true,_996_addr,_997_accesstoken);
  task_post_solve();
}
// End mosek.fusion.Model.solve

// Begin mosek.fusion.Model.solve
// Method mosek.fusion.Model.solve @ src/fusion/Model.mbi:3753:6-3760:7
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }
void mosek::fusion::p_Model::solve()
{
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(false,std::string (""),std::string (""));
  task_post_solve();
}
// End mosek.fusion.Model.solve

// Begin mosek.fusion.Model.flush_parameters
// Method mosek.fusion.Model.flush_parameters @ src/fusion/Model.mbi:3674:6-3721:7
void mosek::fusion::p_Model::flush_parameters()
{
  int32_t _998_num_con_param_nz = con_blocks->num_parameterized();
  int32_t _999_num_afe_param_nz = afe_blocks->num_parameterized();
  int32_t _1000_num_obj_param_nz = obj_blocks->num_parameterized();
  if ((_998_num_con_param_nz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1001_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_998_num_con_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1001_subi(_1001_subi ? _1001_subi->raw() : nullptr,_1001_subi ? _1001_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1002_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_998_num_con_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1002_subj(_1002_subj ? _1002_subj->raw() : nullptr,_1002_subj ? _1002_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1003_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_998_num_con_param_nz)));
      _checked_ptr_1<double> _ptr__1003_val(_1003_val ? _1003_val->raw() : nullptr,_1003_val ? _1003_val->size(0) : 0);
      con_blocks->evaluate(xs,param_value,_1001_subi,_1002_subj,_1003_val);
      task_putaijlist(_1001_subi,_1002_subj,_1003_val,(int64_t)(_998_num_con_param_nz));
    }
  }
  {}
  if ((_999_num_afe_param_nz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1004_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_999_num_afe_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1004_subi(_1004_subi ? _1004_subi->raw() : nullptr,_1004_subi ? _1004_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1005_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_999_num_afe_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1005_subj(_1005_subj ? _1005_subj->raw() : nullptr,_1005_subj ? _1005_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1006_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_999_num_afe_param_nz)));
      _checked_ptr_1<double> _ptr__1006_val(_1006_val ? _1006_val->raw() : nullptr,_1006_val ? _1006_val->size(0) : 0);
      afe_blocks->evaluate(xs,param_value,_1004_subi,_1005_subj,_1006_val);
      task_putafefijlist(_1004_subi,_1005_subj,_1006_val);
    }
  }
  {}
  if ((_1000_num_obj_param_nz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1007_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1000_num_obj_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1007_subi(_1007_subi ? _1007_subi->raw() : nullptr,_1007_subi ? _1007_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1008_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1000_num_obj_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1008_subj(_1008_subj ? _1008_subj->raw() : nullptr,_1008_subj ? _1008_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1009_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1000_num_obj_param_nz)));
      _checked_ptr_1<double> _ptr__1009_val(_1009_val ? _1009_val->raw() : nullptr,_1009_val ? _1009_val->size(0) : 0);
      obj_blocks->evaluate(xs,param_value,_1007_subi,_1008_subj,_1009_val);
      task_putclist(_1008_subj,_1009_val);
    }
  }
  {}
}
// End mosek.fusion.Model.flush_parameters

// Begin mosek.fusion.Model.flushParameters
// Method mosek.fusion.Model.flushParameters @ src/fusion/Model.mbi:3672:6-61
void mosek::fusion::Model :: flushParameters() { mosek::fusion::p_Model::_get_impl(this)->flushParameters(); }
void mosek::fusion::p_Model::flushParameters()
{
  flush_parameters();
}
// End mosek.fusion.Model.flushParameters

// Begin mosek.fusion.Model.evaluate_parameterized
// Method mosek.fusion.Model.evaluate_parameterized @ src/fusion/Model.mbi:3603:6-3666:7
void mosek::fusion::p_Model::evaluate_parameterized(monty::rc_ptr< ::mosek::fusion::WorkStack > _1010_xs,int32_t _1011_numrow,std::shared_ptr< monty::ndarray< int32_t,1 > > _1012_rowptrb,std::shared_ptr< monty::ndarray< int32_t,1 > > _1013_rowptre,std::shared_ptr< monty::ndarray< int64_t,1 > > _1014_codenidx,std::shared_ptr< monty::ndarray< int32_t,1 > > _1015_codeptr,std::shared_ptr< monty::ndarray< int32_t,1 > > _1016_codesizes,std::shared_ptr< monty::ndarray< int32_t,1 > > _1017_code,std::shared_ptr< monty::ndarray< double,1 > > _1018_cconst,std::shared_ptr< monty::ndarray< int32_t,1 > > _1019_subj,std::shared_ptr< monty::ndarray< double,1 > > _1020_val)
{
  _checked_ptr_1<int32_t> _ptr__1012_rowptrb(_1012_rowptrb ? _1012_rowptrb->raw() : nullptr, _1012_rowptrb ? _1012_rowptrb->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1013_rowptre(_1013_rowptre ? _1013_rowptre->raw() : nullptr, _1013_rowptre ? _1013_rowptre->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1014_codenidx(_1014_codenidx ? _1014_codenidx->raw() : nullptr, _1014_codenidx ? _1014_codenidx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1015_codeptr(_1015_codeptr ? _1015_codeptr->raw() : nullptr, _1015_codeptr ? _1015_codeptr->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1016_codesizes(_1016_codesizes ? _1016_codesizes->raw() : nullptr, _1016_codesizes ? _1016_codesizes->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1017_code(_1017_code ? _1017_code->raw() : nullptr, _1017_code ? _1017_code->size(0) : 0);
  _checked_ptr_1<double> _ptr__1018_cconst(_1018_cconst ? _1018_cconst->raw() : nullptr, _1018_cconst ? _1018_cconst->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1019_subj(_1019_subj ? _1019_subj->raw() : nullptr, _1019_subj ? _1019_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__1020_val(_1020_val ? _1020_val->raw() : nullptr, _1020_val ? _1020_val->size(0) : 0);
  int32_t _1021_stack = _1010_xs->allocf64((int)((_1017_code)->size(0)));
  int32_t _1022_stackp = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _1023_xf64 = mosek::fusion::p_WorkStack::_get_impl(_1010_xs)->f64;
  _checked_ptr_1<double> _ptr__1023_xf64(_1023_xf64 ? _1023_xf64->raw() : nullptr,_1023_xf64 ? _1023_xf64->size(0) : 0);
  int32_t _1024_idx = (int)0;
  int32_t _9359_ = (int)0;
  int32_t _9360_ = _1011_numrow;
  for (int32_t _1025_i = _9359_; _1025_i < _9360_; ++_1025_i)
  {
    {
      int32_t _1026_k = _ptr__1015_codeptr[_1025_i];
      int32_t _9361_ = _ptr__1012_rowptrb[_1025_i];
      int32_t _9362_ = _ptr__1013_rowptre[_1025_i];
      for (int32_t _1027_j = _9361_; _1027_j < _9362_; ++_1027_j)
      {
        {
          int32_t _9363_ = (int)0;
          int32_t _9364_ = _ptr__1016_codesizes[_1027_j];
          for (int32_t _1028_l = _9363_; _1028_l < _9364_; ++_1028_l)
          {
            {
              if ((_ptr__1017_code[_1026_k] == 0))
              {
                {
                }
              }
              else
              {
                {
                  if ((_ptr__1017_code[_1026_k] == 1))
                  {
                    {
                      _ptr__1023_xf64[safe_add( _1021_stack,_1022_stackp )] = ((*param_value)((int32_t)_ptr__1018_cconst[_1026_k]));
                      ++ _1022_stackp;
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__1017_code[_1026_k] == 2))
                      {
                        {
                          _ptr__1023_xf64[safe_add( _1021_stack,_1022_stackp )] = _ptr__1018_cconst[_1026_k];
                          ++ _1022_stackp;
                        }
                      }
                      else
                      {
                        {
                          if ((_ptr__1017_code[_1026_k] == 3))
                          {
                            {
                              _ptr__1023_xf64[(safe_add( _1021_stack,_1022_stackp ) - (int)2)] += _ptr__1023_xf64[(safe_add( _1021_stack,_1022_stackp ) - (int)1)];
                              -- _1022_stackp;
                            }
                          }
                          else
                          {
                            {
                              if ((_ptr__1017_code[_1026_k] == 4))
                              {
                                {
                                  _ptr__1023_xf64[(safe_add( _1021_stack,_1022_stackp ) - (int)1)] = (-_ptr__1023_xf64[(safe_add( _1021_stack,_1022_stackp ) - (int)1)]);
                                }
                              }
                              else
                              {
                                {
                                  if ((_ptr__1017_code[_1026_k] == 5))
                                  {
                                    {
                                      _ptr__1023_xf64[(safe_add( _1021_stack,_1022_stackp ) - (int)2)] *= _ptr__1023_xf64[(safe_add( _1021_stack,_1022_stackp ) - (int)1)];
                                      -- _1022_stackp;
                                    }
                                  }
                                  else
                                  {
                                    {
                                      if ((_ptr__1017_code[_1026_k] == 6))
                                      {
                                        {
                                          _ptr__1023_xf64[(safe_add( _1021_stack,_1022_stackp ) - (int)1)] = (1.0 / _ptr__1023_xf64[(safe_add( _1021_stack,_1022_stackp ) - (int)1)]);
                                        }
                                      }
                                      else
                                      {
                                        {
                                          if ((_ptr__1017_code[_1026_k] == 8))
                                          {
                                            {
                                              double _1029_v = 0.0;
                                              int32_t _9365_ = (int)0;
                                              int32_t _9366_ = (int32_t)_ptr__1018_cconst[_1026_k];
                                              for (int32_t _1030_i = _9365_; _1030_i < _9366_; ++_1030_i)
                                              {
                                                {
                                                  _1029_v += _ptr__1023_xf64[(safe_add( _1021_stack,_1022_stackp ) - (int)1)];
                                                  -- _1022_stackp;
                                                }
                                              }
                                              _ptr__1023_xf64[safe_add( _1021_stack,_1022_stackp )] = _1029_v;
                                              ++ _1022_stackp;
                                            }
                                          }
                                          else
                                          {
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++ _1026_k;
            }
          }
          _ptr__1019_subj[_1024_idx] = (int32_t)_ptr__1014_codenidx[_1027_j];
          _ptr__1020_val[_1024_idx] = _ptr__1023_xf64[_1021_stack];
          _1022_stackp = (int)0;
          ++ _1024_idx;
        }
      }
    }
  }
  _1010_xs->popf64((int)((_1017_code)->size(0)));
}
// End mosek.fusion.Model.evaluate_parameterized

// Begin mosek.fusion.Model.flushSolutions
// Method mosek.fusion.Model.flushSolutions @ src/fusion/Model.mbi:3596:6-3601:7
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }
void mosek::fusion::p_Model::flushSolutions()
{
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
// End mosek.fusion.Model.flushSolutions

// Begin mosek.fusion.Model.flush_initsol
// Method mosek.fusion.Model.flush_initsol @ src/fusion/Model.mbi:3570:6-3592:7
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _1031_which)
{
  if ((NULL != initsol_xx.get()))
  {
    {
      int32_t _1032_numvar = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _1033_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1032_numvar)));
      _checked_ptr_1<double> _ptr__1033_xx(_1033_xx ? _1033_xx->raw() : nullptr,_1033_xx ? _1033_xx->size(0) : 0);
      /* Try @ src/fusion/Model.mbi:3575:10-3581:11 */
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1035_sol = __mosek_2fusion_2Model__get_sol_cache(_1031_which,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_1035_sol)->xx.get()))
          {
            {
              int32_t _9367_;
              bool _9368_ = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_1035_sol)->xx)->size(0)) <= _1032_numvar);
              if (_9368_)
              {
                _9367_ = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_1035_sol)->xx)->size(0));
              }
              else
              {
                _9367_ = _1032_numvar;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_1035_sol)->xx,(int)0,_1033_xx,(int)0,_9367_);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _1034_e)
      {
        {
        }
      }
      int32_t _9369_;
      bool _9370_ = ((int)((initsol_xx)->size(0)) <= _1032_numvar);
      if (_9370_)
      {
        _9369_ = (int)((initsol_xx)->size(0));
      }
      else
      {
        _9369_ = _1032_numvar;
      }
      int32_t _1036_n = _9369_;
      int32_t _9371_ = (int)0;
      int32_t _9372_ = _1036_n;
      for (int32_t _1037_i = _9371_; _1037_i < _9372_; ++_1037_i)
      {
        {
          if (((*initsol_xx_flag)(_1037_i)))
          {
            {
              _ptr__1033_xx[_1037_i] = ((*initsol_xx)(_1037_i));
            }
          }
          {}
        }
      }
      _ptr__1033_xx[bfixidx] = 1.0;
      task_putxx_slice(_1031_which,(int)0,_1032_numvar,_1033_xx);
    }
  }
  {}
}
// End mosek.fusion.Model.flush_initsol

// Begin mosek.fusion.Model.getDualSolutionStatus
// Method mosek.fusion.Model.getDualSolutionStatus @ src/fusion/Model.mbi:3565:6-3568:7
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus()
{
  return _pubthis->getDualSolutionStatus(solutionptr);
}
// End mosek.fusion.Model.getDualSolutionStatus

// Begin mosek.fusion.Model.getProblemStatus
// Method mosek.fusion.Model.getProblemStatus @ src/fusion/Model.mbi:3559:6-3562:7
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }
mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus()
{
  return _pubthis->getProblemStatus(solutionptr);
}
// End mosek.fusion.Model.getProblemStatus

// Begin mosek.fusion.Model.getPrimalSolutionStatus
// Method mosek.fusion.Model.getPrimalSolutionStatus @ src/fusion/Model.mbi:3552:6-3555:7
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus()
{
  return getPrimalSolutionStatus(solutionptr);
}
// End mosek.fusion.Model.getPrimalSolutionStatus

// Begin mosek.fusion.Model.dualObjValue
// Method mosek.fusion.Model.dualObjValue @ src/fusion/Model.mbi:3545:6-3548:7
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }
double mosek::fusion::p_Model::dualObjValue()
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
// End mosek.fusion.Model.dualObjValue

// Begin mosek.fusion.Model.primalObjValue
// Method mosek.fusion.Model.primalObjValue @ src/fusion/Model.mbi:3539:6-3542:7
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }
double mosek::fusion::p_Model::primalObjValue()
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
// End mosek.fusion.Model.primalObjValue

// Begin mosek.fusion.Model.get_sol_cache
// Method mosek.fusion.Model.get_sol_cache @ src/fusion/Model.mbi:3468:6-3536:7
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _1038_which_,bool _1039_primal,bool _1040_nothrow)
{
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1041_res = nullptr;
  mosek::fusion::SolutionType _1042_which = _1038_which_;
  if ((_1042_which == ::mosek::fusion::SolutionType::Default))
  {
    {
      _1042_which = solutionptr;
    }
  }
  {}
  if ((_1042_which == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _1041_res = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _1041_res = sol_bas;
        }
      }
      else
      {
        {
          _1041_res = sol_itr;
        }
      }
    }
  }
  else if((_1042_which == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _1041_res = sol_itr;
    }
  }
  else if((_1042_which == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _1041_res = sol_bas;
    }
  }
  else if((_1042_which == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _1041_res = sol_itg;
    }
  }
  {}
  if ((NULL == _1041_res.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_1040_nothrow || ((_1039_primal && _1041_res->isPrimalAcceptable(acceptable_sol)) || ((!_1039_primal) && _1041_res->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _1041_res;
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1043_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _1044_solsta = mosek::fusion::p_SolutionStruct::_get_impl(_1041_res)->pstatus;
          mosek::fusion::ProblemStatus _1045_probsta = mosek::fusion::p_SolutionStruct::_get_impl(_1041_res)->probstatus;
          if ((!_1039_primal))
          {
            {
              _1044_solsta = mosek::fusion::p_SolutionStruct::_get_impl(_1041_res)->dstatus;
            }
          }
          {}
          _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_1044_solsta == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_1044_solsta == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_1044_solsta == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_1044_solsta == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_1044_solsta == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_1044_solsta == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("at least Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_1041_res == sol_itr))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_1041_res == sol_bas))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_1041_res == sol_itg))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_1045_probsta == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_1045_probsta == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_1045_probsta == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_1045_probsta == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_1045_probsta == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_1045_probsta == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_1045_probsta == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_1045_probsta == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_1045_probsta == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _1043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_1043_sb->toString());
        }
      }
    }
  }
}
// End mosek.fusion.Model.get_sol_cache

// Begin mosek.fusion.Model.get_sol_cache
// Method mosek.fusion.Model.get_sol_cache @ src/fusion/Model.mbi:3461:6-3466:7
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _1046_which_,bool _1047_primal)
{
  return __mosek_2fusion_2Model__get_sol_cache(_1046_which_,_1047_primal,false);
}
// End mosek.fusion.Model.get_sol_cache

// Begin mosek.fusion.Model.setSolution_xx
// Method mosek.fusion.Model.setSolution_xx @ src/fusion/Model.mbi:3446:6-3454:7
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int32_t,1 > > _1048_subj,std::shared_ptr< monty::ndarray< double,1 > > _1049_val)
{
  _checked_ptr_1<int32_t> _ptr__1048_subj(_1048_subj ? _1048_subj->raw() : nullptr, _1048_subj ? _1048_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__1049_val(_1049_val ? _1049_val->raw() : nullptr, _1049_val ? _1049_val->size(0) : 0);
  ensure_initsol_xx();
  int32_t _9373_ = (int)0;
  int32_t _9374_ = (int)((_1048_subj)->size(0));
  for (int32_t _1050_i = _9373_; _1050_i < _9374_; ++_1050_i)
  {
    {
      ((*initsol_xx)(_ptr__1048_subj[_1050_i])) = _ptr__1049_val[_1050_i];
      ((*initsol_xx_flag)(_ptr__1048_subj[_1050_i])) = true;
    }
  }
}
// End mosek.fusion.Model.setSolution_xx

// Begin mosek.fusion.Model.ensure_initsol_xx
// Method mosek.fusion.Model.ensure_initsol_xx @ src/fusion/Model.mbi:3429:6-3444:7
void mosek::fusion::p_Model::ensure_initsol_xx()
{
  int32_t _1051_natvarmap_num = task_numvar();
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1051_natvarmap_num)));
      std::vector<bool> _9375_;
      for (int32_t _1052_i = (int)0, _9376_ = _1051_natvarmap_num; _1052_i < _9376_ ; ++_1052_i)
      {
        _9375_.push_back(false);
      }
      auto _9377_ = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_9375_.size()),_9375_.begin(),_9375_.end()));
      initsol_xx_flag = _9377_;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _1051_natvarmap_num))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1053_tmp = initsol_xx;
      _checked_ptr_1<double> _ptr__1053_tmp(_1053_tmp ? _1053_tmp->raw() : nullptr,_1053_tmp ? _1053_tmp->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _1054_tmp_flag = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1051_natvarmap_num)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_1051_natvarmap_num)));
      ::mosek::fusion::Utils::Tools::arraycopy(_1053_tmp,(int)0,initsol_xx,(int)0,(int)((_1053_tmp)->size(0)));
      int32_t _9378_ = (int)0;
      int32_t _9379_ = (int)((_1053_tmp)->size(0));
      for (int32_t _1055_i = _9378_; _1055_i < _9379_; ++_1055_i)
      {
        {
          ((*initsol_xx_flag)(_1055_i)) = ((*_1054_tmp_flag)(_1055_i));
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Model.ensure_initsol_xx

// Begin mosek.fusion.Model.getSolution_accptr
// Method mosek.fusion.Model.getSolution_accptr @ src/fusion/Model.mbi:3422:6-3426:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Model::getSolution_accptr(mosek::fusion::SolutionType _1056_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1056_which,true,true))->accptr;
}
// End mosek.fusion.Model.getSolution_accptr

// Begin mosek.fusion.Model.getSolution_accy
// Method mosek.fusion.Model.getSolution_accy @ src/fusion/Model.mbi:3416:6-3420:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_accy(mosek::fusion::SolutionType _1057_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1057_which,false))->accy;
}
// End mosek.fusion.Model.getSolution_accy

// Begin mosek.fusion.Model.getSolution_accx
// Method mosek.fusion.Model.getSolution_accx @ src/fusion/Model.mbi:3410:6-3414:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_accx(mosek::fusion::SolutionType _1058_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1058_which,true))->accx;
}
// End mosek.fusion.Model.getSolution_accx

// Begin mosek.fusion.Model.getSolution_bars
// Method mosek.fusion.Model.getSolution_bars @ src/fusion/Model.mbi:3403:6-3407:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _1059_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1059_which,false))->bars;
}
// End mosek.fusion.Model.getSolution_bars

// Begin mosek.fusion.Model.getSolution_barx
// Method mosek.fusion.Model.getSolution_barx @ src/fusion/Model.mbi:3397:6-3401:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _1060_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1060_which,true))->barx;
}
// End mosek.fusion.Model.getSolution_barx

// Begin mosek.fusion.Model.getSolution_y
// Method mosek.fusion.Model.getSolution_y @ src/fusion/Model.mbi:3391:6-3395:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _1061_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1061_which,false))->y;
}
// End mosek.fusion.Model.getSolution_y

// Begin mosek.fusion.Model.getSolution_xc
// Method mosek.fusion.Model.getSolution_xc @ src/fusion/Model.mbi:3385:6-3389:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _1062_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1062_which,true))->xc;
}
// End mosek.fusion.Model.getSolution_xc

// Begin mosek.fusion.Model.getSolution_suc
// Method mosek.fusion.Model.getSolution_suc @ src/fusion/Model.mbi:3379:6-3383:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _1063_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1063_which,false))->suc;
}
// End mosek.fusion.Model.getSolution_suc

// Begin mosek.fusion.Model.getSolution_slc
// Method mosek.fusion.Model.getSolution_slc @ src/fusion/Model.mbi:3373:6-3377:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _1064_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1064_which,false))->slc;
}
// End mosek.fusion.Model.getSolution_slc

// Begin mosek.fusion.Model.getSolution_sux
// Method mosek.fusion.Model.getSolution_sux @ src/fusion/Model.mbi:3367:6-3371:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _1065_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1065_which,false))->sux;
}
// End mosek.fusion.Model.getSolution_sux

// Begin mosek.fusion.Model.getSolution_slx
// Method mosek.fusion.Model.getSolution_slx @ src/fusion/Model.mbi:3361:6-3365:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _1066_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1066_which,false))->slx;
}
// End mosek.fusion.Model.getSolution_slx

// Begin mosek.fusion.Model.getSolution_yx
// Method mosek.fusion.Model.getSolution_yx @ src/fusion/Model.mbi:3355:6-3359:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _1067_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1067_which,false))->yx;
}
// End mosek.fusion.Model.getSolution_yx

// Begin mosek.fusion.Model.getSolution_xx
// Method mosek.fusion.Model.getSolution_xx @ src/fusion/Model.mbi:3350:6-3354:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _1068_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1068_which,true))->xx;
}
// End mosek.fusion.Model.getSolution_xx

// Begin mosek.fusion.Model.selectedSolution
// Method mosek.fusion.Model.selectedSolution @ src/fusion/Model.mbi:3345:6-3348:7
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _1069_soltype) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_1069_soltype); }
void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _1069_soltype)
{
  solutionptr = _1069_soltype;
}
// End mosek.fusion.Model.selectedSolution

// Begin mosek.fusion.Model.getAcceptedSolutionStatus
// Method mosek.fusion.Model.getAcceptedSolutionStatus @ src/fusion/Model.mbi:3336:6-3339:7
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }
mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus()
{
  return acceptable_sol;
}
// End mosek.fusion.Model.getAcceptedSolutionStatus

// Begin mosek.fusion.Model.acceptedSolutionStatus
// Method mosek.fusion.Model.acceptedSolutionStatus @ src/fusion/Model.mbi:3330:6-3333:7
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _1070_what) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_1070_what); }
void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _1070_what)
{
  acceptable_sol = _1070_what;
}
// End mosek.fusion.Model.acceptedSolutionStatus

// Begin mosek.fusion.Model.getProblemStatus
// Method mosek.fusion.Model.getProblemStatus @ src/fusion/Model.mbi:3299:6-3317:7
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _1071_which) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_1071_which); }
mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _1071_which)
{
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1072_res = nullptr;
  if ((_1071_which == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _1072_res = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _1072_res = sol_bas;
        }
      }
      else
      {
        {
          _1072_res = sol_itr;
        }
      }
    }
  }
  else if((_1071_which == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _1072_res = sol_itr;
    }
  }
  else if((_1071_which == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _1072_res = sol_bas;
    }
  }
  else if((_1071_which == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _1072_res = sol_itg;
    }
  }
  {}
  if ((NULL == _1072_res.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_1072_res)->probstatus;
    }
  }
}
// End mosek.fusion.Model.getProblemStatus

// Begin mosek.fusion.Model.getDualSolutionStatus
// Method mosek.fusion.Model.getDualSolutionStatus @ src/fusion/Model.mbi:3293:6-122
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _1073_which) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_1073_which); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _1073_which)
{
  return getSolutionStatus(_1073_which,false);
}
// End mosek.fusion.Model.getDualSolutionStatus

// Begin mosek.fusion.Model.getPrimalSolutionStatus
// Method mosek.fusion.Model.getPrimalSolutionStatus @ src/fusion/Model.mbi:3287:6-128
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _1074_which) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_1074_which); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _1074_which)
{
  return getSolutionStatus(_1074_which,true);
}
// End mosek.fusion.Model.getPrimalSolutionStatus

// Begin mosek.fusion.Model.getSolutionStatus
// Method mosek.fusion.Model.getSolutionStatus @ src/fusion/Model.mbi:3270:6-3281:7
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _1075_which,bool _1076_primal)
{
  /* Try @ src/fusion/Model.mbi:3271:8-3280:9 */
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1078_sol = __mosek_2fusion_2Model__get_sol_cache(_1075_which,_1076_primal,true);
      if (_1076_primal)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_1078_sol)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_1078_sol)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _1077_e)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
// End mosek.fusion.Model.getSolutionStatus

// Begin mosek.fusion.Model.update
// Method mosek.fusion.Model.update @ src/fusion/Model.mbi:3132:6-3266:7
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int32_t,1 > > _1079_conidxs,monty::rc_ptr< ::mosek::fusion::Expression > _1080_expr)
{
  _checked_ptr_1<int32_t> _ptr__1079_conidxs(_1079_conidxs ? _1079_conidxs->raw() : nullptr, _1079_conidxs ? _1079_conidxs->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1080_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int32_t _1081_nd = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int32_t _1082_shape_base = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int32_t _1083_nelem = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int32_t _1084_nnz = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _1085_hassp = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int32_t _1086_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int32_t _1087_ptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int32_t _1088_sp_base = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int32_t _1089_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int32_t _1090_cof_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int32_t _1091_code = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int32_t _1092_codeptr = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int32_t _1093_cconst = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1094_wi32 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int32_t> _ptr__1094_wi32(_1094_wi32 ? _1094_wi32->raw() : nullptr,_1094_wi32 ? _1094_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1095_wi64 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<int64_t> _ptr__1095_wi64(_1095_wi64 ? _1095_wi64->raw() : nullptr,_1095_wi64 ? _1095_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1096_wf64 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__1096_wf64(_1096_wf64 ? _1096_wf64->raw() : nullptr,_1096_wf64 ? _1096_wf64->size(0) : 0);
  int32_t _1097_num_lincon = (int)0;
  int32_t _9380_ = (int)0;
  int32_t _9381_ = _1083_nelem;
  for (int32_t _1098_i = _9380_; _1098_i < _9381_; ++_1098_i)
  {
    {
      if ((_ptr__1079_conidxs[_1098_i] >= (int)0))
      {
        {
          ++ _1097_num_lincon;
        }
      }
      {}
    }
  }
  int32_t _1099_num_concon = (_1083_nelem - _1097_num_lincon);
  if ((_1097_num_lincon == _1083_nelem))
  {
    {
      putarows(_1079_conidxs,ws,_1083_nelem,_1084_nnz,_1087_ptr_base,_1089_nidxs_base,_1090_cof_base);
      if ((_1086_ncodeatom > (int)0))
      {
        {
          con_blocks->replace_row_code(rs,_1079_conidxs,_1087_ptr_base,_1089_nidxs_base,_1092_codeptr,_1091_code,_1093_cconst);
        }
      }
      else
      {
        {
          con_blocks->clear_row_code(_1079_conidxs);
        }
      }
    }
  }
  else if((_1099_num_concon == _1083_nelem))
  {
    {
      std::vector<int32_t> _9382_;
      for (int32_t _1100_i = (int)0, _9383_ = _1083_nelem; _1100_i < _9383_ ; ++_1100_i)
      {
        _9382_.push_back((-safe_add( (int)1,_ptr__1079_conidxs[_1100_i] )));
      }
      auto _9384_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9382_.size()),_9382_.begin(),_9382_.end()));
      putfrows(_9384_,(int)0,ws,_1083_nelem,_1084_nnz,_1087_ptr_base,_1089_nidxs_base,_1090_cof_base);
      if ((_1086_ncodeatom > (int)0))
      {
        {
          std::vector<int32_t> _9385_;
          for (int32_t _1101_i = (int)0, _9386_ = _1083_nelem; _1101_i < _9386_ ; ++_1101_i)
          {
            _9385_.push_back((-safe_add( (int)1,_ptr__1079_conidxs[_1101_i] )));
          }
          auto _9387_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9385_.size()),_9385_.begin(),_9385_.end()));
          afe_blocks->replace_row_code(rs,_9387_,_1087_ptr_base,_1089_nidxs_base,_1092_codeptr,_1091_code,_1093_cconst);
        }
      }
      else
      {
        {
          std::vector<int32_t> _9388_;
          for (int32_t _1102_i = (int)0, _9389_ = _1083_nelem; _1102_i < _9389_ ; ++_1102_i)
          {
            _9388_.push_back((-safe_add( (int)1,_ptr__1079_conidxs[_1102_i] )));
          }
          auto _9390_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9388_.size()),_9388_.begin(),_9388_.end()));
          afe_blocks->clear_row_code(_9390_);
        }
      }
    }
  }
  else
  {
    {
      int32_t _1103_cncodeelm = (int)0;
      int32_t _1104_lncodeelm = (int)0;
      int32_t _1105_cnnz = (int)0;
      int32_t _1106_lnnz = (int)0;
      int32_t _9391_ = (int)0;
      int32_t _9392_ = _1083_nelem;
      for (int32_t _1107_i = _9391_; _1107_i < _9392_; ++_1107_i)
      {
        {
          if ((_ptr__1079_conidxs[_1107_i] >= (int)0))
          {
            {
              _1106_lnnz += (_ptr__1094_wi32[safe_add( safe_add( _1087_ptr_base,_1107_i ),(int)1 )] - _ptr__1094_wi32[safe_add( _1087_ptr_base,_1107_i )]);
            }
          }
          else
          {
            {
              _1105_cnnz += (_ptr__1094_wi32[safe_add( safe_add( _1087_ptr_base,_1107_i ),(int)1 )] - _ptr__1094_wi32[safe_add( _1087_ptr_base,_1107_i )]);
            }
          }
        }
      }
      int32_t _1108_lrowidx = xs->alloci32(_1097_num_lincon);
      int32_t _1109_crowidx = xs->alloci32(_1099_num_concon);
      int32_t _1110_lptr = xs->alloci32(safe_add( _1097_num_lincon,(int)1 ));
      int32_t _1111_cptr = xs->alloci32(safe_add( _1099_num_concon,(int)1 ));
      int32_t _1112_lnidxs = xs->alloci64(_1106_lnnz);
      int32_t _1113_cnidxs = xs->alloci64(_1105_cnnz);
      int32_t _1114_lcof = xs->allocf64(_1106_lnnz);
      int32_t _1115_ccof = xs->allocf64(_1105_cnnz);
      std::shared_ptr< monty::ndarray< double,1 > > _1116_xf64 = mosek::fusion::p_WorkStack::_get_impl(xs)->f64;
      _checked_ptr_1<double> _ptr__1116_xf64(_1116_xf64 ? _1116_xf64->raw() : nullptr,_1116_xf64 ? _1116_xf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1117_xi64 = mosek::fusion::p_WorkStack::_get_impl(xs)->i64;
      _checked_ptr_1<int64_t> _ptr__1117_xi64(_1117_xi64 ? _1117_xi64->raw() : nullptr,_1117_xi64 ? _1117_xi64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1118_xi32 = mosek::fusion::p_WorkStack::_get_impl(xs)->i32;
      _checked_ptr_1<int32_t> _ptr__1118_xi32(_1118_xi32 ? _1118_xi32->raw() : nullptr,_1118_xi32 ? _1118_xi32->size(0) : 0);
      _ptr__1118_xi32[_1110_lptr] = (int)0;
      _ptr__1118_xi32[_1111_cptr] = (int)0;
      int32_t _1119_ci = (int)0;
      int32_t _1120_li = (int)0;
      int32_t _1121_cnzi = (int)0;
      int32_t _1122_lnzi = (int)0;
      int32_t _9393_ = (int)0;
      int32_t _9394_ = _1083_nelem;
      for (int32_t _1123_i = _9393_; _1123_i < _9394_; ++_1123_i)
      {
        {
          int32_t _1124_pb = _ptr__1094_wi32[safe_add( _1087_ptr_base,_1123_i )];
          int32_t _1125_pe = _ptr__1094_wi32[safe_add( safe_add( _1087_ptr_base,_1123_i ),(int)1 )];
          if ((_ptr__1079_conidxs[_1123_i] >= (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_1095_wi64,safe_add( _1089_nidxs_base,_1124_pb ),_1117_xi64,safe_add( _1112_lnidxs,_1122_lnzi ),(_1125_pe - _1124_pb));
              ::mosek::fusion::Utils::Tools::arraycopy(_1096_wf64,safe_add( _1090_cof_base,_1124_pb ),_1116_xf64,safe_add( _1114_lcof,_1122_lnzi ),(_1125_pe - _1124_pb));
              _1122_lnzi += (_1125_pe - _1124_pb);
              _ptr__1118_xi32[safe_add( _1108_lrowidx,_1120_li )] = _ptr__1079_conidxs[_1123_i];
              _ptr__1118_xi32[safe_add( safe_add( _1110_lptr,_1120_li ),(int)1 )] = _1122_lnzi;
              ++ _1120_li;
            }
          }
          else
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_1095_wi64,safe_add( _1089_nidxs_base,_1124_pb ),_1117_xi64,safe_add( _1113_cnidxs,_1121_cnzi ),(_1125_pe - _1124_pb));
              ::mosek::fusion::Utils::Tools::arraycopy(_1096_wf64,safe_add( _1090_cof_base,_1124_pb ),_1116_xf64,safe_add( _1115_ccof,_1121_cnzi ),(_1125_pe - _1124_pb));
              _1121_cnzi += (_1125_pe - _1124_pb);
              _ptr__1118_xi32[safe_add( _1109_crowidx,_1119_ci )] = (-safe_add( (int)1,_ptr__1079_conidxs[_1123_i] ));
              _ptr__1118_xi32[safe_add( safe_add( _1111_cptr,_1119_ci ),(int)1 )] = _1121_cnzi;
              ++ _1119_ci;
            }
          }
        }
      }
      std::vector<int32_t> _9395_;
      for (int32_t _1126_i = (int)0, _9396_ = _1097_num_lincon; _1126_i < _9396_ ; ++_1126_i)
      {
        _9395_.push_back(_ptr__1118_xi32[safe_add( _1108_lrowidx,_1126_i )]);
      }
      auto _9397_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9395_.size()),_9395_.begin(),_9395_.end()));
      putarows(_9397_,xs,_1097_num_lincon,_1106_lnnz,_1110_lptr,_1112_lnidxs,_1114_lcof);
      putfrows(_1118_xi32,_1109_crowidx,xs,_1099_num_concon,_1105_cnnz,_1111_cptr,_1113_cnidxs,_1115_ccof);
      if ((_1086_ncodeatom > (int)0))
      {
        {
          int32_t _9398_ = (int)0;
          int32_t _9399_ = _1083_nelem;
          for (int32_t _1127_i = _9398_; _1127_i < _9399_; ++_1127_i)
          {
            {
              if ((_ptr__1079_conidxs[_1127_i] >= (int)0))
              {
                {
                  _1104_lncodeelm += (_ptr__1094_wi32[safe_add( _1092_codeptr,_ptr__1094_wi32[safe_add( safe_add( _1087_ptr_base,_1127_i ),(int)1 )] )] - _ptr__1094_wi32[safe_add( _1092_codeptr,_ptr__1094_wi32[safe_add( _1087_ptr_base,_1127_i )] )]);
                }
              }
              else
              {
                {
                  _1103_cncodeelm += (_ptr__1094_wi32[safe_add( _1092_codeptr,_ptr__1094_wi32[safe_add( safe_add( _1087_ptr_base,_1127_i ),(int)1 )] )] - _ptr__1094_wi32[safe_add( _1092_codeptr,_ptr__1094_wi32[safe_add( _1087_ptr_base,_1127_i )] )]);
                }
              }
            }
          }
          int32_t _1128_lcodeptr = xs->alloci32(safe_add( _1106_lnnz,(int)1 ));
          int32_t _1129_ccodeptr = xs->alloci32(safe_add( _1105_cnnz,(int)1 ));
          int32_t _1130_lcode = xs->alloci32(_1104_lncodeelm);
          int32_t _1131_ccode = xs->alloci32(_1103_cncodeelm);
          int32_t _1132_lcconst = xs->allocf64(_1104_lncodeelm);
          int32_t _1133_ccconst = xs->allocf64(_1103_cncodeelm);
          _ptr__1118_xi32[_1128_lcodeptr] = (int)0;
          _ptr__1118_xi32[_1129_ccodeptr] = (int)0;
          int32_t _1134_ccodei = (int)0;
          int32_t _1135_lcodei = (int)0;
          int32_t _1136_rnzi = (int)0;
          int32_t _1137_lnzi = (int)0;
          int32_t _9400_ = (int)0;
          int32_t _9401_ = _1083_nelem;
          for (int32_t _1138_i = _9400_; _1138_i < _9401_; ++_1138_i)
          {
            {
              int32_t _1139_pb = _ptr__1094_wi32[safe_add( _1087_ptr_base,_1138_i )];
              int32_t _1140_pe = _ptr__1094_wi32[safe_add( safe_add( _1087_ptr_base,_1138_i ),(int)1 )];
              if ((_ptr__1079_conidxs[_1138_i] >= (int)0))
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1094_wi32,safe_add( _1091_code,_ptr__1094_wi32[safe_add( _1092_codeptr,_1139_pb )] ),_1118_xi32,safe_add( _1130_lcode,_1135_lcodei ),(_ptr__1094_wi32[safe_add( _1092_codeptr,_1140_pe )] - _ptr__1094_wi32[safe_add( _1092_codeptr,_1139_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1096_wf64,safe_add( _1093_cconst,_ptr__1094_wi32[safe_add( _1092_codeptr,_1139_pb )] ),_1116_xf64,safe_add( _1132_lcconst,_1135_lcodei ),(_ptr__1094_wi32[safe_add( _1092_codeptr,_1140_pe )] - _ptr__1094_wi32[safe_add( _1092_codeptr,_1139_pb )]));
                  int32_t _9402_ = _1139_pb;
                  int32_t _9403_ = _1140_pe;
                  for (int32_t _1141_j = _9402_; _1141_j < _9403_; ++_1141_j)
                  {
                    {
                      _1135_lcodei += (_ptr__1094_wi32[safe_add( safe_add( _1092_codeptr,_1141_j ),(int)1 )] - _ptr__1094_wi32[safe_add( _1092_codeptr,_1141_j )]);
                      _ptr__1118_xi32[safe_add( safe_add( _1128_lcodeptr,_1137_lnzi ),(int)1 )] = _1135_lcodei;
                      ++ _1137_lnzi;
                    }
                  }
                }
              }
              else
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1094_wi32,safe_add( _1091_code,_ptr__1094_wi32[safe_add( _1092_codeptr,_1139_pb )] ),_1118_xi32,safe_add( _1131_ccode,_1134_ccodei ),(_ptr__1094_wi32[safe_add( _1092_codeptr,_1140_pe )] - _ptr__1094_wi32[safe_add( _1092_codeptr,_1139_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1096_wf64,safe_add( _1093_cconst,_ptr__1094_wi32[safe_add( _1092_codeptr,_1139_pb )] ),_1116_xf64,safe_add( _1133_ccconst,_1134_ccodei ),(_ptr__1094_wi32[safe_add( _1092_codeptr,_1140_pe )] - _ptr__1094_wi32[safe_add( _1092_codeptr,_1139_pb )]));
                  int32_t _9404_ = _1139_pb;
                  int32_t _9405_ = _1140_pe;
                  for (int32_t _1142_j = _9404_; _1142_j < _9405_; ++_1142_j)
                  {
                    {
                      _1134_ccodei += (_ptr__1094_wi32[safe_add( safe_add( _1092_codeptr,_1142_j ),(int)1 )] - _ptr__1094_wi32[safe_add( _1092_codeptr,_1142_j )]);
                      _ptr__1118_xi32[safe_add( safe_add( _1129_ccodeptr,_1121_cnzi ),(int)1 )] = _1134_ccodei;
                      ++ _1121_cnzi;
                    }
                  }
                }
              }
            }
          }
          std::vector<int32_t> _9406_;
          for (int32_t _1143_i = (int)0, _9407_ = _1097_num_lincon; _1143_i < _9407_ ; ++_1143_i)
          {
            _9406_.push_back(_ptr__1118_xi32[safe_add( _1108_lrowidx,_1143_i )]);
          }
          auto _9408_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9406_.size()),_9406_.begin(),_9406_.end()));
          con_blocks->replace_row_code(xs,_9408_,_1110_lptr,_1112_lnidxs,_1128_lcodeptr,_1130_lcode,_1132_lcconst);
          std::vector<int32_t> _9409_;
          for (int32_t _1144_i = (int)0, _9410_ = _1099_num_concon; _1144_i < _9410_ ; ++_1144_i)
          {
            _9409_.push_back((int32_t)_ptr__1117_xi64[safe_add( _1109_crowidx,_1144_i )]);
          }
          auto _9411_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9409_.size()),_9409_.begin(),_9409_.end()));
          afe_blocks->replace_row_code(xs,_9411_,_1111_cptr,_1113_cnidxs,_1129_ccodeptr,_1131_ccode,_1133_ccconst);
        }
      }
      else
      {
        {
          std::vector<int32_t> _9412_;
          for (int32_t _1145_i = (int)0, _9413_ = _1097_num_lincon; _1145_i < _9413_ ; ++_1145_i)
          {
            _9412_.push_back(_ptr__1118_xi32[safe_add( _1108_lrowidx,_1145_i )]);
          }
          auto _9414_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9412_.size()),_9412_.begin(),_9412_.end()));
          con_blocks->clear_row_code(_9414_);
          std::vector<int32_t> _9415_;
          for (int32_t _1146_i = (int)0, _9416_ = _1099_num_concon; _1146_i < _9416_ ; ++_1146_i)
          {
            _9415_.push_back((int32_t)_ptr__1117_xi64[safe_add( _1109_crowidx,_1146_i )]);
          }
          auto _9417_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9415_.size()),_9415_.begin(),_9415_.end()));
          afe_blocks->clear_row_code(_9417_);
        }
      }
    }
  }
  xs->clear();
}
// End mosek.fusion.Model.update

// Begin mosek.fusion.Model.update
// Method mosek.fusion.Model.update @ src/fusion/Model.mbi:2917:6-3128:7
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int32_t,1 > > _1147_conidxs,monty::rc_ptr< ::mosek::fusion::Expression > _1148_expr,std::shared_ptr< monty::ndarray< int32_t,1 > > _1149_varidxs)
{
  _checked_ptr_1<int32_t> _ptr__1147_conidxs(_1147_conidxs ? _1147_conidxs->raw() : nullptr, _1147_conidxs ? _1147_conidxs->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1149_varidxs(_1149_varidxs ? _1149_varidxs->raw() : nullptr, _1149_varidxs ? _1149_varidxs->size(0) : 0);
  int32_t _9418_ = (int)0;
  int32_t _9419_ = (int)((_1147_conidxs)->size(0));
  for (int32_t _1150_i = _9418_; _1150_i < _9419_; ++_1150_i)
  {
    {
      if (((_ptr__1147_conidxs[_1150_i] >= (int)0) && con_blocks->row_is_parameterized(_1150_i)))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
        }
      }
      else if(((_ptr__1147_conidxs[_1150_i] < (int)0) && con_blocks->row_is_parameterized((-safe_add( _1150_i,(int)1 )))))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
        }
      }
      {}
    }
  }
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1148_expr)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int32_t _1151_nd = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int32_t _1152_nelem = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int32_t _1153_nnz = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _1154_hassp = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int32_t _1155_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int32_t _1156_shape_base = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int32_t _1157_ptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int32_t _1158_sp_base = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int32_t _1159_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int32_t _1160_cof_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int32_t _1161_code = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int32_t _1162_codeptr = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int32_t _1163_cconst = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1164_wi32 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int32_t> _ptr__1164_wi32(_1164_wi32 ? _1164_wi32->raw() : nullptr,_1164_wi32 ? _1164_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1165_wi64 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<int64_t> _ptr__1165_wi64(_1165_wi64 ? _1165_wi64->raw() : nullptr,_1165_wi64 ? _1165_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1166_wf64 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__1166_wf64(_1166_wf64 ? _1166_wf64->raw() : nullptr,_1166_wf64 ? _1166_wf64->size(0) : 0);
  int32_t _1167_num_lincon = (int)0;
  int32_t _9420_ = (int)0;
  int32_t _9421_ = _1152_nelem;
  for (int32_t _1168_i = _9420_; _1168_i < _9421_; ++_1168_i)
  {
    {
      if ((_ptr__1147_conidxs[_1168_i] >= (int)0))
      {
        {
          ++ _1167_num_lincon;
        }
      }
      {}
    }
  }
  int32_t _1169_num_concon = (_1152_nelem - _1167_num_lincon);
  if (((_1167_num_lincon == _1152_nelem) || (_1169_num_concon == _1152_nelem)))
  {
    {
      int32_t _1170_N = safe_mul( (int)((_1147_conidxs)->size(0)),(int)((_1149_varidxs)->size(0)) );
      std::shared_ptr< monty::ndarray< double,1 > > _1171_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1170_N)));
      _checked_ptr_1<double> _ptr__1171_cof(_1171_cof ? _1171_cof->raw() : nullptr,_1171_cof ? _1171_cof->size(0) : 0);
      int32_t _1172_nzi = (int)0;
      int32_t _9422_ = (int)0;
      int32_t _9423_ = _1152_nelem;
      for (int32_t _1173_i = _9422_; _1173_i < _9423_; ++_1173_i)
      {
        {
          int32_t _1174_p0 = _ptr__1164_wi32[safe_add( _1157_ptr_base,_1173_i )];
          int32_t _1175_p1 = _ptr__1164_wi32[safe_add( safe_add( _1157_ptr_base,_1173_i ),(int)1 )];
          int32_t _1176_p = _1174_p0;
          int32_t _1177_l = (int)0;
          while ( ((_1177_l < (int)((_1149_varidxs)->size(0))) && (_1176_p < _1175_p1)) )
          {
            {
              if ((_ptr__1149_varidxs[_1177_l] < _ptr__1165_wi64[safe_add( _1159_nidxs_base,_1176_p )]))
              {
                {
                  ++ _1177_l;
                }
              }
              else if((_ptr__1149_varidxs[_1177_l] > _ptr__1165_wi64[safe_add( _1159_nidxs_base,_1176_p )]))
              {
                {
                  ++ _1176_p;
                }
              }
              else
              {
                {
                  _ptr__1171_cof[safe_add( _1172_nzi,_1177_l )] = _ptr__1166_wf64[safe_add( _1160_cof_base,_1176_p )];
                  ++ _1177_l;
                  ++ _1176_p;
                }
              }
            }
          }
          _1172_nzi += (int)((_1149_varidxs)->size(0));
        }
      }
      std::vector<int32_t> _9424_;
      for (int32_t _1179_i = (int)0, _9425_ = _1152_nelem; _1179_i < _9425_ ; ++_1179_i)
      {
        for (int32_t _1180_j = (int)0, _9426_ = (int)((_1149_varidxs)->size(0)); _1180_j < _9426_ ; ++_1180_j)
        {
          _9424_.push_back(_ptr__1149_varidxs[_1180_j]);
        }
      }
      auto _9427_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9424_.size()),_9424_.begin(),_9424_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1178_subj = _9427_;
      _checked_ptr_1<int32_t> _ptr__1178_subj(_1178_subj ? _1178_subj->raw() : nullptr,_1178_subj ? _1178_subj->size(0) : 0);
      if ((_1167_num_lincon == _1152_nelem))
      {
        {
          std::vector<int32_t> _9428_;
          for (int32_t _1182_i = (int)0, _9429_ = _1152_nelem; _1182_i < _9429_ ; ++_1182_i)
          {
            for (int32_t _1183_j = (int)0, _9430_ = (int)((_1149_varidxs)->size(0)); _1183_j < _9430_ ; ++_1183_j)
            {
              _9428_.push_back(_ptr__1147_conidxs[_1182_i]);
            }
          }
          auto _9431_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9428_.size()),_9428_.begin(),_9428_.end()));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1181_subi = _9431_;
          _checked_ptr_1<int32_t> _ptr__1181_subi(_1181_subi ? _1181_subi->raw() : nullptr,_1181_subi ? _1181_subi->size(0) : 0);
          task_putaijlist(_1181_subi,_1178_subj,_1171_cof,(int64_t)(_1172_nzi));
          if ((_1155_ncodeatom > (int)0))
          {
            {
              con_blocks->replace_row_code(rs,_1147_conidxs,_1157_ptr_base,_1159_nidxs_base,_1162_codeptr,_1161_code,_1163_cconst);
            }
          }
          {}
        }
      }
      else
      {
        {
          std::vector<int32_t> _9432_;
          for (int32_t _1185_i = (int)0, _9433_ = _1152_nelem; _1185_i < _9433_ ; ++_1185_i)
          {
            for (int32_t _1186_j = (int)0, _9434_ = (int)((_1149_varidxs)->size(0)); _1186_j < _9434_ ; ++_1186_j)
            {
              _9432_.push_back((-safe_add( _ptr__1147_conidxs[_1185_i],(int)1 )));
            }
          }
          auto _9435_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9432_.size()),_9432_.begin(),_9432_.end()));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1184_subi = _9435_;
          _checked_ptr_1<int32_t> _ptr__1184_subi(_1184_subi ? _1184_subi->raw() : nullptr,_1184_subi ? _1184_subi->size(0) : 0);
          task_putafefijlist(_1184_subi,_1178_subj,_1171_cof);
          if ((_1155_ncodeatom > (int)0))
          {
            {
              std::vector<int32_t> _9436_;
              for (int32_t _1187_i = (int)0, _9437_ = _1152_nelem; _1187_i < _9437_ ; ++_1187_i)
              {
                _9436_.push_back((-safe_add( (int)1,_ptr__1147_conidxs[_1187_i] )));
              }
              auto _9438_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9436_.size()),_9436_.begin(),_9436_.end()));
              afe_blocks->replace_row_code(rs,_9438_,_1157_ptr_base,_1159_nidxs_base,_1162_codeptr,_1161_code,_1163_cconst);
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int32_t _1188_cN = safe_mul( _1169_num_concon,(int)((_1149_varidxs)->size(0)) );
      int32_t _1189_lN = safe_mul( _1167_num_lincon,(int)((_1149_varidxs)->size(0)) );
      std::shared_ptr< monty::ndarray< double,1 > > _1190_lcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1189_lN)));
      _checked_ptr_1<double> _ptr__1190_lcof(_1190_lcof ? _1190_lcof->raw() : nullptr,_1190_lcof ? _1190_lcof->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1191_ccof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1188_cN)));
      _checked_ptr_1<double> _ptr__1191_ccof(_1191_ccof ? _1191_ccof->raw() : nullptr,_1191_ccof ? _1191_ccof->size(0) : 0);
      std::vector<int32_t> _9439_;
      for (int32_t _1193_i = (int)0, _9440_ = _1167_num_lincon; _1193_i < _9440_ ; ++_1193_i)
      {
        for (int32_t _1194_j = (int)0, _9441_ = (int)((_1149_varidxs)->size(0)); _1194_j < _9441_ ; ++_1194_j)
        {
          _9439_.push_back(_ptr__1149_varidxs[_1194_j]);
        }
      }
      auto _9442_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9439_.size()),_9439_.begin(),_9439_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1192_lsubj = _9442_;
      _checked_ptr_1<int32_t> _ptr__1192_lsubj(_1192_lsubj ? _1192_lsubj->raw() : nullptr,_1192_lsubj ? _1192_lsubj->size(0) : 0);
      std::vector<int32_t> _9443_;
      for (int32_t _1196_i = (int)0, _9444_ = _1169_num_concon; _1196_i < _9444_ ; ++_1196_i)
      {
        for (int32_t _1197_j = (int)0, _9445_ = (int)((_1149_varidxs)->size(0)); _1197_j < _9445_ ; ++_1197_j)
        {
          _9443_.push_back(_ptr__1149_varidxs[_1197_j]);
        }
      }
      auto _9446_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9443_.size()),_9443_.begin(),_9443_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1195_csubj = _9446_;
      _checked_ptr_1<int32_t> _ptr__1195_csubj(_1195_csubj ? _1195_csubj->raw() : nullptr,_1195_csubj ? _1195_csubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1198_lsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1167_num_lincon)));
      _checked_ptr_1<int32_t> _ptr__1198_lsubi(_1198_lsubi ? _1198_lsubi->raw() : nullptr,_1198_lsubi ? _1198_lsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1199_csubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1169_num_concon)));
      _checked_ptr_1<int32_t> _ptr__1199_csubi(_1199_csubi ? _1199_csubi->raw() : nullptr,_1199_csubi ? _1199_csubi->size(0) : 0);
      int32_t _1200_crowi = (int)0;
      int32_t _1201_lrowi = (int)0;
      int32_t _1202_cncodeelm = (int)0;
      int32_t _1203_lncodeelm = (int)0;
      int32_t _1204_cnnz = (int)0;
      int32_t _1205_lnnz = (int)0;
      int32_t _9447_ = (int)0;
      int32_t _9448_ = _1152_nelem;
      for (int32_t _1206_i = _9447_; _1206_i < _9448_; ++_1206_i)
      {
        {
          int32_t _1207_p0 = _ptr__1164_wi32[safe_add( _1157_ptr_base,_1206_i )];
          int32_t _1208_p1 = _ptr__1164_wi32[safe_add( safe_add( _1157_ptr_base,_1206_i ),(int)1 )];
          int32_t _1209_p = _1207_p0;
          int32_t _1210_l = (int)0;
          if ((_ptr__1147_conidxs[_1206_i] >= (int)0))
          {
            {
              while ( ((_1210_l < (int)((_1149_varidxs)->size(0))) && (_1209_p < _1208_p1)) )
              {
                {
                  if ((_ptr__1149_varidxs[_1210_l] < _ptr__1165_wi64[safe_add( _1159_nidxs_base,_1209_p )]))
                  {
                    {
                      ++ _1210_l;
                    }
                  }
                  else if((_ptr__1149_varidxs[_1210_l] > _ptr__1165_wi64[safe_add( _1159_nidxs_base,_1209_p )]))
                  {
                    {
                      ++ _1209_p;
                    }
                  }
                  else
                  {
                    {
                      _ptr__1190_lcof[safe_add( _1205_lnnz,_1210_l )] = _ptr__1166_wf64[safe_add( _1160_cof_base,_1209_p )];
                      ++ _1210_l;
                      ++ _1209_p;
                    }
                  }
                }
              }
              int32_t _9449_ = (int)0;
              int32_t _9450_ = (int)((_1149_varidxs)->size(0));
              for (int32_t _1211_j = _9449_; _1211_j < _9450_; ++_1211_j)
              {
                {
                  _ptr__1198_lsubi[safe_add( _1205_lnnz,_1211_j )] = _ptr__1147_conidxs[_1206_i];
                }
              }
              _1205_lnnz += (int)((_1149_varidxs)->size(0));
            }
          }
          else
          {
            {
              while ( ((_1210_l < (int)((_1149_varidxs)->size(0))) && (_1209_p < _1208_p1)) )
              {
                {
                  if ((_ptr__1149_varidxs[_1210_l] < _ptr__1165_wi64[safe_add( _1159_nidxs_base,_1209_p )]))
                  {
                    {
                      ++ _1210_l;
                    }
                  }
                  else if((_ptr__1149_varidxs[_1210_l] > _ptr__1165_wi64[safe_add( _1159_nidxs_base,_1209_p )]))
                  {
                    {
                      ++ _1209_p;
                    }
                  }
                  else
                  {
                    {
                      _ptr__1191_ccof[safe_add( _1204_cnnz,_1210_l )] = _ptr__1166_wf64[safe_add( _1160_cof_base,_1209_p )];
                      ++ _1210_l;
                      ++ _1209_p;
                    }
                  }
                }
              }
              int32_t _9451_ = (int)0;
              int32_t _9452_ = (int)((_1149_varidxs)->size(0));
              for (int32_t _1212_j = _9451_; _1212_j < _9452_; ++_1212_j)
              {
                {
                  _ptr__1199_csubi[safe_add( _1204_cnnz,_1212_j )] = (-safe_add( (int)1,_ptr__1147_conidxs[_1206_i] ));
                }
              }
              _1204_cnnz += (int)((_1149_varidxs)->size(0));
            }
          }
        }
      }
      task_putaijlist(_1198_lsubi,_1192_lsubj,_1190_lcof,(int64_t)(_1205_lnnz));
      task_putafefijlist(_1199_csubi,_1195_csubj,_1191_ccof);
      if ((_1155_ncodeatom > (int)0))
      {
        {
          int32_t _9453_ = (int)0;
          int32_t _9454_ = _1152_nelem;
          for (int32_t _1213_i = _9453_; _1213_i < _9454_; ++_1213_i)
          {
            {
              if ((_ptr__1147_conidxs[_1213_i] >= (int)0))
              {
                {
                  _1205_lnnz += (_ptr__1164_wi32[safe_add( safe_add( _1157_ptr_base,_1213_i ),(int)1 )] - _ptr__1164_wi32[safe_add( _1157_ptr_base,_1213_i )]);
                }
              }
              else
              {
                {
                  _1204_cnnz += (_ptr__1164_wi32[safe_add( safe_add( _1157_ptr_base,_1213_i ),(int)1 )] - _ptr__1164_wi32[safe_add( _1157_ptr_base,_1213_i )]);
                }
              }
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1214_lrowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1167_num_lincon)));
          _checked_ptr_1<int32_t> _ptr__1214_lrowidx(_1214_lrowidx ? _1214_lrowidx->raw() : nullptr,_1214_lrowidx ? _1214_lrowidx->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1215_crowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1169_num_concon)));
          _checked_ptr_1<int32_t> _ptr__1215_crowidx(_1215_crowidx ? _1215_crowidx->raw() : nullptr,_1215_crowidx ? _1215_crowidx->size(0) : 0);
          int32_t _1216_lptr = xs->alloci32(safe_add( _1167_num_lincon,(int)1 ));
          int32_t _1217_cptr = xs->alloci32(safe_add( _1169_num_concon,(int)1 ));
          int32_t _1218_lnidxs = xs->alloci64(_1205_lnnz);
          int32_t _1219_cnidxs = xs->alloci64(_1204_cnnz);
          std::shared_ptr< monty::ndarray< double,1 > > _1220_xf64 = mosek::fusion::p_WorkStack::_get_impl(xs)->f64;
          _checked_ptr_1<double> _ptr__1220_xf64(_1220_xf64 ? _1220_xf64->raw() : nullptr,_1220_xf64 ? _1220_xf64->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _1221_xi64 = mosek::fusion::p_WorkStack::_get_impl(xs)->i64;
          _checked_ptr_1<int64_t> _ptr__1221_xi64(_1221_xi64 ? _1221_xi64->raw() : nullptr,_1221_xi64 ? _1221_xi64->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1222_xi32 = mosek::fusion::p_WorkStack::_get_impl(xs)->i32;
          _checked_ptr_1<int32_t> _ptr__1222_xi32(_1222_xi32 ? _1222_xi32->raw() : nullptr,_1222_xi32 ? _1222_xi32->size(0) : 0);
          _ptr__1222_xi32[_1216_lptr] = (int)0;
          _ptr__1222_xi32[_1217_cptr] = (int)0;
          int32_t _1223_ci = (int)0;
          int32_t _1224_li = (int)0;
          int32_t _1225_cnzi = (int)0;
          int32_t _1226_lnzi = (int)0;
          int32_t _9455_ = (int)0;
          int32_t _9456_ = _1152_nelem;
          for (int32_t _1227_i = _9455_; _1227_i < _9456_; ++_1227_i)
          {
            {
              int32_t _1228_pb = _ptr__1164_wi32[safe_add( _1157_ptr_base,_1227_i )];
              int32_t _1229_pe = _ptr__1164_wi32[safe_add( safe_add( _1157_ptr_base,_1227_i ),(int)1 )];
              if ((_ptr__1147_conidxs[_1227_i] >= (int)0))
              {
                {
                  _1226_lnzi += (_1229_pe - _1228_pb);
                  _ptr__1214_lrowidx[_1224_li] = _ptr__1147_conidxs[_1227_i];
                  _ptr__1222_xi32[safe_add( safe_add( _1216_lptr,_1224_li ),(int)1 )] = _1226_lnzi;
                  ++ _1224_li;
                }
              }
              else
              {
                {
                  _1225_cnzi += (_1229_pe - _1228_pb);
                  _ptr__1215_crowidx[_1223_ci] = (-safe_add( (int)1,_ptr__1147_conidxs[_1227_i] ));
                  _ptr__1222_xi32[safe_add( safe_add( _1217_cptr,_1223_ci ),(int)1 )] = _1225_cnzi;
                  ++ _1223_ci;
                }
              }
            }
          }
          int32_t _9457_ = (int)0;
          int32_t _9458_ = _1152_nelem;
          for (int32_t _1230_i = _9457_; _1230_i < _9458_; ++_1230_i)
          {
            {
              if ((_ptr__1147_conidxs[_1230_i] >= (int)0))
              {
                {
                  _1203_lncodeelm += (_ptr__1164_wi32[safe_add( _1162_codeptr,_ptr__1164_wi32[safe_add( safe_add( _1157_ptr_base,_1230_i ),(int)1 )] )] - _ptr__1164_wi32[safe_add( _1162_codeptr,_ptr__1164_wi32[safe_add( _1157_ptr_base,_1230_i )] )]);
                }
              }
              else
              {
                {
                  _1202_cncodeelm += (_ptr__1164_wi32[safe_add( _1162_codeptr,_ptr__1164_wi32[safe_add( safe_add( _1157_ptr_base,_1230_i ),(int)1 )] )] - _ptr__1164_wi32[safe_add( _1162_codeptr,_ptr__1164_wi32[safe_add( _1157_ptr_base,_1230_i )] )]);
                }
              }
            }
          }
          int32_t _1231_lcodeptr = xs->alloci32(safe_add( _1205_lnnz,(int)1 ));
          int32_t _1232_ccodeptr = xs->alloci32(safe_add( _1204_cnnz,(int)1 ));
          int32_t _1233_lcode = xs->alloci32(_1203_lncodeelm);
          int32_t _1234_ccode = xs->alloci32(_1202_cncodeelm);
          int32_t _1235_lcconst = xs->allocf64(_1203_lncodeelm);
          int32_t _1236_ccconst = xs->allocf64(_1202_cncodeelm);
          _ptr__1222_xi32[_1231_lcodeptr] = (int)0;
          _ptr__1222_xi32[_1232_ccodeptr] = (int)0;
          int32_t _1237_ccodei = (int)0;
          int32_t _1238_lcodei = (int)0;
          int32_t _1239_rnzi = (int)0;
          int32_t _1240_lnzi = (int)0;
          int32_t _9459_ = (int)0;
          int32_t _9460_ = _1152_nelem;
          for (int32_t _1241_i = _9459_; _1241_i < _9460_; ++_1241_i)
          {
            {
              int32_t _1242_pb = _ptr__1164_wi32[safe_add( _1157_ptr_base,_1241_i )];
              int32_t _1243_pe = _ptr__1164_wi32[safe_add( safe_add( _1157_ptr_base,_1241_i ),(int)1 )];
              if ((_ptr__1147_conidxs[_1241_i] >= (int)0))
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1164_wi32,safe_add( _1161_code,_ptr__1164_wi32[safe_add( _1162_codeptr,_1242_pb )] ),_1222_xi32,safe_add( _1233_lcode,_1238_lcodei ),(_ptr__1164_wi32[safe_add( _1162_codeptr,_1243_pe )] - _ptr__1164_wi32[safe_add( _1162_codeptr,_1242_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1166_wf64,safe_add( _1163_cconst,_ptr__1164_wi32[safe_add( _1162_codeptr,_1242_pb )] ),_1220_xf64,safe_add( _1235_lcconst,_1238_lcodei ),(_ptr__1164_wi32[safe_add( _1162_codeptr,_1243_pe )] - _ptr__1164_wi32[safe_add( _1162_codeptr,_1242_pb )]));
                  int32_t _9461_ = _1242_pb;
                  int32_t _9462_ = _1243_pe;
                  for (int32_t _1244_j = _9461_; _1244_j < _9462_; ++_1244_j)
                  {
                    {
                      _1238_lcodei += (_ptr__1164_wi32[safe_add( safe_add( _1162_codeptr,_1244_j ),(int)1 )] - _ptr__1164_wi32[safe_add( _1162_codeptr,_1244_j )]);
                      _ptr__1222_xi32[safe_add( safe_add( _1231_lcodeptr,_1240_lnzi ),(int)1 )] = _1238_lcodei;
                      ++ _1240_lnzi;
                    }
                  }
                }
              }
              else
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1164_wi32,safe_add( _1161_code,_ptr__1164_wi32[safe_add( _1162_codeptr,_1242_pb )] ),_1222_xi32,safe_add( _1234_ccode,_1237_ccodei ),(_ptr__1164_wi32[safe_add( _1162_codeptr,_1243_pe )] - _ptr__1164_wi32[safe_add( _1162_codeptr,_1242_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1166_wf64,safe_add( _1163_cconst,_ptr__1164_wi32[safe_add( _1162_codeptr,_1242_pb )] ),_1220_xf64,safe_add( _1236_ccconst,_1237_ccodei ),(_ptr__1164_wi32[safe_add( _1162_codeptr,_1243_pe )] - _ptr__1164_wi32[safe_add( _1162_codeptr,_1242_pb )]));
                  int32_t _9463_ = _1242_pb;
                  int32_t _9464_ = _1243_pe;
                  for (int32_t _1245_j = _9463_; _1245_j < _9464_; ++_1245_j)
                  {
                    {
                      _1237_ccodei += (_ptr__1164_wi32[safe_add( safe_add( _1162_codeptr,_1245_j ),(int)1 )] - _ptr__1164_wi32[safe_add( _1162_codeptr,_1245_j )]);
                      _ptr__1222_xi32[safe_add( safe_add( _1232_ccodeptr,_1225_cnzi ),(int)1 )] = _1237_ccodei;
                      ++ _1225_cnzi;
                    }
                  }
                }
              }
            }
          }
          con_blocks->replace_row_code(xs,_1214_lrowidx,_1216_lptr,_1218_lnidxs,_1231_lcodeptr,_1233_lcode,_1235_lcconst);
          afe_blocks->replace_row_code(xs,_1215_crowidx,_1217_cptr,_1219_cnidxs,_1232_ccodeptr,_1234_ccode,_1236_ccconst);
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1246_lrowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1167_num_lincon)));
          _checked_ptr_1<int32_t> _ptr__1246_lrowidx(_1246_lrowidx ? _1246_lrowidx->raw() : nullptr,_1246_lrowidx ? _1246_lrowidx->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1247_crowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1169_num_concon)));
          _checked_ptr_1<int32_t> _ptr__1247_crowidx(_1247_crowidx ? _1247_crowidx->raw() : nullptr,_1247_crowidx ? _1247_crowidx->size(0) : 0);
          int32_t _1248_ci = (int)0;
          int32_t _1249_li = (int)0;
          int32_t _9465_ = (int)0;
          int32_t _9466_ = _1152_nelem;
          for (int32_t _1250_i = _9465_; _1250_i < _9466_; ++_1250_i)
          {
            {
              if ((_ptr__1147_conidxs[_1250_i] >= (int)0))
              {
                {
                  _ptr__1246_lrowidx[_1249_li] = _ptr__1147_conidxs[_1250_i];
                  ++ _1249_li;
                }
              }
              else
              {
                {
                  _ptr__1247_crowidx[_1248_ci] = (-safe_add( (int)1,_ptr__1147_conidxs[_1250_i] ));
                  ++ _1248_ci;
                }
              }
            }
          }
          con_blocks->clear_row_code(_1246_lrowidx);
          afe_blocks->clear_row_code(_1247_crowidx);
        }
      }
    }
  }
  xs->clear();
}
// End mosek.fusion.Model.update

// Begin mosek.fusion.Model.updateObjective
// Method mosek.fusion.Model.updateObjective @ src/fusion/Model.mbi:2829:6-2912:7
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _1251_expr,monty::rc_ptr< ::mosek::fusion::Variable > _1252_x) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_1251_expr,_1252_x); }
void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _1251_expr,monty::rc_ptr< ::mosek::fusion::Variable > _1252_x)
{
  if ((_1251_expr->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((mosek::fusion::p_RowBlockManager::_get_impl(obj_blocks)->code_used > (int)0))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
    }
  }
  {}
  int32_t _1253_ni = _1252_x->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1254_varidxs_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1253_ni)));
  _checked_ptr_1<int64_t> _ptr__1254_varidxs_(_1254_varidxs_ ? _1254_varidxs_->raw() : nullptr,_1254_varidxs_ ? _1254_varidxs_->size(0) : 0);
  if ((_1253_ni < _1252_x->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1255_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1253_ni)));
      _checked_ptr_1<int64_t> _ptr__1255_sp(_1255_sp ? _1255_sp->raw() : nullptr,_1255_sp ? _1255_sp->size(0) : 0);
      _1252_x->inst((int)0,_1255_sp,(int)0,_1254_varidxs_);
    }
  }
  else
  {
    {
      _1252_x->inst((int)0,_1254_varidxs_);
    }
  }
  int32_t _9467_ = (int)0;
  int32_t _9468_ = _1253_ni;
  for (int32_t _1256_i = _9467_; _1256_i < _9468_; ++_1256_i)
  {
    {
      if ((_ptr__1254_varidxs_[_1256_i] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _1257_varidxs_issorted = true;
  int32_t _9469_ = (int)0;
  int32_t _9470_ = (_1253_ni - (int)1);
  for (int32_t _1258_i = _9469_; _1258_i < _9470_; ++_1258_i)
  {
    {
      _1257_varidxs_issorted = (_1257_varidxs_issorted && (_ptr__1254_varidxs_[_1258_i] < _ptr__1254_varidxs_[(_1258_i - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1259_varidxs = nullptr;
  _checked_ptr_1<int32_t> _ptr__1259_varidxs(_1259_varidxs ? _1259_varidxs->raw() : nullptr,_1259_varidxs ? _1259_varidxs->size(0) : 0);
  if (_1257_varidxs_issorted)
  {
    {
      std::vector<int32_t> _9471_;
      for (int32_t _1260_i = (int)0, _9472_ = _1253_ni; _1260_i < _9472_ ; ++_1260_i)
      {
        _9471_.push_back((int32_t)_ptr__1254_varidxs_[_1260_i]);
      }
      auto _9473_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9471_.size()),_9471_.begin(),_9471_.end()));
      _1259_varidxs = _9473_;
      _ptr__1259_varidxs.update(_1259_varidxs ? _1259_varidxs->raw() : nullptr, _1259_varidxs ? _1259_varidxs->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<int64_t> _9474_;
      for (int32_t _1262_i = (-(int)1), _9475_ = _1253_ni; _1262_i < _9475_ ; ++_1262_i)
      {
        _9474_.push_back(_1262_i);
      }
      auto _9476_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9474_.size()),_9474_.begin(),_9474_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1261_perm = _9476_;
      _checked_ptr_1<int64_t> _ptr__1261_perm(_1261_perm ? _1261_perm->raw() : nullptr,_1261_perm ? _1261_perm->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1261_perm,_1254_varidxs_,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_1253_ni));
      std::vector<int32_t> _9477_;
      for (int32_t _1263_i = (int)0, _9478_ = _1253_ni; _1263_i < _9478_ ; ++_1263_i)
      {
        _9477_.push_back((int32_t)_ptr__1254_varidxs_[_ptr__1261_perm[_1263_i]]);
      }
      auto _9479_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9477_.size()),_9477_.begin(),_9477_.end()));
      _1259_varidxs = _9479_;
      _ptr__1259_varidxs.update(_1259_varidxs ? _1259_varidxs->raw() : nullptr, _1259_varidxs ? _1259_varidxs->size(0) : 0);
    }
  }
  int32_t _1264_N = (int)((_1259_varidxs)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _1265_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1264_N)));
  _checked_ptr_1<double> _ptr__1265_cof(_1265_cof ? _1265_cof->raw() : nullptr,_1265_cof ? _1265_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1266_subj = _1259_varidxs;
  _checked_ptr_1<int32_t> _ptr__1266_subj(_1266_subj ? _1266_subj->raw() : nullptr,_1266_subj ? _1266_subj->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1251_expr)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  {
  }
  int32_t _1267_nd = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int32_t _1268_nelem = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int32_t _1269_nnz = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _1270_hassp = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int32_t _1271_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int32_t _1272_shape_base = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int32_t _1273_ptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int32_t _1274_sp_base = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int32_t _1275_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int32_t _1276_cof_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int32_t _1277_code_base = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int32_t _1278_codeptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int32_t _1279_cconst_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  {
  }
  if ((_1271_ncodeatom > (int)0))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1280_wi32 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int32_t> _ptr__1280_wi32(_1280_wi32 ? _1280_wi32->raw() : nullptr,_1280_wi32 ? _1280_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1281_wi64 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<int64_t> _ptr__1281_wi64(_1281_wi64 ? _1281_wi64->raw() : nullptr,_1281_wi64 ? _1281_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1282_wf64 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__1282_wf64(_1282_wf64 ? _1282_wf64->raw() : nullptr,_1282_wf64 ? _1282_wf64->size(0) : 0);
  int32_t _1283_k = (int)0;
  int32_t _9480_ = (int)0;
  int32_t _9481_ = _1268_nelem;
  for (int32_t _1284_i = _9480_; _1284_i < _9481_; ++_1284_i)
  {
    {
      int32_t _1285_p0 = _ptr__1280_wi32[safe_add( _1273_ptr_base,_1284_i )];
      int32_t _1286_p1 = _ptr__1280_wi32[safe_add( safe_add( _1273_ptr_base,_1284_i ),(int)1 )];
      int32_t _1287_p = _1285_p0;
      int32_t _1288_l = (int)0;
      while ( ((_1288_l < (int)((_1259_varidxs)->size(0))) && (_1287_p < _1286_p1)) )
      {
        {
          if ((_ptr__1259_varidxs[_1288_l] < _ptr__1281_wi64[safe_add( _1275_nidxs_base,_1287_p )]))
          {
            {
              ++ _1288_l;
            }
          }
          else if((_ptr__1259_varidxs[_1288_l] > _ptr__1281_wi64[safe_add( _1275_nidxs_base,_1287_p )]))
          {
            {
              ++ _1287_p;
            }
          }
          else
          {
            {
              _ptr__1265_cof[safe_add( _1283_k,_1288_l )] = _ptr__1282_wf64[safe_add( _1276_cof_base,_1287_p )];
              ++ _1288_l;
              ++ _1287_p;
            }
          }
        }
      }
      _1283_k += (int)((_1259_varidxs)->size(0));
    }
  }
  task_putclist(_1266_subj,_1265_cof);
  if ((_1271_ncodeatom > (int)0))
  {
    {
      obj_blocks->replace_row_code(rs,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0)}),_1273_ptr_base,_1275_nidxs_base,_1278_codeptr_base,_1277_code_base,_1279_cconst_base);
    }
  }
  {}
}
// End mosek.fusion.Model.updateObjective

// Begin mosek.fusion.Model.parameter_unchecked
// Method mosek.fusion.Model.parameter_unchecked @ src/fusion/Model.mbi:2781:6-2814:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_unchecked(const std::string & _1289_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1290_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1291_sp)
{
  _checked_ptr_1<int32_t> _ptr__1290_shape(_1290_shape ? _1290_shape->raw() : nullptr, _1290_shape ? _1290_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1291_sp(_1291_sp ? _1291_sp->raw() : nullptr, _1291_sp ? _1291_sp->size(0) : 0);
  if ((((int)((_1289_name).size()) > (int)0) && par_map->hasItem(_1289_name)))
  {
    {
      throw ::mosek::fusion::NameError(std::string ("Duplicate parameter name"));
    }
  }
  {}
  int64_t _1292_sz = ::mosek::fusion::p_Set::size(_1290_shape);
  int32_t _9482_;
  bool _9483_ = (NULL != _1291_sp.get());
  if (_9483_)
  {
    _9482_ = (int)((_1291_sp)->size(0));
  }
  else
  {
    _9482_ = (int32_t)_1292_sz;
  }
  int32_t _1293_nelem = _9482_;
  if ((NULL == param_value.get()))
  {
    {
      param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1293_nelem)));
    }
  }
  else
  {
    {
      if ((safe_add( param_num,_1293_nelem ) > (int)((param_value)->size(0))))
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _1294_old_param_value = param_value;
          _checked_ptr_1<double> _ptr__1294_old_param_value(_1294_old_param_value ? _1294_old_param_value->raw() : nullptr,_1294_old_param_value ? _1294_old_param_value->size(0) : 0);
          int32_t _9484_;
          bool _9485_ = (safe_mul( (int)2,(int)((_1294_old_param_value)->size(0)) ) > safe_add( (int)((_1294_old_param_value)->size(0)),_1293_nelem ));
          if (_9485_)
          {
            _9484_ = safe_mul( (int)2,(int)((_1294_old_param_value)->size(0)) );
          }
          else
          {
            _9484_ = safe_add( (int)((_1294_old_param_value)->size(0)),_1293_nelem );
          }
          int32_t _1295_new_len = _9484_;
          param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1295_new_len)));
          if ((param_num > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_1294_old_param_value,(int)0,param_value,(int)0,param_num);
            }
          }
          {}
        }
      }
      {}
    }
  }
  std::vector<int32_t> _9486_;
  for (int32_t _1297_i = (int)0, _9487_ = (int32_t)_1293_nelem; _1297_i < _9487_ ; ++_1297_i)
  {
    _9486_.push_back(safe_add( param_num,_1297_i ));
  }
  auto _9488_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9486_.size()),_9486_.begin(),_9486_.end()));
  monty::rc_ptr< ::mosek::fusion::ParameterImpl > _1296_r = ::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::Model::t(_pubthis),_1290_shape,_1291_sp,_9488_);
  param_num += _1293_nelem;
  if (((int)((_1289_name).size()) > (int)0))
  {
    {
      if (((NULL == parameters.get()) || (numparameter == (int)((parameters)->size(0)))))
      {
        {
          std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _1298_tmppar = parameters;
          std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _9489_;
          for (int32_t _1299_i = (int)0, _9490_ = safe_add( safe_mul( numparameter,(int)2 ),(int)64 ); _1299_i < _9490_ ; ++_1299_i)
          {
            _9489_.push_back(nullptr);
          }
          auto _9491_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_9489_.size()),_9489_.begin(),_9489_.end()));
          parameters = _9491_;
          int32_t _9492_ = (int)0;
          int32_t _9493_ = numparameter;
          for (int32_t _1300_i = _9492_; _1300_i < _9493_; ++_1300_i)
          {
            {
              ((*parameters)(_1300_i)) = ((*_1298_tmppar)(_1300_i));
            }
          }
        }
      }
      {}
      ((*parameters)(numparameter)) = (_1296_r).as<::mosek::fusion::Parameter>();
      par_map->setItem(_1289_name,numparameter);
      numparameter += (int)1;
    }
  }
  {}
  return (_1296_r).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.Model.parameter_unchecked

// Begin mosek.fusion.Model.parameter_
// Method mosek.fusion.Model.parameter_ @ src/fusion/Model.mbi:2765:6-2779:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _1301_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1302_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1303_sp)
{
  _checked_ptr_1<int32_t> _ptr__1302_shape(_1302_shape ? _1302_shape->raw() : nullptr, _1302_shape ? _1302_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1303_sp(_1303_sp ? _1303_sp->raw() : nullptr, _1303_sp ? _1303_sp->size(0) : 0);
  bool _1304_sorted = true;
  int32_t _1305_nd = (int)((_1302_shape)->size(0));
  if (((NULL != _1303_sp.get()) && ((int)((_1303_sp)->size(0)) > (int)0)))
  {
    {
      bool _1306_ok = (_ptr__1303_sp[((int)((_1303_sp)->size(0)) - (int)1)] < ::mosek::fusion::p_Set::size(_1302_shape));
      int32_t _9494_ = (int)1;
      int32_t _9495_ = (int)((_1303_sp)->size(0));
      for (int32_t _1307_i = _9494_; _1307_i < _9495_; ++_1307_i)
      {
        {
          _1306_ok = (_1306_ok && (_ptr__1303_sp[(_1307_i - (int)1)] < _ptr__1303_sp[_1307_i]));
        }
      }
      if ((!_1306_ok))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Unordered sparsity pattern"));
        }
      }
      {}
    }
  }
  {}
  return __mosek_2fusion_2Model__parameter_unchecked(_1301_name,_1302_shape,_1303_sp);
}
// End mosek.fusion.Model.parameter_

// Begin mosek.fusion.Model.parameter_
// Method mosek.fusion.Model.parameter_ @ src/fusion/Model.mbi:2742:6-2763:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _1308_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1309_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1310_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__1309_shape(_1309_shape ? _1309_shape->raw() : nullptr, _1309_shape ? _1309_shape->size(0) : 0);
  int32_t _1311_n = (int)((_1310_sparsity)->size(0));
  int32_t _1312_m = (int)((_1310_sparsity)->size(1));
  if (((int)((_1309_shape)->size(0)) != _1312_m))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid sparsity"));
    }
  }
  {}
  if ((NULL == _1310_sparsity.get()))
  {
    {
      return __mosek_2fusion_2Model__parameter_unchecked(_1308_name,_1309_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1313_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1311_n)));
      _checked_ptr_1<int64_t> _ptr__1313_sp(_1313_sp ? _1313_sp->raw() : nullptr,_1313_sp ? _1313_sp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1314_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1312_m)));
      _checked_ptr_1<int64_t> _ptr__1314_strides(_1314_strides ? _1314_strides->raw() : nullptr,_1314_strides ? _1314_strides->size(0) : 0);
      _ptr__1314_strides[(_1312_m - (int)1)] = (int)1;
      int32_t _9496_ = (int)1;
      int32_t _9497_ = _1312_m;
      for (int32_t _1315_i = _9496_; _1315_i < _9497_; ++_1315_i)
      {
        {
          _ptr__1314_strides[((_1312_m - (int)1) - _1315_i)] = safe_mul( _ptr__1314_strides[(_1312_m - _1315_i)],_ptr__1309_shape[(_1312_m - _1315_i)] );
        }
      }
      int32_t _9498_ = (int)0;
      int32_t _9499_ = _1311_n;
      for (int32_t _1316_i = _9498_; _1316_i < _9499_; ++_1316_i)
      {
        {
          _ptr__1313_sp[_1316_i] = (int)0;
          int32_t _9500_ = (int)0;
          int32_t _9501_ = _1312_m;
          for (int32_t _1317_j = _9500_; _1317_j < _9501_; ++_1317_j)
          {
            {
              _ptr__1313_sp[_1316_i] += safe_mul( ((*_1310_sparsity)(_1316_i,_1317_j)),_ptr__1314_strides[_1317_j] );
            }
          }
        }
      }
      return __mosek_2fusion_2Model__parameter_(_1308_name,_1309_shape,_1313_sp);
    }
  }
}
// End mosek.fusion.Model.parameter_

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2740:6-139
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1318_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1318_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1318_name) { return __mosek_2fusion_2Model__parameter(_1318_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1318_name)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1319_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1319_sp(_1319_sp ? _1319_sp->raw() : nullptr,_1319_sp ? _1319_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1318_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),_1319_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2739:6-159
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1320_name,int32_t _1321_d1,int32_t _1322_d2,int32_t _1323_d3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1320_name,_1321_d1,_1322_d2,_1323_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1320_name,int32_t _1321_d1,int32_t _1322_d2,int32_t _1323_d3) { return __mosek_2fusion_2Model__parameter(_1320_name,_1321_d1,_1322_d2,_1323_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1320_name,int32_t _1321_d1,int32_t _1322_d2,int32_t _1323_d3)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1324_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1324_sp(_1324_sp ? _1324_sp->raw() : nullptr,_1324_sp ? _1324_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1320_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1321_d1),(int32_t)(_1322_d2),(int32_t)(_1323_d3)}),_1324_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2738:6-146
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1325_name,int32_t _1326_d1,int32_t _1327_d2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1325_name,_1326_d1,_1327_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1325_name,int32_t _1326_d1,int32_t _1327_d2) { return __mosek_2fusion_2Model__parameter(_1325_name,_1326_d1,_1327_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1325_name,int32_t _1326_d1,int32_t _1327_d2)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1328_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1328_sp(_1328_sp ? _1328_sp->raw() : nullptr,_1328_sp ? _1328_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1325_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1326_d1),(int32_t)(_1327_d2)}),_1328_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2737:6-143
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1329_name,int32_t _1330_d1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1329_name,_1330_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1329_name,int32_t _1330_d1) { return __mosek_2fusion_2Model__parameter(_1329_name,_1330_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1329_name,int32_t _1330_d1)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1331_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1331_sp(_1331_sp ? _1331_sp->raw() : nullptr,_1331_sp ? _1331_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1329_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1330_d1)}),_1331_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2736:6-134
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1332_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1333_shape) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1332_name,_1333_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1332_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1333_shape) { return __mosek_2fusion_2Model__parameter(_1332_name,_1333_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1332_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1333_shape)
{
  _checked_ptr_1<int32_t> _ptr__1333_shape(_1333_shape ? _1333_shape->raw() : nullptr, _1333_shape ? _1333_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1334_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1334_sp(_1334_sp ? _1334_sp->raw() : nullptr,_1334_sp ? _1334_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1332_name,_1333_shape,_1334_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2735:6-123
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1335_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1336_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1337_sp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1335_name,_1336_shape,_1337_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1335_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1336_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1337_sp) { return __mosek_2fusion_2Model__parameter(_1335_name,_1336_shape,_1337_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1335_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1336_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1337_sp)
{
  _checked_ptr_1<int32_t> _ptr__1336_shape(_1336_shape ? _1336_shape->raw() : nullptr, _1336_shape ? _1336_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1337_sp(_1337_sp ? _1337_sp->raw() : nullptr, _1337_sp ? _1337_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1335_name,_1336_shape,_1337_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2734:6-136
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1338_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1339_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1340_sparsity) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1338_name,_1339_shape,_1340_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1338_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1339_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1340_sparsity) { return __mosek_2fusion_2Model__parameter(_1338_name,_1339_shape,_1340_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1338_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1339_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1340_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__1339_shape(_1339_shape ? _1339_shape->raw() : nullptr, _1339_shape ? _1339_shape->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1338_name,_1339_shape,_1340_sparsity);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2732:6-126
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter() { return __mosek_2fusion_2Model__parameter(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter()
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1341_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1341_sp(_1341_sp ? _1341_sp->raw() : nullptr,_1341_sp ? _1341_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),_1341_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2731:6-145
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int32_t _1342_d1,int32_t _1343_d2,int32_t _1344_d3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1342_d1,_1343_d2,_1344_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int32_t _1342_d1,int32_t _1343_d2,int32_t _1344_d3) { return __mosek_2fusion_2Model__parameter(_1342_d1,_1343_d2,_1344_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int32_t _1342_d1,int32_t _1343_d2,int32_t _1344_d3)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1345_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1345_sp(_1345_sp ? _1345_sp->raw() : nullptr,_1345_sp ? _1345_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1342_d1),(int32_t)(_1343_d2),(int32_t)(_1344_d3)}),_1345_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2730:6-132
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int32_t _1346_d1,int32_t _1347_d2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1346_d1,_1347_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int32_t _1346_d1,int32_t _1347_d2) { return __mosek_2fusion_2Model__parameter(_1346_d1,_1347_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int32_t _1346_d1,int32_t _1347_d2)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1348_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1348_sp(_1348_sp ? _1348_sp->raw() : nullptr,_1348_sp ? _1348_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1346_d1),(int32_t)(_1347_d2)}),_1348_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2729:6-129
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int32_t _1349_d1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1349_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int32_t _1349_d1) { return __mosek_2fusion_2Model__parameter(_1349_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int32_t _1349_d1)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1350_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1350_sp(_1350_sp ? _1350_sp->raw() : nullptr,_1350_sp ? _1350_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1349_d1)}),_1350_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2728:6-120
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1351_shape) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1351_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1351_shape) { return __mosek_2fusion_2Model__parameter(_1351_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1351_shape)
{
  _checked_ptr_1<int32_t> _ptr__1351_shape(_1351_shape ? _1351_shape->raw() : nullptr, _1351_shape ? _1351_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1352_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1352_sp(_1352_sp ? _1352_sp->raw() : nullptr,_1352_sp ? _1352_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_1351_shape,_1352_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2727:6-109
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1353_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1354_sp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1353_shape,_1354_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1353_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1354_sp) { return __mosek_2fusion_2Model__parameter(_1353_shape,_1354_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1353_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1354_sp)
{
  _checked_ptr_1<int32_t> _ptr__1353_shape(_1353_shape ? _1353_shape->raw() : nullptr, _1353_shape ? _1353_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1354_sp(_1354_sp ? _1354_sp->raw() : nullptr, _1354_sp ? _1354_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_1353_shape,_1354_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2726:6-122
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1355_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1356_sparsity) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1355_shape,_1356_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1355_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1356_sparsity) { return __mosek_2fusion_2Model__parameter(_1355_shape,_1356_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1355_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1356_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__1355_shape(_1355_shape ? _1355_shape->raw() : nullptr, _1355_shape ? _1355_shape->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_1355_shape,_1356_sparsity);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.objective_
// Method mosek.fusion.Model.objective_ @ src/fusion/Model.mbi:2629:6-2718:7
void mosek::fusion::p_Model::objective_(const std::string & _1357_name,mosek::fusion::ObjectiveSense _1358_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1359_expr)
{
  task_putobjectivename(_1357_name);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _1360_rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _1361_ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1362_obje = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1359_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1362_obje->eval(_1360_rs,_1361_ws,xs);
  _1360_rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1363_ri32 = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1363_ri32(_1363_ri32 ? _1363_ri32->raw() : nullptr,_1363_ri32 ? _1363_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1364_ri64 = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1364_ri64(_1364_ri64 ? _1364_ri64->raw() : nullptr,_1364_ri64 ? _1364_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1365_rf64 = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->f64;
  _checked_ptr_1<double> _ptr__1365_rf64(_1365_rf64 ? _1365_rf64->raw() : nullptr,_1365_rf64 ? _1365_rf64->size(0) : 0);
  int32_t _1366_nd = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->nd;
  int32_t _1367_nelem = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->nelem;
  int32_t _1368_nnz = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->nnz;
  bool _1369_hassp = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->hassp;
  int32_t _1370_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->ncodeatom;
  int32_t _1371_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->ptr_base;
  int32_t _1372_shape_base = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->shape_base;
  int32_t _1373_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->nidxs_base;
  int32_t _1374_cof_base = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->cof_base;
  int32_t _1375_code_base = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->code_base;
  int32_t _1376_codeptr_base = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->codeptr_base;
  int32_t _1377_cconst_base = mosek::fusion::p_WorkStack::_get_impl(_1360_rs)->cconst_base;
  int64_t _1378_totalsize = (int64_t)1;
  int32_t _9502_ = (int)0;
  int32_t _9503_ = _1366_nd;
  for (int32_t _1379_i = _9502_; _1379_i < _9503_; ++_1379_i)
  {
    {
      _1366_nd *= _ptr__1363_ri32[safe_add( _1372_shape_base,_1379_i )];
    }
  }
  if ((_1378_totalsize != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((_1367_nelem != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int32_t _1380_linnz = (int)0;
  int32_t _1381_psdnz = (int)0;
  int32_t _9504_ = (int)0;
  int32_t _9505_ = _1368_nnz;
  for (int32_t _1382_i = _9504_; _1382_i < _9505_; ++_1382_i)
  {
    {
      if ((_ptr__1364_ri64[safe_add( _1373_nidxs_base,_1382_i )] < (int)0))
      {
        {
          ++ _1381_psdnz;
        }
      }
      else if((_ptr__1364_ri64[safe_add( _1373_nidxs_base,_1382_i )] >= (int)0))
      {
        {
          ++ _1380_linnz;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1383_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1380_linnz)));
  _checked_ptr_1<int32_t> _ptr__1383_subj(_1383_subj ? _1383_subj->raw() : nullptr,_1383_subj ? _1383_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1384_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1380_linnz)));
  _checked_ptr_1<double> _ptr__1384_cof(_1384_cof ? _1384_cof->raw() : nullptr,_1384_cof ? _1384_cof->size(0) : 0);
  {
    int32_t _1385_k = (int)0;
    int32_t _9506_ = (int)0;
    int32_t _9507_ = _1368_nnz;
    for (int32_t _1386_j = _9506_; _1386_j < _9507_; ++_1386_j)
    {
      {
        if ((_ptr__1364_ri64[safe_add( _1373_nidxs_base,_1386_j )] >= (int)0))
        {
          {
            _ptr__1383_subj[_1385_k] = (int32_t)_ptr__1364_ri64[safe_add( _1373_nidxs_base,_1386_j )];
            _ptr__1384_cof[_1385_k] = _ptr__1365_rf64[safe_add( _1374_cof_base,_1386_j )];
            ++ _1385_k;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_1358_sense == ::mosek::fusion::ObjectiveSense::Maximize),_1383_subj,_1384_cof,0.0);
  if ((_1381_psdnz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1387_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1381_psdnz)));
      _checked_ptr_1<int32_t> _ptr__1387_subj(_1387_subj ? _1387_subj->raw() : nullptr,_1387_subj ? _1387_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1388_subk = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1381_psdnz)));
      _checked_ptr_1<int32_t> _ptr__1388_subk(_1388_subk ? _1388_subk->raw() : nullptr,_1388_subk ? _1388_subk->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1389_subl = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1381_psdnz)));
      _checked_ptr_1<int32_t> _ptr__1389_subl(_1389_subl ? _1389_subl->raw() : nullptr,_1389_subl ? _1389_subl->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1390_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1381_psdnz)));
      _checked_ptr_1<double> _ptr__1390_val(_1390_val ? _1390_val->raw() : nullptr,_1390_val ? _1390_val->size(0) : 0);
      int32_t _9508_ = (int)0;
      int32_t _9509_ = _1381_psdnz;
      for (int32_t _1391_i = _9508_; _1391_i < _9509_; ++_1391_i)
      {
        {
          int64_t _1392_varidx = (-safe_add( _ptr__1364_ri64[safe_add( _1373_nidxs_base,_1391_i )],(int)1 ));
          _ptr__1387_subj[_1391_i] = ((*barvar_block_elm_barj)(_1392_varidx));
          _ptr__1388_subk[_1391_i] = ((*barvar_block_elm_i)(_1392_varidx));
          _ptr__1389_subl[_1391_i] = ((*barvar_block_elm_j)(_1392_varidx));
          double _9510_;
          bool _9511_ = (_ptr__1388_subk[_1391_i] == _ptr__1389_subl[_1391_i]);
          if (_9511_)
          {
            _9510_ = _ptr__1365_rf64[safe_add( _1374_cof_base,_1391_i )];
          }
          else
          {
            _9510_ = (0.5 * _ptr__1365_rf64[safe_add( _1374_cof_base,_1391_i )]);
          }
          _ptr__1390_val[_1391_i] = _9510_;
        }
      }
      task_putbarc(_1387_subj,_1388_subk,_1389_subl,_1390_val);
    }
  }
  {}
  if ((_1370_ncodeatom > (int)0))
  {
    {
      obj_blocks->replace_row_code(_1360_rs,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0)}),_1371_ptr_base,_1373_nidxs_base,_1376_codeptr_base,_1375_code_base,_1377_cconst_base);
    }
  }
  {}
}
// End mosek.fusion.Model.objective_

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2626:6-163
void mosek::fusion::Model :: objective(double _1393_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1393_c); }
void mosek::fusion::p_Model::objective(double _1393_c)
{
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_1393_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2625:6-145
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _1394_sense,double _1395_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1394_sense,_1395_c); }
void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _1394_sense,double _1395_c)
{
  objective_(std::string (""),_1394_sense,::mosek::fusion::p_Expr::constTerm(_1395_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2624:6-132
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _1396_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1397_expr) { mosek::fusion::p_Model::_get_impl(this)->objective(_1396_sense,_1397_expr); }
void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _1396_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1397_expr)
{
  objective_(std::string (""),_1396_sense,_1397_expr);
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2623:6-165
void mosek::fusion::Model :: objective(const std::string & _1398_name,double _1399_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1398_name,_1399_c); }
void mosek::fusion::p_Model::objective(const std::string & _1398_name,double _1399_c)
{
  objective_(_1398_name,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_1399_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2622:6-147
void mosek::fusion::Model :: objective(const std::string & _1400_name,mosek::fusion::ObjectiveSense _1401_sense,double _1402_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1400_name,_1401_sense,_1402_c); }
void mosek::fusion::p_Model::objective(const std::string & _1400_name,mosek::fusion::ObjectiveSense _1401_sense,double _1402_c)
{
  objective_(_1400_name,_1401_sense,::mosek::fusion::p_Expr::constTerm(_1402_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2621:6-134
void mosek::fusion::Model :: objective(const std::string & _1403_name,mosek::fusion::ObjectiveSense _1404_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1405_expr) { mosek::fusion::p_Model::_get_impl(this)->objective(_1403_name,_1404_sense,_1405_expr); }
void mosek::fusion::p_Model::objective(const std::string & _1403_name,mosek::fusion::ObjectiveSense _1404_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1405_expr)
{
  objective_(_1403_name,_1404_sense,_1405_expr);
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2619:6-161
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1406_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1407_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1406_expr,_1407_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1406_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1407_qdom) { return __mosek_2fusion_2Model__constraint(_1406_expr,_1407_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1406_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1407_qdom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1406_expr,_1407_qdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2618:6-161
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1408_name,monty::rc_ptr< ::mosek::fusion::Expression > _1409_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1410_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1408_name,_1409_expr,_1410_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1408_name,monty::rc_ptr< ::mosek::fusion::Expression > _1409_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1410_qdom) { return __mosek_2fusion_2Model__constraint(_1408_name,_1409_expr,_1410_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1408_name,monty::rc_ptr< ::mosek::fusion::Expression > _1409_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1410_qdom)
{
  return __mosek_2fusion_2Model__constraint_(_1408_name,_1409_expr,_1410_qdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2617:6-168
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1411_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1412_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1411_expr,_1412_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1411_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1412_rdom) { return __mosek_2fusion_2Model__constraint(_1411_expr,_1412_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1411_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1412_rdom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1411_expr,_1412_rdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2616:6-168
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1413_name,monty::rc_ptr< ::mosek::fusion::Expression > _1414_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1415_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1413_name,_1414_expr,_1415_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(const std::string &  _1413_name,monty::rc_ptr< ::mosek::fusion::Expression > _1414_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1415_rdom) { return __mosek_2fusion_2Model__constraint(_1413_name,_1414_expr,_1415_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1413_name,monty::rc_ptr< ::mosek::fusion::Expression > _1414_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1415_rdom)
{
  return __mosek_2fusion_2Model__constraint_(_1413_name,_1414_expr,_1415_rdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2615:6-162
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1416_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1417_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1416_expr,_1417_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1416_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1417_ldom) { return __mosek_2fusion_2Model__constraint(_1416_expr,_1417_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1416_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1417_ldom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1416_expr,_1417_ldom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2614:6-163
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1418_name,monty::rc_ptr< ::mosek::fusion::Expression > _1419_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1420_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1418_name,_1419_expr,_1420_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1418_name,monty::rc_ptr< ::mosek::fusion::Expression > _1419_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1420_ldom) { return __mosek_2fusion_2Model__constraint(_1418_name,_1419_expr,_1420_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1418_name,monty::rc_ptr< ::mosek::fusion::Expression > _1419_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1420_ldom)
{
  return __mosek_2fusion_2Model__constraint_(_1418_name,_1419_expr,_1420_ldom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2610:6-166
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1421_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1422_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1421_expr,_1422_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1421_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1422_psddom) { return __mosek_2fusion_2Model__constraint(_1421_expr,_1422_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1421_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1422_psddom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1421_expr,_1422_psddom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2609:6-166
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1423_name,monty::rc_ptr< ::mosek::fusion::Expression > _1424_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1425_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1423_name,_1424_expr,_1425_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1423_name,monty::rc_ptr< ::mosek::fusion::Expression > _1424_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1425_psddom) { return __mosek_2fusion_2Model__constraint(_1423_name,_1424_expr,_1425_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1423_name,monty::rc_ptr< ::mosek::fusion::Expression > _1424_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1425_psddom)
{
  return __mosek_2fusion_2Model__constraint_(_1423_name,_1424_expr,_1425_psddom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2598:6-170
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1426_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1426_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1426_psddom) { return __mosek_2fusion_2Model__variable(_1426_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1426_psddom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_1426_psddom)->shape,_1426_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2597:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1427_n,int32_t _1428_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1429_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1427_n,_1428_m,_1429_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1427_n,int32_t _1428_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1429_psddom) { return __mosek_2fusion_2Model__variable(_1427_n,_1428_m,_1429_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1427_n,int32_t _1428_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1429_psddom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1428_m),(int32_t)(_1427_n),(int32_t)(_1427_n)}),_1429_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2596:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1430_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1431_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1430_n,_1431_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1430_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1431_psddom) { return __mosek_2fusion_2Model__variable(_1430_n,_1431_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1430_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1431_psddom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1430_n),(int32_t)(_1430_n)}),_1431_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2595:6-170
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1432_name,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1433_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1432_name,_1433_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1432_name,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1433_psddom) { return __mosek_2fusion_2Model__variable(_1432_name,_1433_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1432_name,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1433_psddom)
{
  return __mosek_2fusion_2Model__variable_(_1432_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1433_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2594:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1434_name,int32_t _1435_n,int32_t _1436_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1437_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1434_name,_1435_n,_1436_m,_1437_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1434_name,int32_t _1435_n,int32_t _1436_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1437_psddom) { return __mosek_2fusion_2Model__variable(_1434_name,_1435_n,_1436_m,_1437_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1434_name,int32_t _1435_n,int32_t _1436_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1437_psddom)
{
  return __mosek_2fusion_2Model__variable_(_1434_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1436_m),(int32_t)(_1435_n),(int32_t)(_1435_n)}),_1437_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2593:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1438_name,int32_t _1439_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1440_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1438_name,_1439_n,_1440_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1438_name,int32_t _1439_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1440_psddom) { return __mosek_2fusion_2Model__variable(_1438_name,_1439_n,_1440_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1438_name,int32_t _1439_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1440_psddom)
{
  return __mosek_2fusion_2Model__variable_(_1438_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1439_n),(int32_t)(_1439_n)}),_1440_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2592:6-157
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1441_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1442_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1443_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1441_name,_1442_shp,_1443_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1441_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1442_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1443_psddom) { return __mosek_2fusion_2Model__variable(_1441_name,_1442_shp,_1443_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1441_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1442_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1443_psddom)
{
  _checked_ptr_1<int32_t> _ptr__1442_shp(_1442_shp ? _1442_shp->raw() : nullptr, _1442_shp ? _1442_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1441_name,_1442_shp,_1443_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2586:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1444_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1444_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1444_qdom) { return __mosek_2fusion_2Model__variable(_1444_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1444_qdom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1444_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2585:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1445_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1445_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1445_rdom) { return __mosek_2fusion_2Model__variable(_1445_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1445_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1445_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2584:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1446_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1446_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1446_ldom) { return __mosek_2fusion_2Model__variable(_1446_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1446_ldom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1446_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2583:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1447_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1448_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1447_shp,_1448_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1447_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1448_qdom) { return __mosek_2fusion_2Model__variable(_1447_shp,_1448_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1447_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1448_qdom)
{
  _checked_ptr_1<int32_t> _ptr__1447_shp(_1447_shp ? _1447_shp->raw() : nullptr, _1447_shp ? _1447_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1447_shp,_1448_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2582:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1449_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1450_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1449_shp,_1450_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1449_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1450_rdom) { return __mosek_2fusion_2Model__variable(_1449_shp,_1450_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1449_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1450_rdom)
{
  _checked_ptr_1<int32_t> _ptr__1449_shp(_1449_shp ? _1449_shp->raw() : nullptr, _1449_shp ? _1449_shp->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_1449_shp,_1450_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2581:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1451_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1452_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1451_shp,_1452_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1451_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1452_ldom) { return __mosek_2fusion_2Model__variable(_1451_shp,_1452_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1451_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1452_ldom)
{
  _checked_ptr_1<int32_t> _ptr__1451_shp(_1451_shp ? _1451_shp->raw() : nullptr, _1451_shp ? _1451_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1451_shp,_1452_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2580:6-162
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1453_shp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1453_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1453_shp) { return __mosek_2fusion_2Model__variable(_1453_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1453_shp)
{
  _checked_ptr_1<int32_t> _ptr__1453_shp(_1453_shp ? _1453_shp->raw() : nullptr, _1453_shp ? _1453_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1453_shp,::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2579:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1454_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1455_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1454_size,_1455_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1454_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1455_qdom) { return __mosek_2fusion_2Model__variable(_1454_size,_1455_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1454_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1455_qdom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1454_size)}),_1455_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2578:6-161
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1456_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1457_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1456_size,_1457_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(int32_t _1456_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1457_rdom) { return __mosek_2fusion_2Model__variable(_1456_size,_1457_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1456_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1457_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1456_size)}),_1457_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2577:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1458_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1459_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1458_size,_1459_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1458_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1459_ldom) { return __mosek_2fusion_2Model__variable(_1458_size,_1459_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1458_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1459_ldom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1458_size)}),_1459_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2576:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1460_size) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1460_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1460_size) { return __mosek_2fusion_2Model__variable(_1460_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1460_size)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1460_size)}),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2575:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable()
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2573:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1461_name,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1462_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1461_name,_1462_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1461_name,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1462_qdom) { return __mosek_2fusion_2Model__variable(_1461_name,_1462_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1461_name,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1462_qdom)
{
  return __mosek_2fusion_2Model__variable_(_1461_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1462_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2572:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1463_name,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1464_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1463_name,_1464_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1463_name,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1464_rdom) { return __mosek_2fusion_2Model__variable(_1463_name,_1464_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1463_name,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1464_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(_1463_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1464_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2571:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1465_name,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1466_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1465_name,_1466_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1465_name,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1466_ldom) { return __mosek_2fusion_2Model__variable(_1465_name,_1466_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1465_name,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1466_ldom)
{
  return __mosek_2fusion_2Model__variable_(_1465_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1466_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2570:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1467_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1468_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1469_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1467_name,_1468_shp,_1469_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1467_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1468_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1469_qdom) { return __mosek_2fusion_2Model__variable(_1467_name,_1468_shp,_1469_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1467_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1468_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1469_qdom)
{
  _checked_ptr_1<int32_t> _ptr__1468_shp(_1468_shp ? _1468_shp->raw() : nullptr, _1468_shp ? _1468_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1467_name,_1468_shp,_1469_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2569:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1470_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1471_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1472_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1470_name,_1471_shp,_1472_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1470_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1471_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1472_rdom) { return __mosek_2fusion_2Model__variable(_1470_name,_1471_shp,_1472_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1470_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1471_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1472_rdom)
{
  _checked_ptr_1<int32_t> _ptr__1471_shp(_1471_shp ? _1471_shp->raw() : nullptr, _1471_shp ? _1471_shp->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_1470_name,_1471_shp,_1472_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2568:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1473_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1474_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1475_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1473_name,_1474_shp,_1475_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1473_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1474_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1475_ldom) { return __mosek_2fusion_2Model__variable(_1473_name,_1474_shp,_1475_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1473_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1474_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1475_ldom)
{
  _checked_ptr_1<int32_t> _ptr__1474_shp(_1474_shp ? _1474_shp->raw() : nullptr, _1474_shp ? _1474_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1473_name,_1474_shp,_1475_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2567:6-162
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1476_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1477_shp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1476_name,_1477_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1476_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1477_shp) { return __mosek_2fusion_2Model__variable(_1476_name,_1477_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1476_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1477_shp)
{
  _checked_ptr_1<int32_t> _ptr__1477_shp(_1477_shp ? _1477_shp->raw() : nullptr, _1477_shp ? _1477_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1476_name,_1477_shp,::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2566:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1478_name,int32_t _1479_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1480_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1478_name,_1479_size,_1480_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1478_name,int32_t _1479_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1480_qdom) { return __mosek_2fusion_2Model__variable(_1478_name,_1479_size,_1480_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1478_name,int32_t _1479_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1480_qdom)
{
  return __mosek_2fusion_2Model__variable_(_1478_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1479_size)}),_1480_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2565:6-161
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1481_name,int32_t _1482_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1483_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1481_name,_1482_size,_1483_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1481_name,int32_t _1482_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1483_rdom) { return __mosek_2fusion_2Model__variable(_1481_name,_1482_size,_1483_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1481_name,int32_t _1482_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1483_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(_1481_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1482_size)}),_1483_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2564:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1484_name,int32_t _1485_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1486_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1484_name,_1485_size,_1486_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1484_name,int32_t _1485_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1486_ldom) { return __mosek_2fusion_2Model__variable(_1484_name,_1485_size,_1486_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1484_name,int32_t _1485_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1486_ldom)
{
  return __mosek_2fusion_2Model__variable_(_1484_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1485_size)}),_1486_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2563:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1487_name,int32_t _1488_size) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1487_name,_1488_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1487_name,int32_t _1488_size) { return __mosek_2fusion_2Model__variable(_1487_name,_1488_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1487_name,int32_t _1488_size)
{
  return __mosek_2fusion_2Model__variable_(_1487_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1488_size)}),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2562:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1489_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1489_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1489_name) { return __mosek_2fusion_2Model__variable(_1489_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1489_name)
{
  return __mosek_2fusion_2Model__variable_(_1489_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.removeConstraintBlock
// Method mosek.fusion.Model.removeConstraintBlock @ src/fusion/Model.mbi:2553:6-2560:7
void mosek::fusion::p_Model::removeConstraintBlock(int32_t _1490_conid)
{
  if ((_1490_conid >= (int)0))
  {
    {
      con_release(_1490_conid);
    }
  }
  else
  {
    {
      acon_release((-safe_add( (int)1,_1490_conid )));
    }
  }
}
// End mosek.fusion.Model.removeConstraintBlock

// Begin mosek.fusion.Model.removeVariableBlock
// Method mosek.fusion.Model.removeVariableBlock @ src/fusion/Model.mbi:2525:6-2550:7
void mosek::fusion::p_Model::removeVariableBlock(int64_t _1491_varid64)
{
  if ((con_blocks->is_parameterized() || afe_blocks->is_parameterized()))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("Cannot remove variables in parameterized model"));
    }
  }
  {}
  if ((_1491_varid64 < (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("PSD variables cannot be removed"));
    }
  }
  else
  {
    {
      int32_t _1492_varid = (int32_t)_1491_varid64;
      int32_t _1493_sz = var_block_map->blocksize(_1492_varid);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1494_nidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1493_sz)));
      _checked_ptr_1<int32_t> _ptr__1494_nidxs(_1494_nidxs ? _1494_nidxs->raw() : nullptr,_1494_nidxs ? _1494_nidxs->size(0) : 0);
      var_block_map->get(_1492_varid,_1494_nidxs,(int)0);
      var_block_map->free(_1492_varid);
      int32_t _1495_conid = ((*var_block_acc_id)(_1492_varid));
      if ((_1495_conid >= (int)0))
      {
        {
          removeConstraintBlock(_1495_conid);
        }
      }
      {}
      task_var_putboundlist_fr(_1494_nidxs);
      task_clearacollist(_1494_nidxs);
    }
  }
}
// End mosek.fusion.Model.removeVariableBlock

// Begin mosek.fusion.Model.ranged_variable
// Method mosek.fusion.Model.ranged_variable @ src/fusion/Model.mbi:2442:6-2522:7
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _1496_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1497_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1498_dom_)
{
  _checked_ptr_1<int32_t> _ptr__1497_shp(_1497_shp ? _1497_shp->raw() : nullptr, _1497_shp ? _1497_shp->size(0) : 0);
  if ((((int)((_1496_name).size()) > (int)0) && hasVariable(_1496_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1496_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::RangeDomain > _1499_dom = mosek::fusion::p_RangeDomain::_get_impl(_1498_dom_.get())->__mosek_2fusion_2RangeDomain__finalize_and_validate(_1497_shp);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1500_shape = mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1500_shape(_1500_shape ? _1500_shape->raw() : nullptr,_1500_shape ? _1500_shape->size(0) : 0);
  int32_t _1501_nd = (int)((_1500_shape)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1502_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1501_nd)));
  _checked_ptr_1<int32_t> _ptr__1502_strides(_1502_strides ? _1502_strides->raw() : nullptr,_1502_strides ? _1502_strides->size(0) : 0);
  if ((_1501_nd > (int)0))
  {
    {
      _ptr__1502_strides[(_1501_nd - (int)1)] = (int)1;
      int32_t _9512_ = (int)1;
      int32_t _9513_ = _1501_nd;
      for (int32_t _1503_i = _9512_; _1503_i < _9513_; ++_1503_i)
      {
        {
          _ptr__1502_strides[((_1501_nd - _1503_i) - (int)1)] = safe_mul( _ptr__1502_strides[(_1501_nd - _1503_i)],_ptr__1500_shape[(_1501_nd - _1503_i)] );
        }
      }
    }
  }
  {}
  int64_t _1504_domsize = mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->domsize;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1505_sparsity = nullptr;
  _checked_ptr_1<int64_t> _ptr__1505_sparsity(_1505_sparsity ? _1505_sparsity->raw() : nullptr,_1505_sparsity ? _1505_sparsity->size(0) : 0);
  if ((NULL != _1505_sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->sparsity)->size(1)) != _1501_nd))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      _1505_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->sparsity)->size(0)))));
      _ptr__1505_sparsity.update(_1505_sparsity ? _1505_sparsity->raw() : nullptr, _1505_sparsity ? _1505_sparsity->size(0) : 0);
      int32_t _9514_ = (int)0;
      int32_t _9515_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->sparsity)->size(0));
      for (int32_t _1506_i = _9514_; _1506_i < _9515_; ++_1506_i)
      {
        {
          int32_t _9516_ = (int)0;
          int32_t _9517_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->sparsity)->size(1));
          for (int32_t _1507_j = _9516_; _1507_j < _9517_; ++_1507_j)
          {
            {
              if (((((*mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->sparsity)(_1506_i,_1507_j)) < (int)0) || (((*mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->sparsity)(_1506_i,_1507_j)) >= _ptr__1500_shape[_1507_j])))
              {
                {
                  throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
                }
              }
              {}
            }
          }
          int64_t _1508_linidx = (int)0;
          int32_t _9518_ = (int)0;
          int32_t _9519_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->sparsity)->size(1));
          for (int32_t _1509_j = _9518_; _1509_j < _9519_; ++_1509_j)
          {
            {
              _1508_linidx += safe_mul( _ptr__1502_strides[_1509_j],((*mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->sparsity)(_1506_i,_1509_j)) );
            }
          }
          _ptr__1505_sparsity[_1506_i] = _1508_linidx;
        }
      }
    }
  }
  {}
  int32_t _1510_nvaritems = (int32_t)mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->nelements;
  std::shared_ptr< monty::ndarray< double,1 > > _1511_bl;
  _checked_ptr_1<double> _ptr__1511_bl(_1511_bl ? _1511_bl->raw() : nullptr,_1511_bl ? _1511_bl->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1512_bu;
  _checked_ptr_1<double> _ptr__1512_bu(_1512_bu ? _1512_bu->raw() : nullptr,_1512_bu ? _1512_bu->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->scalable)
  {
    {
      std::vector<double> _9520_;
      for (int32_t _1513_i = (int)0, _9521_ = _1510_nvaritems; _1513_i < _9521_ ; ++_1513_i)
      {
        _9520_.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->lb)((int)0)));
      }
      auto _9522_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9520_.size()),_9520_.begin(),_9520_.end()));
      _1511_bl = _9522_;
      _ptr__1511_bl.update(_1511_bl ? _1511_bl->raw() : nullptr, _1511_bl ? _1511_bl->size(0) : 0);
      std::vector<double> _9523_;
      for (int32_t _1514_i = (int)0, _9524_ = _1510_nvaritems; _1514_i < _9524_ ; ++_1514_i)
      {
        _9523_.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->ub)((int)0)));
      }
      auto _9525_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9523_.size()),_9523_.begin(),_9523_.end()));
      _1512_bu = _9525_;
      _ptr__1512_bu.update(_1512_bu ? _1512_bu->raw() : nullptr, _1512_bu ? _1512_bu->size(0) : 0);
    }
  }
  else
  {
    {
      _1511_bl = mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->lb;
      _ptr__1511_bl.update(_1511_bl ? _1511_bl->raw() : nullptr, _1511_bl ? _1511_bl->size(0) : 0);
      _1512_bu = mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->ub;
      _ptr__1512_bu.update(_1512_bu ? _1512_bu->raw() : nullptr, _1512_bu ? _1512_bu->size(0) : 0);
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1515_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1510_nvaritems)));
  _checked_ptr_1<int32_t> _ptr__1515_nativeidxs(_1515_nativeidxs ? _1515_nativeidxs->raw() : nullptr,_1515_nativeidxs ? _1515_nativeidxs->size(0) : 0);
  int32_t _1516_varblockid = linearvar_alloc(_1510_nvaritems,_1515_nativeidxs);
  task_var_putboundlist_ra(_1515_nativeidxs,_1511_bl,_1512_bu);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _1517_res = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_1496_name,(int64_t)(_1516_varblockid),_1500_shape,_1505_sparsity,_1515_nativeidxs);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->cardinal_flag)
  {
    {
      task_var_putintlist(_1515_nativeidxs);
    }
  }
  {}
  if (((int)((_1496_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1518_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1518_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1496_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1501_nd > (int)0))
      {
        {
          _1518_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9526_ = (int)1;
          int32_t _9527_ = _1501_nd;
          for (int32_t _1519_i = _9526_; _1519_i < _9527_; ++_1519_i)
          {
            {
              _1518_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1519_i);
            }
          }
        }
      }
      {}
      _1518_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->indexnames.get()))
      {
        {
          task_format_var_names(_1515_nativeidxs,_1518_sb->toString(),_1500_shape,_1505_sparsity,mosek::fusion::p_RangeDomain::_get_impl(_1499_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_var_names(_1515_nativeidxs,_1518_sb->toString(),_1500_shape,_1505_sparsity,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
      var_map->setItem(_1496_name,_1516_varblockid);
    }
  }
  {}
  ((*vars)(_1516_varblockid)) = (_1517_res).as<::mosek::fusion::ModelVariable>();
  return _1517_res;
}
// End mosek.fusion.Model.ranged_variable

// Begin mosek.fusion.Model.variable_
// Method mosek.fusion.Model.variable_ @ src/fusion/Model.mbi:2186:6-2436:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1520_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1521_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1522_dom_)
{
  _checked_ptr_1<int32_t> _ptr__1521_shp(_1521_shp ? _1521_shp->raw() : nullptr, _1521_shp ? _1521_shp->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::ConeDomain > _1523_dom = mosek::fusion::p_ConeDomain::_get_impl(_1522_dom_.get())->__mosek_2fusion_2ConeDomain__finalize_and_validate(_1521_shp);
  if ((((int)((_1520_name).size()) > (int)0) && hasVariable(_1520_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1520_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1524_shape = mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1524_shape(_1524_shape ? _1524_shape->raw() : nullptr,_1524_shape ? _1524_shape->size(0) : 0);
  int32_t _1525_nd = (int)((_1524_shape)->size(0));
  int32_t _1526_coneaxis = _1523_dom->getAxis();
  int32_t _1527_conesize = _ptr__1524_shape[_1526_coneaxis];
  int32_t _1528_d1 = (int)1;
  int32_t _1529_d0 = (int)1;
  int32_t _1530_domsize = (int)1;
  int32_t _9528_ = (int)0;
  int32_t _9529_ = _1525_nd;
  for (int32_t _1531_i = _9528_; _1531_i < _9529_; ++_1531_i)
  {
    {
      _1530_domsize *= _ptr__1524_shape[_1531_i];
    }
  }
  int32_t _9530_ = (int)0;
  int32_t _9531_ = _1526_coneaxis;
  for (int32_t _1532_i = _9530_; _1532_i < _9531_; ++_1532_i)
  {
    {
      _1529_d0 *= _ptr__1524_shape[_1532_i];
    }
  }
  int32_t _9532_ = safe_add( _1526_coneaxis,(int)1 );
  int32_t _9533_ = _1525_nd;
  for (int32_t _1533_i = _9532_; _1533_i < _9533_; ++_1533_i)
  {
    {
      _1528_d1 *= _ptr__1524_shape[_1533_i];
    }
  }
  int32_t _1534_numcone = safe_mul( _1529_d0,_1528_d1 );
  int64_t _1535_domainidx;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      if ((_1527_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
        }
      }
      {}
      _1535_domainidx = task_append_domain_quad(_1527_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      if ((_1527_conesize < (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
        }
      }
      {}
      _1535_domainidx = task_append_domain_rquad(_1527_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      if ((_1527_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
        }
      }
      {}
      _1535_domainidx = task_append_domain_pexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      if ((_1527_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
        }
      }
      {}
      _1535_domainidx = task_append_domain_ppow(_1527_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      if ((_1527_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
        }
      }
      {}
      _1535_domainidx = task_append_domain_dexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      if ((_1527_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
        }
      }
      {}
      _1535_domainidx = task_append_domain_dpow(_1527_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::InPGeoMeanCone))
  {
    {
      if ((_1527_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for primal geometric mean cone"))->toString());
        }
      }
      {}
      _1535_domainidx = task_append_domain_pgeomean(_1527_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::InDGeoMeanCone))
  {
    {
      if ((_1527_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual geometric mean cone"))->toString());
        }
      }
      {}
      _1535_domainidx = task_append_domain_dgeomean(_1527_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::Positive))
  {
    {
      _1535_domainidx = task_append_domain_rpos(_1527_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::InSVecPSDCone))
  {
    {
      int32_t _1536_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1527_conesize ) ))) - (int)1) / (int)2);
      if (((safe_mul( _1536_d,safe_add( _1536_d,(int)1 ) ) / (int)2) != _1527_conesize))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for vector positive semidefinite cone"))->toString());
        }
      }
      {}
      _1535_domainidx = task_append_domain_svec_psd(_1527_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::Negative))
  {
    {
      _1535_domainidx = task_append_domain_rneg(_1527_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::Unbounded))
  {
    {
      _1535_domainidx = task_append_domain_r(_1527_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::Zero))
  {
    {
      _1535_domainidx = task_append_domain_rzero(_1527_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->key == ::mosek::fusion::QConeKey::InPSDCone))
  {
    {
      if ((_1527_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
        }
      }
      else
      {
        {
          int32_t _1537_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1527_conesize ) ))) - (int)1) / (int)2);
          if (((safe_mul( _1537_d,safe_add( _1537_d,(int)1 ) ) / (int)2) != _1527_conesize))
          {
            {
              throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1527_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
            }
          }
          {}
        }
      }
      _1535_domainidx = task_append_domain_svec_psd(_1527_conesize);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1538_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_mul( _1534_numcone,_1527_conesize ))));
  _checked_ptr_1<int32_t> _ptr__1538_nativeidxs(_1538_nativeidxs ? _1538_nativeidxs->raw() : nullptr,_1538_nativeidxs ? _1538_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1539_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1534_numcone)));
  _checked_ptr_1<int32_t> _ptr__1539_accidxs(_1539_accidxs ? _1539_accidxs->raw() : nullptr,_1539_accidxs ? _1539_accidxs->size(0) : 0);
  int32_t _1540_varid = conicvar_alloc(_1535_domainidx,_1527_conesize,_1534_numcone,_1539_accidxs,_1538_nativeidxs);
  task_var_putboundlist_fr(_1538_nativeidxs);
  if (mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->int_flag)
  {
    {
      task_var_putintlist(_1538_nativeidxs);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1541_permidxs = _1538_nativeidxs;
  _checked_ptr_1<int32_t> _ptr__1541_permidxs(_1541_permidxs ? _1541_permidxs->raw() : nullptr,_1541_permidxs ? _1541_permidxs->size(0) : 0);
  if ((_1526_coneaxis < ((int)((_1524_shape)->size(0)) - (int)1)))
  {
    {
      _1541_permidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_1538_nativeidxs)->size(0)))));
      _ptr__1541_permidxs.update(_1541_permidxs ? _1541_permidxs->raw() : nullptr, _1541_permidxs ? _1541_permidxs->size(0) : 0);
      int32_t _1542_p = (int)0;
      int32_t _9534_ = (int)0;
      int32_t _9535_ = _1529_d0;
      for (int32_t _1543_i0 = _9534_; _1543_i0 < _9535_; ++_1543_i0)
      {
        {
          int32_t _9536_ = (int)0;
          int32_t _9537_ = _1528_d1;
          for (int32_t _1544_i1 = _9536_; _1544_i1 < _9537_; ++_1544_i1)
          {
            {
              int32_t _9538_ = (int)0;
              int32_t _9539_ = _1527_conesize;
              for (int32_t _1545_k = _9538_; _1545_k < _9539_; ++_1545_k)
              {
                {
                  _ptr__1541_permidxs[_1542_p] = _ptr__1538_nativeidxs[safe_add( safe_mul( safe_add( safe_mul( _1543_i0,_1527_conesize ),_1545_k ),_1528_d1 ),_1544_i1 )];
                  ++ _1542_p;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _1546_res = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_1520_name,_1540_varid,_1524_shape,_1538_nativeidxs);
  ((*vars)(_1540_varid)) = (_1546_res).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1520_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1547_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      {
        _1547_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1520_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
        if ((_1525_nd > (int)0))
        {
          {
            _1547_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
            int32_t _9540_ = (int)1;
            int32_t _9541_ = _1525_nd;
            for (int32_t _1548_i = _9540_; _1548_i < _9541_; ++_1548_i)
            {
              {
                _1547_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1548_i);
              }
            }
          }
        }
        {}
        _1547_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
        if ((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->indexnames.get()))
        {
          {
            task_format_var_names(_1541_permidxs,_1547_sb->toString(),_1524_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->indexnames);
          }
        }
        else
        {
          {
            task_format_var_names(_1541_permidxs,_1547_sb->toString(),_1524_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
          }
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1549_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1534_numcone)));
      _checked_ptr_1<int32_t> _ptr__1549_accidxs(_1549_accidxs ? _1549_accidxs->raw() : nullptr,_1549_accidxs ? _1549_accidxs->size(0) : 0);
      acc_block_map->get(((*var_block_acc_id)(_1540_varid)),_1549_accidxs,(int)0);
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _1550_accshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_1524_shape)->size(0)) - (int)1))));
        _checked_ptr_1<int32_t> _ptr__1550_accshape(_1550_accshape ? _1550_accshape->raw() : nullptr,_1550_accshape ? _1550_accshape->size(0) : 0);
        int32_t _9542_ = (int)0;
        int32_t _9543_ = _1526_coneaxis;
        for (int32_t _1551_i = _9542_; _1551_i < _9543_; ++_1551_i)
        {
          {
            _ptr__1550_accshape[_1551_i] = _ptr__1524_shape[_1551_i];
          }
        }
        int32_t _9544_ = safe_add( _1526_coneaxis,(int)1 );
        int32_t _9545_ = _1525_nd;
        for (int32_t _1552_i = _9544_; _1552_i < _9545_; ++_1552_i)
        {
          {
            _ptr__1550_accshape[(_1552_i - (int)1)] = _ptr__1524_shape[_1552_i];
          }
        }
        monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1553_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
        _1553_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1520_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
        if (((_1525_nd - (int)1) > (int)0))
        {
          {
            _1553_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
            int32_t _9546_ = (int)1;
            int32_t _9547_ = _1525_nd;
            for (int32_t _1554_i = _9546_; _1554_i < _9547_; ++_1554_i)
            {
              {
                _1553_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1554_i);
              }
            }
          }
        }
        {}
        _1553_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
        if ((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->indexnames.get()))
        {
          {
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1555_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1525_nd - (int)1))));
            int32_t _9548_ = (int)0;
            int32_t _9549_ = _1526_coneaxis;
            for (int32_t _1556_i = _9548_; _1556_i < _9549_; ++_1556_i)
            {
              {
                ((*_1555_indexnames)(_1556_i)) = ((*mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->indexnames)(_1556_i));
              }
            }
            int32_t _9550_ = safe_add( _1526_coneaxis,(int)1 );
            int32_t _9551_ = _1525_nd;
            for (int32_t _1557_i = _9550_; _1557_i < _9551_; ++_1557_i)
            {
              {
                ((*_1555_indexnames)((_1557_i - (int)1))) = ((*mosek::fusion::p_ConeDomain::_get_impl(_1523_dom)->indexnames)(_1557_i));
              }
            }
            std::vector<int64_t> _9552_;
            for (int32_t _1558_i = (int)0, _9553_ = _1534_numcone; _1558_i < _9553_ ; ++_1558_i)
            {
              _9552_.push_back((int64_t)_ptr__1549_accidxs[_1558_i]);
            }
            auto _9554_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9552_.size()),_9552_.begin(),_9552_.end()));
            task_format_acc_names(_9554_,_1553_sb->toString(),_1550_accshape,_1555_indexnames);
          }
        }
        else
        {
          {
            std::vector<int64_t> _9555_;
            for (int32_t _1559_i = (int)0, _9556_ = _1534_numcone; _1559_i < _9556_ ; ++_1559_i)
            {
              _9555_.push_back((int64_t)_ptr__1549_accidxs[_1559_i]);
            }
            auto _9557_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9555_.size()),_9555_.begin(),_9555_.end()));
            task_format_acc_names(_9557_,_1553_sb->toString(),_1550_accshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
          }
        }
      }
      var_map->setItem(_1520_name,_1540_varid);
    }
  }
  {}
  return (_1546_res).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.variable_

// Begin mosek.fusion.Model.variable_
// Method mosek.fusion.Model.variable_ @ src/fusion/Model.mbi:1990:6-2181:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1560_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1561_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1562_dom_)
{
  _checked_ptr_1<int32_t> _ptr__1561_shp(_1561_shp ? _1561_shp->raw() : nullptr, _1561_shp ? _1561_shp->size(0) : 0);
  if ((((int)((_1560_name).size()) > (int)0) && hasVariable(_1560_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1560_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearDomain > _1563_dom = mosek::fusion::p_LinearDomain::_get_impl(_1562_dom_.get())->__mosek_2fusion_2LinearDomain__finalize_and_validate(_1561_shp);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1564_shape = mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1564_shape(_1564_shape ? _1564_shape->raw() : nullptr,_1564_shape ? _1564_shape->size(0) : 0);
  int32_t _1565_nd = (int)((_1564_shape)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1566_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1565_nd)));
  _checked_ptr_1<int32_t> _ptr__1566_strides(_1566_strides ? _1566_strides->raw() : nullptr,_1566_strides ? _1566_strides->size(0) : 0);
  if ((_1565_nd > (int)0))
  {
    {
      _ptr__1566_strides[(_1565_nd - (int)1)] = (int)1;
      int32_t _9558_ = (int)1;
      int32_t _9559_ = _1565_nd;
      for (int32_t _1567_i = _9558_; _1567_i < _9559_; ++_1567_i)
      {
        {
          _ptr__1566_strides[((_1565_nd - _1567_i) - (int)1)] = safe_mul( _ptr__1566_strides[(_1565_nd - _1567_i)],_ptr__1564_shape[(_1565_nd - _1567_i)] );
        }
      }
    }
  }
  {}
  int32_t _1568_domsize = (int)1;
  int32_t _9560_ = (int)0;
  int32_t _9561_ = (int)((_1564_shape)->size(0));
  for (int32_t _1569_i = _9560_; _1569_i < _9561_; ++_1569_i)
  {
    {
      _1568_domsize *= _ptr__1564_shape[_1569_i];
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1570_axisptr = nullptr;
  _checked_ptr_1<int32_t> _ptr__1570_axisptr(_1570_axisptr ? _1570_axisptr->raw() : nullptr,_1570_axisptr ? _1570_axisptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1571_nameptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1571_nameptr(_1571_nameptr ? _1571_nameptr->raw() : nullptr,_1571_nameptr ? _1571_nameptr->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1572_axisnames = nullptr;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1573_accaxisptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1573_accaxisptr(_1573_accaxisptr ? _1573_accaxisptr->raw() : nullptr,_1573_accaxisptr ? _1573_accaxisptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1574_accnameptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1574_accnameptr(_1574_accnameptr ? _1574_accnameptr->raw() : nullptr,_1574_accnameptr ? _1574_accnameptr->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1575_accaxisnames = nullptr;
  if ((((int)((_1560_name).size()) > (int)0) && (NULL != mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames.get())))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1576_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1577_accsb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      int32_t _1578_axisp = (int)0;
      int64_t _1579_namep = (int)0;
      int64_t _1580_numnames = (int)0;
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames)->size(0)) != _1565_nd))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid index name definition"));
        }
      }
      {}
      int32_t _9562_ = (int)0;
      int32_t _9563_ = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames)->size(0));
      for (int32_t _1581_i = _9562_; _1581_i < _9563_; ++_1581_i)
      {
        {
          if ((NULL != ((*mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames)(_1581_i)).get()))
          {
            {
              if ((_ptr__1564_shape[_1581_i] != (int)((((*mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames)(_1581_i)))->size(0))))
              {
                {
                  throw ::mosek::fusion::DomainError(std::string ("Invalid index name definition"));
                }
              }
              {}
              _1580_numnames += _ptr__1564_shape[_1581_i];
            }
          }
          {}
        }
      }
      _1571_nameptr = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _1580_numnames,(int)1 ))));
      _ptr__1571_nameptr.update(_1571_nameptr ? _1571_nameptr->raw() : nullptr, _1571_nameptr ? _1571_nameptr->size(0) : 0);
      std::vector<int32_t> _9564_;
      for (int32_t _1582_i = (int)0, _9565_ = _1565_nd; _1582_i < _9565_ ; ++_1582_i)
      {
        _9564_.push_back((-(int)1));
      }
      auto _9566_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9564_.size()),_9564_.begin(),_9564_.end()));
      _1570_axisptr = _9566_;
      _ptr__1570_axisptr.update(_1570_axisptr ? _1570_axisptr->raw() : nullptr, _1570_axisptr ? _1570_axisptr->size(0) : 0);
      int32_t _9567_ = (int)0;
      int32_t _9568_ = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames)->size(0));
      for (int32_t _1583_i = _9567_; _1583_i < _9568_; ++_1583_i)
      {
        {
          if ((NULL != ((*mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames)(_1583_i)).get()))
          {
            {
              _ptr__1570_axisptr[_1583_i] = _1578_axisp;
              int32_t _9569_ = (int)0;
              int32_t _9570_ = _ptr__1564_shape[_1583_i];
              for (int32_t _1584_j = _9569_; _1584_j < _9570_; ++_1584_j)
              {
                {
                  _1576_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*((*mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames)(_1583_i)))(_1584_j)));
                  ++ _1578_axisp;
                  _1579_namep += (int)((((*((*mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames)(_1583_i)))(_1584_j))).size());
                  _ptr__1571_nameptr[_1578_axisp] = _1579_namep;
                }
              }
            }
          }
          {}
        }
      }
      _1572_axisnames = _1576_sb;
      _1575_accaxisnames = _1577_accsb;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1585_sparsity = nullptr;
  _checked_ptr_1<int64_t> _ptr__1585_sparsity(_1585_sparsity ? _1585_sparsity->raw() : nullptr,_1585_sparsity ? _1585_sparsity->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1586_perm = nullptr;
  _checked_ptr_1<int32_t> _ptr__1586_perm(_1586_perm ? _1586_perm->raw() : nullptr,_1586_perm ? _1586_perm->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->empty)
  {
    {
      _1585_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0)));
      _ptr__1585_sparsity.update(_1585_sparsity ? _1585_sparsity->raw() : nullptr, _1585_sparsity ? _1585_sparsity->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->sparsity)->size(1)) != _1565_nd))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int32_t _1587_n = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->sparsity)->size(0));
      _1585_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1587_n)));
      _ptr__1585_sparsity.update(_1585_sparsity ? _1585_sparsity->raw() : nullptr, _1585_sparsity ? _1585_sparsity->size(0) : 0);
      {
        bool _1588_err = false;
        std::shared_ptr< monty::ndarray< int32_t,2 > > _1589_sp = mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->sparsity;
        int32_t _9571_ = (int)0;
        int32_t _9572_ = _1587_n;
        for (int32_t _1590_i = _9571_; _1590_i < _9572_; ++_1590_i)
        {
          {
            int32_t _9573_ = (int)0;
            int32_t _9574_ = (int)((_1589_sp)->size(1));
            for (int32_t _1591_j = _9573_; _1591_j < _9574_; ++_1591_j)
            {
              {
                _1588_err = (_1588_err || ((((*_1589_sp)(_1590_i,_1591_j)) < (int)0) || (((*_1589_sp)(_1590_i,_1591_j)) >= _ptr__1564_shape[_1591_j])));
              }
            }
            if ((!_1588_err))
            {
              {
                int64_t _1592_linidx = (int)0;
                int32_t _9575_ = (int)0;
                int32_t _9576_ = (int)((_1589_sp)->size(1));
                for (int32_t _1593_j = _9575_; _1593_j < _9576_; ++_1593_j)
                {
                  {
                    _1592_linidx += safe_mul( _ptr__1566_strides[_1593_j],((*_1589_sp)(_1590_i,_1593_j)) );
                  }
                }
                _ptr__1585_sparsity[_1590_i] = _1592_linidx;
              }
            }
            {}
          }
        }
        if (_1588_err)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int32_t,2 > > _1594_midxs = mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->sparsity;
      int32_t _1595_maxdim = (int)0;
      int32_t _9577_ = (int)0;
      int32_t _9578_ = _1565_nd;
      for (int32_t _1596_i = _9577_; _1596_i < _9578_; ++_1596_i)
      {
        {
          if ((_1595_maxdim < _ptr__1564_shape[_1596_i]))
          {
            {
              _1595_maxdim = _ptr__1564_shape[_1596_i];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1597_curperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1587_n)));
      _checked_ptr_1<int32_t> _ptr__1597_curperm(_1597_curperm ? _1597_curperm->raw() : nullptr,_1597_curperm ? _1597_curperm->size(0) : 0);
      int32_t _9579_ = (int)0;
      int32_t _9580_ = _1587_n;
      for (int32_t _1598_i = _9579_; _1598_i < _9580_; ++_1598_i)
      {
        {
          _ptr__1597_curperm[_1598_i] = _1598_i;
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1599_tgtperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1587_n)));
      _checked_ptr_1<int32_t> _ptr__1599_tgtperm(_1599_tgtperm ? _1599_tgtperm->raw() : nullptr,_1599_tgtperm ? _1599_tgtperm->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1600_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _1595_maxdim,(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__1600_ptr(_1600_ptr ? _1600_ptr->raw() : nullptr,_1600_ptr ? _1600_ptr->size(0) : 0);
      int32_t _9581_ = (int)0;
      int32_t _9582_ = _1565_nd;
      for (int32_t _1601_dd = _9581_; _1601_dd < _9582_; ++_1601_dd)
      {
        {
          {
            int32_t _1602_d = ((_1565_nd - _1601_dd) - (int)1);
            int32_t _9583_ = (int)0;
            int32_t _9584_ = safe_add( _ptr__1564_shape[_1602_d],(int)1 );
            for (int32_t _1603_i = _9583_; _1603_i < _9584_; ++_1603_i)
            {
              {
                _ptr__1600_ptr[_1603_i] = (int)0;
              }
            }
            int32_t _9585_ = (int)0;
            int32_t _9586_ = _1587_n;
            for (int32_t _1604_i = _9585_; _1604_i < _9586_; ++_1604_i)
            {
              {
                ++ _ptr__1600_ptr[safe_add( ((*_1594_midxs)(_1604_i,_1602_d)),(int)1 )];
              }
            }
            int32_t _9587_ = (int)0;
            int32_t _9588_ = _ptr__1564_shape[_1602_d];
            for (int32_t _1605_i = _9587_; _1605_i < _9588_; ++_1605_i)
            {
              {
                _ptr__1600_ptr[safe_add( _1605_i,(int)1 )] += _ptr__1600_ptr[_1605_i];
              }
            }
            int32_t _9589_ = (int)0;
            int32_t _9590_ = _1587_n;
            for (int32_t _1606_ii = _9589_; _1606_ii < _9590_; ++_1606_ii)
            {
              {
                int32_t _1607_i = _ptr__1597_curperm[_1606_ii];
                _ptr__1599_tgtperm[_ptr__1600_ptr[((*_1594_midxs)(_1607_i,_1602_d))]] = _1607_i;
                ++ _ptr__1600_ptr[((*_1594_midxs)(_1607_i,_1602_d))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1608_tmp = _1597_curperm;
          _checked_ptr_1<int32_t> _ptr__1608_tmp(_1608_tmp ? _1608_tmp->raw() : nullptr,_1608_tmp ? _1608_tmp->size(0) : 0);
          _1597_curperm = _1599_tgtperm;
          _ptr__1597_curperm.update(_1597_curperm ? _1597_curperm->raw() : nullptr, _1597_curperm ? _1597_curperm->size(0) : 0);
          _1599_tgtperm = _1608_tmp;
          _ptr__1599_tgtperm.update(_1599_tgtperm ? _1599_tgtperm->raw() : nullptr, _1599_tgtperm ? _1599_tgtperm->size(0) : 0);
        }
      }
      int32_t _9591_ = (int)0;
      int32_t _9592_ = _1587_n;
      for (int32_t _1609_ii = _9591_; _1609_ii < _9592_; ++_1609_ii)
      {
        {
          int32_t _1610_i = _ptr__1597_curperm[_1609_ii];
          int64_t _1611_k = (int)0;
          int32_t _9593_ = (int)0;
          int32_t _9594_ = _1565_nd;
          for (int32_t _1612_j = _9593_; _1612_j < _9594_; ++_1612_j)
          {
            {
              _1611_k += safe_mul( _ptr__1566_strides[_1612_j],((*_1594_midxs)(_1610_i,_1612_j)) );
            }
          }
          _ptr__1585_sparsity[_1609_ii] = _1611_k;
        }
      }
    }
  }
  {}
  int32_t _9595_;
  bool _9596_ = (NULL != _1585_sparsity.get());
  if (_9596_)
  {
    _9595_ = (int)((_1585_sparsity)->size(0));
  }
  else
  {
    _9595_ = _1568_domsize;
  }
  int32_t _1613_nvaritems = _9595_;
  std::shared_ptr< monty::ndarray< double,1 > > _1614_bnds = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1613_nvaritems)));
  _checked_ptr_1<double> _ptr__1614_bnds(_1614_bnds ? _1614_bnds->raw() : nullptr,_1614_bnds ? _1614_bnds->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->bnd)->size(0)) == (int)1))
      {
        {
          int32_t _9597_ = (int)0;
          int32_t _9598_ = _1613_nvaritems;
          for (int32_t _1615_i = _9597_; _1615_i < _9598_; ++_1615_i)
          {
            {
              _ptr__1614_bnds[_1615_i] = ((*mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->bnd)->size(0)) == _1613_nvaritems))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->bnd,(int)0,_1614_bnds,(int)0,_1613_nvaritems);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1616_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1613_nvaritems)));
  _checked_ptr_1<int32_t> _ptr__1616_nativeidxs(_1616_nativeidxs ? _1616_nativeidxs->raw() : nullptr,_1616_nativeidxs ? _1616_nativeidxs->size(0) : 0);
  int32_t _1617_varblockid = linearvar_alloc(_1613_nvaritems,_1616_nativeidxs);
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1616_nativeidxs);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1616_nativeidxs,_1614_bnds);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1616_nativeidxs,_1614_bnds);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1616_nativeidxs,_1614_bnds);
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1618_res = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_1560_name,(int64_t)(_1617_varblockid),_1564_shape,_1585_sparsity,_1616_nativeidxs);
  ((*vars)(_1617_varblockid)) = (_1618_res).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1560_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1619_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1619_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1560_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1565_nd > (int)0))
      {
        {
          _1619_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9599_ = (int)1;
          int32_t _9600_ = _1565_nd;
          for (int32_t _1620_i = _9599_; _1620_i < _9600_; ++_1620_i)
          {
            {
              _1619_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1620_i);
            }
          }
        }
      }
      {}
      _1619_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames.get()))
      {
        {
          task_format_var_names(_1616_nativeidxs,_1619_sb->toString(),_1564_shape,_1585_sparsity,mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_var_names(_1616_nativeidxs,_1619_sb->toString(),_1564_shape,_1585_sparsity,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
      var_map->setItem(_1560_name,_1617_varblockid);
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1563_dom)->cardinal_flag)
  {
    {
      task_var_putintlist(_1616_nativeidxs);
    }
  }
  {}
  return (_1618_res).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.variable_

// Begin mosek.fusion.Model.variable_
// Method mosek.fusion.Model.variable_ @ src/fusion/Model.mbi:1806:6-1928:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1621_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1622_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1623_dom_)
{
  _checked_ptr_1<int32_t> _ptr__1622_shp(_1622_shp ? _1622_shp->raw() : nullptr, _1622_shp ? _1622_shp->size(0) : 0);
  if ((((int)((_1621_name).size()) > (int)0) && hasVariable(_1621_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::PSDDomain > _1624_dom = mosek::fusion::p_PSDDomain::_get_impl(_1623_dom_.get())->__mosek_2fusion_2PSDDomain__finalize_and_validate(_1622_shp);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1625_shape = mosek::fusion::p_PSDDomain::_get_impl(_1624_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1625_shape(_1625_shape ? _1625_shape->raw() : nullptr,_1625_shape ? _1625_shape->size(0) : 0);
  int32_t _1626_conedim1 = mosek::fusion::p_PSDDomain::_get_impl(_1624_dom)->conedim1;
  int32_t _1627_conedim2 = mosek::fusion::p_PSDDomain::_get_impl(_1624_dom)->conedim2;
  int32_t _1628_nd = (int)((_1625_shape)->size(0));
  int32_t _1629_d = _ptr__1625_shape[_1626_conedim1];
  if ((_1626_conedim1 > _1627_conedim2))
  {
    {
      int32_t _1630_tmp = _1626_conedim1;
      _1626_conedim1 = _1627_conedim2;
      _1627_conedim2 = _1630_tmp;
    }
  }
  {}
  if (((_1626_conedim1 == _1627_conedim2) || ((_1626_conedim1 < (int)0) || (_1627_conedim2 >= _1628_nd))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1625_shape[_1626_conedim1] != _ptr__1625_shape[_1627_conedim2]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int32_t _1631_numcone = (int)1;
  int32_t _9601_ = (int)0;
  int32_t _9602_ = _1626_conedim1;
  for (int32_t _1632_i = _9601_; _1632_i < _9602_; ++_1632_i)
  {
    {
      _1631_numcone *= _ptr__1625_shape[_1632_i];
    }
  }
  int32_t _9603_ = safe_add( _1626_conedim1,(int)1 );
  int32_t _9604_ = _1627_conedim2;
  for (int32_t _1633_i = _9603_; _1633_i < _9604_; ++_1633_i)
  {
    {
      _1631_numcone *= _ptr__1625_shape[_1633_i];
    }
  }
  int32_t _9605_ = safe_add( _1627_conedim2,(int)1 );
  int32_t _9606_ = _1628_nd;
  for (int32_t _1634_i = _9605_; _1634_i < _9606_; ++_1634_i)
  {
    {
      _1631_numcone *= _ptr__1625_shape[_1634_i];
    }
  }
  int32_t _1635_numelm = (safe_mul( safe_mul( _1631_numcone,_1629_d ),safe_add( _1629_d,(int)1 ) ) / (int)2);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1636_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1635_numelm)));
  _checked_ptr_1<int64_t> _ptr__1636_nativeidxs(_1636_nativeidxs ? _1636_nativeidxs->raw() : nullptr,_1636_nativeidxs ? _1636_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1637_barvaridxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1631_numcone)));
  _checked_ptr_1<int32_t> _ptr__1637_barvaridxs(_1637_barvaridxs ? _1637_barvaridxs->raw() : nullptr,_1637_barvaridxs ? _1637_barvaridxs->size(0) : 0);
  int32_t _1638_varid = barvar_alloc(_1629_d,_1631_numcone,_1637_barvaridxs,_1636_nativeidxs);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1639_res = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1621_name,_1638_varid,_1625_shape,mosek::fusion::p_PSDDomain::_get_impl(_1624_dom)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1624_dom)->conedim2,_1637_barvaridxs,_1636_nativeidxs);
  if (((_1621_name != std::string ("")) || true))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1640_coneshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((_1628_nd - (int)2))));
      _checked_ptr_1<int32_t> _ptr__1640_coneshape(_1640_coneshape ? _1640_coneshape->raw() : nullptr,_1640_coneshape ? _1640_coneshape->size(0) : 0);
      int32_t _9607_;
      bool _9608_ = (_1626_conedim1 < _1627_conedim2);
      if (_9608_)
      {
        _9607_ = _1626_conedim1;
      }
      else
      {
        _9607_ = _1627_conedim2;
      }
      int32_t _1641_cdim1 = _9607_;
      int32_t _9609_;
      bool _9610_ = (_1626_conedim1 < _1627_conedim2);
      if (_9610_)
      {
        _9609_ = _1627_conedim2;
      }
      else
      {
        _9609_ = _1626_conedim1;
      }
      int32_t _1642_cdim2 = _9609_;
      int32_t _9611_ = (int)0;
      int32_t _9612_ = _1641_cdim1;
      for (int32_t _1643_i = _9611_; _1643_i < _9612_; ++_1643_i)
      {
        {
          _ptr__1640_coneshape[_1643_i] = _ptr__1625_shape[_1643_i];
        }
      }
      int32_t _9613_ = safe_add( _1641_cdim1,(int)1 );
      int32_t _9614_ = _1642_cdim2;
      for (int32_t _1644_i = _9613_; _1644_i < _9614_; ++_1644_i)
      {
        {
          _ptr__1640_coneshape[(_1644_i - (int)1)] = _ptr__1625_shape[_1644_i];
        }
      }
      int32_t _9615_ = safe_add( _1642_cdim2,(int)1 );
      int32_t _9616_ = _1628_nd;
      for (int32_t _1645_i = _9615_; _1645_i < _9616_; ++_1645_i)
      {
        {
          _ptr__1640_coneshape[(_1645_i - (int)2)] = _ptr__1625_shape[_1645_i];
        }
      }
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1646_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1646_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if (((_1628_nd - (int)2) > (int)0))
      {
        {
          _1646_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9617_ = (int)1;
          int32_t _9618_ = (_1628_nd - (int)2);
          for (int32_t _1647_i = _9617_; _1647_i < _9618_; ++_1647_i)
          {
            {
              _1646_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1647_i);
            }
          }
        }
      }
      {}
      _1646_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1624_dom)->indexnames.get()))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1648_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1628_nd - (int)2))));
          int32_t _9619_ = (int)0;
          int32_t _9620_ = _1641_cdim1;
          for (int32_t _1649_i = _9619_; _1649_i < _9620_; ++_1649_i)
          {
            {
              ((*_1648_indexnames)(_1649_i)) = ((*mosek::fusion::p_PSDDomain::_get_impl(_1624_dom)->indexnames)(_1649_i));
            }
          }
          int32_t _9621_ = safe_add( _1641_cdim1,(int)1 );
          int32_t _9622_ = _1642_cdim2;
          for (int32_t _1650_i = _9621_; _1650_i < _9622_; ++_1650_i)
          {
            {
              ((*_1648_indexnames)((_1650_i - (int)1))) = ((*mosek::fusion::p_PSDDomain::_get_impl(_1624_dom)->indexnames)(_1650_i));
            }
          }
          int32_t _9623_ = safe_add( _1642_cdim2,(int)1 );
          int32_t _9624_ = _1628_nd;
          for (int32_t _1651_i = _9623_; _1651_i < _9624_; ++_1651_i)
          {
            {
              ((*_1648_indexnames)((_1651_i - (int)2))) = ((*mosek::fusion::p_PSDDomain::_get_impl(_1624_dom)->indexnames)(_1651_i));
            }
          }
          task_format_barvar_names(_1637_barvaridxs,_1646_sb->toString(),_1640_coneshape,_1648_indexnames);
        }
      }
      else
      {
        {
          task_format_barvar_names(_1637_barvaridxs,_1646_sb->toString(),_1640_coneshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  ((*barvars)(_1638_varid)) = (_1639_res).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1621_name).size()) > (int)0))
  {
    {
      var_map->setItem(_1621_name,(-safe_add( _1638_varid,(int)1 )));
    }
  }
  {}
  return (_1639_res).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.variable_

// Begin mosek.fusion.Model.putfrows
// Method mosek.fusion.Model.putfrows @ src/fusion/Model.mbi:1675:6-1799:7
void mosek::fusion::p_Model::putfrows(std::shared_ptr< monty::ndarray< int32_t,1 > > _1652_nativeidxs,int32_t _1653_nativebaseptr,monty::rc_ptr< ::mosek::fusion::WorkStack > _1654_rs,int32_t _1655_nelem,int32_t _1656_nnz,int32_t _1657_ptr_base,int32_t _1658_nidxs_base,int32_t _1659_cof_base)
{
  _checked_ptr_1<int32_t> _ptr__1652_nativeidxs(_1652_nativeidxs ? _1652_nativeidxs->raw() : nullptr, _1652_nativeidxs ? _1652_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1660_ri32 = mosek::fusion::p_WorkStack::_get_impl(_1654_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1660_ri32(_1660_ri32 ? _1660_ri32->raw() : nullptr,_1660_ri32 ? _1660_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1661_ri64 = mosek::fusion::p_WorkStack::_get_impl(_1654_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1661_ri64(_1661_ri64 ? _1661_ri64->raw() : nullptr,_1661_ri64 ? _1661_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1662_rf64 = mosek::fusion::p_WorkStack::_get_impl(_1654_rs)->f64;
  _checked_ptr_1<double> _ptr__1662_rf64(_1662_rf64 ? _1662_rf64->raw() : nullptr,_1662_rf64 ? _1662_rf64->size(0) : 0);
  int32_t _1663_linnz = (int)0;
  int32_t _1664_barnnz = (int)0;
  int32_t _1665_totalpsdelm = (int)0;
  int32_t _9625_ = (int)0;
  int32_t _9626_ = _1655_nelem;
  for (int32_t _1666_i = _9625_; _1666_i < _9626_; ++_1666_i)
  {
    {
      int32_t _1667_ps = _ptr__1660_ri32[safe_add( _1657_ptr_base,_1666_i )];
      int32_t _1668_pe = _ptr__1660_ri32[safe_add( safe_add( _1657_ptr_base,_1666_i ),(int)1 )];
      int32_t _1669_p = _1667_ps;
      while ( ((_1669_p < _1668_pe) && (_ptr__1661_ri64[safe_add( _1658_nidxs_base,_1669_p )] < (int)0)) )
      {
        {
          int32_t _1670_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1661_ri64[safe_add( _1658_nidxs_base,_1669_p )],(int)1 ))));
          int32_t _1671_p0 = _1669_p;
          ++ _1669_p;
          while ( ((_1669_p < _1668_pe) && ((_ptr__1661_ri64[safe_add( _1658_nidxs_base,_1669_p )] < (int)0) && (_1670_barj == ((*barvar_block_elm_barj)((-safe_add( _ptr__1661_ri64[safe_add( _1658_nidxs_base,_1669_p )],(int)1 ))))))) )
          {
            {
              ++ _1669_p;
            }
          }
          ++ _1664_barnnz;
        }
      }
      _1665_totalpsdelm += (_1669_p - _1667_ps);
      while ( ((_1669_p < _1668_pe) && (_ptr__1661_ri64[safe_add( _1658_nidxs_base,_1669_p )] == (int)0)) )
      {
        {
          ++ _1669_p;
        }
      }
      _1663_linnz += (_1668_pe - _1669_p);
    }
  }
  if ((_1655_nelem > ((int)((_1652_nativeidxs)->size(0)) - _1653_nativebaseptr)))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Mismatching sizes"));
    }
  }
  {}
  int32_t _1672_numcon = _1655_nelem;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1673_ptrb = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _1672_numcon,(int)1 ))));
  _checked_ptr_1<int32_t> _ptr__1673_ptrb(_1673_ptrb ? _1673_ptrb->raw() : nullptr,_1673_ptrb ? _1673_ptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1674_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1663_linnz)));
  _checked_ptr_1<int32_t> _ptr__1674_subj(_1674_subj ? _1674_subj->raw() : nullptr,_1674_subj ? _1674_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1675_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1663_linnz)));
  _checked_ptr_1<double> _ptr__1675_cof(_1675_cof ? _1675_cof->raw() : nullptr,_1675_cof ? _1675_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1676_bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1655_nelem)));
  _checked_ptr_1<double> _ptr__1676_bfix(_1676_bfix ? _1676_bfix->raw() : nullptr,_1676_bfix ? _1676_bfix->size(0) : 0);
  {
    int32_t _1677_k = (int)0;
    int32_t _9627_ = (int)0;
    int32_t _9628_ = _1655_nelem;
    for (int32_t _1678_i = _9627_; _1678_i < _9628_; ++_1678_i)
    {
      {
        int32_t _1679_knz = (int)0;
        int32_t _9629_ = _ptr__1660_ri32[safe_add( _1657_ptr_base,_1678_i )];
        int32_t _9630_ = _ptr__1660_ri32[safe_add( safe_add( _1657_ptr_base,_1678_i ),(int)1 )];
        for (int32_t _1680_j = _9629_; _1680_j < _9630_; ++_1680_j)
        {
          {
            if ((_ptr__1661_ri64[safe_add( _1658_nidxs_base,_1680_j )] == (int)0))
            {
              {
                _ptr__1676_bfix[_1678_i] += _ptr__1662_rf64[safe_add( _1659_cof_base,_1680_j )];
              }
            }
            else if((_ptr__1661_ri64[safe_add( _1658_nidxs_base,_1680_j )] > (int)0))
            {
              {
                _ptr__1674_subj[safe_add( _1677_k,_1679_knz )] = (int32_t)_ptr__1661_ri64[safe_add( _1658_nidxs_base,_1680_j )];
                _ptr__1675_cof[safe_add( _1677_k,_1679_knz )] = _ptr__1662_rf64[safe_add( _1659_cof_base,_1680_j )];
                ++ _1679_knz;
              }
            }
            {}
          }
        }
        _ptr__1673_ptrb[safe_add( _1678_i,(int)1 )] = safe_add( _ptr__1673_ptrb[_1678_i],_1679_knz );
        _1677_k += _1679_knz;
      }
    }
  }
  std::vector<int64_t> _9631_;
  for (int32_t _1681_i = (int)0, _9632_ = _1655_nelem; _1681_i < _9632_ ; ++_1681_i)
  {
    _9631_.push_back(_ptr__1652_nativeidxs[safe_add( _1681_i,_1653_nativebaseptr )]);
  }
  auto _9633_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9631_.size()),_9631_.begin(),_9631_.end()));
  task_putafeflist(_9633_,_1673_ptrb,_1674_subj,_1675_cof,_1676_bfix);
  if ((_1664_barnnz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1682_subi = _1652_nativeidxs;
      _checked_ptr_1<int32_t> _ptr__1682_subi(_1682_subi ? _1682_subi->raw() : nullptr,_1682_subi ? _1682_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1683_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _1672_numcon,(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__1683_ptr(_1683_ptr ? _1683_ptr->raw() : nullptr,_1683_ptr ? _1683_ptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1684_barsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1664_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1684_barsubj(_1684_barsubj ? _1684_barsubj->raw() : nullptr,_1684_barsubj ? _1684_barsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1685_matdim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1664_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1685_matdim(_1685_matdim ? _1685_matdim->raw() : nullptr,_1685_matdim ? _1685_matdim->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1686_matnnz = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1664_barnnz)));
      _checked_ptr_1<int64_t> _ptr__1686_matnnz(_1686_matnnz ? _1686_matnnz->raw() : nullptr,_1686_matnnz ? _1686_matnnz->size(0) : 0);
      std::vector<int32_t> _9634_;
      for (int32_t _1688_i = (int)0, _9635_ = _1665_totalpsdelm; _1688_i < _9635_ ; ++_1688_i)
      {
        _9634_.push_back((-(int)1));
      }
      auto _9636_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9634_.size()),_9634_.begin(),_9634_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1687_matsubi = _9636_;
      _checked_ptr_1<int32_t> _ptr__1687_matsubi(_1687_matsubi ? _1687_matsubi->raw() : nullptr,_1687_matsubi ? _1687_matsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1689_matsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1665_totalpsdelm)));
      _checked_ptr_1<int32_t> _ptr__1689_matsubj(_1689_matsubj ? _1689_matsubj->raw() : nullptr,_1689_matsubj ? _1689_matsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1690_matcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1665_totalpsdelm)));
      _checked_ptr_1<double> _ptr__1690_matcof(_1690_matcof ? _1690_matcof->raw() : nullptr,_1690_matcof ? _1690_matcof->size(0) : 0);
      int32_t _1691_barnzi = (int)0;
      int32_t _1692_barmatnzi = (int)0;
      int32_t _9637_ = (int)0;
      int32_t _9638_ = _1672_numcon;
      for (int32_t _1693_i = _9637_; _1693_i < _9638_; ++_1693_i)
      {
        {
          int32_t _1694_p = _ptr__1660_ri32[safe_add( _1657_ptr_base,_1693_i )];
          int32_t _1695_pe = _ptr__1660_ri32[safe_add( safe_add( _1657_ptr_base,_1693_i ),(int)1 )];
          while ( ((_1694_p < _1695_pe) && (_ptr__1661_ri64[safe_add( _1658_nidxs_base,_1694_p )] < (int)0)) )
          {
            {
              int32_t _1696_p0 = _1694_p;
              int32_t _1697_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1661_ri64[safe_add( _1658_nidxs_base,_1694_p )],(int)1 ))));
              while ( ((_1694_p < _1695_pe) && ((_ptr__1661_ri64[safe_add( _1658_nidxs_base,_1694_p )] < (int)0) && (((*barvar_block_elm_barj)((-safe_add( _ptr__1661_ri64[safe_add( _1658_nidxs_base,_1694_p )],(int)1 )))) == _1697_barj))) )
              {
                {
                  _ptr__1687_matsubi[_1692_barmatnzi] = ((*barvar_block_elm_i)((-safe_add( _ptr__1661_ri64[safe_add( _1658_nidxs_base,_1694_p )],(int)1 ))));
                  _ptr__1689_matsubj[_1692_barmatnzi] = ((*barvar_block_elm_j)((-safe_add( _ptr__1661_ri64[safe_add( _1658_nidxs_base,_1694_p )],(int)1 ))));
                  if ((_ptr__1687_matsubi[_1692_barmatnzi] == _ptr__1689_matsubj[_1692_barmatnzi]))
                  {
                    {
                      _ptr__1690_matcof[_1692_barmatnzi] = _ptr__1662_rf64[safe_add( _1659_cof_base,_1694_p )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1690_matcof[_1692_barmatnzi] = (0.5 * _ptr__1662_rf64[safe_add( _1659_cof_base,_1694_p )]);
                    }
                  }
                  ++ _1692_barmatnzi;
                  ++ _1694_p;
                }
              }
              _ptr__1684_barsubj[_1691_barnzi] = _1697_barj;
              _ptr__1685_matdim[_1691_barnzi] = ((*barvar_dim)(_1697_barj));
              _ptr__1686_matnnz[_1691_barnzi] = (_1694_p - _1696_p0);
              ++ _1691_barnzi;
            }
          }
          _1694_p = _1695_pe;
          _ptr__1683_ptr[safe_add( _1693_i,(int)1 )] = _1691_barnzi;
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1698_symmatidx = task_appendsymmatlist(_1685_matdim,_1686_matnnz,_1687_matsubi,_1689_matsubj,_1690_matcof);
      _checked_ptr_1<int64_t> _ptr__1698_symmatidx(_1698_symmatidx ? _1698_symmatidx->raw() : nullptr,_1698_symmatidx ? _1698_symmatidx->size(0) : 0);
      task_putafebarfrowlist(_1682_subi,_1683_ptr,_1684_barsubj,_1698_symmatidx);
    }
  }
  {}
}
// End mosek.fusion.Model.putfrows

// Begin mosek.fusion.Model.putarows
// Method mosek.fusion.Model.putarows @ src/fusion/Model.mbi:1572:6-1672:7
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int32_t,1 > > _1699_nativeidxs,monty::rc_ptr< ::mosek::fusion::WorkStack > _1700_rs,int32_t _1701_nelem,int32_t _1702_nnz,int32_t _1703_ptr_base,int32_t _1704_nidxs_base,int32_t _1705_cof_base)
{
  _checked_ptr_1<int32_t> _ptr__1699_nativeidxs(_1699_nativeidxs ? _1699_nativeidxs->raw() : nullptr, _1699_nativeidxs ? _1699_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1706_ri32 = mosek::fusion::p_WorkStack::_get_impl(_1700_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1706_ri32(_1706_ri32 ? _1706_ri32->raw() : nullptr,_1706_ri32 ? _1706_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1707_ri64 = mosek::fusion::p_WorkStack::_get_impl(_1700_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1707_ri64(_1707_ri64 ? _1707_ri64->raw() : nullptr,_1707_ri64 ? _1707_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1708_rf64 = mosek::fusion::p_WorkStack::_get_impl(_1700_rs)->f64;
  _checked_ptr_1<double> _ptr__1708_rf64(_1708_rf64 ? _1708_rf64->raw() : nullptr,_1708_rf64 ? _1708_rf64->size(0) : 0);
  int32_t _1709_linnz = (int)0;
  int32_t _1710_barnnz = (int)0;
  int32_t _1711_totalpsdelm = (int)0;
  int32_t _9639_ = (int)0;
  int32_t _9640_ = _1701_nelem;
  for (int32_t _1712_i = _9639_; _1712_i < _9640_; ++_1712_i)
  {
    {
      int32_t _1713_ps = _ptr__1706_ri32[safe_add( _1703_ptr_base,_1712_i )];
      int32_t _1714_pe = _ptr__1706_ri32[safe_add( safe_add( _1703_ptr_base,_1712_i ),(int)1 )];
      int32_t _1715_p = _1713_ps;
      while ( ((_1715_p < _1714_pe) && (_ptr__1707_ri64[safe_add( _1704_nidxs_base,_1715_p )] < (int)0)) )
      {
        {
          int32_t _1716_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1707_ri64[safe_add( _1704_nidxs_base,_1715_p )],(int)1 ))));
          int32_t _1717_p0 = _1715_p;
          ++ _1715_p;
          while ( ((_1715_p < _1714_pe) && ((_ptr__1707_ri64[safe_add( _1704_nidxs_base,_1715_p )] < (int)0) && (_1716_barj == ((*barvar_block_elm_barj)((-safe_add( _ptr__1707_ri64[safe_add( _1704_nidxs_base,_1715_p )],(int)1 ))))))) )
          {
            {
              ++ _1715_p;
            }
          }
          ++ _1710_barnnz;
        }
      }
      _1711_totalpsdelm += (_1715_p - _1713_ps);
      _1709_linnz += (_1714_pe - _1715_p);
    }
  }
  _1709_linnz += _1701_nelem;
  int32_t _1718_numcon = (int)((_1699_nativeidxs)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1719_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _1718_numcon,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__1719_ptrb(_1719_ptrb ? _1719_ptrb->raw() : nullptr,_1719_ptrb ? _1719_ptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1720_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1709_linnz)));
  _checked_ptr_1<int32_t> _ptr__1720_subj(_1720_subj ? _1720_subj->raw() : nullptr,_1720_subj ? _1720_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1721_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1709_linnz)));
  _checked_ptr_1<double> _ptr__1721_cof(_1721_cof ? _1721_cof->raw() : nullptr,_1721_cof ? _1721_cof->size(0) : 0);
  {
    int32_t _1722_k = (int)0;
    int32_t _9641_ = (int)0;
    int32_t _9642_ = _1701_nelem;
    for (int32_t _1723_i = _9641_; _1723_i < _9642_; ++_1723_i)
    {
      {
        int32_t _1724_knz = (int)0;
        int32_t _9643_ = _ptr__1706_ri32[safe_add( _1703_ptr_base,_1723_i )];
        int32_t _9644_ = _ptr__1706_ri32[safe_add( safe_add( _1703_ptr_base,_1723_i ),(int)1 )];
        for (int32_t _1725_j = _9643_; _1725_j < _9644_; ++_1725_j)
        {
          {
            if ((_ptr__1707_ri64[safe_add( _1704_nidxs_base,_1725_j )] >= (int)0))
            {
              {
                _ptr__1720_subj[safe_add( _1722_k,_1724_knz )] = (int32_t)_ptr__1707_ri64[safe_add( _1704_nidxs_base,_1725_j )];
                _ptr__1721_cof[safe_add( _1722_k,_1724_knz )] = _ptr__1708_rf64[safe_add( _1705_cof_base,_1725_j )];
                ++ _1724_knz;
              }
            }
            {}
          }
        }
        _ptr__1719_ptrb[safe_add( _1723_i,(int)1 )] = safe_add( _ptr__1719_ptrb[_1723_i],_1724_knz );
        _1722_k += _1724_knz;
      }
    }
  }
  task_putarowlist(_1699_nativeidxs,_1719_ptrb,_1720_subj,_1721_cof);
  if ((_1710_barnnz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1726_subi = _1699_nativeidxs;
      _checked_ptr_1<int32_t> _ptr__1726_subi(_1726_subi ? _1726_subi->raw() : nullptr,_1726_subi ? _1726_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1727_ptr = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _1718_numcon,(int)1 ))));
      _checked_ptr_1<int64_t> _ptr__1727_ptr(_1727_ptr ? _1727_ptr->raw() : nullptr,_1727_ptr ? _1727_ptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1728_barsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1710_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1728_barsubj(_1728_barsubj ? _1728_barsubj->raw() : nullptr,_1728_barsubj ? _1728_barsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1729_matdim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1710_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1729_matdim(_1729_matdim ? _1729_matdim->raw() : nullptr,_1729_matdim ? _1729_matdim->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1730_matnnz = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1710_barnnz)));
      _checked_ptr_1<int64_t> _ptr__1730_matnnz(_1730_matnnz ? _1730_matnnz->raw() : nullptr,_1730_matnnz ? _1730_matnnz->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1731_matsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1711_totalpsdelm)));
      _checked_ptr_1<int32_t> _ptr__1731_matsubi(_1731_matsubi ? _1731_matsubi->raw() : nullptr,_1731_matsubi ? _1731_matsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1732_matsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1711_totalpsdelm)));
      _checked_ptr_1<int32_t> _ptr__1732_matsubj(_1732_matsubj ? _1732_matsubj->raw() : nullptr,_1732_matsubj ? _1732_matsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1733_matcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1711_totalpsdelm)));
      _checked_ptr_1<double> _ptr__1733_matcof(_1733_matcof ? _1733_matcof->raw() : nullptr,_1733_matcof ? _1733_matcof->size(0) : 0);
      int32_t _1734_barnzi = (int)0;
      int32_t _1735_barmatnzi = (int)0;
      int32_t _9645_ = (int)0;
      int32_t _9646_ = _1718_numcon;
      for (int32_t _1736_i = _9645_; _1736_i < _9646_; ++_1736_i)
      {
        {
          int32_t _1737_p = _ptr__1706_ri32[safe_add( _1703_ptr_base,_1736_i )];
          int32_t _1738_pe = _ptr__1706_ri32[safe_add( safe_add( _1703_ptr_base,_1736_i ),(int)1 )];
          while ( ((_1737_p < _1738_pe) && (_ptr__1707_ri64[safe_add( _1704_nidxs_base,_1737_p )] < (int)0)) )
          {
            {
              int32_t _1739_p0 = _1737_p;
              int32_t _1740_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1707_ri64[safe_add( _1704_nidxs_base,_1737_p )],(int)1 ))));
              while ( ((_1737_p < _1738_pe) && ((_ptr__1707_ri64[safe_add( _1704_nidxs_base,_1737_p )] < (int)0) && (((*barvar_block_elm_barj)((-safe_add( _ptr__1707_ri64[safe_add( _1704_nidxs_base,_1737_p )],(int)1 )))) == _1740_barj))) )
              {
                {
                  _ptr__1731_matsubi[_1735_barmatnzi] = ((*barvar_block_elm_i)((-safe_add( _ptr__1707_ri64[safe_add( _1704_nidxs_base,_1737_p )],(int)1 ))));
                  _ptr__1732_matsubj[_1735_barmatnzi] = ((*barvar_block_elm_j)((-safe_add( _ptr__1707_ri64[safe_add( _1704_nidxs_base,_1737_p )],(int)1 ))));
                  if ((_ptr__1731_matsubi[_1735_barmatnzi] == _ptr__1732_matsubj[_1735_barmatnzi]))
                  {
                    {
                      _ptr__1733_matcof[_1735_barmatnzi] = _ptr__1708_rf64[safe_add( _1705_cof_base,_1737_p )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1733_matcof[_1735_barmatnzi] = (0.5 * _ptr__1708_rf64[safe_add( _1705_cof_base,_1737_p )]);
                    }
                  }
                  ++ _1735_barmatnzi;
                  ++ _1737_p;
                }
              }
              _ptr__1728_barsubj[_1734_barnzi] = _1740_barj;
              _ptr__1729_matdim[_1734_barnzi] = ((*barvar_dim)(_1740_barj));
              _ptr__1730_matnnz[_1734_barnzi] = (_1737_p - _1739_p0);
              ++ _1734_barnzi;
            }
          }
          _1737_p = _1738_pe;
          _ptr__1727_ptr[safe_add( _1736_i,(int)1 )] = _1734_barnzi;
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1741_symmatidx = task_appendsymmatlist(_1729_matdim,_1730_matnnz,_1731_matsubi,_1732_matsubj,_1733_matcof);
      _checked_ptr_1<int64_t> _ptr__1741_symmatidx(_1741_symmatidx ? _1741_symmatidx->raw() : nullptr,_1741_symmatidx ? _1741_symmatidx->size(0) : 0);
      task_putbararowlist(_1726_subi,_1727_ptr,_1728_barsubj,_1741_symmatidx);
    }
  }
  {}
}
// End mosek.fusion.Model.putarows

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ src/fusion/Model.mbi:1444:6-1556:7
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1742_name,monty::rc_ptr< ::mosek::fusion::Expression > _1743_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1744_dom_)
{
  if ((((int)((_1742_name).size()) > (int)0) && hasConstraint(_1742_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1742_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1744_dom_)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1745_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1743_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1745_e->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1746_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1746_ri32(_1746_ri32 ? _1746_ri32->raw() : nullptr,_1746_ri32 ? _1746_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1747_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1747_ri64(_1747_ri64 ? _1747_ri64->raw() : nullptr,_1747_ri64 ? _1747_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1748_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1748_rf64(_1748_rf64 ? _1748_rf64->raw() : nullptr,_1748_rf64 ? _1748_rf64->size(0) : 0);
  int32_t _1749_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1750_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1751_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1752_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int32_t _1753_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1754_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1755_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1756_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1757_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1758_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1759_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1760_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int32_t> _9647_;
  for (int32_t _1762_i = (int)0, _9648_ = _1749_nd; _1762_i < _9648_ ; ++_1762_i)
  {
    _9647_.push_back(_ptr__1746_ri32[safe_add( _1750_shape_base,_1762_i )]);
  }
  auto _9649_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9647_.size()),_9647_.begin(),_9647_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1761_shape = _9649_;
  _checked_ptr_1<int32_t> _ptr__1761_shape(_1761_shape ? _1761_shape->raw() : nullptr,_1761_shape ? _1761_shape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::RangeDomain > _1763_dom = mosek::fusion::p_RangeDomain::_get_impl(_1744_dom_.get())->__mosek_2fusion_2RangeDomain__finalize_and_validate(_1761_shape);
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1763_dom)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1763_dom)->shape)->size(0)) != _1749_nd))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int32_t _9650_ = (int)0;
          int32_t _9651_ = _1749_nd;
          for (int32_t _1764_i = _9650_; _1764_i < _9651_; ++_1764_i)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1763_dom)->shape)(_1764_i)) != _ptr__1746_ri32[safe_add( _1750_shape_base,_1764_i )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int32_t _1765_numcon = (int)1;
  int32_t _9652_ = (int)0;
  int32_t _9653_ = _1749_nd;
  for (int32_t _1766_i = _9652_; _1766_i < _9653_; ++_1766_i)
  {
    {
      _1765_numcon *= _ptr__1746_ri32[safe_add( _1750_shape_base,_1766_i )];
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1767_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1765_numcon)));
  _checked_ptr_1<int32_t> _ptr__1767_nativeidxs(_1767_nativeidxs ? _1767_nativeidxs->raw() : nullptr,_1767_nativeidxs ? _1767_nativeidxs->size(0) : 0);
  int32_t _1768_conid = con_allocate(_1767_nativeidxs);
  putarows(_1767_nativeidxs,rs,_1751_nelem,_1752_nnz,_1755_ptr_base,_1756_nidxs_base,_1757_cof_base);
  xs->clear();
  std::shared_ptr< monty::ndarray< double,1 > > _1769_bl = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1765_numcon)));
  _checked_ptr_1<double> _ptr__1769_bl(_1769_bl ? _1769_bl->raw() : nullptr,_1769_bl ? _1769_bl->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1770_bu = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1765_numcon)));
  _checked_ptr_1<double> _ptr__1770_bu(_1770_bu ? _1770_bu->raw() : nullptr,_1770_bu ? _1770_bu->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1771_domlb = mosek::fusion::p_RangeDomain::_get_impl(_1763_dom)->lb;
  _checked_ptr_1<double> _ptr__1771_domlb(_1771_domlb ? _1771_domlb->raw() : nullptr,_1771_domlb ? _1771_domlb->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1772_domub = mosek::fusion::p_RangeDomain::_get_impl(_1763_dom)->ub;
  _checked_ptr_1<double> _ptr__1772_domub(_1772_domub ? _1772_domub->raw() : nullptr,_1772_domub ? _1772_domub->size(0) : 0);
  bool _1773_domempty = mosek::fusion::p_RangeDomain::_get_impl(_1763_dom)->empty;
  bool _1774_domsc = mosek::fusion::p_RangeDomain::_get_impl(_1763_dom)->scalable;
  std::shared_ptr< monty::ndarray< int32_t,2 > > _1775_domsp = mosek::fusion::p_RangeDomain::_get_impl(_1763_dom)->sparsity;
  {
    if (_1774_domsc)
    {
      {
        int32_t _9654_ = (int)0;
        int32_t _9655_ = _1765_numcon;
        for (int32_t _1776_i = _9654_; _1776_i < _9655_; ++_1776_i)
        {
          {
            _ptr__1769_bl[_1776_i] = _ptr__1771_domlb[(int)0];
            _ptr__1770_bu[_1776_i] = _ptr__1772_domub[(int)0];
          }
        }
      }
    }
    else if(_1773_domempty)
    {
      {
      }
    }
    else if((NULL != _1775_domsp.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _1777_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1749_nd)));
        _checked_ptr_1<int32_t> _ptr__1777_stride(_1777_stride ? _1777_stride->raw() : nullptr,_1777_stride ? _1777_stride->size(0) : 0);
        _ptr__1777_stride[(_1749_nd - (int)1)] = (int)1;
        int32_t _9656_ = (int)1;
        int32_t _9657_ = _1749_nd;
        for (int32_t _1778_i = _9656_; _1778_i < _9657_; ++_1778_i)
        {
          {
            _ptr__1777_stride[((_1749_nd - _1778_i) - (int)1)] = safe_mul( _ptr__1777_stride[(_1749_nd - _1778_i)],_ptr__1746_ri32[(safe_add( _1750_shape_base,_1749_nd ) - _1778_i)] );
          }
        }
        int32_t _9658_ = (int)0;
        int32_t _9659_ = (int)((_1771_domlb)->size(0));
        for (int32_t _1779_i = _9658_; _1779_i < _9659_; ++_1779_i)
        {
          {
            int32_t _1780_idx = (int)0;
            int32_t _9660_ = (int)0;
            int32_t _9661_ = _1749_nd;
            for (int32_t _1781_j = _9660_; _1781_j < _9661_; ++_1781_j)
            {
              {
                _1780_idx += safe_mul( _ptr__1777_stride[_1781_j],((*_1775_domsp)(_1779_i,_1781_j)) );
              }
            }
            _ptr__1769_bl[_1780_idx] = _ptr__1771_domlb[_1779_i];
            _ptr__1770_bu[_1780_idx] = _ptr__1772_domub[_1779_i];
          }
        }
      }
    }
    else
    {
      {
        int32_t _9662_ = (int)0;
        int32_t _9663_ = _1765_numcon;
        for (int32_t _1782_i = _9662_; _1782_i < _9663_; ++_1782_i)
        {
          {
            _ptr__1769_bl[_1782_i] = _ptr__1771_domlb[_1782_i];
            _ptr__1770_bu[_1782_i] = _ptr__1772_domub[_1782_i];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1767_nativeidxs,_1769_bl,_1770_bu);
  if ((_1753_ncodeatom > (int)0))
  {
    {
      con_blocks->replace_row_code(rs,_1767_nativeidxs,_1755_ptr_base,_1756_nidxs_base,_1758_codeptr,_1759_code,_1760_cconst);
    }
  }
  {}
  if (((int)((_1742_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1783_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1783_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1742_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if (((int)((_1761_shape)->size(0)) > (int)0))
      {
        {
          _1783_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
        }
      }
      {}
      int32_t _9664_ = (int)1;
      int32_t _9665_ = (int)((_1761_shape)->size(0));
      for (int32_t _1784_i = _9664_; _1784_i < _9665_; ++_1784_i)
      {
        {
          _1783_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1784_i);
        }
      }
      _1783_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1763_dom)->indexnames.get()))
      {
        {
          task_format_con_names(_1767_nativeidxs,_1783_sb->toString(),_1761_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),mosek::fusion::p_RangeDomain::_get_impl(_1763_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_con_names(_1767_nativeidxs,_1783_sb->toString(),_1761_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  std::vector<int32_t> _9666_;
  for (int32_t _1786_i = (int)0, _9667_ = _1749_nd; _1786_i < _9667_ ; ++_1786_i)
  {
    _9666_.push_back(_ptr__1746_ri32[safe_add( _1750_shape_base,_1786_i )]);
  }
  auto _9668_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9666_.size()),_9666_.begin(),_9666_.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1785_res = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1742_name,_9668_,_1767_nativeidxs,_1768_conid);
  ((*cons)(_1768_conid)) = (_1785_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1742_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1742_name,_1768_conid);
    }
  }
  {}
  return _1785_res;
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ src/fusion/Model.mbi:1248:6-1424:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1787_name,monty::rc_ptr< ::mosek::fusion::Expression > _1788_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1789_dom_)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1790_shape = _1788_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__1790_shape(_1790_shape ? _1790_shape->raw() : nullptr,_1790_shape ? _1790_shape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::PSDDomain > _1791_dom = mosek::fusion::p_PSDDomain::_get_impl(_1789_dom_.get())->__mosek_2fusion_2PSDDomain__finalize_and_validate(_1790_shape);
  bool _1792_tril = (mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->conedim2);
  int32_t _9669_;
  bool _9670_ = (mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->conedim2);
  if (_9670_)
  {
    _9669_ = mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->conedim2;
  }
  else
  {
    _9669_ = mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->conedim1;
  }
  int32_t _1793_conedim1 = _9669_;
  int32_t _9671_;
  bool _9672_ = (mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->conedim2);
  if (_9672_)
  {
    _9671_ = mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->conedim1;
  }
  else
  {
    _9671_ = mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->conedim2;
  }
  int32_t _1794_conedim0 = _9671_;
  monty::rc_ptr< ::mosek::fusion::Expression > _9673_;
  bool _9674_ = (mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_9674_)
  {
    _9673_ = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1794_conedim0,_1793_conedim1,_1788_expr).as<::mosek::fusion::Expression>();
  }
  else
  {
    _9673_ = _1788_expr;
  }
  monty::rc_ptr< ::mosek::fusion::ExprOptimizeCode > _1795_e = ::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprScaleVecPSD::_new_ExprScaleVecPSD(_1794_conedim0,_1793_conedim1,(::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1794_conedim0,_1793_conedim1,_9673_)).as<::mosek::fusion::BaseExpression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1795_e->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1796_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1796_ri32(_1796_ri32 ? _1796_ri32->raw() : nullptr,_1796_ri32 ? _1796_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1797_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1797_ri64(_1797_ri64 ? _1797_ri64->raw() : nullptr,_1797_ri64 ? _1797_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1798_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1798_rf64(_1798_rf64 ? _1798_rf64->raw() : nullptr,_1798_rf64 ? _1798_rf64->size(0) : 0);
  int32_t _1799_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1800_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1801_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1802_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1803_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int32_t _1804_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1805_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1806_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1807_sp_base = mosek::fusion::p_WorkStack::_get_impl(rs)->sp_base;
  int32_t _1808_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1809_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1810_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1811_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  int32_t _1812_conedim = _ptr__1790_shape[_1793_conedim1];
  int32_t _1813_conesize = (safe_mul( _1812_conedim,safe_add( _1812_conedim,(int)1 ) ) / (int)2);
  int32_t _1814_numcone = (int)1;
  int32_t _9675_ = (int)0;
  int32_t _9676_ = _1799_nd;
  for (int32_t _1815_i = _9675_; _1815_i < _9676_; ++_1815_i)
  {
    {
      if (((_1815_i != _1794_conedim0) && (_1815_i != _1793_conedim1)))
      {
        {
          _1814_numcone *= _ptr__1790_shape[_1815_i];
        }
      }
      {}
    }
  }
  int64_t _1816_domainidx = task_append_domain_svec_psd(_1813_conesize);
  int32_t _1817_domsize = safe_mul( _1813_conesize,_1814_numcone );
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1818_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1817_domsize)));
  _checked_ptr_1<int32_t> _ptr__1818_afeidxs(_1818_afeidxs ? _1818_afeidxs->raw() : nullptr,_1818_afeidxs ? _1818_afeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1819_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1814_numcone)));
  _checked_ptr_1<int32_t> _ptr__1819_accidxs(_1819_accidxs ? _1819_accidxs->raw() : nullptr,_1819_accidxs ? _1819_accidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1820_conelmidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1817_domsize)));
  _checked_ptr_1<int32_t> _ptr__1820_conelmidx(_1820_conelmidx ? _1820_conelmidx->raw() : nullptr,_1820_conelmidx ? _1820_conelmidx->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1821_g = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1817_domsize)));
  _checked_ptr_1<double> _ptr__1821_g(_1821_g ? _1821_g->raw() : nullptr,_1821_g ? _1821_g->size(0) : 0);
  int32_t _1822_conid = acon_allocate(_1816_domainidx,_1813_conesize,_1814_numcone,_1821_g,_1818_afeidxs,_1819_accidxs);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1823_aconidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1817_domsize)));
  _checked_ptr_1<int32_t> _ptr__1823_aconidxs(_1823_aconidxs ? _1823_aconidxs->raw() : nullptr,_1823_aconidxs ? _1823_aconidxs->size(0) : 0);
  acon_block_map->get(_1822_conid,_1823_aconidxs,(int)0);
  int64_t _1824_d5 = (int)1;
  int64_t _1825_d4 = _ptr__1790_shape[_1793_conedim1];
  int64_t _1826_d3 = (int)1;
  int64_t _1827_d2 = _ptr__1790_shape[_1794_conedim0];
  int64_t _1828_d1 = (int)1;
  int32_t _9677_ = (int)0;
  int32_t _9678_ = _1794_conedim0;
  for (int32_t _1829_i = _9677_; _1829_i < _9678_; ++_1829_i)
  {
    {
      _1828_d1 *= _ptr__1790_shape[_1829_i];
    }
  }
  int32_t _9679_ = safe_add( _1794_conedim0,(int)1 );
  int32_t _9680_ = _1793_conedim1;
  for (int32_t _1830_i = _9679_; _1830_i < _9680_; ++_1830_i)
  {
    {
      _1826_d3 *= _ptr__1790_shape[_1830_i];
    }
  }
  int32_t _9681_ = safe_add( _1793_conedim1,(int)1 );
  int32_t _9682_ = _1799_nd;
  for (int32_t _1831_i = _9681_; _1831_i < _9682_; ++_1831_i)
  {
    {
      _1824_d5 *= _ptr__1790_shape[_1831_i];
    }
  }
  {
    int32_t _1832_k = (int)0;
    double _1833_s = (1.0 / ::mosek::fusion::Utils::Tools::sqrt((double)((int)2)));
    int32_t _9683_ = (int)0;
    int64_t _9684_ = safe_mul( safe_mul( _1828_d1,_1826_d3 ),_1824_d5 );
    for (int64_t _1834_i1 = _9683_; _1834_i1 < _9684_; ++_1834_i1)
    {
      {
        int32_t _9685_ = (int)0;
        int64_t _9686_ = _1827_d2;
        for (int64_t _1835_i2 = _9685_; _1835_i2 < _9686_; ++_1835_i2)
        {
          {
            ++ _1832_k;
            int64_t _9687_ = safe_add( _1835_i2,(int)1 );
            int64_t _9688_ = _1825_d4;
            for (int64_t _1836_i4 = _9687_; _1836_i4 < _9688_; ++_1836_i4)
            {
              {
                ((*acon_elm_scale)(_ptr__1823_aconidxs[_1832_k])) = _1833_s;
                ++ _1832_k;
              }
            }
          }
        }
      }
    }
  }
  {
    std::shared_ptr< monty::ndarray< int32_t,1 > > _1837_afetrilperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1800_nelem)));
    _checked_ptr_1<int32_t> _ptr__1837_afetrilperm(_1837_afetrilperm ? _1837_afetrilperm->raw() : nullptr,_1837_afetrilperm ? _1837_afetrilperm->size(0) : 0);
    int32_t _1838_k = (int)0;
    if (_1792_tril)
    {
      {
        int32_t _9689_ = (int)0;
        int64_t _9690_ = _1828_d1;
        for (int64_t _1839_i1 = _9689_; _1839_i1 < _9690_; ++_1839_i1)
        {
          {
            int32_t _9691_ = (int)0;
            int64_t _9692_ = _1825_d4;
            for (int64_t _1840_i4 = _9691_; _1840_i4 < _9692_; ++_1840_i4)
            {
              {
                int32_t _9693_ = (int)0;
                int64_t _9694_ = _1826_d3;
                for (int64_t _1841_i3 = _9693_; _1841_i3 < _9694_; ++_1841_i3)
                {
                  {
                    int64_t _9695_ = _1840_i4;
                    int64_t _9696_ = _1827_d2;
                    for (int64_t _1842_i2 = _9695_; _1842_i2 < _9696_; ++_1842_i2)
                    {
                      {
                        int32_t _9697_ = (int)0;
                        int64_t _9698_ = _1824_d5;
                        for (int64_t _1843_i5 = _9697_; _1843_i5 < _9698_; ++_1843_i5)
                        {
                          {
                            int64_t _1844_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1839_i1,_1826_d3 ),_1824_d5 ),safe_mul( _1841_i3,_1824_d5 ) ),_1843_i5 );
                            int64_t _1845_coneofs = safe_add( (safe_mul( _1842_i2,safe_add( _1842_i2,(int)1 ) ) / (int)2),_1840_i4 );
                            _ptr__1837_afetrilperm[safe_add( safe_mul( _1844_coneidx,_1813_conesize ),_1845_coneofs )] = _ptr__1818_afeidxs[_1838_k];
                            ++ _1838_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int32_t _9699_ = (int)0;
        int64_t _9700_ = _1828_d1;
        for (int64_t _1846_i1 = _9699_; _1846_i1 < _9700_; ++_1846_i1)
        {
          {
            int32_t _9701_ = (int)0;
            int64_t _9702_ = _1825_d4;
            for (int64_t _1847_i4 = _9701_; _1847_i4 < _9702_; ++_1847_i4)
            {
              {
                int32_t _9703_ = (int)0;
                int64_t _9704_ = _1826_d3;
                for (int64_t _1848_i3 = _9703_; _1848_i3 < _9704_; ++_1848_i3)
                {
                  {
                    int32_t _9705_ = (int)0;
                    int64_t _9706_ = safe_add( _1847_i4,(int)1 );
                    for (int64_t _1849_i2 = _9705_; _1849_i2 < _9706_; ++_1849_i2)
                    {
                      {
                        int32_t _9707_ = (int)0;
                        int64_t _9708_ = _1824_d5;
                        for (int64_t _1850_i5 = _9707_; _1850_i5 < _9708_; ++_1850_i5)
                        {
                          {
                            int64_t _1851_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1846_i1,_1826_d3 ),_1824_d5 ),safe_mul( _1848_i3,_1824_d5 ) ),_1850_i5 );
                            int64_t _1852_coneofs = safe_add( (safe_mul( _1849_i2,((safe_mul( (int)2,_1827_d2 ) - _1849_i2) - (int)1) ) / (int)2),_1847_i4 );
                            _ptr__1837_afetrilperm[safe_add( safe_mul( _1851_coneidx,_1813_conesize ),_1852_coneofs )] = _ptr__1818_afeidxs[_1838_k];
                            ++ _1838_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    putfrows(_1837_afetrilperm,(int)0,rs,_1800_nelem,_1801_nnz,_1805_ptr_base,_1806_nidxs_base,_1808_cof_base);
    if ((_1803_ncodeatom > (int)0))
    {
      {
        afe_blocks->replace_row_code(rs,_1837_afetrilperm,_1805_ptr_base,_1806_nidxs_base,_1809_codeptr,_1810_code,_1811_cconst);
      }
    }
    {}
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1853_pafeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_mul( safe_mul( _1814_numcone,_1827_d2 ),_1827_d2 ))));
  _checked_ptr_1<int32_t> _ptr__1853_pafeidxs(_1853_pafeidxs ? _1853_pafeidxs->raw() : nullptr,_1853_pafeidxs ? _1853_pafeidxs->size(0) : 0);
  {
    int32_t _1854_k = (int)0;
    if (_1792_tril)
    {
      {
        int32_t _9709_ = (int)0;
        int64_t _9710_ = _1828_d1;
        for (int64_t _1855_i1 = _9709_; _1855_i1 < _9710_; ++_1855_i1)
        {
          {
            int32_t _9711_ = (int)0;
            int64_t _9712_ = _1827_d2;
            for (int64_t _1856_i2 = _9711_; _1856_i2 < _9712_; ++_1856_i2)
            {
              {
                int32_t _9713_ = (int)0;
                int64_t _9714_ = _1826_d3;
                for (int64_t _1857_i3 = _9713_; _1857_i3 < _9714_; ++_1857_i3)
                {
                  {
                    int32_t _9715_ = (int)0;
                    int64_t _9716_ = _1825_d4;
                    for (int64_t _1858_i4 = _9715_; _1858_i4 < _9716_; ++_1858_i4)
                    {
                      {
                        int32_t _9717_ = (int)0;
                        int64_t _9718_ = _1824_d5;
                        for (int64_t _1859_i5 = _9717_; _1859_i5 < _9718_; ++_1859_i5)
                        {
                          {
                            int64_t _1860_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1855_i1,_1826_d3 ),_1824_d5 ),safe_mul( _1857_i3,_1824_d5 ) ),_1859_i5 );
                            int64_t _9719_;
                            bool _9720_ = (_1856_i2 >= _1858_i4);
                            if (_9720_)
                            {
                              _9719_ = safe_add( (safe_mul( _1858_i4,((safe_mul( (int)2,_1827_d2 ) - _1858_i4) - (int)1) ) / (int)2),_1856_i2 );
                            }
                            else
                            {
                              _9719_ = safe_add( (safe_mul( _1856_i2,((safe_mul( (int)2,_1827_d2 ) - _1856_i2) - (int)1) ) / (int)2),_1858_i4 );
                            }
                            int64_t _1861_coneofs = _9719_;
                            _ptr__1853_pafeidxs[_1854_k] = _ptr__1818_afeidxs[safe_add( safe_mul( _1860_coneidx,_1813_conesize ),_1861_coneofs )];
                            ++ _1854_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int32_t _9721_ = (int)0;
        int64_t _9722_ = _1828_d1;
        for (int64_t _1862_i1 = _9721_; _1862_i1 < _9722_; ++_1862_i1)
        {
          {
            int32_t _9723_ = (int)0;
            int64_t _9724_ = _1827_d2;
            for (int64_t _1863_i2 = _9723_; _1863_i2 < _9724_; ++_1863_i2)
            {
              {
                int32_t _9725_ = (int)0;
                int64_t _9726_ = _1826_d3;
                for (int64_t _1864_i3 = _9725_; _1864_i3 < _9726_; ++_1864_i3)
                {
                  {
                    int32_t _9727_ = (int)0;
                    int64_t _9728_ = _1825_d4;
                    for (int64_t _1865_i4 = _9727_; _1865_i4 < _9728_; ++_1865_i4)
                    {
                      {
                        int32_t _9729_ = (int)0;
                        int64_t _9730_ = _1824_d5;
                        for (int64_t _1866_i5 = _9729_; _1866_i5 < _9730_; ++_1866_i5)
                        {
                          {
                            int64_t _1867_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1862_i1,_1826_d3 ),_1824_d5 ),safe_mul( _1864_i3,_1824_d5 ) ),_1866_i5 );
                            int64_t _9731_;
                            bool _9732_ = (_1863_i2 >= _1865_i4);
                            if (_9732_)
                            {
                              _9731_ = safe_add( (safe_mul( _1865_i4,((safe_mul( (int)2,_1827_d2 ) - _1865_i4) - (int)1) ) / (int)2),_1863_i2 );
                            }
                            else
                            {
                              _9731_ = safe_add( (safe_mul( _1863_i2,((safe_mul( (int)2,_1827_d2 ) - _1863_i2) - (int)1) ) / (int)2),_1865_i4 );
                            }
                            int64_t _1868_coneofs = _9731_;
                            _ptr__1853_pafeidxs[_1854_k] = _ptr__1818_afeidxs[safe_add( safe_mul( _1867_coneidx,_1813_conesize ),_1868_coneofs )];
                            ++ _1854_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (((int)((_1787_name).size()) > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1869_coneshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_1790_shape)->size(0)) - (int)2))));
      _checked_ptr_1<int32_t> _ptr__1869_coneshape(_1869_coneshape ? _1869_coneshape->raw() : nullptr,_1869_coneshape ? _1869_coneshape->size(0) : 0);
      int32_t _9733_ = (int)0;
      int32_t _9734_ = _1794_conedim0;
      for (int32_t _1870_i = _9733_; _1870_i < _9734_; ++_1870_i)
      {
        {
          _ptr__1869_coneshape[_1870_i] = _ptr__1790_shape[_1870_i];
        }
      }
      int32_t _9735_ = safe_add( _1794_conedim0,(int)1 );
      int32_t _9736_ = _1793_conedim1;
      for (int32_t _1871_i = _9735_; _1871_i < _9736_; ++_1871_i)
      {
        {
          _ptr__1869_coneshape[(_1871_i - (int)1)] = _ptr__1790_shape[_1871_i];
        }
      }
      int32_t _9737_ = safe_add( _1793_conedim1,(int)1 );
      int32_t _9738_ = _1799_nd;
      for (int32_t _1872_i = _9737_; _1872_i < _9738_; ++_1872_i)
      {
        {
          _ptr__1869_coneshape[(_1872_i - (int)2)] = _ptr__1790_shape[_1872_i];
        }
      }
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1873_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1873_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1787_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1799_nd > (int)2))
      {
        {
          _1873_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9739_ = (int)1;
          int32_t _9740_ = (_1799_nd - (int)2);
          for (int32_t _1874_i = _9739_; _1874_i < _9740_; ++_1874_i)
          {
            {
              _1873_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1874_i);
            }
          }
        }
      }
      {}
      _1873_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->indexnames.get()))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1875_dindexnames = mosek::fusion::p_PSDDomain::_get_impl(_1791_dom)->indexnames;
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1876_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1799_nd - (int)2))));
          int32_t _9741_ = (int)0;
          int32_t _9742_ = _1794_conedim0;
          for (int32_t _1877_i = _9741_; _1877_i < _9742_; ++_1877_i)
          {
            {
              ((*_1876_indexnames)(_1877_i)) = ((*_1875_dindexnames)(_1877_i));
            }
          }
          int32_t _9743_ = safe_add( _1794_conedim0,(int)1 );
          int32_t _9744_ = _1793_conedim1;
          for (int32_t _1878_i = _9743_; _1878_i < _9744_; ++_1878_i)
          {
            {
              ((*_1876_indexnames)((_1878_i - (int)1))) = ((*_1875_dindexnames)(_1878_i));
            }
          }
          int32_t _9745_ = safe_add( _1793_conedim1,(int)1 );
          int32_t _9746_ = _1799_nd;
          for (int32_t _1879_i = _9745_; _1879_i < _9746_; ++_1879_i)
          {
            {
              ((*_1876_indexnames)((_1879_i - (int)2))) = ((*_1875_dindexnames)(_1879_i));
            }
          }
          std::vector<int64_t> _9747_;
          for (int32_t _1880_i = (int)0, _9748_ = (int)((_1819_accidxs)->size(0)); _1880_i < _9748_ ; ++_1880_i)
          {
            _9747_.push_back(_ptr__1819_accidxs[_1880_i]);
          }
          auto _9749_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9747_.size()),_9747_.begin(),_9747_.end()));
          task_format_acc_names(_9749_,_1873_sb->toString(),_1869_coneshape,_1876_indexnames);
        }
      }
      else
      {
        {
          std::vector<int64_t> _9750_;
          for (int32_t _1881_i = (int)0, _9751_ = (int)((_1819_accidxs)->size(0)); _1881_i < _9751_ ; ++_1881_i)
          {
            _9750_.push_back(_ptr__1819_accidxs[_1881_i]);
          }
          auto _9752_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9750_.size()),_9750_.begin(),_9750_.end()));
          task_format_acc_names(_9752_,_1873_sb->toString(),_1869_coneshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1882_res = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1787_name,nullptr,_1790_shape,_1822_conid,_1853_pafeidxs,nullptr);
  ((*acons)(_1822_conid)) = (_1882_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1787_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1787_name,(-safe_add( (int)1,_1822_conid )));
    }
  }
  {}
  return (_1882_res).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ src/fusion/Model.mbi:823:6-1023:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1883_name,monty::rc_ptr< ::mosek::fusion::Expression > _1884_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1885_dom_)
{
  if ((((int)((_1883_name).size()) > (int)0) && hasConstraint(_1883_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1883_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1883_name).size()) > (int)0) && hasConstraint(_1883_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1883_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1885_dom_)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1886_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1884_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1886_e->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1887_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1887_ri32(_1887_ri32 ? _1887_ri32->raw() : nullptr,_1887_ri32 ? _1887_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1888_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1888_ri64(_1888_ri64 ? _1888_ri64->raw() : nullptr,_1888_ri64 ? _1888_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1889_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1889_rf64(_1889_rf64 ? _1889_rf64->raw() : nullptr,_1889_rf64 ? _1889_rf64->size(0) : 0);
  int32_t _1890_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1891_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1892_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1893_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int32_t _1894_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1895_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1896_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1897_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1898_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1899_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1900_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1901_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int32_t> _9753_;
  for (int32_t _1903_i = (int)0, _9754_ = _1890_nd; _1903_i < _9754_ ; ++_1903_i)
  {
    _9753_.push_back(_ptr__1887_ri32[safe_add( _1891_shape_base,_1903_i )]);
  }
  auto _9755_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9753_.size()),_9753_.begin(),_9753_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1902_shape = _9755_;
  _checked_ptr_1<int32_t> _ptr__1902_shape(_1902_shape ? _1902_shape->raw() : nullptr,_1902_shape ? _1902_shape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::ConeDomain > _1904_dom = mosek::fusion::p_ConeDomain::_get_impl(_1885_dom_.get())->__mosek_2fusion_2ConeDomain__finalize_and_validate(_1902_shape);
  int32_t _9756_;
  bool _9757_ = _1904_dom->axisIsSet();
  if (_9757_)
  {
    _9756_ = _1904_dom->getAxis();
  }
  else
  {
    _9756_ = (_1890_nd - (int)1);
  }
  int32_t _1905_coneaxis = _9756_;
  int32_t _1906_conesize = _ptr__1902_shape[_1905_coneaxis];
  int32_t _1907_d1 = (int)1;
  int32_t _1908_d0 = (int)1;
  int32_t _1909_domsize = (int)1;
  int32_t _9758_ = (int)0;
  int32_t _9759_ = _1890_nd;
  for (int32_t _1910_i = _9758_; _1910_i < _9759_; ++_1910_i)
  {
    {
      _1909_domsize *= _ptr__1902_shape[_1910_i];
    }
  }
  int32_t _9760_ = (int)0;
  int32_t _9761_ = _1905_coneaxis;
  for (int32_t _1911_i = _9760_; _1911_i < _9761_; ++_1911_i)
  {
    {
      _1908_d0 *= _ptr__1902_shape[_1911_i];
    }
  }
  int32_t _9762_ = safe_add( _1905_coneaxis,(int)1 );
  int32_t _9763_ = _1890_nd;
  for (int32_t _1912_i = _9762_; _1912_i < _9763_; ++_1912_i)
  {
    {
      _1907_d1 *= _ptr__1902_shape[_1912_i];
    }
  }
  int32_t _1913_numcone = safe_mul( _1908_d0,_1907_d1 );
  int64_t _1914_domainidx;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      if ((_1906_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
        }
      }
      {}
      _1914_domainidx = task_append_domain_quad(_1906_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      if ((_1906_conesize < (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
        }
      }
      {}
      _1914_domainidx = task_append_domain_rquad(_1906_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      if ((_1906_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
        }
      }
      {}
      _1914_domainidx = task_append_domain_pexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      if ((_1906_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
        }
      }
      {}
      if (((int)((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->alpha)->size(0)) < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Power cone requires at least two parameters"))->toString());
        }
      }
      {}
      _1914_domainidx = task_append_domain_ppow(_1906_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      if ((_1906_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
        }
      }
      {}
      _1914_domainidx = task_append_domain_dexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      if ((_1906_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
        }
      }
      {}
      if (((int)((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->alpha)->size(0)) < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Power cone requires at least two parameters"))->toString());
        }
      }
      {}
      _1914_domainidx = task_append_domain_dpow(_1906_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::InPGeoMeanCone))
  {
    {
      if ((_1906_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for primal geometric mean cone"))->toString());
        }
      }
      {}
      _1914_domainidx = task_append_domain_pgeomean(_1906_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::InDGeoMeanCone))
  {
    {
      if ((_1906_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual geometric mean cone"))->toString());
        }
      }
      {}
      _1914_domainidx = task_append_domain_dgeomean(_1906_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::InSVecPSDCone))
  {
    {
      int32_t _1915_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1906_conesize ) ))) - (int)1) / (int)2);
      if (((safe_mul( _1915_d,safe_add( _1915_d,(int)1 ) ) / (int)2) != _1906_conesize))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for vector positive semidefinite cone"))->toString());
        }
      }
      {}
      _1914_domainidx = task_append_domain_svec_psd(_1906_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::Positive))
  {
    {
      _1914_domainidx = task_append_domain_rpos(_1906_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::Negative))
  {
    {
      _1914_domainidx = task_append_domain_rneg(_1906_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::Unbounded))
  {
    {
      _1914_domainidx = task_append_domain_r(_1906_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::Zero))
  {
    {
      _1914_domainidx = task_append_domain_rzero(_1906_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->key == ::mosek::fusion::QConeKey::InPSDCone))
  {
    {
      if ((_1906_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
        }
      }
      else
      {
        {
          int32_t _1916_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1906_conesize ) ))) - (int)1) / (int)2);
          if (((safe_mul( _1916_d,safe_add( _1916_d,(int)1 ) ) / (int)2) != _1906_conesize))
          {
            {
              throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1906_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
            }
          }
          {}
        }
      }
      _1914_domainidx = task_append_domain_svec_psd(_1906_conesize);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1917_g = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1909_domsize)));
  _checked_ptr_1<double> _ptr__1917_g(_1917_g ? _1917_g->raw() : nullptr,_1917_g ? _1917_g->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1918_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1909_domsize)));
  _checked_ptr_1<int32_t> _ptr__1918_afeidxs(_1918_afeidxs ? _1918_afeidxs->raw() : nullptr,_1918_afeidxs ? _1918_afeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1919_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1913_numcone)));
  _checked_ptr_1<int32_t> _ptr__1919_accidxs(_1919_accidxs ? _1919_accidxs->raw() : nullptr,_1919_accidxs ? _1919_accidxs->size(0) : 0);
  int32_t _1920_conid = acon_allocate(_1914_domainidx,_1906_conesize,_1913_numcone,_1917_g,_1918_afeidxs,_1919_accidxs);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1921_perm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1909_domsize)));
  _checked_ptr_1<int32_t> _ptr__1921_perm(_1921_perm ? _1921_perm->raw() : nullptr,_1921_perm ? _1921_perm->size(0) : 0);
  {
    int32_t _1922_idx = (int)0;
    std::shared_ptr< monty::ndarray< double,1 > > _1923_ofs = mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->domofs;
    _checked_ptr_1<double> _ptr__1923_ofs(_1923_ofs ? _1923_ofs->raw() : nullptr,_1923_ofs ? _1923_ofs->size(0) : 0);
    {
      int32_t _9764_ = (int)0;
      int32_t _9765_ = _1908_d0;
      for (int32_t _1924_i0 = _9764_; _1924_i0 < _9765_; ++_1924_i0)
      {
        {
          int32_t _9766_ = (int)0;
          int32_t _9767_ = _1907_d1;
          for (int32_t _1925_i1 = _9766_; _1925_i1 < _9767_; ++_1925_i1)
          {
            {
              int32_t _9768_ = (int)0;
              int32_t _9769_ = _1906_conesize;
              for (int32_t _1926_ic = _9768_; _1926_ic < _9769_; ++_1926_ic)
              {
                {
                  _ptr__1921_perm[safe_add( safe_add( safe_mul( safe_mul( _1924_i0,_1907_d1 ),_1906_conesize ),safe_mul( _1926_ic,_1907_d1 ) ),_1925_i1 )] = _1922_idx;
                  ++ _1922_idx;
                }
              }
            }
          }
        }
      }
      if ((NULL != _1923_ofs.get()))
      {
        {
          int32_t _9770_ = (int)0;
          int32_t _9771_ = _1909_domsize;
          for (int32_t _1927_i = _9770_; _1927_i < _9771_; ++_1927_i)
          {
            {
              _ptr__1917_g[_ptr__1921_perm[_1927_i]] = _ptr__1923_ofs[_1927_i];
            }
          }
        }
      }
      {}
    }
  }
  std::vector<int32_t> _9772_;
  for (int32_t _1929_i = (int)0, _9773_ = _1909_domsize; _1929_i < _9773_ ; ++_1929_i)
  {
    _9772_.push_back(_ptr__1918_afeidxs[_ptr__1921_perm[_1929_i]]);
  }
  auto _9774_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9772_.size()),_9772_.begin(),_9772_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1928_pafeidxs = _9774_;
  _checked_ptr_1<int32_t> _ptr__1928_pafeidxs(_1928_pafeidxs ? _1928_pafeidxs->raw() : nullptr,_1928_pafeidxs ? _1928_pafeidxs->size(0) : 0);
  putfrows(_1928_pafeidxs,(int)0,rs,_1892_nelem,_1893_nnz,_1896_ptr_base,_1897_nidxs_base,_1898_cof_base);
  if ((_1894_ncodeatom > (int)0))
  {
    {
      afe_blocks->replace_row_code(rs,_1928_pafeidxs,_1896_ptr_base,_1897_nidxs_base,_1900_codeptr,_1899_code,_1901_cconst);
    }
  }
  {}
  if (((int)((_1883_name).size()) > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1930_accshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_1902_shape)->size(0)) - (int)1))));
      _checked_ptr_1<int32_t> _ptr__1930_accshape(_1930_accshape ? _1930_accshape->raw() : nullptr,_1930_accshape ? _1930_accshape->size(0) : 0);
      int32_t _9775_ = (int)0;
      int32_t _9776_ = _1905_coneaxis;
      for (int32_t _1931_i = _9775_; _1931_i < _9776_; ++_1931_i)
      {
        {
          _ptr__1930_accshape[_1931_i] = _ptr__1902_shape[_1931_i];
        }
      }
      int32_t _9777_ = safe_add( _1905_coneaxis,(int)1 );
      int32_t _9778_ = _1890_nd;
      for (int32_t _1932_i = _9777_; _1932_i < _9778_; ++_1932_i)
      {
        {
          _ptr__1930_accshape[(_1932_i - (int)1)] = _ptr__1902_shape[_1932_i];
        }
      }
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1933_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1933_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1883_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1890_nd > (int)1))
      {
        {
          _1933_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9779_ = (int)1;
          int32_t _9780_ = (_1890_nd - (int)1);
          for (int32_t _1934_i = _9779_; _1934_i < _9780_; ++_1934_i)
          {
            {
              _1933_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1934_i);
            }
          }
        }
      }
      {}
      _1933_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->indexnames.get()))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1935_dindexnames = mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->indexnames;
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1936_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1890_nd - (int)1))));
          int32_t _9781_ = (int)0;
          int32_t _9782_ = _1905_coneaxis;
          for (int32_t _1937_i = _9781_; _1937_i < _9782_; ++_1937_i)
          {
            {
              ((*_1936_indexnames)(_1937_i)) = ((*_1935_dindexnames)(_1937_i));
            }
          }
          int32_t _9783_ = safe_add( _1905_coneaxis,(int)1 );
          int32_t _9784_ = _1890_nd;
          for (int32_t _1938_i = _9783_; _1938_i < _9784_; ++_1938_i)
          {
            {
              ((*_1936_indexnames)((_1938_i - (int)1))) = ((*_1935_dindexnames)(_1938_i));
            }
          }
          std::vector<int64_t> _9785_;
          for (int32_t _1939_i = (int)0, _9786_ = (int)((_1919_accidxs)->size(0)); _1939_i < _9786_ ; ++_1939_i)
          {
            _9785_.push_back(_ptr__1919_accidxs[_1939_i]);
          }
          auto _9787_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9785_.size()),_9785_.begin(),_9785_.end()));
          task_format_acc_names(_9787_,_1933_sb->toString(),_1930_accshape,_1936_indexnames);
        }
      }
      else
      {
        {
          std::vector<int64_t> _9788_;
          for (int32_t _1940_i = (int)0, _9789_ = (int)((_1919_accidxs)->size(0)); _1940_i < _9789_ ; ++_1940_i)
          {
            _9788_.push_back(_ptr__1919_accidxs[_1940_i]);
          }
          auto _9790_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9788_.size()),_9788_.begin(),_9788_.end()));
          task_format_acc_names(_9790_,_1933_sb->toString(),_1930_accshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1941_res = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1883_name,_1904_dom,_1902_shape,_1920_conid,_1918_afeidxs,mosek::fusion::p_ConeDomain::_get_impl(_1904_dom)->indexnames);
  ((*acons)(_1920_conid)) = (_1941_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1883_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1883_name,(-safe_add( _1920_conid,(int)1 )));
    }
  }
  {}
  return (_1941_res).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ src/fusion/Model.mbi:696:6-818:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1942_name,monty::rc_ptr< ::mosek::fusion::Expression > _1943_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1944_dom_)
{
  if ((((int)((_1942_name).size()) > (int)0) && hasConstraint(_1942_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1942_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1944_dom_)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1945_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1943_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1945_e->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1946_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1946_ri32(_1946_ri32 ? _1946_ri32->raw() : nullptr,_1946_ri32 ? _1946_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1947_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1947_ri64(_1947_ri64 ? _1947_ri64->raw() : nullptr,_1947_ri64 ? _1947_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1948_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1948_rf64(_1948_rf64 ? _1948_rf64->raw() : nullptr,_1948_rf64 ? _1948_rf64->size(0) : 0);
  int32_t _1949_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1950_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1951_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1952_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1953_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int32_t _1954_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1955_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1956_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1957_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1958_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1959_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1960_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int32_t> _9791_;
  for (int32_t _1962_i = (int)0, _9792_ = _1949_nd; _1962_i < _9792_ ; ++_1962_i)
  {
    _9791_.push_back(_ptr__1946_ri32[safe_add( _1954_shape_base,_1962_i )]);
  }
  auto _9793_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9791_.size()),_9791_.begin(),_9791_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1961_shape = _9793_;
  _checked_ptr_1<int32_t> _ptr__1961_shape(_1961_shape ? _1961_shape->raw() : nullptr,_1961_shape ? _1961_shape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::LinearDomain > _1963_dom = mosek::fusion::p_LinearDomain::_get_impl(_1944_dom_.get())->__mosek_2fusion_2LinearDomain__finalize_and_validate(_1961_shape);
  int64_t _1964_domsize = mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->domsize;
  std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1965_indexnames = mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->indexnames;
  std::shared_ptr< monty::ndarray< double,1 > > _1966_b;
  _checked_ptr_1<double> _ptr__1966_b(_1966_b ? _1966_b->raw() : nullptr,_1966_b ? _1966_b->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1967_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1964_domsize)));
  _checked_ptr_1<int32_t> _ptr__1967_nativeidxs(_1967_nativeidxs ? _1967_nativeidxs->raw() : nullptr,_1967_nativeidxs ? _1967_nativeidxs->size(0) : 0);
  int32_t _1968_conid = con_allocate(_1967_nativeidxs);
  putarows(_1967_nativeidxs,rs,_1950_nelem,_1951_nnz,_1955_ptr_base,_1956_nidxs_base,_1957_cof_base);
  {
    std::shared_ptr< monty::ndarray< int32_t,2 > > _1969_domsp = mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->sparsity;
    bool _1970_domempty = mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _1971_dombnd = mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->bnd;
    _checked_ptr_1<double> _ptr__1971_dombnd(_1971_dombnd ? _1971_dombnd->raw() : nullptr,_1971_dombnd ? _1971_dombnd->size(0) : 0);
    bool _1972_domscalable = mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->scalable;
    {
      if ((NULL == _1971_dombnd.get()))
      {
        {
          _1966_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1967_nativeidxs)->size(0)))));
          _ptr__1966_b.update(_1966_b ? _1966_b->raw() : nullptr, _1966_b ? _1966_b->size(0) : 0);
        }
      }
      else if(_1972_domscalable)
      {
        {
          std::vector<double> _9794_;
          for (int32_t _1973_i = (int)0, _9795_ = (int)((_1967_nativeidxs)->size(0)); _1973_i < _9795_ ; ++_1973_i)
          {
            _9794_.push_back(_ptr__1971_dombnd[(int)0]);
          }
          auto _9796_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9794_.size()),_9794_.begin(),_9794_.end()));
          _1966_b = _9796_;
          _ptr__1966_b.update(_1966_b ? _1966_b->raw() : nullptr, _1966_b ? _1966_b->size(0) : 0);
        }
      }
      else if((NULL != _1969_domsp.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1974_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1949_nd)));
          _checked_ptr_1<int32_t> _ptr__1974_stride(_1974_stride ? _1974_stride->raw() : nullptr,_1974_stride ? _1974_stride->size(0) : 0);
          _ptr__1974_stride[(_1949_nd - (int)1)] = (int)1;
          int32_t _9797_ = (int)1;
          int32_t _9798_ = _1949_nd;
          for (int32_t _1975_i = _9797_; _1975_i < _9798_; ++_1975_i)
          {
            {
              _ptr__1974_stride[((_1949_nd - _1975_i) - (int)1)] = safe_mul( _ptr__1974_stride[(_1949_nd - _1975_i)],_ptr__1961_shape[(_1949_nd - _1975_i)] );
            }
          }
          _1966_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1967_nativeidxs)->size(0)))));
          _ptr__1966_b.update(_1966_b ? _1966_b->raw() : nullptr, _1966_b ? _1966_b->size(0) : 0);
          int32_t _9799_ = (int)0;
          int32_t _9800_ = (int)((_1969_domsp)->size(0));
          for (int32_t _1976_i = _9799_; _1976_i < _9800_; ++_1976_i)
          {
            {
              int32_t _1977_idx = (int)0;
              int32_t _9801_ = (int)0;
              int32_t _9802_ = _1949_nd;
              for (int32_t _1978_j = _9801_; _1978_j < _9802_; ++_1978_j)
              {
                {
                  _1977_idx += safe_mul( _ptr__1974_stride[_1978_j],((*_1969_domsp)(_1976_i,_1978_j)) );
                }
              }
              _ptr__1966_b[_1977_idx] = _ptr__1971_dombnd[_1976_i];
            }
          }
        }
      }
      else if(_1970_domempty)
      {
        {
          _1966_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1967_nativeidxs)->size(0)))));
          _ptr__1966_b.update(_1966_b ? _1966_b->raw() : nullptr, _1966_b ? _1966_b->size(0) : 0);
        }
      }
      else
      {
        {
          std::vector<double> _9803_;
          for (int32_t _1979_i = (int)0, _9804_ = (int)((_1967_nativeidxs)->size(0)); _1979_i < _9804_ ; ++_1979_i)
          {
            _9803_.push_back(_ptr__1971_dombnd[_1979_i]);
          }
          auto _9805_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9803_.size()),_9803_.begin(),_9803_.end()));
          _1966_b = _9805_;
          _ptr__1966_b.update(_1966_b ? _1966_b->raw() : nullptr, _1966_b ? _1966_b->size(0) : 0);
        }
      }
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_con_putboundlist_fr(_1967_nativeidxs);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_con_putboundlist_up(_1967_nativeidxs,_1966_b);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_con_putboundlist_lo(_1967_nativeidxs,_1966_b);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_con_putboundlist_fx(_1967_nativeidxs,_1966_b);
    }
  }
  {}
  if ((_1953_ncodeatom > (int)0))
  {
    {
      con_blocks->replace_row_code(rs,_1967_nativeidxs,_1955_ptr_base,_1956_nidxs_base,_1958_codeptr,_1959_code,_1960_cconst);
    }
  }
  {}
  if (((int)((_1942_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1980_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1980_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1942_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if (((int)((_1961_shape)->size(0)) > (int)0))
      {
        {
          _1980_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
        }
      }
      {}
      int32_t _9806_ = (int)1;
      int32_t _9807_ = (int)((_1961_shape)->size(0));
      for (int32_t _1981_i = _9806_; _1981_i < _9807_; ++_1981_i)
      {
        {
          _1980_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1981_i);
        }
      }
      _1980_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->indexnames.get()))
      {
        {
          task_format_con_names(_1967_nativeidxs,_1980_sb->toString(),_1961_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),mosek::fusion::p_LinearDomain::_get_impl(_1963_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_con_names(_1967_nativeidxs,_1980_sb->toString(),_1961_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _1982_res = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_1942_name,_1968_conid,_1961_shape,_1967_nativeidxs,_1965_indexnames);
  ((*cons)(_1968_conid)) = (_1982_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1942_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1942_name,_1968_conid);
    }
  }
  {}
  return (_1982_res).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.getVersion
// Method mosek.fusion.Model.getVersion @ src/fusion/Model.mbi:690:6-692:7
std::string mosek::fusion::Model::getVersion
  ( ) { return mosek::fusion::p_Model::getVersion(); }
std::string mosek::fusion::p_Model::getVersion()
{
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
// End mosek.fusion.Model.getVersion

// Begin mosek.fusion.Model.hasParameter
// Method mosek.fusion.Model.hasParameter @ src/fusion/Model.mbi:685:6-93
bool mosek::fusion::Model :: hasParameter(const std::string & _1983_name) { return mosek::fusion::p_Model::_get_impl(this)->hasParameter(_1983_name); }
bool mosek::fusion::p_Model::hasParameter(const std::string & _1983_name)
{
  return par_map->hasItem(_1983_name);
}
// End mosek.fusion.Model.hasParameter

// Begin mosek.fusion.Model.hasConstraint
// Method mosek.fusion.Model.hasConstraint @ src/fusion/Model.mbi:684:6-93
bool mosek::fusion::Model :: hasConstraint(const std::string & _1984_name) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1984_name); }
bool mosek::fusion::p_Model::hasConstraint(const std::string & _1984_name)
{
  return con_map->hasItem(_1984_name);
}
// End mosek.fusion.Model.hasConstraint

// Begin mosek.fusion.Model.hasVariable
// Method mosek.fusion.Model.hasVariable @ src/fusion/Model.mbi:683:6-93
bool mosek::fusion::Model :: hasVariable(const std::string & _1985_name) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1985_name); }
bool mosek::fusion::p_Model::hasVariable(const std::string & _1985_name)
{
  return var_map->hasItem(_1985_name);
}
// End mosek.fusion.Model.hasVariable

// Begin mosek.fusion.Model.getParameter
// Method mosek.fusion.Model.getParameter @ src/fusion/Model.mbi:681:6-149
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__getParameter(const std::string & _1986_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getParameter(_1986_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::getParameter(const std::string &  _1986_name) { return __mosek_2fusion_2Model__getParameter(_1986_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__getParameter(const std::string & _1986_name)
{
  monty::rc_ptr< ::mosek::fusion::Parameter > _9808_;
  bool _9809_ = par_map->hasItem(_1986_name);
  if (_9809_)
  {
    _9808_ = ((*parameters)(par_map->getItem(_1986_name)));
  }
  else
  {
    _9808_ = nullptr;
  }
  return _9808_;
}
// End mosek.fusion.Model.getParameter

// Begin mosek.fusion.Model.getConstraint
// Method mosek.fusion.Model.getConstraint @ src/fusion/Model.mbi:680:6-167
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int32_t _1987_index) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1987_index); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int32_t _1987_index) { return __mosek_2fusion_2Model__getConstraint(_1987_index); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int32_t _1987_index)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _1988_res;
  if ((_1987_index >= (int)0))
  {
    {
      _1988_res = (((*cons)(_1987_index))).as<::mosek::fusion::Constraint>();
    }
  }
  else
  {
    {
      _1988_res = (((*acons)((-safe_add( (int)1,_1987_index ))))).as<::mosek::fusion::Constraint>();
    }
  }
  return _1988_res;
}
// End mosek.fusion.Model.getConstraint

// Begin mosek.fusion.Model.getConstraint
// Method mosek.fusion.Model.getConstraint @ src/fusion/Model.mbi:670:6-679:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _1989_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1989_name); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _1989_name) { return __mosek_2fusion_2Model__getConstraint(_1989_name); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _1989_name)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _1990_retval = nullptr;
  if (con_map->hasItem(_1989_name))
  {
    {
      int32_t _1991_idx = con_map->getItem(_1989_name);
      if ((_1991_idx >= (int)0))
      {
        {
          _1990_retval = (((*cons)(_1991_idx))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          _1990_retval = (((*acons)((-safe_add( (int)1,_1991_idx ))))).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
  {}
  return _1990_retval;
}
// End mosek.fusion.Model.getConstraint

// Begin mosek.fusion.Model.getVariable
// Method mosek.fusion.Model.getVariable @ src/fusion/Model.mbi:668:6-86
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int32_t _1992_index) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1992_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int32_t _1992_index) { return __mosek_2fusion_2Model__getVariable(_1992_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int32_t _1992_index)
{
  return (((*vars)(_1992_index))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.getVariable

// Begin mosek.fusion.Model.getVariable
// Method mosek.fusion.Model.getVariable @ src/fusion/Model.mbi:657:6-667:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _1993_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1993_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _1993_name) { return __mosek_2fusion_2Model__getVariable(_1993_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _1993_name)
{
  if (var_map->hasItem(_1993_name))
  {
    {
      int32_t _1994_varid = var_map->getItem(_1993_name);
      if ((_1994_varid < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _1994_varid,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_1994_varid))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
// End mosek.fusion.Model.getVariable

// Begin mosek.fusion.Model.getName
// Method mosek.fusion.Model.getName @ src/fusion/Model.mbi:655:6-67
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }
std::string mosek::fusion::p_Model::getName()
{
  return model_name;
}
// End mosek.fusion.Model.getName

// Begin mosek.fusion.Model.getParameterValue
// Method mosek.fusion.Model.getParameterValue @ src/fusion/Model.mbi:647:6-652:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getParameterValue(std::shared_ptr< monty::ndarray< int32_t,1 > > _1995_idxs)
{
  _checked_ptr_1<int32_t> _ptr__1995_idxs(_1995_idxs ? _1995_idxs->raw() : nullptr, _1995_idxs ? _1995_idxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1996_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1995_idxs)->size(0)))));
  _checked_ptr_1<double> _ptr__1996_res(_1996_res ? _1996_res->raw() : nullptr,_1996_res ? _1996_res->size(0) : 0);
  int32_t _9810_ = (int)0;
  int32_t _9811_ = (int)((_1995_idxs)->size(0));
  for (int32_t _1997_i = _9810_; _1997_i < _9811_; ++_1997_i)
  {
    {
      _ptr__1996_res[_1997_i] = ((*param_value)(_ptr__1995_idxs[_1997_i]));
    }
  }
  return _1996_res;
}
// End mosek.fusion.Model.getParameterValue

// Begin mosek.fusion.Model.setParameterValue
// Method mosek.fusion.Model.setParameterValue @ src/fusion/Model.mbi:642:6-645:7
void mosek::fusion::p_Model::setParameterValue(std::shared_ptr< monty::ndarray< int32_t,1 > > _1998_idxs,std::shared_ptr< monty::ndarray< double,1 > > _1999_vals)
{
  _checked_ptr_1<int32_t> _ptr__1998_idxs(_1998_idxs ? _1998_idxs->raw() : nullptr, _1998_idxs ? _1998_idxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__1999_vals(_1999_vals ? _1999_vals->raw() : nullptr, _1999_vals ? _1999_vals->size(0) : 0);
  int32_t _9812_ = (int)0;
  int32_t _9813_ = (int)((_1998_idxs)->size(0));
  for (int32_t _2000_i = _9812_; _2000_i < _9813_; ++_2000_i)
  {
    {
      ((*param_value)(_ptr__1998_idxs[_2000_i])) = _ptr__1999_vals[_2000_i];
    }
  }
}
// End mosek.fusion.Model.setParameterValue

// Begin mosek.fusion.Model.clone
// Method mosek.fusion.Model.clone @ src/fusion/Model.mbi:637:6-640:7
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone()
{
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
// End mosek.fusion.Model.clone

void mosek::fusion::p_Model::destroy()
{
  xs.reset();
  ws.reset();
  rs.reset();
  sol_itg.reset();
  sol_bas.reset();
  sol_itr.reset();
  con_map.reset();
  acons.reset();
  cons.reset();
  param_value.reset();
  par_map.reset();
  parameters.reset();
  initsol_xx_flag.reset();
  initsol_xx.reset();
  var_map.reset();
  barvars.reset();
  vars.reset();
  barvar_block_elm_j.reset();
  barvar_block_elm_i.reset();
  barvar_block_elm_barj.reset();
  barvar_block_elm_ptr.reset();
  barvar_block_dim.reset();
  barvar_block_ptr.reset();
  barvar_dim.reset();
  var_elm_acc_ofs.reset();
  var_elm_acc_idx.reset();
  var_block_acc_id.reset();
  var_block_map.reset();
  acon_elm_afe.reset();
  acon_elm_ofs.reset();
  acon_elm_scale.reset();
  acon_elm_accid.reset();
  acon_afe.reset();
  acon_acc.reset();
  acon_block_map.reset();
  acc_block_map.reset();
  obj_blocks.reset();
  afe_blocks.reset();
  con_blocks.reset();
}
void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }
// } class Model
// class BoundInterfaceVariable { // @ src/fusion/BoundInterfaceVariable.mbi:29:4-85:5
mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable(mosek::fusion::p_BoundInterfaceVariable *_impl) : mosek::fusion::SliceVariable(_impl) { /*std::cout << "BoundInterfaceVariable()" << this << std::endl; */ }
mosek::fusion::BoundInterfaceVariable::~BoundInterfaceVariable() {  /* std::cout << "~BoundInterfaceVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_BoundInterfaceVariable::p_BoundInterfaceVariable
  (::mosek::fusion::BoundInterfaceVariable * _pubthis) :     mosek::fusion::p_SliceVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.BoundInterfaceVariable.ctor @ src/fusion/BoundInterfaceVariable.mbi:41:6-50:7
mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2001_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2002_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2003_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2004_nativeidxs,
    bool _2005_islower)
{ return new mosek::fusion::BoundInterfaceVariable(_2001_m,_2002_shape,_2003_sparsity,_2004_nativeidxs,_2005_islower); }
mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2001_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2002_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2003_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2004_nativeidxs,
    bool _2005_islower) : 
   BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this))
{ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_2001_m,_2002_shape,_2003_sparsity,_2004_nativeidxs,_2005_islower); }
void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2001_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2002_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2003_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2004_nativeidxs,
    bool _2005_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2002_shape(_2002_shape ? _2002_shape->raw() : nullptr, _2002_shape ? _2002_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2003_sparsity(_2003_sparsity ? _2003_sparsity->raw() : nullptr, _2003_sparsity ? _2003_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2004_nativeidxs(_2004_nativeidxs ? _2004_nativeidxs->raw() : nullptr, _2004_nativeidxs ? _2004_nativeidxs->size(0) : 0);
    mosek::fusion::p_SliceVariable::_initialize(_2001_m,_2002_shape,_2003_sparsity,_2004_nativeidxs);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _2005_islower;
  }
}
// mosek.fusion.BoundInterfaceVariable.ctor

// mosek.fusion.BoundInterfaceVariable.ctor @ src/fusion/BoundInterfaceVariable.mbi:33:6-39:7
mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2006_v,
    bool _2007_islower)
{ return new mosek::fusion::BoundInterfaceVariable(_2006_v,_2007_islower); }
mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2006_v,
    bool _2007_islower) : 
   BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this))
{ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_2006_v,_2007_islower); }
void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2006_v,
    bool _2007_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_SliceVariable::_initialize(_2006_v);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _2007_islower;
  }
}
// mosek.fusion.BoundInterfaceVariable.ctor

// Begin mosek.fusion.BoundInterfaceVariable.dual
// Method mosek.fusion.BoundInterfaceVariable.dual @ src/fusion/BoundInterfaceVariable.mbi:80:6-84:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceVariable :: dual() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceVariable::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2008_target = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__2008_target(_2008_target ? _2008_target->raw() : nullptr,_2008_target ? _2008_target->size(0) : 0);
  dual_lu((int)0,_2008_target,islower);
  return _2008_target;
}
// End mosek.fusion.BoundInterfaceVariable.dual

// Begin mosek.fusion.BoundInterfaceVariable.transpose
// Method mosek.fusion.BoundInterfaceVariable.transpose @ src/fusion/BoundInterfaceVariable.mbi:78:6-78
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__transpose() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }
/* override: mosek.fusion.BaseVariable.transpose*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__transpose()
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose())).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.transpose

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ src/fusion/BoundInterfaceVariable.mbi:77:6-112
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2009_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2010_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2011_i2) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_2009_i0,_2010_i1,_2011_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2009_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2010_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2011_i2) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2009_i0,_2010_i1,_2011_i2); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2009_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2010_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2011_i2) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2009_i0,_2010_i1,_2011_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2009_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2010_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2011_i2)
{
  _checked_ptr_1<int32_t> _ptr__2009_i0(_2009_i0 ? _2009_i0->raw() : nullptr, _2009_i0 ? _2009_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2010_i1(_2010_i1 ? _2010_i1->raw() : nullptr, _2010_i1 ? _2010_i1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2011_i2(_2011_i2 ? _2011_i2->raw() : nullptr, _2011_i2 ? _2011_i2->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_2009_i0,_2010_i1,_2011_i2))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ src/fusion/BoundInterfaceVariable.mbi:76:6-98
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2012_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2013_i1) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_2012_i0,_2013_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2012_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2013_i1) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2012_i0,_2013_i1); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2012_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2013_i1) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2012_i0,_2013_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2012_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2013_i1)
{
  _checked_ptr_1<int32_t> _ptr__2012_i0(_2012_i0 ? _2012_i0->raw() : nullptr, _2012_i0 ? _2012_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2013_i1(_2013_i1 ? _2013_i1->raw() : nullptr, _2013_i1 ? _2013_i1->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_2012_i0,_2013_i1))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ src/fusion/BoundInterfaceVariable.mbi:75:6-91
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2014_midxs) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_2014_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2014_midxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2014_midxs); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2014_midxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2014_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2014_midxs)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_2014_midxs))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ src/fusion/BoundInterfaceVariable.mbi:74:6-88
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2015_idxs) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_2015_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2015_idxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2015_idxs); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2015_idxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2015_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2015_idxs)
{
  _checked_ptr_1<int32_t> _ptr__2015_idxs(_2015_idxs ? _2015_idxs->raw() : nullptr, _2015_idxs ? _2015_idxs->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_2015_idxs))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.antidiag
// Method mosek.fusion.BoundInterfaceVariable.antidiag @ src/fusion/BoundInterfaceVariable.mbi:73:6-93
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag(int32_t _2016_index) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(_2016_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag(int32_t _2016_index) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_2016_index); }
/* override: mosek.fusion.BaseVariable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag(int32_t _2016_index) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_2016_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(int32_t _2016_index)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(_2016_index))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.antidiag

// Begin mosek.fusion.BoundInterfaceVariable.antidiag
// Method mosek.fusion.BoundInterfaceVariable.antidiag @ src/fusion/BoundInterfaceVariable.mbi:72:6-76
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
/* override: mosek.fusion.BaseVariable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag()
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag())).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.antidiag

// Begin mosek.fusion.BoundInterfaceVariable.diag
// Method mosek.fusion.BoundInterfaceVariable.diag @ src/fusion/BoundInterfaceVariable.mbi:71:6-88
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag(int32_t _2017_index) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(_2017_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag(int32_t _2017_index) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_2017_index); }
/* override: mosek.fusion.BaseVariable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag(int32_t _2017_index) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_2017_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(int32_t _2017_index)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(_2017_index))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.diag

// Begin mosek.fusion.BoundInterfaceVariable.diag
// Method mosek.fusion.BoundInterfaceVariable.diag @ src/fusion/BoundInterfaceVariable.mbi:70:6-72
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }
/* override: mosek.fusion.BaseVariable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag()
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag())).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.diag

// Begin mosek.fusion.BoundInterfaceVariable.slice
// Method mosek.fusion.BoundInterfaceVariable.slice @ src/fusion/BoundInterfaceVariable.mbi:69:6-113
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2018_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2019_lasta) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_2018_firsta,_2019_lasta); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2018_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2019_lasta) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2018_firsta,_2019_lasta); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2018_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2019_lasta) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2018_firsta,_2019_lasta); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2018_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2019_lasta)
{
  _checked_ptr_1<int32_t> _ptr__2018_firsta(_2018_firsta ? _2018_firsta->raw() : nullptr, _2018_firsta ? _2018_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2019_lasta(_2019_lasta ? _2019_lasta->raw() : nullptr, _2019_lasta ? _2019_lasta->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_2018_firsta,_2019_lasta))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.slice

// Begin mosek.fusion.BoundInterfaceVariable.slice
// Method mosek.fusion.BoundInterfaceVariable.slice @ src/fusion/BoundInterfaceVariable.mbi:68:6-105
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(int32_t _2020_first,int32_t _2021_last) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_2020_first,_2021_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(int32_t _2020_first,int32_t _2021_last) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2020_first,_2021_last); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(int32_t _2020_first,int32_t _2021_last) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2020_first,_2021_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(int32_t _2020_first,int32_t _2021_last)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_2020_first,_2021_last))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.slice

// Begin mosek.fusion.BoundInterfaceVariable.from_
// Method mosek.fusion.BoundInterfaceVariable.from_ @ src/fusion/BoundInterfaceVariable.mbi:52:6-66:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__from_(monty::rc_ptr< ::mosek::fusion::Variable > _2022_v)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2023_shape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__2023_shape(_2023_shape ? _2023_shape->raw() : nullptr,_2023_shape ? _2023_shape->size(0) : 0);
  int32_t _2024_nnz = _2022_v->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2025_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2024_nnz)));
  _checked_ptr_1<int64_t> _ptr__2025_nativeidxs(_2025_nativeidxs ? _2025_nativeidxs->raw() : nullptr,_2025_nativeidxs ? _2025_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2026_sparsity = nullptr;
  _checked_ptr_1<int64_t> _ptr__2026_sparsity(_2026_sparsity ? _2026_sparsity->raw() : nullptr,_2026_sparsity ? _2026_sparsity->size(0) : 0);
  if ((_2022_v->getSize() == _2024_nnz))
  {
    {
      _2022_v->inst((int)0,_2025_nativeidxs);
    }
  }
  else
  {
    {
      _2026_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2024_nnz)));
      _ptr__2026_sparsity.update(_2026_sparsity ? _2026_sparsity->raw() : nullptr, _2026_sparsity ? _2026_sparsity->size(0) : 0);
      _2022_v->inst((int)0,_2026_sparsity,(int)0,_2025_nativeidxs);
    }
  }
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_2022_v->__mosek_2fusion_2Variable__getModel(),_2023_shape,_2026_sparsity,_2025_nativeidxs,islower);
}
// End mosek.fusion.BoundInterfaceVariable.from_

void mosek::fusion::p_BoundInterfaceVariable::destroy()
{
}
void mosek::fusion::BoundInterfaceVariable::destroy() { mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->destroy(); }
// } class BoundInterfaceVariable
// class SliceVariable { // @ src/fusion/SliceVariable.mbi:18:4-66:5
mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }
mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SliceVariable::p_SliceVariable
  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SliceVariable.ctor @ src/fusion/SliceVariable.mbi:54:6-65:7
mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2027_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2028_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2029_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2030_nativeidxs)
{ return new mosek::fusion::SliceVariable(_2027_m,_2028_shape,_2029_sparsity,_2030_nativeidxs); }
mosek::fusion::SliceVariable::SliceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2027_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2028_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2029_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2030_nativeidxs) : 
   SliceVariable(new mosek::fusion::p_SliceVariable(this))
{ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_2027_m,_2028_shape,_2029_sparsity,_2030_nativeidxs); }
void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2027_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2028_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2029_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2030_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2028_shape(_2028_shape ? _2028_shape->raw() : nullptr, _2028_shape ? _2028_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2029_sparsity(_2029_sparsity ? _2029_sparsity->raw() : nullptr, _2029_sparsity ? _2029_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2030_nativeidxs(_2030_nativeidxs ? _2030_nativeidxs->raw() : nullptr, _2030_nativeidxs ? _2030_nativeidxs->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_2027_m,_2028_shape,_2029_sparsity,_2030_nativeidxs);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _2030_nativeidxs;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _2029_sparsity;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _2028_shape;
  }
}
// mosek.fusion.SliceVariable.ctor

// mosek.fusion.SliceVariable.ctor @ src/fusion/SliceVariable.mbi:47:6-52:7
mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2031_v)
{ return new mosek::fusion::SliceVariable(_2031_v); }
mosek::fusion::SliceVariable::SliceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2031_v) : 
   SliceVariable(new mosek::fusion::p_SliceVariable(this))
{ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_2031_v); }
void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2031_v)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseVariable::_initialize(_2031_v,_2031_v->__mosek_2fusion_2BaseVariable__getModel());
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_SliceVariable::_get_impl(_2031_v)->nativeidxs;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = mosek::fusion::p_SliceVariable::_get_impl(_2031_v)->sparsity;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = mosek::fusion::p_SliceVariable::_get_impl(_2031_v)->shape;
  }
}
// mosek.fusion.SliceVariable.ctor

void mosek::fusion::p_SliceVariable::destroy()
{
  shape.reset();
  sparsity.reset();
  nativeidxs.reset();
}
void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }
// } class SliceVariable
// class RangedVariable { // @ src/fusion/RangedVariable.mbi:15:4-125:5
mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }
mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_RangedVariable::p_RangedVariable
  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.RangedVariable.ctor @ src/fusion/RangedVariable.mbi:55:6-64:7
mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable
  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2032_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2033_m)
{ return new mosek::fusion::RangedVariable(_2032_v,_2033_m); }
mosek::fusion::RangedVariable::RangedVariable
  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2032_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2033_m) : 
   RangedVariable(new mosek::fusion::p_RangedVariable(this))
{ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_2032_v,_2033_m); }
void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2032_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2033_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2032_v,_2033_m);
    name = mosek::fusion::p_RangedVariable::_get_impl(_2032_v)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_2032_v)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_2032_v)->sparsity;
    names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_2032_v)->names_flushed;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_2032_v)->shape;
  }
}
// mosek.fusion.RangedVariable.ctor

// mosek.fusion.RangedVariable.ctor @ src/fusion/RangedVariable.mbi:39:6-53:7
mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2034_model,
    const std::string &  _2035_name,
    int64_t _2036_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2037_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2038_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2039_nativeidxs)
{ return new mosek::fusion::RangedVariable(_2034_model,_2035_name,_2036_varid,_2037_shape,_2038_sparsity,_2039_nativeidxs); }
mosek::fusion::RangedVariable::RangedVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2034_model,
    const std::string &  _2035_name,
    int64_t _2036_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2037_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2038_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2039_nativeidxs) : 
   RangedVariable(new mosek::fusion::p_RangedVariable(this))
{ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_2034_model,_2035_name,_2036_varid,_2037_shape,_2038_sparsity,_2039_nativeidxs); }
void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2034_model,
    const std::string &  _2035_name,
    int64_t _2036_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2037_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2038_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2039_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2037_shape(_2037_shape ? _2037_shape->raw() : nullptr, _2037_shape ? _2037_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2038_sparsity(_2038_sparsity ? _2038_sparsity->raw() : nullptr, _2038_sparsity ? _2038_sparsity->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2039_nativeidxs(_2039_nativeidxs ? _2039_nativeidxs->raw() : nullptr, _2039_nativeidxs ? _2039_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2034_model,_2035_name,_2037_shape,_2036_varid,_2038_sparsity,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_2039_nativeidxs));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _2039_nativeidxs;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _2038_sparsity;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _2035_name;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _2037_shape;
    names_flushed = false;
  }
}
// mosek.fusion.RangedVariable.ctor

// Begin mosek.fusion.RangedVariable.elementDesc
// Method mosek.fusion.RangedVariable.elementDesc @ src/fusion/RangedVariable.mbi:119:6-124:7
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(int64_t _2040_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2041_sb) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_2040_index,_2041_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(int64_t _2040_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2041_sb) { return __mosek_2fusion_2RangedVariable__elementDesc(_2040_index,_2041_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(int64_t _2040_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2041_sb)
{
  _pubthis->elementName(_2040_index,_2041_sb);
  _2041_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _2041_sb;
}
// End mosek.fusion.RangedVariable.elementDesc

// Begin mosek.fusion.RangedVariable.flushNames
// Method mosek.fusion.RangedVariable.flushNames @ src/fusion/RangedVariable.mbi:98:6-116:7
void mosek::fusion::p_RangedVariable::flushNames()
{
}
// End mosek.fusion.RangedVariable.flushNames

// Begin mosek.fusion.RangedVariable.dual_u
// Method mosek.fusion.RangedVariable.dual_u @ src/fusion/RangedVariable.mbi:91:6-96:7
void mosek::fusion::p_RangedVariable::dual_u(int32_t _2042_offset,std::shared_ptr< monty::ndarray< double,1 > > _2043_target)
{
  _checked_ptr_1<double> _ptr__2043_target(_2043_target ? _2043_target->raw() : nullptr, _2043_target ? _2043_target->size(0) : 0);
  dual_lu(_2042_offset,_2043_target,false);
}
// End mosek.fusion.RangedVariable.dual_u

// Begin mosek.fusion.RangedVariable.dual_l
// Method mosek.fusion.RangedVariable.dual_l @ src/fusion/RangedVariable.mbi:83:6-88:7
void mosek::fusion::p_RangedVariable::dual_l(int32_t _2044_offset,std::shared_ptr< monty::ndarray< double,1 > > _2045_target)
{
  _checked_ptr_1<double> _ptr__2045_target(_2045_target ? _2045_target->raw() : nullptr, _2045_target ? _2045_target->size(0) : 0);
  dual_lu(_2044_offset,_2045_target,true);
}
// End mosek.fusion.RangedVariable.dual_l

// Begin mosek.fusion.RangedVariable.upperBoundVar
// Method mosek.fusion.RangedVariable.upperBoundVar @ src/fusion/RangedVariable.mbi:79:6-81:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__upperBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__upperBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::upperBoundVar() { return __mosek_2fusion_2RangedVariable__upperBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__upperBoundVar()
{
  std::vector<int64_t> _9814_;
  for (int32_t _2046_i = (int)0, _9815_ = (int)((nativeidxs)->size(0)); _2046_i < _9815_ ; ++_2046_i)
  {
    _9814_.push_back(((*nativeidxs)(_2046_i)));
  }
  auto _9816_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9814_.size()),_9814_.begin(),_9814_.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9816_,false);
}
// End mosek.fusion.RangedVariable.upperBoundVar

// Begin mosek.fusion.RangedVariable.lowerBoundVar
// Method mosek.fusion.RangedVariable.lowerBoundVar @ src/fusion/RangedVariable.mbi:73:6-75:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__lowerBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__lowerBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::lowerBoundVar() { return __mosek_2fusion_2RangedVariable__lowerBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__lowerBoundVar()
{
  std::vector<int64_t> _9817_;
  for (int32_t _2047_i = (int)0, _9818_ = (int)((nativeidxs)->size(0)); _2047_i < _9818_ ; ++_2047_i)
  {
    _9817_.push_back(((*nativeidxs)(_2047_i)));
  }
  auto _9819_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9817_.size()),_9817_.begin(),_9817_.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9819_,true);
}
// End mosek.fusion.RangedVariable.lowerBoundVar

// Begin mosek.fusion.RangedVariable.clone
// Method mosek.fusion.RangedVariable.clone @ src/fusion/RangedVariable.mbi:66:6-68:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2048_m)
{
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_2048_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.RangedVariable.clone

// Begin mosek.fusion.RangedVariable.globalNativeIndexes
// Method mosek.fusion.RangedVariable.globalNativeIndexes @ src/fusion/RangedVariable.mbi:25:6-28:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _2049_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2049_nativeidxs(_2049_nativeidxs ? _2049_nativeidxs->raw() : nullptr, _2049_nativeidxs ? _2049_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2050_r = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2049_nativeidxs)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__2050_r(_2050_r ? _2050_r->raw() : nullptr,_2050_r ? _2050_r->size(0) : 0);
  int32_t _9820_ = (int)0;
  int32_t _9821_ = (int)((_2049_nativeidxs)->size(0));
  for (int32_t _2051_i = _9820_; _2051_i < _9821_; ++_2051_i)
  {
    {
      _ptr__2050_r[_2051_i] = _ptr__2049_nativeidxs[_2051_i];
    }
  }
  return _2050_r;
}
// End mosek.fusion.RangedVariable.globalNativeIndexes

void mosek::fusion::p_RangedVariable::destroy()
{
  shape.reset();
  nativeidxs.reset();
  sparsity.reset();
}
void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }
// } class RangedVariable
// class LinearPSDVariable { // @ src/fusion/LinearPSDVariable.monty:8:4-73:5
mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }
mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable
  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearPSDVariable.ctor @ src/fusion/LinearPSDVariable.monty:35:6-43:7
mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2052_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2053_m)
{ return new mosek::fusion::LinearPSDVariable(_2052_v,_2053_m); }
mosek::fusion::LinearPSDVariable::LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2052_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2053_m) : 
   LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this))
{ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_2052_v,_2053_m); }
void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2052_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2053_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2052_v,_2053_m);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_2052_v)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_2052_v)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_2052_v)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_2052_v)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_2052_v)->nativeidxs;
  }
}
// mosek.fusion.LinearPSDVariable.ctor

// mosek.fusion.LinearPSDVariable.ctor @ src/fusion/LinearPSDVariable.monty:19:6-33:7
mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2054_model,
    const std::string &  _2055_name,
    int32_t _2056_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2057_shape,
    int32_t _2058_conedim,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2059_nativeidxs)
{ return new mosek::fusion::LinearPSDVariable(_2054_model,_2055_name,_2056_varid,_2057_shape,_2058_conedim,_2059_nativeidxs); }
mosek::fusion::LinearPSDVariable::LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2054_model,
    const std::string &  _2055_name,
    int32_t _2056_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2057_shape,
    int32_t _2058_conedim,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2059_nativeidxs) : 
   LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this))
{ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_2054_model,_2055_name,_2056_varid,_2057_shape,_2058_conedim,_2059_nativeidxs); }
void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2054_model,
    const std::string &  _2055_name,
    int32_t _2056_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2057_shape,
    int32_t _2058_conedim,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2059_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2057_shape(_2057_shape ? _2057_shape->raw() : nullptr, _2057_shape ? _2057_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2059_nativeidxs(_2059_nativeidxs ? _2059_nativeidxs->raw() : nullptr, _2059_nativeidxs ? _2059_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2054_model,_2055_name,_2057_shape,_2056_varid,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_2059_nativeidxs));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _2055_name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _2058_conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _2056_varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _2057_shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _2059_nativeidxs;
  }
}
// mosek.fusion.LinearPSDVariable.ctor

// Begin mosek.fusion.LinearPSDVariable.flushNames
// Method mosek.fusion.LinearPSDVariable.flushNames @ src/fusion/LinearPSDVariable.monty:71:6-38
void mosek::fusion::p_LinearPSDVariable::flushNames()
{
}
// End mosek.fusion.LinearPSDVariable.flushNames

// Begin mosek.fusion.LinearPSDVariable.toString
// Method mosek.fusion.LinearPSDVariable.toString @ src/fusion/LinearPSDVariable.monty:60:6-69:7
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_LinearPSDVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2060_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2060_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _2060_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _2060_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _9822_ = (int)1;
  int32_t _9823_ = (int)((shape)->size(0));
  for (int32_t _2061_i = _9822_; _2061_i < _9823_; ++_2061_i)
  {
    {
      _2060_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2061_i)));
    }
  }
  _2060_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2060_sb->toString();
}
// End mosek.fusion.LinearPSDVariable.toString

// Begin mosek.fusion.LinearPSDVariable.make_continuous
// Method mosek.fusion.LinearPSDVariable.make_continuous @ src/fusion/LinearPSDVariable.monty:56:6-58:7
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< int64_t,1 > > _2062_idxs) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_2062_idxs); }
void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< int64_t,1 > > _2062_idxs)
{
  _checked_ptr_1<int64_t> _ptr__2062_idxs(_2062_idxs ? _2062_idxs->raw() : nullptr, _2062_idxs ? _2062_idxs->size(0) : 0);
}
// End mosek.fusion.LinearPSDVariable.make_continuous

// Begin mosek.fusion.LinearPSDVariable.make_integer
// Method mosek.fusion.LinearPSDVariable.make_integer @ src/fusion/LinearPSDVariable.monty:51:6-54:7
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< int64_t,1 > > _2063_idxs) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_2063_idxs); }
void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< int64_t,1 > > _2063_idxs)
{
  _checked_ptr_1<int64_t> _ptr__2063_idxs(_2063_idxs ? _2063_idxs->raw() : nullptr, _2063_idxs ? _2063_idxs->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
// End mosek.fusion.LinearPSDVariable.make_integer

// Begin mosek.fusion.LinearPSDVariable.clone
// Method mosek.fusion.LinearPSDVariable.clone @ src/fusion/LinearPSDVariable.monty:45:6-48:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2064_m)
{
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_2064_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.LinearPSDVariable.clone

// Begin mosek.fusion.LinearPSDVariable.globalNativeIndexes
// Method mosek.fusion.LinearPSDVariable.globalNativeIndexes @ src/fusion/LinearPSDVariable.monty:17:6-147
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int64_t,1 > > _2065_nativeidxs)
{
  _checked_ptr_1<int64_t> _ptr__2065_nativeidxs(_2065_nativeidxs ? _2065_nativeidxs->raw() : nullptr, _2065_nativeidxs ? _2065_nativeidxs->size(0) : 0);
  std::vector<int64_t> _9824_;
  for (int32_t _2066_i = (int)0, _9825_ = (int)((_2065_nativeidxs)->size(0)); _2066_i < _9825_ ; ++_2066_i)
  {
    _9824_.push_back((-safe_add( _ptr__2065_nativeidxs[_2066_i],(int)1 )));
  }
  auto _9826_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9824_.size()),_9824_.begin(),_9824_.end()));
  return _9826_;
}
// End mosek.fusion.LinearPSDVariable.globalNativeIndexes

void mosek::fusion::p_LinearPSDVariable::destroy()
{
  shape.reset();
  nativeidxs.reset();
}
void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }
// } class LinearPSDVariable
// class PSDVariable { // @ src/fusion/SemidefiniteVariable.mbi:8:4-139:5
mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }
mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_PSDVariable::p_PSDVariable
  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.PSDVariable.ctor @ src/fusion/SemidefiniteVariable.mbi:89:6-102:7
mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable
  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2067_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2068_m)
{ return new mosek::fusion::PSDVariable(_2067_v,_2068_m); }
mosek::fusion::PSDVariable::PSDVariable
  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2067_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2068_m) : 
   PSDVariable(new mosek::fusion::p_PSDVariable(this))
{ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2067_v,_2068_m); }
void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2067_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2068_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2067_v,_2068_m);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_2067_v)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_2067_v)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_2067_v)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_2067_v)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_2067_v)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_2067_v)->conedim2;
    names_flushed = false;
    model = _2068_m;
    barvaridxs = mosek::fusion::p_PSDVariable::_get_impl(_2067_v)->barvaridxs;
  }
}
// mosek.fusion.PSDVariable.ctor

// mosek.fusion.PSDVariable.ctor @ src/fusion/SemidefiniteVariable.mbi:66:6-87:7
mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2069_model,
    const std::string &  _2070_name,
    int32_t _2071_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2072_shape,
    int32_t _2073_conedim1,
    int32_t _2074_conedim2,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2075_barvaridxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2076_nativeidxs)
{ return new mosek::fusion::PSDVariable(_2069_model,_2070_name,_2071_varid,_2072_shape,_2073_conedim1,_2074_conedim2,_2075_barvaridxs,_2076_nativeidxs); }
mosek::fusion::PSDVariable::PSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2069_model,
    const std::string &  _2070_name,
    int32_t _2071_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2072_shape,
    int32_t _2073_conedim1,
    int32_t _2074_conedim2,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2075_barvaridxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2076_nativeidxs) : 
   PSDVariable(new mosek::fusion::p_PSDVariable(this))
{ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2069_model,_2070_name,_2071_varid,_2072_shape,_2073_conedim1,_2074_conedim2,_2075_barvaridxs,_2076_nativeidxs); }
void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2069_model,
    const std::string &  _2070_name,
    int32_t _2071_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2072_shape,
    int32_t _2073_conedim1,
    int32_t _2074_conedim2,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2075_barvaridxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2076_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2072_shape(_2072_shape ? _2072_shape->raw() : nullptr, _2072_shape ? _2072_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2075_barvaridxs(_2075_barvaridxs ? _2075_barvaridxs->raw() : nullptr, _2075_barvaridxs ? _2075_barvaridxs->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2076_nativeidxs(_2076_nativeidxs ? _2076_nativeidxs->raw() : nullptr, _2076_nativeidxs ? _2076_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2069_model,_2070_name,_2072_shape,_2071_varid,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_2072_shape,_2073_conedim1,_2074_conedim2,_2076_nativeidxs));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _2071_varid;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _2076_nativeidxs;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _2070_name;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _2072_shape;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _2073_conedim1;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _2074_conedim2;
    names_flushed = false;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->model = _2069_model;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->barvaridxs = _2075_barvaridxs;
  }
}
// mosek.fusion.PSDVariable.ctor

// Begin mosek.fusion.PSDVariable.flushNames
// Method mosek.fusion.PSDVariable.flushNames @ src/fusion/SemidefiniteVariable.mbi:130:6-137:7
void mosek::fusion::p_PSDVariable::flushNames()
{
}
// End mosek.fusion.PSDVariable.flushNames

// Begin mosek.fusion.PSDVariable.toString
// Method mosek.fusion.PSDVariable.toString @ src/fusion/SemidefiniteVariable.mbi:119:6-128:7
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_PSDVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2077_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2077_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _2077_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _2077_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _9827_ = (int)1;
  int32_t _9828_ = (int)((shape)->size(0));
  for (int32_t _2078_i = _9827_; _2078_i < _9828_; ++_2078_i)
  {
    {
      _2077_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2078_i)));
    }
  }
  _2077_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2077_sb->toString();
}
// End mosek.fusion.PSDVariable.toString

// Begin mosek.fusion.PSDVariable.elementDesc
// Method mosek.fusion.PSDVariable.elementDesc @ src/fusion/SemidefiniteVariable.mbi:111:6-116:7
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(int64_t _2079_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2080_sb) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_2079_index,_2080_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(int64_t _2079_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2080_sb) { return __mosek_2fusion_2PSDVariable__elementDesc(_2079_index,_2080_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(int64_t _2079_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2080_sb)
{
  _pubthis->elementName(_2079_index,_2080_sb);
  _2080_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _2080_sb;
}
// End mosek.fusion.PSDVariable.elementDesc

// Begin mosek.fusion.PSDVariable.clone
// Method mosek.fusion.PSDVariable.clone @ src/fusion/SemidefiniteVariable.mbi:104:6-107:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2081_m)
{
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_2081_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.PSDVariable.clone

// Begin mosek.fusion.PSDVariable.fullnativeidxs
// Method mosek.fusion.PSDVariable.fullnativeidxs @ src/fusion/SemidefiniteVariable.mbi:23:6-59:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int32_t,1 > > _2082_shape,int32_t _2083_conedim1,int32_t _2084_conedim2,std::shared_ptr< monty::ndarray< int64_t,1 > > _2085_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2082_shape(_2082_shape ? _2082_shape->raw() : nullptr, _2082_shape ? _2082_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__2085_nativeidxs(_2085_nativeidxs ? _2085_nativeidxs->raw() : nullptr, _2085_nativeidxs ? _2085_nativeidxs->size(0) : 0);
  int32_t _2086_nd = (int)((_2082_shape)->size(0));
  bool _2087_tril = (_2083_conedim1 < _2084_conedim2);
  int32_t _9829_;
  bool _9830_ = _2087_tril;
  if (_9830_)
  {
    _9829_ = _2083_conedim1;
  }
  else
  {
    _9829_ = _2084_conedim2;
  }
  int32_t _2088_cd1 = _9829_;
  int32_t _9831_;
  bool _9832_ = (!_2087_tril);
  if (_9832_)
  {
    _9831_ = _2083_conedim1;
  }
  else
  {
    _9831_ = _2084_conedim2;
  }
  int32_t _2089_cd2 = _9831_;
  int32_t _2090_d0 = (int)1;
  int32_t _9833_ = (int)0;
  int32_t _9834_ = _2088_cd1;
  for (int32_t _2091_i = _9833_; _2091_i < _9834_; ++_2091_i)
  {
    {
      _2090_d0 *= _ptr__2082_shape[_2091_i];
    }
  }
  int32_t _2092_d1 = _ptr__2082_shape[_2088_cd1];
  int32_t _2093_d2 = (int)1;
  int32_t _9835_ = safe_add( _2088_cd1,(int)1 );
  int32_t _9836_ = _2089_cd2;
  for (int32_t _2094_i = _9835_; _2094_i < _9836_; ++_2094_i)
  {
    {
      _2093_d2 *= _ptr__2082_shape[_2094_i];
    }
  }
  int32_t _2095_d3 = _ptr__2082_shape[_2089_cd2];
  int32_t _2096_d4 = (int)1;
  int32_t _9837_ = safe_add( _2089_cd2,(int)1 );
  int32_t _9838_ = _2086_nd;
  for (int32_t _2097_i = _9837_; _2097_i < _9838_; ++_2097_i)
  {
    {
      _2096_d4 *= _ptr__2082_shape[_2097_i];
    }
  }
  int32_t _2098_size = safe_mul( safe_mul( safe_mul( safe_mul( _2090_d0,_2092_d1 ),_2093_d2 ),_2095_d3 ),_2096_d4 );
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2099_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2098_size)));
  _checked_ptr_1<int64_t> _ptr__2099_residxs(_2099_residxs ? _2099_residxs->raw() : nullptr,_2099_residxs ? _2099_residxs->size(0) : 0);
  int32_t _2100_s3 = _2096_d4;
  int32_t _2101_s2 = safe_mul( _2100_s3,_2095_d3 );
  int32_t _2102_s1 = safe_mul( _2101_s2,_2093_d2 );
  int32_t _2103_s0 = safe_mul( _2102_s1,_2102_s1 );
  {
    int32_t _2104_k = (int)0;
    int32_t _9839_ = (int)0;
    int32_t _9840_ = _2090_d0;
    for (int32_t _2105_i0 = _9839_; _2105_i0 < _9840_; ++_2105_i0)
    {
      {
        int32_t _9841_ = (int)0;
        int32_t _9842_ = _2095_d3;
        for (int32_t _2106_i3 = _9841_; _2106_i3 < _9842_; ++_2106_i3)
        {
          {
            int32_t _9843_ = (int)0;
            int32_t _9844_ = _2093_d2;
            for (int32_t _2107_i2 = _9843_; _2107_i2 < _9844_; ++_2107_i2)
            {
              {
                int32_t _9845_ = _2106_i3;
                int32_t _9846_ = _2092_d1;
                for (int32_t _2108_i1 = _9845_; _2108_i1 < _9846_; ++_2108_i1)
                {
                  {
                    int32_t _9847_ = (int)0;
                    int32_t _9848_ = _2096_d4;
                    for (int32_t _2109_i4 = _9847_; _2109_i4 < _9848_; ++_2109_i4)
                    {
                      {
                        _ptr__2099_residxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2105_i0,_2103_s0 ),safe_mul( _2108_i1,_2102_s1 ) ),safe_mul( _2107_i2,_2101_s2 ) ),safe_mul( _2106_i3,_2100_s3 ) ),_2109_i4 )] = (-safe_add( _ptr__2085_nativeidxs[_2104_k],(int)1 ));
                        _ptr__2099_residxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2105_i0,_2103_s0 ),safe_mul( _2106_i3,_2102_s1 ) ),safe_mul( _2107_i2,_2101_s2 ) ),safe_mul( _2108_i1,_2100_s3 ) ),_2109_i4 )] = (-safe_add( _ptr__2085_nativeidxs[_2104_k],(int)1 ));
                        ++ _2104_k;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2099_residxs;
}
// End mosek.fusion.PSDVariable.fullnativeidxs

void mosek::fusion::p_PSDVariable::destroy()
{
  model.reset();
  barvaridxs.reset();
  shape.reset();
  nativeidxs.reset();
}
void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }
// } class PSDVariable
// class LinearVariable { // @ src/fusion/LinearVariable.mbi:21:4-111:5
mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }
mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearVariable::p_LinearVariable
  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearVariable.ctor @ src/fusion/LinearVariable.mbi:53:6-62:7
mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable
  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2110_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2111_m)
{ return new mosek::fusion::LinearVariable(_2110_v,_2111_m); }
mosek::fusion::LinearVariable::LinearVariable
  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2110_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2111_m) : 
   LinearVariable(new mosek::fusion::p_LinearVariable(this))
{ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2110_v,_2111_m); }
void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2110_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2111_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2110_v,_2111_m);
    names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_2110_v)->names_flushed;
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_2110_v)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_2110_v)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_2110_v)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_2110_v)->name;
  }
}
// mosek.fusion.LinearVariable.ctor

// mosek.fusion.LinearVariable.ctor @ src/fusion/LinearVariable.mbi:36:6-51:7
mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2112_model,
    const std::string &  _2113_name,
    int64_t _2114_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2115_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2116_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2117_nativeidxs)
{ return new mosek::fusion::LinearVariable(_2112_model,_2113_name,_2114_varid,_2115_shape,_2116_sparsity,_2117_nativeidxs); }
mosek::fusion::LinearVariable::LinearVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2112_model,
    const std::string &  _2113_name,
    int64_t _2114_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2115_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2116_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2117_nativeidxs) : 
   LinearVariable(new mosek::fusion::p_LinearVariable(this))
{ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2112_model,_2113_name,_2114_varid,_2115_shape,_2116_sparsity,_2117_nativeidxs); }
void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2112_model,
    const std::string &  _2113_name,
    int64_t _2114_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2115_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2116_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2117_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2115_shape(_2115_shape ? _2115_shape->raw() : nullptr, _2115_shape ? _2115_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2116_sparsity(_2116_sparsity ? _2116_sparsity->raw() : nullptr, _2116_sparsity ? _2116_sparsity->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2117_nativeidxs(_2117_nativeidxs ? _2117_nativeidxs->raw() : nullptr, _2117_nativeidxs ? _2117_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2112_model,_2113_name,_2115_shape,_2114_varid,_2116_sparsity,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_2117_nativeidxs));
    names_flushed = false;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _2113_name;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _2117_nativeidxs;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _2116_sparsity;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _2115_shape;
  }
}
// mosek.fusion.LinearVariable.ctor

// Begin mosek.fusion.LinearVariable.toString
// Method mosek.fusion.LinearVariable.toString @ src/fusion/LinearVariable.mbi:95:6-109:7
std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_LinearVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2118_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2118_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _2118_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int32_t _9849_ = (int)1;
      int32_t _9850_ = (int)((shape)->size(0));
      for (int32_t _2119_i = _9849_; _2119_i < _9850_; ++_2119_i)
      {
        {
          _2118_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2119_i)));
        }
      }
    }
  }
  {}
  _2118_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sparsity.get()))
  {
    {
      _2118_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _2118_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2118_sb->toString();
}
// End mosek.fusion.LinearVariable.toString

// Begin mosek.fusion.LinearVariable.flushNames
// Method mosek.fusion.LinearVariable.flushNames @ src/fusion/LinearVariable.mbi:68:6-93:7
void mosek::fusion::p_LinearVariable::flushNames()
{
}
// End mosek.fusion.LinearVariable.flushNames

// Begin mosek.fusion.LinearVariable.clone
// Method mosek.fusion.LinearVariable.clone @ src/fusion/LinearVariable.mbi:64:6-66:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2120_m)
{
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_2120_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.LinearVariable.clone

// Begin mosek.fusion.LinearVariable.globalNativeIndexes
// Method mosek.fusion.LinearVariable.globalNativeIndexes @ src/fusion/LinearVariable.mbi:31:6-34:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _2121_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2121_nativeidxs(_2121_nativeidxs ? _2121_nativeidxs->raw() : nullptr, _2121_nativeidxs ? _2121_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2122_r = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2121_nativeidxs)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__2122_r(_2122_r ? _2122_r->raw() : nullptr,_2122_r ? _2122_r->size(0) : 0);
  int32_t _9851_ = (int)0;
  int32_t _9852_ = (int)((_2121_nativeidxs)->size(0));
  for (int32_t _2123_i = _9851_; _2123_i < _9852_; ++_2123_i)
  {
    {
      _ptr__2122_r[_2123_i] = _ptr__2121_nativeidxs[_2123_i];
    }
  }
  return _2122_r;
}
// End mosek.fusion.LinearVariable.globalNativeIndexes

void mosek::fusion::p_LinearVariable::destroy()
{
  shape.reset();
  sparsity.reset();
  nativeidxs.reset();
}
void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }
// } class LinearVariable
// class ConicVariable { // @ src/fusion/ConicVariable.mbi:23:4-107:5
mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }
mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ConicVariable::p_ConicVariable
  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ConicVariable.ctor @ src/fusion/ConicVariable.mbi:55:6-64:7
mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable
  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2124_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2125_m)
{ return new mosek::fusion::ConicVariable(_2124_v,_2125_m); }
mosek::fusion::ConicVariable::ConicVariable
  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2124_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2125_m) : 
   ConicVariable(new mosek::fusion::p_ConicVariable(this))
{ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2124_v,_2125_m); }
void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2124_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2125_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2124_v,_2125_m);
    names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_2124_v)->names_flushed;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_2124_v)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_2124_v)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_2124_v)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_2124_v)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_2124_v)->name;
  }
}
// mosek.fusion.ConicVariable.ctor

// mosek.fusion.ConicVariable.ctor @ src/fusion/ConicVariable.mbi:40:6-53:7
mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2126_model,
    const std::string &  _2127_name,
    int32_t _2128_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2129_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2130_nativeidxs)
{ return new mosek::fusion::ConicVariable(_2126_model,_2127_name,_2128_varid,_2129_shape,_2130_nativeidxs); }
mosek::fusion::ConicVariable::ConicVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2126_model,
    const std::string &  _2127_name,
    int32_t _2128_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2129_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2130_nativeidxs) : 
   ConicVariable(new mosek::fusion::p_ConicVariable(this))
{ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2126_model,_2127_name,_2128_varid,_2129_shape,_2130_nativeidxs); }
void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2126_model,
    const std::string &  _2127_name,
    int32_t _2128_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2129_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2130_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2129_shape(_2129_shape ? _2129_shape->raw() : nullptr, _2129_shape ? _2129_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2130_nativeidxs(_2130_nativeidxs ? _2130_nativeidxs->raw() : nullptr, _2130_nativeidxs ? _2130_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2126_model,_2127_name,_2129_shape,_2128_varid,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_2130_nativeidxs));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _2127_name;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _2128_varid;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _2129_shape;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _2130_nativeidxs;
  }
}
// mosek.fusion.ConicVariable.ctor

// Begin mosek.fusion.ConicVariable.toString
// Method mosek.fusion.ConicVariable.toString @ src/fusion/ConicVariable.mbi:96:6-106:7
std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ConicVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2131_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2131_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _2131_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _2131_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _2131_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _9853_ = (int)1;
  int32_t _9854_ = (int)((shape)->size(0));
  for (int32_t _2132_i = _9853_; _2132_i < _9854_; ++_2132_i)
  {
    {
      _2131_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2132_i)));
    }
  }
  _2131_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _2131_sb->toString();
}
// End mosek.fusion.ConicVariable.toString

// Begin mosek.fusion.ConicVariable.flushNames
// Method mosek.fusion.ConicVariable.flushNames @ src/fusion/ConicVariable.mbi:71:6-95:7
void mosek::fusion::p_ConicVariable::flushNames()
{
}
// End mosek.fusion.ConicVariable.flushNames

// Begin mosek.fusion.ConicVariable.clone
// Method mosek.fusion.ConicVariable.clone @ src/fusion/ConicVariable.mbi:66:6-69:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2133_m)
{
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_2133_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.ConicVariable.clone

// Begin mosek.fusion.ConicVariable.globalNativeIndexes
// Method mosek.fusion.ConicVariable.globalNativeIndexes @ src/fusion/ConicVariable.mbi:35:6-38:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _2134_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2134_nativeidxs(_2134_nativeidxs ? _2134_nativeidxs->raw() : nullptr, _2134_nativeidxs ? _2134_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2135_r = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2134_nativeidxs)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__2135_r(_2135_r ? _2135_r->raw() : nullptr,_2135_r ? _2135_r->size(0) : 0);
  int32_t _9855_ = (int)0;
  int32_t _9856_ = (int)((_2134_nativeidxs)->size(0));
  for (int32_t _2136_i = _9855_; _2136_i < _9856_; ++_2136_i)
  {
    {
      _ptr__2135_r[_2136_i] = _ptr__2134_nativeidxs[_2136_i];
    }
  }
  return _2135_r;
}
// End mosek.fusion.ConicVariable.globalNativeIndexes

void mosek::fusion::p_ConicVariable::destroy()
{
  nativeidxs.reset();
  shape.reset();
}
void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }
// } class ConicVariable
// class ModelVariable { // @ src/fusion/ModelVariable.mbi:14:4-92:5
mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }
mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ModelVariable::p_ModelVariable
  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ModelVariable.ctor @ src/fusion/ModelVariable.mbi:62:6-72:7
void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _2137_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2138_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseVariable::_initialize(_2137_v,_2138_m);
    name = mosek::fusion::p_ModelVariable::_get_impl(_2137_v)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_2137_v)->varid;
    modelvar_nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_2137_v)->modelvar_nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_2137_v)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_2137_v)->sparsity;
  }
}
// mosek.fusion.ModelVariable.ctor

// mosek.fusion.ModelVariable.ctor @ src/fusion/ModelVariable.mbi:44:6-58:7
void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2139_model,
    const std::string &  _2140_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2141_shape,
    int64_t _2142_varid,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2143_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2144_modelvar_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2141_shape(_2141_shape ? _2141_shape->raw() : nullptr, _2141_shape ? _2141_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2143_sparsity(_2143_sparsity ? _2143_sparsity->raw() : nullptr, _2143_sparsity ? _2143_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2144_modelvar_nativeidxs(_2144_modelvar_nativeidxs ? _2144_modelvar_nativeidxs->raw() : nullptr, _2144_modelvar_nativeidxs ? _2144_modelvar_nativeidxs->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_2139_model,_2141_shape,_2143_sparsity,_2144_modelvar_nativeidxs);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _2140_name;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _2142_varid;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _2141_shape;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _2143_sparsity;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->modelvar_nativeidxs = _2144_modelvar_nativeidxs;
  }
}
// mosek.fusion.ModelVariable.ctor

// Begin mosek.fusion.ModelVariable.flushNames
// End mosek.fusion.ModelVariable.flushNames

// Begin mosek.fusion.ModelVariable.elementName
// Method mosek.fusion.ModelVariable.elementName @ src/fusion/ModelVariable.mbi:84:6-88:7
void mosek::fusion::ModelVariable :: elementName(int64_t _2145_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2146_sb) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_2145_index,_2146_sb); }
void mosek::fusion::p_ModelVariable::elementName(int64_t _2145_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2146_sb)
{
  std::string _9857_;
  bool _9858_ = ((int)((name).size()) == (int)0);
  if (_9858_)
  {
    _9857_ = std::string ("_");
  }
  else
  {
    _9857_ = name;
  }
  _2146_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_9857_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_2145_index))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
// End mosek.fusion.ModelVariable.elementName

// Begin mosek.fusion.ModelVariable.remove
// Method mosek.fusion.ModelVariable.remove @ src/fusion/ModelVariable.mbi:78:6-80:7
void mosek::fusion::ModelVariable :: remove() { mosek::fusion::p_ModelVariable::_get_impl(this)->remove(); }
void mosek::fusion::p_ModelVariable::remove()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->removeVariableBlock(varid);
}
// End mosek.fusion.ModelVariable.remove

// Begin mosek.fusion.ModelVariable.clone
// End mosek.fusion.ModelVariable.clone

void mosek::fusion::p_ModelVariable::destroy()
{
  sparsity.reset();
  shape.reset();
  modelvar_nativeidxs.reset();
}
void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }
// } class ModelVariable
// class NilVariable { // @ src/fusion/BaseVariable.monty:1000:4-1088:5
mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }
mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_NilVariable::p_NilVariable
  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.NilVariable.ctor @ src/fusion/BaseVariable.monty:1008:6-1012:7
mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _2148_shape)
{ return new mosek::fusion::NilVariable(_2148_shape); }
mosek::fusion::NilVariable::NilVariable
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _2148_shape) : 
   NilVariable(new mosek::fusion::p_NilVariable(this))
{ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_2148_shape); }
void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _2148_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2148_shape(_2148_shape ? _2148_shape->raw() : nullptr, _2148_shape ? _2148_shape->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_2148_shape),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))));
    std::vector<int32_t> _9859_;
    for (int32_t _2149_i = (int)0, _9860_ = (int)((_2148_shape)->size(0)); _2149_i < _9860_ ; ++_2149_i)
    {
      _9859_.push_back(_ptr__2148_shape[_2149_i]);
    }
    auto _9861_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9859_.size()),_9859_.begin(),_9859_.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _9861_;
  }
}
// mosek.fusion.NilVariable.ctor

// mosek.fusion.NilVariable.ctor @ src/fusion/BaseVariable.monty:1006:6-45
mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable
  ()
{ return new mosek::fusion::NilVariable(); }
mosek::fusion::NilVariable::NilVariable
  () : 
   NilVariable(new mosek::fusion::p_NilVariable(this))
{ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }
void mosek::fusion::p_NilVariable::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
  }
}
// mosek.fusion.NilVariable.ctor

// Begin mosek.fusion.NilVariable.flushNames
// Method mosek.fusion.NilVariable.flushNames @ src/fusion/BaseVariable.monty:1085:6-44
void mosek::fusion::p_NilVariable::flushNames()
{
}
// End mosek.fusion.NilVariable.flushNames

// Begin mosek.fusion.NilVariable.elementDesc
// Method mosek.fusion.NilVariable.elementDesc @ src/fusion/BaseVariable.monty:1084:6-102
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(int64_t _2150_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2151_sb) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_2150_index,_2151_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(int64_t _2150_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2151_sb) { return __mosek_2fusion_2NilVariable__elementDesc(_2150_index,_2151_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(int64_t _2150_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2151_sb)
{
  return _2151_sb;
}
// End mosek.fusion.NilVariable.elementDesc

// Begin mosek.fusion.NilVariable.elementName
// Method mosek.fusion.NilVariable.elementName @ src/fusion/BaseVariable.monty:1083:6-76
void mosek::fusion::NilVariable :: elementName(int64_t _2152_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2153_sb) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_2152_index,_2153_sb); }
void mosek::fusion::p_NilVariable::elementName(int64_t _2152_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2153_sb)
{
}
// End mosek.fusion.NilVariable.elementName

// Begin mosek.fusion.NilVariable.numInst
// Method mosek.fusion.NilVariable.numInst @ src/fusion/BaseVariable.monty:1079:6-1081:7
int32_t mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }
int32_t mosek::fusion::p_NilVariable::numInst()
{
  return (int)0;
}
// End mosek.fusion.NilVariable.numInst

// Begin mosek.fusion.NilVariable.inst
// Method mosek.fusion.NilVariable.inst @ src/fusion/BaseVariable.monty:1071:6-1077:7
int32_t mosek::fusion::NilVariable :: inst(int32_t _2154_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2155_sparsity,std::shared_ptr< monty::ndarray< int64_t,1 > > _2156_basevar_nativeidxs) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2154_offset,_2155_sparsity,_2156_basevar_nativeidxs); }
int32_t mosek::fusion::p_NilVariable::inst(int32_t _2154_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2155_sparsity,std::shared_ptr< monty::ndarray< int64_t,1 > > _2156_basevar_nativeidxs)
{
  _checked_ptr_1<int64_t> _ptr__2155_sparsity(_2155_sparsity ? _2155_sparsity->raw() : nullptr, _2155_sparsity ? _2155_sparsity->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__2156_basevar_nativeidxs(_2156_basevar_nativeidxs ? _2156_basevar_nativeidxs->raw() : nullptr, _2156_basevar_nativeidxs ? _2156_basevar_nativeidxs->size(0) : 0);
  return (int)0;
}
// End mosek.fusion.NilVariable.inst

// Begin mosek.fusion.NilVariable.inst
// Method mosek.fusion.NilVariable.inst @ src/fusion/BaseVariable.monty:1066:6-1069:8
void mosek::fusion::NilVariable :: inst(int32_t _2157_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2158_nindex) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2157_offset,_2158_nindex); }
void mosek::fusion::p_NilVariable::inst(int32_t _2157_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2158_nindex)
{
  _checked_ptr_1<int64_t> _ptr__2158_nindex(_2158_nindex ? _2158_nindex->raw() : nullptr, _2158_nindex ? _2158_nindex->size(0) : 0);
}
// End mosek.fusion.NilVariable.inst

// Begin mosek.fusion.NilVariable.set_values
// Method mosek.fusion.NilVariable.set_values @ src/fusion/BaseVariable.monty:1061:6-1064:8
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _2159_target,bool _2160_primal) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_2159_target,_2160_primal); }
void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _2159_target,bool _2160_primal)
{
  _checked_ptr_1<double> _ptr__2159_target(_2159_target ? _2159_target->raw() : nullptr, _2159_target ? _2159_target->size(0) : 0);
}
// End mosek.fusion.NilVariable.set_values

// Begin mosek.fusion.NilVariable.values
// Method mosek.fusion.NilVariable.values @ src/fusion/BaseVariable.monty:1055:6-1059:8
void mosek::fusion::NilVariable :: values(int32_t _2161_offset,std::shared_ptr< monty::ndarray< double,1 > > _2162_target,bool _2163_primal) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_2161_offset,_2162_target,_2163_primal); }
void mosek::fusion::p_NilVariable::values(int32_t _2161_offset,std::shared_ptr< monty::ndarray< double,1 > > _2162_target,bool _2163_primal)
{
  _checked_ptr_1<double> _ptr__2162_target(_2162_target ? _2162_target->raw() : nullptr, _2162_target ? _2162_target->size(0) : 0);
}
// End mosek.fusion.NilVariable.values

// Begin mosek.fusion.NilVariable.make_continuous
// Method mosek.fusion.NilVariable.make_continuous @ src/fusion/BaseVariable.monty:1053:6-40
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }
void mosek::fusion::p_NilVariable::make_continuous()
{
}
// End mosek.fusion.NilVariable.make_continuous

// Begin mosek.fusion.NilVariable.make_integer
// Method mosek.fusion.NilVariable.make_integer @ src/fusion/BaseVariable.monty:1052:6-37
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }
void mosek::fusion::p_NilVariable::make_integer()
{
}
// End mosek.fusion.NilVariable.make_integer

// Begin mosek.fusion.NilVariable.toString
// Method mosek.fusion.NilVariable.toString @ src/fusion/BaseVariable.monty:1050:6-63
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_NilVariable::toString()
{
  return std::string ("NilVariable");
}
// End mosek.fusion.NilVariable.toString

// Begin mosek.fusion.NilVariable.index
// Method mosek.fusion.NilVariable.index @ src/fusion/BaseVariable.monty:1044:6-1048:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2164_first) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_2164_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2164_first) { return __mosek_2fusion_2NilVariable__index(_2164_first); }
/* override: mosek.fusion.BaseVariable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2164_first) { return __mosek_2fusion_2NilVariable__index(_2164_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2164_first)
{
  _checked_ptr_1<int32_t> _ptr__2164_first(_2164_first ? _2164_first->raw() : nullptr, _2164_first ? _2164_first->size(0) : 0);
  std::vector<int32_t> _9862_;
  for (int32_t _2165_i = (int)0, _9863_ = (int)((shape)->size(0)); _2165_i < _9863_ ; ++_2165_i)
  {
    _9862_.push_back((int)1);
  }
  auto _9864_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9862_.size()),_9862_.begin(),_9862_.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9864_)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.NilVariable.index

// Begin mosek.fusion.NilVariable.index
// Method mosek.fusion.NilVariable.index @ src/fusion/BaseVariable.monty:1038:6-1042:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int32_t _2166_first) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_2166_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int32_t _2166_first) { return __mosek_2fusion_2NilVariable__index(_2166_first); }
/* override: mosek.fusion.BaseVariable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2166_first) { return __mosek_2fusion_2NilVariable__index(_2166_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int32_t _2166_first)
{
  std::vector<int32_t> _9865_;
  for (int32_t _2167_i = (int)0, _9866_ = (int)((shape)->size(0)); _2167_i < _9866_ ; ++_2167_i)
  {
    _9865_.push_back((int)1);
  }
  auto _9867_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9865_.size()),_9865_.begin(),_9865_.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9867_)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.NilVariable.index

// Begin mosek.fusion.NilVariable.slice
// Method mosek.fusion.NilVariable.slice @ src/fusion/BaseVariable.monty:1026:6-1036:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2168_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2169_last) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_2168_first,_2169_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2168_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2169_last) { return __mosek_2fusion_2NilVariable__slice(_2168_first,_2169_last); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2168_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2169_last) { return __mosek_2fusion_2NilVariable__slice(_2168_first,_2169_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2168_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2169_last)
{
  _checked_ptr_1<int32_t> _ptr__2168_first(_2168_first ? _2168_first->raw() : nullptr, _2168_first ? _2168_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2169_last(_2169_last ? _2169_last->raw() : nullptr, _2169_last ? _2169_last->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_2168_first)->size(0))) || ((int)((shape)->size(0)) != (int)((_2169_last)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int32_t _9868_ = (int)0;
  int32_t _9869_ = (int)((_2168_first)->size(0));
  for (int32_t _2170_i = _9868_; _2170_i < _9869_; ++_2170_i)
  {
    {
      if (((_ptr__2169_last[_2170_i] > _ptr__2168_first[_2170_i]) || ((_ptr__2168_first[_2170_i] < (int)0) || (_ptr__2169_last[_2170_i] >= ((*shape)(_2170_i))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int32_t> _9870_;
  for (int32_t _2171_i = (int)0, _9871_ = (int)((shape)->size(0)); _2171_i < _9871_ ; ++_2171_i)
  {
    _9870_.push_back((_ptr__2169_last[_2171_i] - _ptr__2168_first[_2171_i]));
  }
  auto _9872_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9870_.size()),_9870_.begin(),_9870_.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9872_)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.NilVariable.slice

// Begin mosek.fusion.NilVariable.slice
// Method mosek.fusion.NilVariable.slice @ src/fusion/BaseVariable.monty:1014:6-1024:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int32_t _2172_first,int32_t _2173_last) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_2172_first,_2173_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int32_t _2172_first,int32_t _2173_last) { return __mosek_2fusion_2NilVariable__slice(_2172_first,_2173_last); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int32_t _2172_first,int32_t _2173_last) { return __mosek_2fusion_2NilVariable__slice(_2172_first,_2173_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int32_t _2172_first,int32_t _2173_last)
{
  if (((_2173_last > _2172_first) || ((_2172_first < (int)0) || (_2173_last > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((_2173_last - _2172_first))}))).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.NilVariable.slice

void mosek::fusion::p_NilVariable::destroy()
{
  shape.reset();
}
void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }
// } class NilVariable
// class BaseVariable { // @ src/fusion/BaseVariable.monty:53:4-969:5
mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }
mosek::fusion::p_BaseVariable::p_BaseVariable
  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.BaseVariable.ctor @ src/fusion/BaseVariable.monty:99:6-108:7
void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _2174_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2175_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    model = _2175_m;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_2174_v)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_2174_v)->sparsity;
    basevar_nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_2174_v)->basevar_nativeidxs;
  }
}
// mosek.fusion.BaseVariable.ctor

// mosek.fusion.BaseVariable.ctor @ src/fusion/BaseVariable.monty:83:6-94:7
void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2176_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2177_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2178_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2179_basevar_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2177_shape(_2177_shape ? _2177_shape->raw() : nullptr, _2177_shape ? _2177_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2178_sparsity(_2178_sparsity ? _2178_sparsity->raw() : nullptr, _2178_sparsity ? _2178_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2179_basevar_nativeidxs(_2179_basevar_nativeidxs ? _2179_basevar_nativeidxs->raw() : nullptr, _2179_basevar_nativeidxs ? _2179_basevar_nativeidxs->size(0) : 0);
    model = _2176_m;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _2177_shape;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _2178_sparsity;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->basevar_nativeidxs = _2179_basevar_nativeidxs;
  }
}
// mosek.fusion.BaseVariable.ctor

// Begin mosek.fusion.BaseVariable.toString
// Method mosek.fusion.BaseVariable.toString @ src/fusion/BaseVariable.monty:957:6-968:7
std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_BaseVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2180_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2180_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _2180_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int32_t _9873_ = (int)1;
      int32_t _9874_ = (int)((shape)->size(0));
      for (int32_t _2181_i = _9873_; _2181_i < _9874_; ++_2181_i)
      {
        {
          _2180_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2181_i)));
        }
      }
    }
  }
  {}
  _2180_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _2180_sb->toString();
}
// End mosek.fusion.BaseVariable.toString

// Begin mosek.fusion.BaseVariable.eval
// Method mosek.fusion.BaseVariable.eval @ src/fusion/BaseVariable.monty:926:6-954:7
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2182_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _2183_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _2184_xs) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_2182_rs,_2183_ws,_2184_xs); }
void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2182_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _2183_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _2184_xs)
{
  int32_t _2185_nnz = (int)((basevar_nativeidxs)->size(0));
  int32_t _2186_nelem = _2185_nnz;
  int32_t _2187_nd = (int)((shape)->size(0));
  bool _2188_hassp = (NULL != sparsity.get());
  _2182_rs->alloc_expr(_2187_nd,_2186_nelem,_2185_nnz,_2188_hassp);
  int32_t _2189_ptr = mosek::fusion::p_WorkStack::_get_impl(_2182_rs)->ptr_base;
  int32_t _2190_nidxs = mosek::fusion::p_WorkStack::_get_impl(_2182_rs)->nidxs_base;
  int32_t _2191_sp = mosek::fusion::p_WorkStack::_get_impl(_2182_rs)->sp_base;
  int32_t _2192_cof = mosek::fusion::p_WorkStack::_get_impl(_2182_rs)->cof_base;
  int32_t _2193_shape_base = mosek::fusion::p_WorkStack::_get_impl(_2182_rs)->shape_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2194_ri32 = mosek::fusion::p_WorkStack::_get_impl(_2182_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__2194_ri32(_2194_ri32 ? _2194_ri32->raw() : nullptr,_2194_ri32 ? _2194_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2195_ri64 = mosek::fusion::p_WorkStack::_get_impl(_2182_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__2195_ri64(_2195_ri64 ? _2195_ri64->raw() : nullptr,_2195_ri64 ? _2195_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2196_rf64 = mosek::fusion::p_WorkStack::_get_impl(_2182_rs)->f64;
  _checked_ptr_1<double> _ptr__2196_rf64(_2196_rf64 ? _2196_rf64->raw() : nullptr,_2196_rf64 ? _2196_rf64->size(0) : 0);
  int32_t _9875_ = (int)0;
  int32_t _9876_ = _2187_nd;
  for (int32_t _2197_i = _9875_; _2197_i < _9876_; ++_2197_i)
  {
    {
      _ptr__2194_ri32[safe_add( _2193_shape_base,_2197_i )] = ((*shape)(_2197_i));
    }
  }
  {
    int32_t _9877_ = (int)0;
    int32_t _9878_ = safe_add( _2185_nnz,(int)1 );
    for (int32_t _2198_i = _9877_; _2198_i < _9878_; ++_2198_i)
    {
      {
        _ptr__2194_ri32[safe_add( _2189_ptr,_2198_i )] = _2198_i;
      }
    }
    int32_t _9879_ = (int)0;
    int32_t _9880_ = _2185_nnz;
    for (int32_t _2199_i = _9879_; _2199_i < _9880_; ++_2199_i)
    {
      {
        _ptr__2195_ri64[safe_add( _2190_nidxs,_2199_i )] = ((*basevar_nativeidxs)(_2199_i));
      }
    }
    if (_2188_hassp)
    {
      {
        int32_t _9881_ = (int)0;
        int32_t _9882_ = _2185_nnz;
        for (int32_t _2200_i = _9881_; _2200_i < _9882_; ++_2200_i)
        {
          {
            _ptr__2195_ri64[safe_add( _2191_sp,_2200_i )] = ((*sparsity)(_2200_i));
          }
        }
      }
    }
    {}
    int32_t _9883_ = (int)0;
    int32_t _9884_ = _2185_nnz;
    for (int32_t _2201_i = _9883_; _2201_i < _9884_; ++_2201_i)
    {
      {
        _ptr__2196_rf64[safe_add( _2192_cof,_2201_i )] = 1.0;
      }
    }
  }
}
// End mosek.fusion.BaseVariable.eval

// Begin mosek.fusion.BaseVariable.remove
// Method mosek.fusion.BaseVariable.remove @ src/fusion/BaseVariable.monty:920:6-922:7
void mosek::fusion::BaseVariable :: remove() { mosek::fusion::p_BaseVariable::_get_impl(this)->remove(); }
void mosek::fusion::p_BaseVariable::remove()
{
  throw ::mosek::fusion::DeletionError(std::string ("Only original variables can be removed"));
}
// End mosek.fusion.BaseVariable.remove

// Begin mosek.fusion.BaseVariable.fromTril
// Method mosek.fusion.BaseVariable.fromTril @ src/fusion/BaseVariable.monty:844:6-918:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int32_t _2202_dim0,int32_t _2203_d) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_2202_dim0,_2203_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int32_t _2202_dim0,int32_t _2203_d) { return __mosek_2fusion_2BaseVariable__fromTril(_2202_dim0,_2203_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int32_t _2202_dim0,int32_t _2203_d)
{
  if (((_2202_dim0 < (int)0) || (_2202_dim0 >= (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension"));
    }
  }
  else if((((*shape)(_2202_dim0)) != (safe_mul( _2203_d,safe_add( _2203_d,(int)1 ) ) / (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  {}
  int32_t _2204_d0 = (int)1;
  int32_t _9885_ = (int)0;
  int32_t _9886_ = _2202_dim0;
  for (int32_t _2205_i = _9885_; _2205_i < _9886_; ++_2205_i)
  {
    {
      _2204_d0 *= ((*shape)(_2205_i));
    }
  }
  int32_t _2206_d1 = ((*shape)(_2202_dim0));
  int32_t _2207_d2 = (int)1;
  int32_t _9887_ = safe_add( _2202_dim0,(int)1 );
  int32_t _9888_ = (int)((shape)->size(0));
  for (int32_t _2208_i = _9887_; _2208_i < _9888_; ++_2208_i)
  {
    {
      _2207_d2 *= ((*shape)(_2208_i));
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2209_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( (int)((shape)->size(0)),(int)1 ))));
  _checked_ptr_1<int32_t> _ptr__2209_rshape(_2209_rshape ? _2209_rshape->raw() : nullptr,_2209_rshape ? _2209_rshape->size(0) : 0);
  int32_t _9889_ = (int)0;
  int32_t _9890_ = _2202_dim0;
  for (int32_t _2210_i = _9889_; _2210_i < _9890_; ++_2210_i)
  {
    {
      _ptr__2209_rshape[_2210_i] = ((*shape)(_2210_i));
    }
  }
  _ptr__2209_rshape[_2202_dim0] = _2203_d;
  _ptr__2209_rshape[safe_add( _2202_dim0,(int)1 )] = _2203_d;
  int32_t _9891_ = safe_add( _2202_dim0,(int)1 );
  int32_t _9892_ = (int)((shape)->size(0));
  for (int32_t _2211_i = _9891_; _2211_i < _9892_; ++_2211_i)
  {
    {
      _ptr__2209_rshape[safe_add( _2211_i,(int)1 )] = ((*shape)(_2211_i));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2212_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( safe_mul( safe_mul( _2204_d0,_2203_d ),_2203_d ),_2207_d2 ))));
      _checked_ptr_1<int64_t> _ptr__2212_nidxs(_2212_nidxs ? _2212_nidxs->raw() : nullptr,_2212_nidxs ? _2212_nidxs->size(0) : 0);
      int32_t _2213_ofs = (int)0;
      int32_t _9893_ = (int)0;
      int32_t _9894_ = _2204_d0;
      for (int32_t _2214_i0 = _9893_; _2214_i0 < _9894_; ++_2214_i0)
      {
        {
          int32_t _9895_ = (int)0;
          int32_t _9896_ = _2203_d;
          for (int32_t _2215_i10 = _9895_; _2215_i10 < _9896_; ++_2215_i10)
          {
            {
              int32_t _9897_ = (int)0;
              int32_t _9898_ = _2203_d;
              for (int32_t _2216_i11 = _9897_; _2216_i11 < _9898_; ++_2216_i11)
              {
                {
                  int32_t _9899_ = (int)0;
                  int32_t _9900_ = _2207_d2;
                  for (int32_t _2217_i2 = _9899_; _2217_i2 < _9900_; ++_2217_i2)
                  {
                    {
                      if ((_2215_i10 >= _2216_i11))
                      {
                        {
                          _ptr__2212_nidxs[_2213_ofs] = ((*basevar_nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _2214_i0,_2206_d1 ),_2207_d2 ),safe_mul( safe_add( (safe_mul( _2215_i10,safe_add( _2215_i10,(int)1 ) ) / (int)2),_2216_i11 ),_2207_d2 ) ),_2217_i2 )));
                        }
                      }
                      else
                      {
                        {
                          _ptr__2212_nidxs[_2213_ofs] = ((*basevar_nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _2214_i0,_2206_d1 ),_2207_d2 ),safe_mul( safe_add( (safe_mul( _2216_i11,safe_add( _2216_i11,(int)1 ) ) / (int)2),_2215_i10 ),_2207_d2 ) ),_2217_i2 )));
                        }
                      }
                      ++ _2213_ofs;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2209_rshape,nullptr,_2212_nidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2218_nelm = (int)0;
      int32_t _9901_ = (int)0;
      int32_t _9902_ = (int)((sparsity)->size(0));
      for (int32_t _2219_i = _9901_; _2219_i < _9902_; ++_2219_i)
      {
        {
          int64_t _2220_i1 = ((((*sparsity)(_2219_i)) / _2207_d2) % _2206_d1);
          int32_t _2221_ii = (int32_t)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_2220_i1 ) ),safe_add( (int)1,safe_mul( (int)2,_2220_i1 ) ) )))) / (int)4);
          int64_t _2222_jj = (((*sparsity)(_2219_i)) - (safe_mul( _2221_ii,safe_add( _2221_ii,(int)1 ) ) / (int)2));
          if ((_2221_ii == _2222_jj))
          {
            {
              _2218_nelm += (int)1;
            }
          }
          else
          {
            {
              _2218_nelm += (int)2;
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2223_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2218_nelm)));
      _checked_ptr_1<int64_t> _ptr__2223_nidxs(_2223_nidxs ? _2223_nidxs->raw() : nullptr,_2223_nidxs ? _2223_nidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2224_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2218_nelm)));
      _checked_ptr_1<int64_t> _ptr__2224_sp(_2224_sp ? _2224_sp->raw() : nullptr,_2224_sp ? _2224_sp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2225_perm = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2218_nelm)));
      _checked_ptr_1<int64_t> _ptr__2225_perm(_2225_perm ? _2225_perm->raw() : nullptr,_2225_perm ? _2225_perm->size(0) : 0);
      int32_t _9903_ = (int)0;
      int32_t _9904_ = _2218_nelm;
      for (int32_t _2226_i = _9903_; _2226_i < _9904_; ++_2226_i)
      {
        {
          _ptr__2225_perm[_2226_i] = _2226_i;
        }
      }
      int32_t _2227_elmi = (int)0;
      int32_t _9905_ = (int)0;
      int32_t _9906_ = (int)((sparsity)->size(0));
      for (int32_t _2228_i = _9905_; _2228_i < _9906_; ++_2228_i)
      {
        {
          int64_t _2229_i0 = (((*sparsity)(_2228_i)) / safe_mul( _2206_d1,_2207_d2 ));
          int64_t _2230_i1 = ((((*sparsity)(_2228_i)) / _2207_d2) % _2206_d1);
          int64_t _2231_i2 = (((*sparsity)(_2228_i)) % _2207_d2);
          int32_t _2232_ii1 = (int32_t)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_2230_i1 ) ),safe_add( (int)1,safe_mul( (int)2,_2230_i1 ) ) )))) / (int)4);
          int64_t _2233_jj1 = (((*sparsity)(_2228_i)) - (safe_mul( _2232_ii1,safe_add( _2232_ii1,(int)1 ) ) / (int)2));
          if ((_2232_ii1 == _2233_jj1))
          {
            {
              _ptr__2223_nidxs[_2227_elmi] = ((*basevar_nativeidxs)(_2228_i));
              _ptr__2224_sp[_2227_elmi] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _2229_i0,_2203_d ),_2203_d ),_2207_d2 ),safe_mul( safe_add( safe_mul( _2232_ii1,_2203_d ),_2233_jj1 ),_2207_d2 ) ),_2231_i2 );
              _2227_elmi += (int)1;
            }
          }
          else
          {
            {
              _ptr__2223_nidxs[_2227_elmi] = ((*basevar_nativeidxs)(_2228_i));
              _ptr__2223_nidxs[safe_add( _2227_elmi,(int)1 )] = ((*basevar_nativeidxs)(_2228_i));
              _ptr__2224_sp[_2227_elmi] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _2229_i0,_2203_d ),_2203_d ),_2207_d2 ),safe_mul( safe_add( safe_mul( _2232_ii1,_2203_d ),_2233_jj1 ),_2207_d2 ) ),_2231_i2 );
              _ptr__2224_sp[safe_add( _2227_elmi,(int)1 )] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _2229_i0,_2203_d ),_2203_d ),_2207_d2 ),safe_mul( safe_add( safe_mul( _2233_jj1,_2203_d ),_2232_ii1 ),_2207_d2 ) ),_2231_i2 );
              _2227_elmi += (int)2;
            }
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_2225_perm,_2223_nidxs,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2218_nelm));
      std::vector<int64_t> _9907_;
      for (int32_t _2234_i = (int)0, _9908_ = _2218_nelm; _2234_i < _9908_ ; ++_2234_i)
      {
        _9907_.push_back(_ptr__2224_sp[_ptr__2225_perm[_2234_i]]);
      }
      auto _9909_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9907_.size()),_9907_.begin(),_9907_.end()));
      std::vector<int64_t> _9910_;
      for (int32_t _2235_i = (int)0, _9911_ = _2218_nelm; _2235_i < _9911_ ; ++_2235_i)
      {
        _9910_.push_back(_ptr__2223_nidxs[_ptr__2225_perm[_2235_i]]);
      }
      auto _9912_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9910_.size()),_9910_.begin(),_9910_.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2209_rshape,_9909_,_9912_)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.fromTril

// Begin mosek.fusion.BaseVariable.fromTril
// Method mosek.fusion.BaseVariable.fromTril @ src/fusion/BaseVariable.monty:827:6-842:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int32_t _2236_d) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_2236_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int32_t _2236_d) { return __mosek_2fusion_2BaseVariable__fromTril(_2236_d); }
/* override: mosek.fusion.Variable.fromTril*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__fromTril(int32_t _2236_d) { return __mosek_2fusion_2BaseVariable__fromTril(_2236_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int32_t _2236_d)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__fromTril((int)0,_2236_d);
}
// End mosek.fusion.BaseVariable.fromTril

// Begin mosek.fusion.BaseVariable.tril
// Method mosek.fusion.BaseVariable.tril @ src/fusion/BaseVariable.monty:738:6-825:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril(int32_t _2237_dim1,int32_t _2238_dim2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(_2237_dim1,_2238_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril(int32_t _2237_dim1,int32_t _2238_dim2) { return __mosek_2fusion_2BaseVariable__tril(_2237_dim1,_2238_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(int32_t _2237_dim1,int32_t _2238_dim2)
{
  if (((_2237_dim1 < (int)0) || ((_2237_dim1 >= _2238_dim2) || (_2238_dim2 >= (int)((shape)->size(0))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension specification"));
    }
  }
  else
  {
    {
      if ((((*shape)(_2237_dim1)) != ((*shape)(_2238_dim2))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Operation only valid for square variables"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2239_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((shape)->size(0)) - (int)1))));
  _checked_ptr_1<int32_t> _ptr__2239_rshape(_2239_rshape ? _2239_rshape->raw() : nullptr,_2239_rshape ? _2239_rshape->size(0) : 0);
  int32_t _9913_ = (int)0;
  int32_t _9914_ = _2237_dim1;
  for (int32_t _2240_i = _9913_; _2240_i < _9914_; ++_2240_i)
  {
    {
      _ptr__2239_rshape[_2240_i] = ((*shape)(_2240_i));
    }
  }
  _ptr__2239_rshape[_2237_dim1] = (safe_mul( ((*shape)(_2237_dim1)),safe_add( ((*shape)(_2237_dim1)),(int)1 ) ) / (int)2);
  int32_t _9915_ = safe_add( _2237_dim1,(int)1 );
  int32_t _9916_ = _2238_dim2;
  for (int32_t _2241_i = _9915_; _2241_i < _9916_; ++_2241_i)
  {
    {
      _ptr__2239_rshape[_2241_i] = ((*shape)(_2241_i));
    }
  }
  int32_t _9917_ = safe_add( _2238_dim2,(int)1 );
  int32_t _9918_ = (int)((shape)->size(0));
  for (int32_t _2242_i = _9917_; _2242_i < _9918_; ++_2242_i)
  {
    {
      _ptr__2239_rshape[(_2242_i - (int)1)] = ((*shape)(_2242_i));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      int32_t _2243_d0 = (int)1;
      int32_t _9919_ = (int)0;
      int32_t _9920_ = _2237_dim1;
      for (int32_t _2244_i = _9919_; _2244_i < _9920_; ++_2244_i)
      {
        {
          _2243_d0 *= ((*shape)(_2244_i));
        }
      }
      int32_t _2245_d1 = ((*shape)(_2237_dim1));
      int32_t _2246_d2 = (int)1;
      int32_t _9921_ = safe_add( _2237_dim1,(int)1 );
      int32_t _9922_ = _2238_dim2;
      for (int32_t _2247_i = _9921_; _2247_i < _9922_; ++_2247_i)
      {
        {
          _2246_d2 *= ((*shape)(_2247_i));
        }
      }
      int32_t _2248_d3 = ((*shape)(_2238_dim2));
      int32_t _2249_d4 = (int)1;
      int32_t _9923_ = safe_add( _2238_dim2,(int)1 );
      int32_t _9924_ = (int)((shape)->size(0));
      for (int32_t _2250_i = _9923_; _2250_i < _9924_; ++_2250_i)
      {
        {
          _2249_d4 *= ((*shape)(_2250_i));
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2251_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((safe_mul( safe_mul( safe_mul( safe_mul( _2243_d0,_2246_d2 ),_2249_d4 ),_2245_d1 ),safe_add( _2245_d1,(int)1 ) ) / (int)2))));
      _checked_ptr_1<int64_t> _ptr__2251_nidxs(_2251_nidxs ? _2251_nidxs->raw() : nullptr,_2251_nidxs ? _2251_nidxs->size(0) : 0);
      int32_t _2252_i = (int)0;
      int32_t _9925_ = (int)0;
      int32_t _9926_ = _2243_d0;
      for (int32_t _2253_i0 = _9925_; _2253_i0 < _9926_; ++_2253_i0)
      {
        {
          int32_t _9927_ = (int)0;
          int32_t _9928_ = _2245_d1;
          for (int32_t _2254_i1 = _9927_; _2254_i1 < _9928_; ++_2254_i1)
          {
            {
              int32_t _9929_ = (int)0;
              int32_t _9930_ = safe_add( _2254_i1,(int)1 );
              for (int32_t _2255_i3 = _9929_; _2255_i3 < _9930_; ++_2255_i3)
              {
                {
                  int32_t _9931_ = (int)0;
                  int32_t _9932_ = _2246_d2;
                  for (int32_t _2256_i2 = _9931_; _2256_i2 < _9932_; ++_2256_i2)
                  {
                    {
                      int32_t _9933_ = (int)0;
                      int32_t _9934_ = _2249_d4;
                      for (int32_t _2257_i4 = _9933_; _2257_i4 < _9934_; ++_2257_i4)
                      {
                        {
                          _ptr__2251_nidxs[_2252_i] = ((*basevar_nativeidxs)(safe_add( _2257_i4,safe_mul( _2249_d4,safe_add( _2255_i3,safe_mul( _2248_d3,safe_add( _2256_i2,safe_mul( _2246_d2,safe_add( _2254_i1,safe_mul( _2245_d1,_2253_i0 ) ) ) ) ) ) ) )));
                          _2252_i += (int)1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2239_rshape,nullptr,_2251_nidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2258_d0 = (int)1;
      int32_t _9935_ = (int)0;
      int32_t _9936_ = _2237_dim1;
      for (int32_t _2259_i = _9935_; _2259_i < _9936_; ++_2259_i)
      {
        {
          _2258_d0 *= ((*shape)(_2259_i));
        }
      }
      int32_t _2260_d1 = ((*shape)(_2237_dim1));
      int32_t _2261_d2 = (int)1;
      int32_t _9937_ = safe_add( _2237_dim1,(int)1 );
      int32_t _9938_ = _2238_dim2;
      for (int32_t _2262_i = _9937_; _2262_i < _9938_; ++_2262_i)
      {
        {
          _2261_d2 *= ((*shape)(_2262_i));
        }
      }
      int32_t _2263_d3 = ((*shape)(_2238_dim2));
      int32_t _2264_d4 = (int)1;
      int32_t _9939_ = safe_add( _2238_dim2,(int)1 );
      int32_t _9940_ = (int)((shape)->size(0));
      for (int32_t _2265_i = _9939_; _2265_i < _9940_; ++_2265_i)
      {
        {
          _2264_d4 *= ((*shape)(_2265_i));
        }
      }
      int32_t _2266_s4 = (int)1;
      int32_t _2267_s3 = _2264_d4;
      int32_t _2268_s2 = safe_mul( _2267_s3,_2263_d3 );
      int32_t _2269_s1 = safe_mul( _2268_s2,_2261_d2 );
      int32_t _2270_s0 = safe_mul( _2269_s1,_2260_d1 );
      int32_t _2271_nelm = (int)0;
      int32_t _9941_ = (int)0;
      int32_t _9942_ = (int)((sparsity)->size(0));
      for (int32_t _2272_i = _9941_; _2272_i < _9942_; ++_2272_i)
      {
        {
          if ((((((*sparsity)(_2272_i)) / _2269_s1) % _2260_d1) >= ((((*sparsity)(_2272_i)) / _2267_s3) % _2263_d3)))
          {
            {
              ++ _2271_nelm;
            }
          }
          {}
        }
      }
      int32_t _2273_rs3 = (int)1;
      int32_t _2274_rs2 = _2264_d4;
      int32_t _2275_rs1 = safe_mul( _2274_rs2,_2261_d2 );
      int32_t _2276_rs0 = (safe_mul( safe_mul( _2275_rs1,_2260_d1 ),safe_add( _2260_d1,(int)1 ) ) / (int)2);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2277_perm = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2271_nelm)));
      _checked_ptr_1<int64_t> _ptr__2277_perm(_2277_perm ? _2277_perm->raw() : nullptr,_2277_perm ? _2277_perm->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2278_rnidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2271_nelm)));
      _checked_ptr_1<int64_t> _ptr__2278_rnidxs(_2278_rnidxs ? _2278_rnidxs->raw() : nullptr,_2278_rnidxs ? _2278_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2279_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2271_nelm)));
      _checked_ptr_1<int64_t> _ptr__2279_rsp(_2279_rsp ? _2279_rsp->raw() : nullptr,_2279_rsp ? _2279_rsp->size(0) : 0);
      int32_t _2280_elmi = (int)0;
      {
        int32_t _9943_ = (int)0;
        int32_t _9944_ = (int)((sparsity)->size(0));
        for (int32_t _2281_i = _9943_; _2281_i < _9944_; ++_2281_i)
        {
          {
            if ((((((*sparsity)(_2281_i)) / _2269_s1) % _2260_d1) >= ((((*sparsity)(_2281_i)) / _2267_s3) % _2263_d3)))
            {
              {
                int64_t _2282_i0 = (((*sparsity)(_2281_i)) / _2270_s0);
                int64_t _2283_i1 = ((((*sparsity)(_2281_i)) / _2269_s1) % _2260_d1);
                int64_t _2284_i2 = ((((*sparsity)(_2281_i)) / _2268_s2) % _2261_d2);
                int64_t _2285_i3 = ((((*sparsity)(_2281_i)) / _2267_s3) % _2263_d3);
                int64_t _2286_i4 = ((((*sparsity)(_2281_i)) / _2266_s4) % _2264_d4);
                _ptr__2278_rnidxs[_2280_elmi] = ((*basevar_nativeidxs)(_2281_i));
                _ptr__2279_rsp[_2280_elmi] = safe_add( safe_add( safe_add( safe_mul( _2276_rs0,_2282_i0 ),safe_mul( _2275_rs1,safe_add( (safe_mul( _2283_i1,safe_add( _2283_i1,(int)1 ) ) / (int)2),_2285_i3 ) ) ),safe_mul( _2274_rs2,_2284_i2 ) ),safe_mul( _2273_rs3,_2286_i4 ) );
                ++ _2280_elmi;
              }
            }
            {}
          }
        }
        int32_t _9945_ = (int)0;
        int32_t _9946_ = _2271_nelm;
        for (int32_t _2287_i = _9945_; _2287_i < _9946_; ++_2287_i)
        {
          {
            _ptr__2277_perm[_2287_i] = _2287_i;
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_2277_perm,_2278_rnidxs,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2271_nelm));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2288_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2271_nelm)));
      _checked_ptr_1<int64_t> _ptr__2288_nidxs(_2288_nidxs ? _2288_nidxs->raw() : nullptr,_2288_nidxs ? _2288_nidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2289_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2271_nelm)));
      _checked_ptr_1<int64_t> _ptr__2289_sp(_2289_sp ? _2289_sp->raw() : nullptr,_2289_sp ? _2289_sp->size(0) : 0);
      int32_t _9947_ = (int)0;
      int32_t _9948_ = _2271_nelm;
      for (int32_t _2290_i = _9947_; _2290_i < _9948_; ++_2290_i)
      {
        {
          _ptr__2288_nidxs[_2290_i] = _ptr__2278_rnidxs[_ptr__2277_perm[_2290_i]];
        }
      }
      int32_t _9949_ = (int)0;
      int32_t _9950_ = _2271_nelm;
      for (int32_t _2291_i = _9949_; _2291_i < _9950_; ++_2291_i)
      {
        {
          _ptr__2289_sp[_2291_i] = _ptr__2279_rsp[_ptr__2277_perm[_2291_i]];
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2239_rshape,_2289_sp,_2288_nidxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.tril

// Begin mosek.fusion.BaseVariable.tril
// Method mosek.fusion.BaseVariable.tril @ src/fusion/BaseVariable.monty:736:6-57
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril() { return __mosek_2fusion_2BaseVariable__tril(); }
/* override: mosek.fusion.Variable.tril*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__tril() { return __mosek_2fusion_2BaseVariable__tril(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril()
{
  return _pubthis->__mosek_2fusion_2BaseVariable__tril((int)0,(int)1);
}
// End mosek.fusion.BaseVariable.tril

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ src/fusion/BaseVariable.monty:734:6-114
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int32_t _2292_dim0,int32_t _2293_dim1,int32_t _2294_dim2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2292_dim0,_2293_dim1,_2294_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int32_t _2292_dim0,int32_t _2293_dim1,int32_t _2294_dim2) { return __mosek_2fusion_2BaseVariable__reshape(_2292_dim0,_2293_dim1,_2294_dim2); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int32_t _2292_dim0,int32_t _2293_dim1,int32_t _2294_dim2) { return __mosek_2fusion_2BaseVariable__reshape(_2292_dim0,_2293_dim1,_2294_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int32_t _2292_dim0,int32_t _2293_dim1,int32_t _2294_dim2)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2292_dim0),(int32_t)(_2293_dim1),(int32_t)(_2294_dim2)}));
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ src/fusion/BaseVariable.monty:733:6-98
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int32_t _2295_dim0,int32_t _2296_dim1) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2295_dim0,_2296_dim1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int32_t _2295_dim0,int32_t _2296_dim1) { return __mosek_2fusion_2BaseVariable__reshape(_2295_dim0,_2296_dim1); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int32_t _2295_dim0,int32_t _2296_dim1) { return __mosek_2fusion_2BaseVariable__reshape(_2295_dim0,_2296_dim1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int32_t _2295_dim0,int32_t _2296_dim1)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2295_dim0),(int32_t)(_2296_dim1)}));
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ src/fusion/BaseVariable.monty:732:6-82
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int32_t _2297_dim0) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2297_dim0); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int32_t _2297_dim0) { return __mosek_2fusion_2BaseVariable__reshape(_2297_dim0); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int32_t _2297_dim0) { return __mosek_2fusion_2BaseVariable__reshape(_2297_dim0); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int32_t _2297_dim0)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2297_dim0)}));
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ src/fusion/BaseVariable.monty:719:6-730:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2298_shape) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2298_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2298_shape) { return __mosek_2fusion_2BaseVariable__reshape(_2298_shape); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2298_shape) { return __mosek_2fusion_2BaseVariable__reshape(_2298_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2298_shape)
{
  _checked_ptr_1<int32_t> _ptr__2298_shape(_2298_shape ? _2298_shape->raw() : nullptr, _2298_shape ? _2298_shape->size(0) : 0);
  int64_t _2299_shapesize = (int)1;
  int32_t _9951_ = (int)0;
  int32_t _9952_ = (int)((_2298_shape)->size(0));
  for (int32_t _2300_i = _9951_; _2300_i < _9952_; ++_2300_i)
  {
    {
      if ((_ptr__2298_shape[_2300_i] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _2299_shapesize *= _ptr__2298_shape[_2300_i];
    }
  }
  if ((_2299_shapesize != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int32_t> _9953_;
  for (int32_t _2301_i = (int)0, _9954_ = (int)((_2298_shape)->size(0)); _2301_i < _9954_ ; ++_2301_i)
  {
    _9953_.push_back(_ptr__2298_shape[_2301_i]);
  }
  auto _9955_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9953_.size()),_9953_.begin(),_9953_.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_9955_,sparsity,basevar_nativeidxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.setLevel
// Method mosek.fusion.BaseVariable.setLevel @ src/fusion/BaseVariable.monty:705:6-717:7
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2302_v) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_2302_v); }
void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2302_v)
{
  _checked_ptr_1<double> _ptr__2302_v(_2302_v ? _2302_v->raw() : nullptr, _2302_v ? _2302_v->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_2302_v)->size(0)) != (int)((basevar_nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,basevar_nativeidxs,_2302_v);
    }
  }
  else
  {
    {
      if (((int)((_2302_v)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _9956_;
      for (int32_t _2304_i = (int)0, _9957_ = (int)((basevar_nativeidxs)->size(0)); _2304_i < _9957_ ; ++_2304_i)
      {
        _9956_.push_back(_ptr__2302_v[((*sparsity)(_2304_i))]);
      }
      auto _9958_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9956_.size()),_9956_.begin(),_9956_.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _2303_v = _9958_;
      _checked_ptr_1<double> _ptr__2303_v(_2303_v ? _2303_v->raw() : nullptr,_2303_v ? _2303_v->size(0) : 0);
      model->setVariableValues(true,basevar_nativeidxs,_2303_v);
    }
  }
}
// End mosek.fusion.BaseVariable.setLevel

// Begin mosek.fusion.BaseVariable.getModel
// Method mosek.fusion.BaseVariable.getModel @ src/fusion/BaseVariable.monty:703:6-55
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
/* override: mosek.fusion.Variable.getModel*/
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel()
{
  return model;
}
// End mosek.fusion.BaseVariable.getModel

// Begin mosek.fusion.BaseVariable.getND
// Method mosek.fusion.BaseVariable.getND @ src/fusion/BaseVariable.monty:702:6-56
int32_t mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_BaseVariable::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.BaseVariable.getND

// Begin mosek.fusion.BaseVariable.getDim
// Method mosek.fusion.BaseVariable.getDim @ src/fusion/BaseVariable.monty:701:6-62
int32_t mosek::fusion::BaseVariable :: getDim(int32_t _2305_d) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_2305_d); }
int32_t mosek::fusion::p_BaseVariable::getDim(int32_t _2305_d)
{
  return ((*shape)(_2305_d));
}
// End mosek.fusion.BaseVariable.getDim

// Begin mosek.fusion.BaseVariable.getShape
// Method mosek.fusion.BaseVariable.getShape @ src/fusion/BaseVariable.monty:700:6-79
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_BaseVariable::getShape()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
// End mosek.fusion.BaseVariable.getShape

// Begin mosek.fusion.BaseVariable.getSize
// Method mosek.fusion.BaseVariable.getSize @ src/fusion/BaseVariable.monty:699:6-107
int64_t mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }
int64_t mosek::fusion::p_BaseVariable::getSize()
{
  int64_t _2306_sz = (int64_t)1;
  int32_t _9959_ = (int)0;
  int32_t _9960_ = (int)((shape)->size(0));
  for (int32_t _2307_i = _9959_; _2307_i < _9960_; ++_2307_i)
  {
    {
      _2306_sz *= ((*shape)(_2307_i));
    }
  }
  return _2306_sz;
}
// End mosek.fusion.BaseVariable.getSize

// Begin mosek.fusion.BaseVariable.dual
// Method mosek.fusion.BaseVariable.dual @ src/fusion/BaseVariable.monty:686:6-696:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2308_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((basevar_nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2308_res(_2308_res ? _2308_res->raw() : nullptr,_2308_res ? _2308_res->size(0) : 0);
  model->getVariableValues(false,basevar_nativeidxs,_2308_res,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2309_spread_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2309_spread_res(_2309_spread_res ? _2309_spread_res->raw() : nullptr,_2309_spread_res ? _2309_spread_res->size(0) : 0);
      int32_t _9961_ = (int)0;
      int32_t _9962_ = (int)((basevar_nativeidxs)->size(0));
      for (int32_t _2310_i = _9961_; _2310_i < _9962_; ++_2310_i)
      {
        {
          _ptr__2309_spread_res[((*sparsity)(_2310_i))] = _ptr__2308_res[_2310_i];
        }
      }
      _2308_res = _2309_spread_res;
      _ptr__2308_res.update(_2308_res ? _2308_res->raw() : nullptr, _2308_res ? _2308_res->size(0) : 0);
    }
  }
  {}
  return _2308_res;
}
// End mosek.fusion.BaseVariable.dual

// Begin mosek.fusion.BaseVariable.level
// Method mosek.fusion.BaseVariable.level @ src/fusion/BaseVariable.monty:674:6-684:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2311_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((basevar_nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2311_res(_2311_res ? _2311_res->raw() : nullptr,_2311_res ? _2311_res->size(0) : 0);
  model->getVariableValues(true,basevar_nativeidxs,_2311_res,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2312_spread_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2312_spread_res(_2312_spread_res ? _2312_spread_res->raw() : nullptr,_2312_spread_res ? _2312_spread_res->size(0) : 0);
      int32_t _9963_ = (int)0;
      int32_t _9964_ = (int)((basevar_nativeidxs)->size(0));
      for (int32_t _2313_i = _9963_; _2313_i < _9964_; ++_2313_i)
      {
        {
          _ptr__2312_spread_res[((*sparsity)(_2313_i))] = _ptr__2311_res[_2313_i];
        }
      }
      _2311_res = _2312_spread_res;
      _ptr__2311_res.update(_2311_res ? _2311_res->raw() : nullptr, _2311_res ? _2311_res->size(0) : 0);
    }
  }
  {}
  return _2311_res;
}
// End mosek.fusion.BaseVariable.level

// Begin mosek.fusion.BaseVariable.makeContinuous
// Method mosek.fusion.BaseVariable.makeContinuous @ src/fusion/BaseVariable.monty:670:6-59
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }
void mosek::fusion::p_BaseVariable::makeContinuous()
{
  _pubthis->make_continuous();
}
// End mosek.fusion.BaseVariable.makeContinuous

// Begin mosek.fusion.BaseVariable.makeInteger
// Method mosek.fusion.BaseVariable.makeInteger @ src/fusion/BaseVariable.monty:669:6-53
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }
void mosek::fusion::p_BaseVariable::makeInteger()
{
  _pubthis->make_integer();
}
// End mosek.fusion.BaseVariable.makeInteger

// Begin mosek.fusion.BaseVariable.transpose
// Method mosek.fusion.BaseVariable.transpose @ src/fusion/BaseVariable.monty:630:6-665:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
/* override: mosek.fusion.Variable.transpose*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose()
{
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(((*shape)((int)0)))}),sparsity,basevar_nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2314_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((basevar_nativeidxs)->size(0)))));
      _checked_ptr_1<int64_t> _ptr__2314_idxs(_2314_idxs ? _2314_idxs->raw() : nullptr,_2314_idxs ? _2314_idxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _9965_;
      bool _9966_ = (NULL == sparsity.get());
      if (_9966_)
      {
        _9965_ = nullptr;
      }
      else
      {
        _9965_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((basevar_nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2315_sp = _9965_;
      _checked_ptr_1<int64_t> _ptr__2315_sp(_2315_sp ? _2315_sp->raw() : nullptr,_2315_sp ? _2315_sp->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int32_t _2316_k = (int)0;
          int32_t _9967_ = (int)0;
          int32_t _9968_ = ((*shape)((int)1));
          for (int32_t _2317_j = _9967_; _2317_j < _9968_; ++_2317_j)
          {
            {
              int32_t _9969_ = (int)0;
              int32_t _9970_ = ((*shape)((int)0));
              for (int32_t _2318_i = _9969_; _2318_i < _9970_; ++_2318_i)
              {
                {
                  _ptr__2314_idxs[_2316_k] = ((*basevar_nativeidxs)(safe_add( safe_mul( _2318_i,((*shape)((int)1)) ),_2317_j )));
                  ++ _2316_k;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2319_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__2319_ptr(_2319_ptr ? _2319_ptr->raw() : nullptr,_2319_ptr ? _2319_ptr->size(0) : 0);
          int32_t _2320_dim0 = ((*shape)((int)0));
          int32_t _2321_dim1 = ((*shape)((int)1));
          int32_t _9971_ = (int)0;
          int32_t _9972_ = (int)((sparsity)->size(0));
          for (int32_t _2322_i = _9971_; _2322_i < _9972_; ++_2322_i)
          {
            {
              ++ _ptr__2319_ptr[safe_add( (((*sparsity)(_2322_i)) % _2321_dim1),(int)1 )];
            }
          }
          int32_t _9973_ = (int)0;
          int32_t _9974_ = _2321_dim1;
          for (int32_t _2323_i = _9973_; _2323_i < _9974_; ++_2323_i)
          {
            {
              _ptr__2319_ptr[safe_add( _2323_i,(int)1 )] += _ptr__2319_ptr[_2323_i];
            }
          }
          int32_t _9975_ = (int)0;
          int32_t _9976_ = (int)((sparsity)->size(0));
          for (int32_t _2324_i = _9975_; _2324_i < _9976_; ++_2324_i)
          {
            {
              int64_t _2325_ii = (((*sparsity)(_2324_i)) % _2321_dim1);
              _ptr__2314_idxs[_ptr__2319_ptr[_2325_ii]] = ((*basevar_nativeidxs)(_2324_i));
              _ptr__2315_sp[_ptr__2319_ptr[_2325_ii]] = safe_add( (((*sparsity)(_2324_i)) / _2321_dim1),safe_mul( (((*sparsity)(_2324_i)) % _2321_dim1),_2320_dim0 ) );
              ++ _ptr__2319_ptr[_2325_ii];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*shape)((int)1))),(int32_t)(((*shape)((int)0)))}),_2315_sp,_2314_idxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.transpose

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ src/fusion/BaseVariable.monty:619:6-622:40
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int32_t _2326_i0,int32_t _2327_i1,int32_t _2328_i2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2326_i0,_2327_i1,_2328_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int32_t _2326_i0,int32_t _2327_i1,int32_t _2328_i2) { return __mosek_2fusion_2BaseVariable__index(_2326_i0,_2327_i1,_2328_i2); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int32_t _2326_i0,int32_t _2327_i1,int32_t _2328_i2) { return __mosek_2fusion_2BaseVariable__index(_2326_i0,_2327_i1,_2328_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2326_i0,int32_t _2327_i1,int32_t _2328_i2)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2326_i0),(int32_t)(_2327_i1),(int32_t)(_2328_i2)}));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ src/fusion/BaseVariable.monty:614:6-616:37
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int32_t _2329_i0,int32_t _2330_i1) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2329_i0,_2330_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int32_t _2329_i0,int32_t _2330_i1) { return __mosek_2fusion_2BaseVariable__index(_2329_i0,_2330_i1); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int32_t _2329_i0,int32_t _2330_i1) { return __mosek_2fusion_2BaseVariable__index(_2329_i0,_2330_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2329_i0,int32_t _2330_i1)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2329_i0),(int32_t)(_2330_i1)}));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ src/fusion/BaseVariable.monty:606:6-611:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2331_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2331_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2331_index) { return __mosek_2fusion_2BaseVariable__index(_2331_index); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2331_index) { return __mosek_2fusion_2BaseVariable__index(_2331_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2331_index)
{
  _checked_ptr_1<int32_t> _ptr__2331_index(_2331_index ? _2331_index->raw() : nullptr, _2331_index ? _2331_index->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,2 > > _2332_midx = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)1,(int)((_2331_index)->size(0)))));
  int32_t _9977_ = (int)0;
  int32_t _9978_ = (int)((_2331_index)->size(0));
  for (int32_t _2333_i = _9977_; _2333_i < _9978_; ++_2333_i)
  {
    {
      ((*_2332_midx)((int)0,_2333_i)) = _ptr__2331_index[_2333_i];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2332_midx)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ src/fusion/BaseVariable.monty:600:6-603:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int32_t _2334_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2334_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int32_t _2334_index) { return __mosek_2fusion_2BaseVariable__index(_2334_index); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int32_t _2334_index) { return __mosek_2fusion_2BaseVariable__index(_2334_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2334_index)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2334_index)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ src/fusion/BaseVariable.monty:579:6-597:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2335_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2336_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2337_i2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2335_i0,_2336_i1,_2337_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2335_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2336_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2337_i2) { return __mosek_2fusion_2BaseVariable__pick(_2335_i0,_2336_i1,_2337_i2); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2335_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2336_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2337_i2) { return __mosek_2fusion_2BaseVariable__pick(_2335_i0,_2336_i1,_2337_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2335_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2336_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2337_i2)
{
  _checked_ptr_1<int32_t> _ptr__2335_i0(_2335_i0 ? _2335_i0->raw() : nullptr, _2335_i0 ? _2335_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2336_i1(_2336_i1 ? _2336_i1->raw() : nullptr, _2336_i1 ? _2336_i1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2337_i2(_2337_i2 ? _2337_i2->raw() : nullptr, _2337_i2 ? _2337_i2->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_2335_i0)->size(0)) != (int)((_2336_i1)->size(0))) || ((int)((_2335_i0)->size(0)) != (int)((_2337_i2)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,2 > > _2338_midxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_2335_i0)->size(0)),(int)3)));
  int32_t _9979_ = (int)0;
  int32_t _9980_ = (int)((_2335_i0)->size(0));
  for (int32_t _2339_i = _9979_; _2339_i < _9980_; ++_2339_i)
  {
    {
      ((*_2338_midxs)(_2339_i,(int)0)) = _ptr__2335_i0[_2339_i];
      ((*_2338_midxs)(_2339_i,(int)1)) = _ptr__2336_i1[_2339_i];
      ((*_2338_midxs)(_2339_i,(int)2)) = _ptr__2337_i2[_2339_i];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2338_midxs);
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ src/fusion/BaseVariable.monty:563:6-577:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2340_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2341_i1) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2340_i0,_2341_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2340_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2341_i1) { return __mosek_2fusion_2BaseVariable__pick(_2340_i0,_2341_i1); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2340_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2341_i1) { return __mosek_2fusion_2BaseVariable__pick(_2340_i0,_2341_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2340_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2341_i1)
{
  _checked_ptr_1<int32_t> _ptr__2340_i0(_2340_i0 ? _2340_i0->raw() : nullptr, _2340_i0 ? _2340_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2341_i1(_2341_i1 ? _2341_i1->raw() : nullptr, _2341_i1 ? _2341_i1->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_2340_i0)->size(0)) != (int)((_2341_i1)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,2 > > _2342_midxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_2340_i0)->size(0)),(int)2)));
  int32_t _9981_ = (int)0;
  int32_t _9982_ = (int)((_2340_i0)->size(0));
  for (int32_t _2343_i = _9981_; _2343_i < _9982_; ++_2343_i)
  {
    {
      ((*_2342_midxs)(_2343_i,(int)0)) = _ptr__2340_i0[_2343_i];
      ((*_2342_midxs)(_2343_i,(int)1)) = _ptr__2341_i1[_2343_i];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2342_midxs);
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ src/fusion/BaseVariable.monty:502:6-561:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2344_midxs) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2344_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2344_midxs) { return __mosek_2fusion_2BaseVariable__pick(_2344_midxs); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2344_midxs) { return __mosek_2fusion_2BaseVariable__pick(_2344_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2344_midxs)
{
  if (((int)((shape)->size(0)) != (int)((_2344_midxs)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2345_invalidindex = false;
  int32_t _9983_ = (int)0;
  int32_t _9984_ = (int)((_2344_midxs)->size(0));
  for (int32_t _2346_i = _9983_; _2346_i < _9984_; ++_2346_i)
  {
    {
      int32_t _9985_ = (int)0;
      int32_t _9986_ = (int)((_2344_midxs)->size(1));
      for (int32_t _2347_j = _9985_; _2347_j < _9986_; ++_2347_j)
      {
        {
          if (((((*_2344_midxs)(_2346_i,_2347_j)) < (int)0) || (((*_2344_midxs)(_2346_i,_2347_j)) >= ((*shape)(_2347_j)))))
          {
            {
              _2345_invalidindex = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_2345_invalidindex)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int32_t _2348_nd = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2349_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2348_nd)));
  _checked_ptr_1<int64_t> _ptr__2349_strides(_2349_strides ? _2349_strides->raw() : nullptr,_2349_strides ? _2349_strides->size(0) : 0);
  _ptr__2349_strides[(_2348_nd - (int)1)] = (int)1;
  int32_t _9987_ = (int)1;
  int32_t _9988_ = _2348_nd;
  for (int32_t _2350_i = _9987_; _2350_i < _9988_; ++_2350_i)
  {
    {
      _ptr__2349_strides[((_2348_nd - _2350_i) - (int)1)] = safe_mul( _ptr__2349_strides[(_2348_nd - _2350_i)],((*shape)((_2348_nd - _2350_i))) );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2351_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_2344_midxs)->size(0)))});
  _checked_ptr_1<int32_t> _ptr__2351_rshape(_2351_rshape ? _2351_rshape->raw() : nullptr,_2351_rshape ? _2351_rshape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2352_idxs;
  _checked_ptr_1<int64_t> _ptr__2352_idxs(_2352_idxs ? _2352_idxs->raw() : nullptr,_2352_idxs ? _2352_idxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2353_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__2353_sp(_2353_sp ? _2353_sp->raw() : nullptr,_2353_sp ? _2353_sp->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _2352_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2344_midxs)->size(0)))));
      _ptr__2352_idxs.update(_2352_idxs ? _2352_idxs->raw() : nullptr, _2352_idxs ? _2352_idxs->size(0) : 0);
      {
        int32_t _9989_ = (int)0;
        int32_t _9990_ = (int)((_2344_midxs)->size(0));
        for (int32_t _2354_i = _9989_; _2354_i < _9990_; ++_2354_i)
        {
          {
            int64_t _2355_ii = (int64_t)0;
            int32_t _9991_ = (int)0;
            int32_t _9992_ = _2348_nd;
            for (int32_t _2356_j = _9991_; _2356_j < _9992_; ++_2356_j)
            {
              {
                _2355_ii += safe_mul( _ptr__2349_strides[_2356_j],((*_2344_midxs)(_2354_i,_2356_j)) );
              }
            }
            _ptr__2352_idxs[_2354_i] = ((*basevar_nativeidxs)(_2355_ii));
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _2357_nnz = (int)0;
      int32_t _9993_ = (int)0;
      int32_t _9994_ = (int)((_2344_midxs)->size(0));
      for (int32_t _2358_i = _9993_; _2358_i < _9994_; ++_2358_i)
      {
        {
          int64_t _2359_ii = (int64_t)0;
          int32_t _9995_ = (int)0;
          int32_t _9996_ = _2348_nd;
          for (int32_t _2360_j = _9995_; _2360_j < _9996_; ++_2360_j)
          {
            {
              _2359_ii += safe_mul( _ptr__2349_strides[_2360_j],((*_2344_midxs)(_2358_i,_2360_j)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2359_ii) >= (int)0))
          {
            {
              ++ _2357_nnz;
            }
          }
          {}
        }
      }
      _2352_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2357_nnz)));
      _ptr__2352_idxs.update(_2352_idxs ? _2352_idxs->raw() : nullptr, _2352_idxs ? _2352_idxs->size(0) : 0);
      _2353_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2357_nnz)));
      _ptr__2353_sp.update(_2353_sp ? _2353_sp->raw() : nullptr, _2353_sp ? _2353_sp->size(0) : 0);
      {
        int32_t _2361_k = (int)0;
        int32_t _9997_ = (int)0;
        int32_t _9998_ = (int)((_2344_midxs)->size(0));
        for (int32_t _2362_i = _9997_; _2362_i < _9998_; ++_2362_i)
        {
          {
            int64_t _2363_ii = (int64_t)0;
            int32_t _9999_ = (int)0;
            int32_t _10000_ = _2348_nd;
            for (int32_t _2364_j = _9999_; _2364_j < _10000_; ++_2364_j)
            {
              {
                _2363_ii += safe_mul( _ptr__2349_strides[_2364_j],((*_2344_midxs)(_2362_i,_2364_j)) );
              }
            }
            int32_t _2365_iidx = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2363_ii);
            if ((_2365_iidx >= (int)0))
            {
              {
                _ptr__2352_idxs[_2361_k] = ((*basevar_nativeidxs)(_2365_iidx));
                _ptr__2353_sp[_2361_k] = _2362_i;
                ++ _2361_k;
              }
            }
            {}
          }
        }
      }
      if ((_2357_nnz == (int)((_2344_midxs)->size(0))))
      {
        {
          _2353_sp = nullptr;
          _ptr__2353_sp.update(_2353_sp ? _2353_sp->raw() : nullptr, _2353_sp ? _2353_sp->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2351_rshape,_2353_sp,_2352_idxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ src/fusion/BaseVariable.monty:460:6-500:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2366_idxs) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2366_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2366_idxs) { return __mosek_2fusion_2BaseVariable__pick(_2366_idxs); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2366_idxs) { return __mosek_2fusion_2BaseVariable__pick(_2366_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2366_idxs)
{
  _checked_ptr_1<int32_t> _ptr__2366_idxs(_2366_idxs ? _2366_idxs->raw() : nullptr, _2366_idxs ? _2366_idxs->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2367_invalidindex = false;
  int32_t _10001_ = (int)0;
  int32_t _10002_ = (int)((_2366_idxs)->size(0));
  for (int32_t _2368_i = _10001_; _2368_i < _10002_; ++_2368_i)
  {
    {
      if (((_ptr__2366_idxs[_2368_i] < (int)0) || (_ptr__2366_idxs[_2368_i] >= ((*shape)((int)0)))))
      {
        {
          _2367_invalidindex = true;
        }
      }
      {}
    }
  }
  if (_2367_invalidindex)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2369_nidxs;
  _checked_ptr_1<int64_t> _ptr__2369_nidxs(_2369_nidxs ? _2369_nidxs->raw() : nullptr,_2369_nidxs ? _2369_nidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2370_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__2370_sp(_2370_sp ? _2370_sp->raw() : nullptr,_2370_sp ? _2370_sp->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<int64_t> _10003_;
      for (int32_t _2371_i = (int)0, _10004_ = (int)((_2366_idxs)->size(0)); _2371_i < _10004_ ; ++_2371_i)
      {
        _10003_.push_back(((*basevar_nativeidxs)(_ptr__2366_idxs[_2371_i])));
      }
      auto _10005_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10003_.size()),_10003_.begin(),_10003_.end()));
      _2369_nidxs = _10005_;
      _ptr__2369_nidxs.update(_2369_nidxs ? _2369_nidxs->raw() : nullptr, _2369_nidxs ? _2369_nidxs->size(0) : 0);
    }
  }
  else
  {
    {
      int32_t _2372_nnz = (int)0;
      int32_t _10006_ = (int)0;
      int32_t _10007_ = (int)((_2366_idxs)->size(0));
      for (int32_t _2373_i = _10006_; _2373_i < _10007_; ++_2373_i)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(int64_t)(_ptr__2366_idxs[_2373_i])) >= (int)0))
          {
            {
              ++ _2372_nnz;
            }
          }
          {}
        }
      }
      _2369_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2372_nnz)));
      _ptr__2369_nidxs.update(_2369_nidxs ? _2369_nidxs->raw() : nullptr, _2369_nidxs ? _2369_nidxs->size(0) : 0);
      _2370_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2372_nnz)));
      _ptr__2370_sp.update(_2370_sp ? _2370_sp->raw() : nullptr, _2370_sp ? _2370_sp->size(0) : 0);
      int32_t _2374_k = (int)0;
      int32_t _10008_ = (int)0;
      int32_t _10009_ = (int)((_2366_idxs)->size(0));
      for (int32_t _2375_i = _10008_; _2375_i < _10009_; ++_2375_i)
      {
        {
          int32_t _2376_j = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(int64_t)(_ptr__2366_idxs[_2375_i]));
          if ((_2376_j >= (int)0))
          {
            {
              _ptr__2370_sp[_2374_k] = _2375_i;
              _ptr__2369_nidxs[_2374_k] = ((*basevar_nativeidxs)(_2376_j));
              ++ _2374_k;
            }
          }
          {}
        }
      }
      if ((_2372_nnz == (int)((_2366_idxs)->size(0))))
      {
        {
          _2370_sp = nullptr;
          _ptr__2370_sp.update(_2370_sp ? _2370_sp->raw() : nullptr, _2370_sp ? _2370_sp->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_2366_idxs)->size(0)))}),_2370_sp,_2369_nidxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.antidiag
// Method mosek.fusion.BaseVariable.antidiag @ src/fusion/BaseVariable.monty:446:6-457:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int32_t _2377_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_2377_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int32_t _2377_index) { return __mosek_2fusion_2BaseVariable__antidiag(_2377_index); }
/* override: mosek.fusion.Variable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int32_t _2377_index) { return __mosek_2fusion_2BaseVariable__antidiag(_2377_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int32_t _2377_index)
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_2377_index >= ((*shape)((int)1))) || ((-_2377_index) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2377_index >= (int)0))
  {
    {
      int32_t _10010_;
      bool _10011_ = (((*shape)((int)0)) < (((*shape)((int)1)) - _2377_index));
      if (_10011_)
      {
        _10010_ = ((*shape)((int)0));
      }
      else
      {
        _10010_ = (((*shape)((int)1)) - _2377_index);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)(((((*shape)((int)1)) - (int)1) - _2377_index))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((-(int)1))}),_10010_);
    }
  }
  else
  {
    {
      int32_t _10012_;
      bool _10013_ = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2377_index ));
      if (_10013_)
      {
        _10012_ = ((*shape)((int)1));
      }
      else
      {
        _10012_ = safe_add( ((*shape)((int)0)),_2377_index );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((-_2377_index)),(int32_t)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((-(int)1))}),_10012_);
    }
  }
}
// End mosek.fusion.BaseVariable.antidiag

// Begin mosek.fusion.BaseVariable.antidiag
// Method mosek.fusion.BaseVariable.antidiag @ src/fusion/BaseVariable.monty:438:6-444:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
/* override: mosek.fusion.Variable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag()
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int32_t _10014_;
  bool _10015_ = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_10015_)
  {
    _10014_ = ((*shape)((int)0));
  }
  else
  {
    _10014_ = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((-(int)1))}),_10014_);
}
// End mosek.fusion.BaseVariable.antidiag

// Begin mosek.fusion.BaseVariable.diag
// Method mosek.fusion.BaseVariable.diag @ src/fusion/BaseVariable.monty:425:6-436:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int32_t _2378_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_2378_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int32_t _2378_index) { return __mosek_2fusion_2BaseVariable__diag(_2378_index); }
/* override: mosek.fusion.Variable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int32_t _2378_index) { return __mosek_2fusion_2BaseVariable__diag(_2378_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int32_t _2378_index)
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_2378_index >= ((*shape)((int)1))) || ((-_2378_index) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2378_index >= (int)0))
  {
    {
      int32_t _10016_;
      bool _10017_ = (((*shape)((int)0)) < (((*shape)((int)1)) - _2378_index));
      if (_10017_)
      {
        _10016_ = ((*shape)((int)0));
      }
      else
      {
        _10016_ = (((*shape)((int)1)) - _2378_index);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)(_2378_index)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1)}),_10016_);
    }
  }
  else
  {
    {
      int32_t _10018_;
      bool _10019_ = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2378_index ));
      if (_10019_)
      {
        _10018_ = ((*shape)((int)1));
      }
      else
      {
        _10018_ = safe_add( ((*shape)((int)0)),_2378_index );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((-_2378_index)),(int32_t)((int)0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1)}),_10018_);
    }
  }
}
// End mosek.fusion.BaseVariable.diag

// Begin mosek.fusion.BaseVariable.diag
// Method mosek.fusion.BaseVariable.diag @ src/fusion/BaseVariable.monty:418:6-423:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
/* override: mosek.fusion.Variable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag()
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int32_t _10020_;
  bool _10021_ = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_10021_)
  {
    _10020_ = ((*shape)((int)0));
  }
  else
  {
    _10020_ = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)((int)0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1)}),_10020_);
}
// End mosek.fusion.BaseVariable.diag

// Begin mosek.fusion.BaseVariable.general_diag
// Method mosek.fusion.BaseVariable.general_diag @ src/fusion/BaseVariable.monty:368:6-415:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > > _2379_firstidx,std::shared_ptr< monty::ndarray< int32_t,1 > > _2380_step,int32_t _2381_num)
{
  _checked_ptr_1<int32_t> _ptr__2379_firstidx(_2379_firstidx ? _2379_firstidx->raw() : nullptr, _2379_firstidx ? _2379_firstidx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2380_step(_2380_step ? _2380_step->raw() : nullptr, _2380_step ? _2380_step->size(0) : 0);
  int32_t _2382_nd = (int)((shape)->size(0));
  if (((_2382_nd != (int)((_2379_firstidx)->size(0))) || (_2382_nd != (int)((_2380_step)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int32_t _10022_ = (int)0;
  int32_t _10023_ = _2382_nd;
  for (int32_t _2383_i = _10022_; _2383_i < _10023_; ++_2383_i)
  {
    {
      if (((_ptr__2379_firstidx[_2383_i] < (int)0) || (_ptr__2379_firstidx[_2383_i] >= ((*shape)(_2383_i)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2384_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2382_nd)));
  _checked_ptr_1<int64_t> _ptr__2384_strides(_2384_strides ? _2384_strides->raw() : nullptr,_2384_strides ? _2384_strides->size(0) : 0);
  _ptr__2384_strides[(_2382_nd - (int)1)] = (int)1;
  int32_t _10024_ = (int)1;
  int32_t _10025_ = _2382_nd;
  for (int32_t _2385_i = _10024_; _2385_i < _10025_; ++_2385_i)
  {
    {
      _ptr__2384_strides[((_2382_nd - _2385_i) - (int)1)] = safe_mul( _ptr__2384_strides[(_2382_nd - _2385_i)],((*shape)((_2382_nd - _2385_i))) );
    }
  }
  int64_t _2386_startidx = (int64_t)0;
  int32_t _10026_ = (int)0;
  int32_t _10027_ = (int)((_2380_step)->size(0));
  for (int32_t _2387_i = _10026_; _2387_i < _10027_; ++_2387_i)
  {
    {
      _2386_startidx += safe_mul( _ptr__2379_firstidx[_2387_i],_ptr__2384_strides[_2387_i] );
    }
  }
  int64_t _2388_stepstride = (int64_t)0;
  int32_t _10028_ = (int)0;
  int32_t _10029_ = (int)((_2380_step)->size(0));
  for (int32_t _2389_i = _10028_; _2389_i < _10029_; ++_2389_i)
  {
    {
      _2388_stepstride += safe_mul( _ptr__2380_step[_2389_i],_ptr__2384_strides[_2389_i] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2390_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2381_num)));
      _checked_ptr_1<int64_t> _ptr__2390_residxs(_2390_residxs ? _2390_residxs->raw() : nullptr,_2390_residxs ? _2390_residxs->size(0) : 0);
      int32_t _10030_ = (int)0;
      int32_t _10031_ = _2381_num;
      for (int32_t _2391_i = _10030_; _2391_i < _10031_; ++_2391_i)
      {
        {
          _ptr__2390_residxs[_2391_i] = ((*basevar_nativeidxs)(safe_add( _2386_startidx,safe_mul( _2388_stepstride,_2391_i ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2381_num)}),nullptr,_2390_residxs)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2392_numnz = (int)0;
      int32_t _10032_ = (int)0;
      int32_t _10033_ = _2381_num;
      for (int32_t _2393_i = _10032_; _2393_i < _10033_; ++_2393_i)
      {
        {
          int64_t _2394_residx = safe_add( _2386_startidx,safe_mul( _2388_stepstride,_2393_i ) );
          int32_t _2395_spidx = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2394_residx);
          if ((_2395_spidx >= (int)0))
          {
            {
              ++ _2392_numnz;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2396_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2392_numnz)));
      _checked_ptr_1<int64_t> _ptr__2396_residxs(_2396_residxs ? _2396_residxs->raw() : nullptr,_2396_residxs ? _2396_residxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2397_ressp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2392_numnz)));
      _checked_ptr_1<int64_t> _ptr__2397_ressp(_2397_ressp ? _2397_ressp->raw() : nullptr,_2397_ressp ? _2397_ressp->size(0) : 0);
      int32_t _2398_k = (int)0;
      int32_t _10034_ = (int)0;
      int32_t _10035_ = _2381_num;
      for (int32_t _2399_i = _10034_; _2399_i < _10035_; ++_2399_i)
      {
        {
          _ptr__2396_residxs[_2399_i] = ((*basevar_nativeidxs)(safe_add( _2386_startidx,safe_mul( _2388_stepstride,_2399_i ) )));
          int64_t _2400_residx = safe_add( _2386_startidx,safe_mul( _2388_stepstride,_2399_i ) );
          int32_t _2401_spidx = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2400_residx);
          if ((_2401_spidx >= (int)0))
          {
            {
              _ptr__2397_ressp[_2398_k] = _2399_i;
              _ptr__2396_residxs[_2398_k] = ((*basevar_nativeidxs)(_2401_spidx));
              ++ _2398_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2381_num)}),_2397_ressp,_2396_residxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.general_diag

// Begin mosek.fusion.BaseVariable.slice
// Method mosek.fusion.BaseVariable.slice @ src/fusion/BaseVariable.monty:260:6-357:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2402_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2403_last) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2402_first,_2403_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2402_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2403_last) { return __mosek_2fusion_2BaseVariable__slice(_2402_first,_2403_last); }
/* override: mosek.fusion.Variable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2402_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2403_last) { return __mosek_2fusion_2BaseVariable__slice(_2402_first,_2403_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2402_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2403_last)
{
  _checked_ptr_1<int32_t> _ptr__2402_first(_2402_first ? _2402_first->raw() : nullptr, _2402_first ? _2402_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2403_last(_2403_last ? _2403_last->raw() : nullptr, _2403_last ? _2403_last->size(0) : 0);
  if (((int)((_2402_first)->size(0)) != (int)((_2403_last)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_2402_first)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int32_t _10036_ = (int)0;
      int32_t _10037_ = (int)((shape)->size(0));
      for (int32_t _2404_i = _10036_; _2404_i < _10037_; ++_2404_i)
      {
        {
          if (((_ptr__2402_first[_2404_i] < (int)0) || (_ptr__2403_last[_2404_i] > ((*shape)(_2404_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__2402_first[_2404_i] > _ptr__2403_last[_2404_i]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int32_t _2405_nd = (int)((shape)->size(0));
      std::vector<int32_t> _10038_;
      for (int32_t _2407_i = (int)0, _10039_ = _2405_nd; _2407_i < _10039_ ; ++_2407_i)
      {
        _10038_.push_back((_ptr__2403_last[_2407_i] - _ptr__2402_first[_2407_i]));
      }
      auto _10040_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10038_.size()),_10038_.begin(),_10038_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2406_sliceshape = _10040_;
      _checked_ptr_1<int32_t> _ptr__2406_sliceshape(_2406_sliceshape ? _2406_sliceshape->raw() : nullptr,_2406_sliceshape ? _2406_sliceshape->size(0) : 0);
      int32_t _2408_slicesize = (int)1;
      int32_t _10041_ = (int)0;
      int32_t _10042_ = _2405_nd;
      for (int32_t _2409_i = _10041_; _2409_i < _10042_; ++_2409_i)
      {
        {
          _2408_slicesize *= (_ptr__2403_last[_2409_i] - _ptr__2402_first[_2409_i]);
        }
      }
      if ((_2408_slicesize == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int32_t _2410_nnz = (int)0;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2411_key = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2405_nd)));
          _checked_ptr_1<int32_t> _ptr__2411_key(_2411_key ? _2411_key->raw() : nullptr,_2411_key ? _2411_key->size(0) : 0);
          int32_t _10043_ = (int)0;
          int32_t _10044_ = (int)((sparsity)->size(0));
          for (int32_t _2412_i = _10043_; _2412_i < _10044_; ++_2412_i)
          {
            {
              int64_t _2413_rem = ((*sparsity)(_2412_i));
              int32_t _10045_ = (int)1;
              int32_t _10046_ = _2405_nd;
              for (int32_t _2414_k = _10045_; _2414_k < _10046_; ++_2414_k)
              {
                {
                  _ptr__2411_key[(_2405_nd - _2414_k)] = (int32_t)(_2413_rem % ((*shape)((_2405_nd - _2414_k))));
                  _2413_rem /= ((*shape)((_2405_nd - _2414_k)));
                }
              }
              _ptr__2411_key[(int)0] = (int32_t)_2413_rem;
              int32_t _2415_k = (int)0;
              while ( ((_ptr__2411_key[_2415_k] >= _ptr__2402_first[_2415_k]) && (_ptr__2411_key[_2415_k] < _ptr__2403_last[_2415_k])) )
              {
                {
                  ++ _2415_k;
                }
              }
              if ((_2415_k == _2405_nd))
              {
                {
                  ++ _2410_nnz;
                }
              }
              {}
            }
          }
          int32_t _2416_idx = (int)0;
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2417_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2410_nnz)));
          _checked_ptr_1<int64_t> _ptr__2417_idxs(_2417_idxs ? _2417_idxs->raw() : nullptr,_2417_idxs ? _2417_idxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2418_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2410_nnz)));
          _checked_ptr_1<int64_t> _ptr__2418_sp(_2418_sp ? _2418_sp->raw() : nullptr,_2418_sp ? _2418_sp->size(0) : 0);
          int32_t _10047_ = (int)0;
          int32_t _10048_ = (int)((sparsity)->size(0));
          for (int32_t _2419_i = _10047_; _2419_i < _10048_; ++_2419_i)
          {
            {
              int64_t _2420_rem = ((*sparsity)(_2419_i));
              int32_t _10049_ = (int)1;
              int32_t _10050_ = _2405_nd;
              for (int32_t _2421_k = _10049_; _2421_k < _10050_; ++_2421_k)
              {
                {
                  _ptr__2411_key[(_2405_nd - _2421_k)] = (int32_t)(_2420_rem % ((*shape)((_2405_nd - _2421_k))));
                  _2420_rem /= ((*shape)((_2405_nd - _2421_k)));
                }
              }
              _ptr__2411_key[(int)0] = (int32_t)_2420_rem;
              int32_t _2422_k = (int)0;
              while ( ((_ptr__2411_key[_2422_k] >= _ptr__2402_first[_2422_k]) && (_ptr__2411_key[_2422_k] < _ptr__2403_last[_2422_k])) )
              {
                {
                  ++ _2422_k;
                }
              }
              if ((_2422_k == _2405_nd))
              {
                {
                  _ptr__2417_idxs[_2416_idx] = ((*basevar_nativeidxs)(_2419_i));
                  int32_t _2423_spidx = (int)0;
                  int32_t _10051_ = (int)0;
                  int32_t _10052_ = _2405_nd;
                  for (int32_t _2424_i = _10051_; _2424_i < _10052_; ++_2424_i)
                  {
                    {
                      _2423_spidx = safe_add( safe_mul( _2423_spidx,_ptr__2406_sliceshape[_2424_i] ),(_ptr__2411_key[_2424_i] - _ptr__2402_first[_2424_i]) );
                    }
                  }
                  _ptr__2418_sp[_2416_idx] = _2423_spidx;
                  ++ _2416_idx;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2406_sliceshape,_2418_sp,_2417_idxs)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2425_sliceidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2408_slicesize)));
          _checked_ptr_1<int64_t> _ptr__2425_sliceidxs(_2425_sliceidxs ? _2425_sliceidxs->raw() : nullptr,_2425_sliceidxs ? _2425_sliceidxs->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2426_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2405_nd)));
            _checked_ptr_1<int32_t> _ptr__2426_strides(_2426_strides ? _2426_strides->raw() : nullptr,_2426_strides ? _2426_strides->size(0) : 0);
            _ptr__2426_strides[(_2405_nd - (int)1)] = (int)1;
            int32_t _10053_ = (int)1;
            int32_t _10054_ = _2405_nd;
            for (int32_t _2427_i = _10053_; _2427_i < _10054_; ++_2427_i)
            {
              {
                _ptr__2426_strides[((_2405_nd - _2427_i) - (int)1)] = safe_mul( _ptr__2426_strides[(_2405_nd - _2427_i)],((*shape)((_2405_nd - _2427_i))) );
              }
            }
            int32_t _2428_start = (int)0;
            int32_t _10055_ = (int)0;
            int32_t _10056_ = _2405_nd;
            for (int32_t _2429_i = _10055_; _2429_i < _10056_; ++_2429_i)
            {
              {
                _2428_start += safe_mul( _ptr__2402_first[_2429_i],_ptr__2426_strides[_2429_i] );
              }
            }
            std::vector<int32_t> _10057_;
            for (int32_t _2431_i = (int)0, _10058_ = _2405_nd; _2431_i < _10058_ ; ++_2431_i)
            {
              _10057_.push_back(_2428_start);
            }
            auto _10059_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10057_.size()),_10057_.begin(),_10057_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2430_pp = _10059_;
            _checked_ptr_1<int32_t> _ptr__2430_pp(_2430_pp ? _2430_pp->raw() : nullptr,_2430_pp ? _2430_pp->size(0) : 0);
            std::vector<int32_t> _10060_;
            for (int32_t _2433_i = (int)0, _10061_ = _2405_nd; _2433_i < _10061_ ; ++_2433_i)
            {
              _10060_.push_back(_ptr__2402_first[_2433_i]);
            }
            auto _10062_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10060_.size()),_10060_.begin(),_10060_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2432_ii = _10062_;
            _checked_ptr_1<int32_t> _ptr__2432_ii(_2432_ii ? _2432_ii->raw() : nullptr,_2432_ii ? _2432_ii->size(0) : 0);
            int32_t _10063_ = (int)0;
            int32_t _10064_ = _2408_slicesize;
            for (int32_t _2434_i = _10063_; _2434_i < _10064_; ++_2434_i)
            {
              {
                _ptr__2425_sliceidxs[_2434_i] = ((*basevar_nativeidxs)(_ptr__2430_pp[(_2405_nd - (int)1)]));
                _ptr__2432_ii[(_2405_nd - (int)1)] += (int)1;
                _ptr__2430_pp[(_2405_nd - (int)1)] += _ptr__2426_strides[(_2405_nd - (int)1)];
                if ((_ptr__2432_ii[(_2405_nd - (int)1)] >= _ptr__2403_last[(_2405_nd - (int)1)]))
                {
                  {
                    int32_t _2435_k = (_2405_nd - (int)1);
                    while ( ((_2435_k > (int)0) && (_ptr__2432_ii[_2435_k] >= _ptr__2403_last[_2435_k])) )
                    {
                      {
                        _ptr__2432_ii[_2435_k] = _ptr__2402_first[_2435_k];
                        _ptr__2432_ii[(_2435_k - (int)1)] += (int)1;
                        _ptr__2430_pp[(_2435_k - (int)1)] += _ptr__2426_strides[(_2435_k - (int)1)];
                        -- _2435_k;
                      }
                    }
                    int32_t _10065_ = safe_add( _2435_k,(int)1 );
                    int32_t _10066_ = _2405_nd;
                    for (int32_t _2436_k2 = _10065_; _2436_k2 < _10066_; ++_2436_k2)
                    {
                      {
                        _ptr__2430_pp[_2436_k2] = _ptr__2430_pp[_2435_k];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2406_sliceshape,nullptr,_2425_sliceidxs)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
// End mosek.fusion.BaseVariable.slice

// Begin mosek.fusion.BaseVariable.slice
// Method mosek.fusion.BaseVariable.slice @ src/fusion/BaseVariable.monty:228:6-257:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int32_t _2437_first,int32_t _2438_last) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2437_first,_2438_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int32_t _2437_first,int32_t _2438_last) { return __mosek_2fusion_2BaseVariable__slice(_2437_first,_2438_last); }
/* override: mosek.fusion.Variable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int32_t _2437_first,int32_t _2438_last) { return __mosek_2fusion_2BaseVariable__slice(_2437_first,_2438_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int32_t _2437_first,int32_t _2438_last)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2437_first == (int)0) && (_2438_last == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_2437_first < (int)0) || (_2438_last > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2437_first > _2438_last))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_2437_first == _2438_last))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int32_t _2439_slicesize = (_2438_last - _2437_first);
      int32_t _2440_nnz = (int)0;
      int32_t _2441_i0 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(int64_t)(_2437_first));
      int32_t _2442_i1 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(int64_t)(_2438_last));
      std::vector<int64_t> _10067_;
      for (int32_t _2443_i = _2441_i0, _10068_ = _2442_i1; _2443_i < _10068_ ; ++_2443_i)
      {
        _10067_.push_back((((*sparsity)(_2443_i)) - _2437_first));
      }
      auto _10069_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10067_.size()),_10067_.begin(),_10067_.end()));
      std::vector<int64_t> _10070_;
      for (int32_t _2444_i = _2441_i0, _10071_ = _2442_i1; _2444_i < _10071_ ; ++_2444_i)
      {
        _10070_.push_back(((*basevar_nativeidxs)(_2444_i)));
      }
      auto _10072_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10070_.size()),_10070_.begin(),_10070_.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2439_slicesize)}),_10069_,_10072_)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2445_slicesize = (_2438_last - _2437_first);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2446_sliceidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2445_slicesize)));
      _checked_ptr_1<int64_t> _ptr__2446_sliceidxs(_2446_sliceidxs ? _2446_sliceidxs->raw() : nullptr,_2446_sliceidxs ? _2446_sliceidxs->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(basevar_nativeidxs,_2437_first,_2446_sliceidxs,(int)0,_2445_slicesize);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2445_slicesize)}),nullptr,_2446_sliceidxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.slice

// Begin mosek.fusion.BaseVariable.asExpr
// Method mosek.fusion.BaseVariable.asExpr @ src/fusion/BaseVariable.monty:226:6-74
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
/* override: mosek.fusion.Variable.asExpr*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr()
{
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseVariable.asExpr

// Begin mosek.fusion.BaseVariable.inst
// Method mosek.fusion.BaseVariable.inst @ src/fusion/BaseVariable.monty:185:6-207:7
int32_t mosek::fusion::BaseVariable :: inst(int32_t _2447_spoffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2448_sparsity,int32_t _2449_nioffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2450_basevar_nativeidxs) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2447_spoffset,_2448_sparsity,_2449_nioffset,_2450_basevar_nativeidxs); }
int32_t mosek::fusion::p_BaseVariable::inst(int32_t _2447_spoffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2448_sparsity,int32_t _2449_nioffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2450_basevar_nativeidxs)
{
  _checked_ptr_1<int64_t> _ptr__2448_sparsity(_2448_sparsity ? _2448_sparsity->raw() : nullptr, _2448_sparsity ? _2448_sparsity->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__2450_basevar_nativeidxs(_2450_basevar_nativeidxs ? _2450_basevar_nativeidxs->raw() : nullptr, _2450_basevar_nativeidxs ? _2450_basevar_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2451_thisnidxs = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->basevar_nativeidxs;
  _checked_ptr_1<int64_t> _ptr__2451_thisnidxs(_2451_thisnidxs ? _2451_thisnidxs->raw() : nullptr,_2451_thisnidxs ? _2451_thisnidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2452_thissp = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity;
  _checked_ptr_1<int64_t> _ptr__2452_thissp(_2452_thissp ? _2452_thissp->raw() : nullptr,_2452_thissp ? _2452_thissp->size(0) : 0);
  if ((NULL == _2452_thissp.get()))
  {
    {
      int32_t _10073_ = (int)0;
      int32_t _10074_ = (int)((_2451_thisnidxs)->size(0));
      for (int32_t _2453_i = _10073_; _2453_i < _10074_; ++_2453_i)
      {
        {
          _ptr__2448_sparsity[safe_add( _2453_i,_2447_spoffset )] = _2453_i;
          _ptr__2450_basevar_nativeidxs[safe_add( _2453_i,_2449_nioffset )] = _ptr__2451_thisnidxs[_2453_i];
        }
      }
    }
  }
  else
  {
    {
      int32_t _10075_ = (int)0;
      int32_t _10076_ = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int32_t _2454_i = _10075_; _2454_i < _10076_; ++_2454_i)
      {
        {
          _ptr__2448_sparsity[safe_add( _2447_spoffset,_2454_i )] = _ptr__2452_thissp[_2454_i];
          _ptr__2450_basevar_nativeidxs[safe_add( _2454_i,_2449_nioffset )] = _ptr__2451_thisnidxs[_2454_i];
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->basevar_nativeidxs)->size(0));
}
// End mosek.fusion.BaseVariable.inst

// Begin mosek.fusion.BaseVariable.numInst
// Method mosek.fusion.BaseVariable.numInst @ src/fusion/BaseVariable.monty:181:6-183:7
int32_t mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }
int32_t mosek::fusion::p_BaseVariable::numInst()
{
  return (int)((basevar_nativeidxs)->size(0));
}
// End mosek.fusion.BaseVariable.numInst

// Begin mosek.fusion.BaseVariable.inst
// Method mosek.fusion.BaseVariable.inst @ src/fusion/BaseVariable.monty:165:6-179:7
void mosek::fusion::BaseVariable :: inst(int32_t _2455_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2456_nindex) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2455_offset,_2456_nindex); }
void mosek::fusion::p_BaseVariable::inst(int32_t _2455_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2456_nindex)
{
  _checked_ptr_1<int64_t> _ptr__2456_nindex(_2456_nindex ? _2456_nindex->raw() : nullptr, _2456_nindex ? _2456_nindex->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int32_t _10077_ = (int)0;
      int32_t _10078_ = (int)((basevar_nativeidxs)->size(0));
      for (int32_t _2457_i = _10077_; _2457_i < _10078_; ++_2457_i)
      {
        {
          _ptr__2456_nindex[safe_add( _2455_offset,_2457_i )] = ((*basevar_nativeidxs)(_2457_i));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2458_shape = _pubthis->getShape();
      _checked_ptr_1<int32_t> _ptr__2458_shape(_2458_shape ? _2458_shape->raw() : nullptr,_2458_shape ? _2458_shape->size(0) : 0);
      int32_t _2459_domsize = (int)1;
      int32_t _10079_ = (int)0;
      int32_t _10080_ = (int)((_2458_shape)->size(0));
      for (int32_t _2460_i = _10079_; _2460_i < _10080_; ++_2460_i)
      {
        {
          _2459_domsize *= _ptr__2458_shape[_2460_i];
        }
      }
      int32_t _10081_ = (int)0;
      int32_t _10082_ = _2459_domsize;
      for (int32_t _2461_i = _10081_; _2461_i < _10082_; ++_2461_i)
      {
        {
          _ptr__2456_nindex[safe_add( _2455_offset,_2461_i )] = (int)0;
        }
      }
      int32_t _10083_ = (int)0;
      int32_t _10084_ = (int)((sparsity)->size(0));
      for (int32_t _2462_i = _10083_; _2462_i < _10084_; ++_2462_i)
      {
        {
          _ptr__2456_nindex[safe_add( _2455_offset,((*sparsity)(_2462_i)) )] = ((*basevar_nativeidxs)(_2462_i));
        }
      }
    }
  }
}
// End mosek.fusion.BaseVariable.inst

// Begin mosek.fusion.BaseVariable.set_values
// Method mosek.fusion.BaseVariable.set_values @ src/fusion/BaseVariable.monty:147:6-163:7
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _2463_values,bool _2464_primal) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_2463_values,_2464_primal); }
void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _2463_values,bool _2464_primal)
{
  _checked_ptr_1<double> _ptr__2463_values(_2463_values ? _2463_values->raw() : nullptr, _2463_values ? _2463_values->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2464_primal,basevar_nativeidxs,_2463_values);
    }
  }
  else
  {
    {
      int32_t _2465_varsize = (int)1;
      int32_t _10085_ = (int)0;
      int32_t _10086_ = (int)((shape)->size(0));
      for (int32_t _2466_i = _10085_; _2466_i < _10086_; ++_2466_i)
      {
        {
          _2465_varsize *= ((*shape)(_2466_i));
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2467_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2465_varsize)));
      _checked_ptr_1<int64_t> _ptr__2467_idxs(_2467_idxs ? _2467_idxs->raw() : nullptr,_2467_idxs ? _2467_idxs->size(0) : 0);
      int32_t _10087_ = (int)0;
      int32_t _10088_ = (int)((basevar_nativeidxs)->size(0));
      for (int32_t _2468_i = _10087_; _2468_i < _10088_; ++_2468_i)
      {
        {
          _ptr__2467_idxs[((*sparsity)(_2468_i))] = ((*basevar_nativeidxs)(_2468_i));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2464_primal,_2467_idxs,_2463_values);
    }
  }
}
// End mosek.fusion.BaseVariable.set_values

// Begin mosek.fusion.BaseVariable.dual_lu
// Method mosek.fusion.BaseVariable.dual_lu @ src/fusion/BaseVariable.monty:131:6-144:7
void mosek::fusion::p_BaseVariable::dual_lu(int32_t _2469_offset,std::shared_ptr< monty::ndarray< double,1 > > _2470_target,bool _2471_lower)
{
  _checked_ptr_1<double> _ptr__2470_target(_2470_target ? _2470_target->raw() : nullptr, _2470_target ? _2470_target->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_2471_lower,basevar_nativeidxs,_2470_target,_2469_offset);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2472_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<int64_t> _ptr__2472_idxs(_2472_idxs ? _2472_idxs->raw() : nullptr,_2472_idxs ? _2472_idxs->size(0) : 0);
      int32_t _10089_ = (int)0;
      int32_t _10090_ = (int)((sparsity)->size(0));
      for (int32_t _2473_i = _10089_; _2473_i < _10090_; ++_2473_i)
      {
        {
          _ptr__2472_idxs[((*sparsity)(_2473_i))] = ((*basevar_nativeidxs)(_2473_i));
        }
      }
      model->getVariableDuals(_2471_lower,_2472_idxs,_2470_target,_2469_offset);
    }
  }
}
// End mosek.fusion.BaseVariable.dual_lu

// Begin mosek.fusion.BaseVariable.values
// Method mosek.fusion.BaseVariable.values @ src/fusion/BaseVariable.monty:116:6-129:7
void mosek::fusion::BaseVariable :: values(int32_t _2474_offset,std::shared_ptr< monty::ndarray< double,1 > > _2475_target,bool _2476_primal) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_2474_offset,_2475_target,_2476_primal); }
void mosek::fusion::p_BaseVariable::values(int32_t _2474_offset,std::shared_ptr< monty::ndarray< double,1 > > _2475_target,bool _2476_primal)
{
  _checked_ptr_1<double> _ptr__2475_target(_2475_target ? _2475_target->raw() : nullptr, _2475_target ? _2475_target->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_2476_primal,basevar_nativeidxs,_2475_target,_2474_offset);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2477_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<int64_t> _ptr__2477_idxs(_2477_idxs ? _2477_idxs->raw() : nullptr,_2477_idxs ? _2477_idxs->size(0) : 0);
      int32_t _10091_ = (int)0;
      int32_t _10092_ = (int)((sparsity)->size(0));
      for (int32_t _2478_i = _10091_; _2478_i < _10092_; ++_2478_i)
      {
        {
          _ptr__2477_idxs[((*sparsity)(_2478_i))] = ((*basevar_nativeidxs)(_2478_i));
        }
      }
      model->getVariableValues(_2476_primal,_2477_idxs,_2475_target,_2474_offset);
    }
  }
}
// End mosek.fusion.BaseVariable.values

// Begin mosek.fusion.BaseVariable.make_continuous
// Method mosek.fusion.BaseVariable.make_continuous @ src/fusion/BaseVariable.monty:114:6-89
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }
void mosek::fusion::p_BaseVariable::make_continuous()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(basevar_nativeidxs);
}
// End mosek.fusion.BaseVariable.make_continuous

// Begin mosek.fusion.BaseVariable.make_integer
// Method mosek.fusion.BaseVariable.make_integer @ src/fusion/BaseVariable.monty:113:6-83
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }
void mosek::fusion::p_BaseVariable::make_integer()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(basevar_nativeidxs);
}
// End mosek.fusion.BaseVariable.make_integer

void mosek::fusion::p_BaseVariable::destroy()
{
  sparsity.reset();
  basevar_nativeidxs.reset();
  model.reset();
  shape.reset();
}
void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }
// } class BaseVariable
// class Variable { // @ src/fusion/Variable.mbi:187:4-419:5
// Begin mosek.fusion.Variable.toString
// End mosek.fusion.Variable.toString

// Begin mosek.fusion.Variable.numInst
// End mosek.fusion.Variable.numInst

// Begin mosek.fusion.Variable.inst
// End mosek.fusion.Variable.inst

// Begin mosek.fusion.Variable.inst
// End mosek.fusion.Variable.inst

// Begin mosek.fusion.Variable.remove
// End mosek.fusion.Variable.remove

// Begin mosek.fusion.Variable.getND
// End mosek.fusion.Variable.getND

// Begin mosek.fusion.Variable.getShape
// End mosek.fusion.Variable.getShape

// Begin mosek.fusion.Variable.getModel
monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Variable::getModel() { return __mosek_2fusion_2Variable__getModel(); }
// End mosek.fusion.Variable.getModel

// Begin mosek.fusion.Variable.getSize
// End mosek.fusion.Variable.getSize

// Begin mosek.fusion.Variable.setLevel
// End mosek.fusion.Variable.setLevel

// Begin mosek.fusion.Variable.fromTril
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::fromTril(int32_t _2486_dim) { return __mosek_2fusion_2Variable__fromTril(_2486_dim); }
// End mosek.fusion.Variable.fromTril

// Begin mosek.fusion.Variable.tril
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::tril() { return __mosek_2fusion_2Variable__tril(); }
// End mosek.fusion.Variable.tril

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int32_t _2487_dim0,int32_t _2488_dim1,int32_t _2489_dim2) { return __mosek_2fusion_2Variable__reshape(_2487_dim0,_2488_dim1,_2489_dim2); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int32_t _2490_dim0,int32_t _2491_dim1) { return __mosek_2fusion_2Variable__reshape(_2490_dim0,_2491_dim1); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int32_t _2492_dim0) { return __mosek_2fusion_2Variable__reshape(_2492_dim0); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2493_shape) { return __mosek_2fusion_2Variable__reshape(_2493_shape); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.set_values
// End mosek.fusion.Variable.set_values

// Begin mosek.fusion.Variable.dual
// End mosek.fusion.Variable.dual

// Begin mosek.fusion.Variable.level
// End mosek.fusion.Variable.level

// Begin mosek.fusion.Variable.values
// End mosek.fusion.Variable.values

// Begin mosek.fusion.Variable.make_continuous
// End mosek.fusion.Variable.make_continuous

// Begin mosek.fusion.Variable.make_integer
// End mosek.fusion.Variable.make_integer

// Begin mosek.fusion.Variable.makeContinuous
// End mosek.fusion.Variable.makeContinuous

// Begin mosek.fusion.Variable.makeInteger
// End mosek.fusion.Variable.makeInteger

// Begin mosek.fusion.Variable.transpose
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
// End mosek.fusion.Variable.transpose

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2499_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2500_i2,std::shared_ptr< monty::ndarray< int32_t,1 > > _2501_i3) { return __mosek_2fusion_2Variable__pick(_2499_i1,_2500_i2,_2501_i3); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2502_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2503_i2) { return __mosek_2fusion_2Variable__pick(_2502_i1,_2503_i2); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2504_midxs) { return __mosek_2fusion_2Variable__pick(_2504_midxs); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2504_midxs) { return __mosek_2fusion_2Variable__pick(_2504_midxs); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2505_idxs) { return __mosek_2fusion_2Variable__pick(_2505_idxs); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2505_idxs) { return __mosek_2fusion_2Variable__pick(_2505_idxs); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.antidiag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
// End mosek.fusion.Variable.antidiag

// Begin mosek.fusion.Variable.antidiag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int32_t _2506_index) { return __mosek_2fusion_2Variable__antidiag(_2506_index); }
// End mosek.fusion.Variable.antidiag

// Begin mosek.fusion.Variable.diag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
// End mosek.fusion.Variable.diag

// Begin mosek.fusion.Variable.diag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int32_t _2507_index) { return __mosek_2fusion_2Variable__diag(_2507_index); }
// End mosek.fusion.Variable.diag

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2508_idx) { return __mosek_2fusion_2Variable__index(_2508_idx); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2508_idx) { return __mosek_2fusion_2Variable__index(_2508_idx); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int32_t _2509_i1,int32_t _2510_i2,int32_t _2511_i3) { return __mosek_2fusion_2Variable__index(_2509_i1,_2510_i2,_2511_i3); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int32_t _2512_i1,int32_t _2513_i2) { return __mosek_2fusion_2Variable__index(_2512_i1,_2513_i2); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int32_t _2514_i1) { return __mosek_2fusion_2Variable__index(_2514_i1); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int32_t _2514_i1) { return __mosek_2fusion_2Variable__index(_2514_i1); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2515_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2516_lasta) { return __mosek_2fusion_2Variable__slice(_2515_firsta,_2516_lasta); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2515_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2516_lasta) { return __mosek_2fusion_2Variable__slice(_2515_firsta,_2516_lasta); }
// End mosek.fusion.Variable.slice

// Begin mosek.fusion.Variable.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int32_t _2517_first,int32_t _2518_last) { return __mosek_2fusion_2Variable__slice(_2517_first,_2518_last); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int32_t _2517_first,int32_t _2518_last) { return __mosek_2fusion_2Variable__slice(_2517_first,_2518_last); }
// End mosek.fusion.Variable.slice

// Begin mosek.fusion.Variable.asExpr
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
// End mosek.fusion.Variable.asExpr

// } class Variable
// class Var { // @ src/fusion/Var.monty:144:4-814:5
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Var::p_Var
  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Var.empty
// Method mosek.fusion.Var.empty @ src/fusion/Var.monty:808:6-813:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _2519_shape) { return mosek::fusion::p_Var::empty(_2519_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int32_t,1 > > _2519_shape)
{
  _checked_ptr_1<int32_t> _ptr__2519_shape(_2519_shape ? _2519_shape->raw() : nullptr, _2519_shape ? _2519_shape->size(0) : 0);
  int32_t _10093_ = (int)0;
  int32_t _10094_ = (int)((_2519_shape)->size(0));
  for (int32_t _2520_i = _10093_; _2520_i < _10094_; ++_2520_i)
  {
    {
      if ((_ptr__2519_shape[_2520_i] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_2519_shape)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Var.empty

// Begin mosek.fusion.Var.compress
// Method mosek.fusion.Var.compress @ src/fusion/Var.monty:782:6-800:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2521_v) { return mosek::fusion::p_Var::compress(_2521_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _2521_v)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2522_shape = _2521_v->getShape();
  _checked_ptr_1<int32_t> _ptr__2522_shape(_2522_shape ? _2522_shape->raw() : nullptr,_2522_shape ? _2522_shape->size(0) : 0);
  int32_t _2523_nd = (int)((_2522_shape)->size(0));
  int32_t _2524_realnd = (int)0;
  int32_t _10095_ = (int)0;
  int32_t _10096_ = _2523_nd;
  for (int32_t _2525_i = _10095_; _2525_i < _10096_; ++_2525_i)
  {
    {
      if ((_ptr__2522_shape[_2525_i] != (int)1))
      {
        {
          ++ _2524_realnd;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2526_realshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2524_realnd)));
  _checked_ptr_1<int32_t> _ptr__2526_realshape(_2526_realshape ? _2526_realshape->raw() : nullptr,_2526_realshape ? _2526_realshape->size(0) : 0);
  {
    int32_t _2527_k = (int)0;
    int32_t _10097_ = (int)0;
    int32_t _10098_ = _2523_nd;
    for (int32_t _2528_i = _10097_; _2528_i < _10098_; ++_2528_i)
    {
      {
        if ((_ptr__2522_shape[_2528_i] != (int)1))
        {
          {
            _ptr__2526_realshape[_2527_k] = _ptr__2522_shape[_2528_i];
            ++ _2527_k;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_2521_v,_2526_realshape);
}
// End mosek.fusion.Var.compress

// Begin mosek.fusion.Var.reshape
// Method mosek.fusion.Var.reshape @ src/fusion/Var.monty:765:6-768:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2529_v,
    int32_t _2530_d1) { return mosek::fusion::p_Var::reshape(_2529_v,_2530_d1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2529_v,int32_t _2530_d1)
{
  return ::mosek::fusion::p_Var::reshape(_2529_v,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2530_d1)}));
}
// End mosek.fusion.Var.reshape

// Begin mosek.fusion.Var.reshape
// Method mosek.fusion.Var.reshape @ src/fusion/Var.monty:751:6-754:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2531_v,
    int32_t _2532_d1,
    int32_t _2533_d2) { return mosek::fusion::p_Var::reshape(_2531_v,_2532_d1,_2533_d2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2531_v,int32_t _2532_d1,int32_t _2533_d2)
{
  return ::mosek::fusion::p_Var::reshape(_2531_v,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2532_d1),(int32_t)(_2533_d2)}));
}
// End mosek.fusion.Var.reshape

// Begin mosek.fusion.Var.flatten
// Method mosek.fusion.Var.flatten @ src/fusion/Var.monty:738:6-741:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2534_v) { return mosek::fusion::p_Var::flatten(_2534_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _2534_v)
{
  return ::mosek::fusion::p_Var::reshape(_2534_v,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int32_t)::mosek::fusion::p_Set::size(_2534_v->getShape()))}));
}
// End mosek.fusion.Var.flatten

// Begin mosek.fusion.Var.reshape
// Method mosek.fusion.Var.reshape @ src/fusion/Var.monty:707:6-709:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2535_v,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2536_shape) { return mosek::fusion::p_Var::reshape(_2535_v,_2536_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2535_v,std::shared_ptr< monty::ndarray< int32_t,1 > > _2536_shape)
{
  _checked_ptr_1<int32_t> _ptr__2536_shape(_2536_shape ? _2536_shape->raw() : nullptr, _2536_shape ? _2536_shape->size(0) : 0);
  return _2535_v->__mosek_2fusion_2Variable__reshape(_2536_shape);
}
// End mosek.fusion.Var.reshape

// Begin mosek.fusion.Var.index_permute_
// Method mosek.fusion.Var.index_permute_ @ src/fusion/Var.monty:619:6-672:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _2537_v,std::shared_ptr< monty::ndarray< int32_t,1 > > _2538_perm)
{
  _checked_ptr_1<int32_t> _ptr__2538_perm(_2538_perm ? _2538_perm->raw() : nullptr, _2538_perm ? _2538_perm->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2539_sparsity;
  _checked_ptr_1<int64_t> _ptr__2539_sparsity(_2539_sparsity ? _2539_sparsity->raw() : nullptr,_2539_sparsity ? _2539_sparsity->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2540_nativeidxs;
  _checked_ptr_1<int64_t> _ptr__2540_nativeidxs(_2540_nativeidxs ? _2540_nativeidxs->raw() : nullptr,_2540_nativeidxs ? _2540_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2541_shape = _2537_v->getShape();
  _checked_ptr_1<int32_t> _ptr__2541_shape(_2541_shape ? _2541_shape->raw() : nullptr,_2541_shape ? _2541_shape->size(0) : 0);
  int32_t _2542_nd = (int)((_2541_shape)->size(0));
  int32_t _2543_shapesize = (int)1;
  int32_t _10099_ = (int)0;
  int32_t _10100_ = _2542_nd;
  for (int32_t _2544_i = _10099_; _2544_i < _10100_; ++_2544_i)
  {
    {
      _2543_shapesize *= _ptr__2541_shape[_2544_i];
    }
  }
  int32_t _2545_nnz = _2537_v->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2546_pstrides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2542_nd)));
  _checked_ptr_1<int64_t> _ptr__2546_pstrides(_2546_pstrides ? _2546_pstrides->raw() : nullptr,_2546_pstrides ? _2546_pstrides->size(0) : 0);
  _ptr__2546_pstrides[(_2542_nd - (int)1)] = (int)1;
  int32_t _10101_ = (int)1;
  int32_t _10102_ = _2542_nd;
  for (int32_t _2547_i = _10101_; _2547_i < _10102_; ++_2547_i)
  {
    {
      _ptr__2546_pstrides[((_2542_nd - _2547_i) - (int)1)] = safe_mul( _ptr__2546_pstrides[(_2542_nd - _2547_i)],_ptr__2541_shape[_ptr__2538_perm[(_2542_nd - _2547_i)]] );
    }
  }
  if ((_2545_nnz < _2543_shapesize))
  {
    {
      _2539_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2545_nnz)));
      _ptr__2539_sparsity.update(_2539_sparsity ? _2539_sparsity->raw() : nullptr, _2539_sparsity ? _2539_sparsity->size(0) : 0);
      _2540_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2545_nnz)));
      _ptr__2540_nativeidxs.update(_2540_nativeidxs ? _2540_nativeidxs->raw() : nullptr, _2540_nativeidxs ? _2540_nativeidxs->size(0) : 0);
      _2537_v->inst((int)0,_2539_sparsity,(int)0,_2540_nativeidxs);
    }
  }
  else
  {
    {
      _2539_sparsity = nullptr;
      _ptr__2539_sparsity.update(_2539_sparsity ? _2539_sparsity->raw() : nullptr, _2539_sparsity ? _2539_sparsity->size(0) : 0);
      _2540_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2545_nnz)));
      _ptr__2540_nativeidxs.update(_2540_nativeidxs ? _2540_nativeidxs->raw() : nullptr, _2540_nativeidxs ? _2540_nativeidxs->size(0) : 0);
      _2537_v->inst((int)0,_2540_nativeidxs);
    }
  }
  if ((NULL == _2539_sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2548_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2545_nnz)));
      _checked_ptr_1<int64_t> _ptr__2548_residxs(_2548_residxs ? _2548_residxs->raw() : nullptr,_2548_residxs ? _2548_residxs->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _2549_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2542_nd)));
        _checked_ptr_1<int32_t> _ptr__2549_ii(_2549_ii ? _2549_ii->raw() : nullptr,_2549_ii ? _2549_ii->size(0) : 0);
        int32_t _10103_ = (int)0;
        int32_t _10104_ = _2545_nnz;
        for (int32_t _2550_i = _10103_; _2550_i < _10104_; ++_2550_i)
        {
          {
            int32_t _2551_rem = _2550_i;
            int32_t _10105_ = (int)0;
            int32_t _10106_ = _2542_nd;
            for (int32_t _2552_j = _10105_; _2552_j < _10106_; ++_2552_j)
            {
              {
                _ptr__2549_ii[((_2542_nd - _2550_i) - (int)1)] = (_2551_rem % _ptr__2541_shape[((_2542_nd - _2550_i) - (int)1)]);
                _2551_rem /= _ptr__2541_shape[((_2542_nd - _2550_i) - (int)1)];
              }
            }
            int32_t _2553_newi = (int)0;
            int32_t _10107_ = (int)0;
            int32_t _10108_ = _2542_nd;
            for (int32_t _2554_j = _10107_; _2554_j < _10108_; ++_2554_j)
            {
              {
                _2553_newi += (int32_t)safe_mul( _ptr__2549_ii[_ptr__2538_perm[_2554_j]],_ptr__2546_pstrides[_2554_j] );
              }
            }
            _ptr__2548_residxs[_2553_newi] = _ptr__2540_nativeidxs[_2550_i];
          }
        }
      }
      _2540_nativeidxs = _2548_residxs;
      _ptr__2540_nativeidxs.update(_2540_nativeidxs ? _2540_nativeidxs->raw() : nullptr, _2540_nativeidxs ? _2540_nativeidxs->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2555_ressp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2545_nnz)));
      _checked_ptr_1<int64_t> _ptr__2555_ressp(_2555_ressp ? _2555_ressp->raw() : nullptr,_2555_ressp ? _2555_ressp->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _2556_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2542_nd)));
        _checked_ptr_1<int32_t> _ptr__2556_ii(_2556_ii ? _2556_ii->raw() : nullptr,_2556_ii ? _2556_ii->size(0) : 0);
        int32_t _10109_ = (int)0;
        int32_t _10110_ = _2545_nnz;
        for (int32_t _2557_i = _10109_; _2557_i < _10110_; ++_2557_i)
        {
          {
            int32_t _2558_rem = _2557_i;
            int32_t _10111_ = (int)0;
            int32_t _10112_ = _2542_nd;
            for (int32_t _2559_j = _10111_; _2559_j < _10112_; ++_2559_j)
            {
              {
                _ptr__2556_ii[((_2542_nd - _2557_i) - (int)1)] = (_2558_rem % _ptr__2541_shape[((_2542_nd - _2557_i) - (int)1)]);
                _2558_rem /= _ptr__2541_shape[((_2542_nd - _2557_i) - (int)1)];
              }
            }
            int32_t _2560_newi = (int)0;
            int32_t _10113_ = (int)0;
            int32_t _10114_ = _2542_nd;
            for (int32_t _2561_j = _10113_; _2561_j < _10114_; ++_2561_j)
            {
              {
                _2560_newi += (int32_t)safe_mul( _ptr__2556_ii[_ptr__2538_perm[_2561_j]],_ptr__2546_pstrides[_2561_j] );
              }
            }
            _ptr__2555_ressp[_2557_i] = _2560_newi;
          }
        }
      }
      std::vector<int64_t> _10115_;
      for (int32_t _2563_i = (int)0, _10116_ = _2545_nnz; _2563_i < _10116_ ; ++_2563_i)
      {
        _10115_.push_back(_2563_i);
      }
      auto _10117_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10115_.size()),_10115_.begin(),_10115_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2562_spperm = _10117_;
      _checked_ptr_1<int64_t> _ptr__2562_spperm(_2562_spperm ? _2562_spperm->raw() : nullptr,_2562_spperm ? _2562_spperm->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2562_spperm,_2555_ressp,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2545_nnz));
      std::vector<int64_t> _10118_;
      for (int32_t _2564_i = (int)0, _10119_ = _2545_nnz; _2564_i < _10119_ ; ++_2564_i)
      {
        _10118_.push_back(_ptr__2539_sparsity[_ptr__2562_spperm[_2564_i]]);
      }
      auto _10120_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10118_.size()),_10118_.begin(),_10118_.end()));
      _2539_sparsity = _10120_;
      _ptr__2539_sparsity.update(_2539_sparsity ? _2539_sparsity->raw() : nullptr, _2539_sparsity ? _2539_sparsity->size(0) : 0);
      std::vector<int64_t> _10121_;
      for (int32_t _2565_i = (int)0, _10122_ = _2545_nnz; _2565_i < _10122_ ; ++_2565_i)
      {
        _10121_.push_back(_ptr__2540_nativeidxs[_ptr__2562_spperm[_2565_i]]);
      }
      auto _10123_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10121_.size()),_10121_.begin(),_10121_.end()));
      _2540_nativeidxs = _10123_;
      _ptr__2540_nativeidxs.update(_2540_nativeidxs ? _2540_nativeidxs->raw() : nullptr, _2540_nativeidxs ? _2540_nativeidxs->size(0) : 0);
    }
  }
  std::vector<int32_t> _10124_;
  for (int32_t _2566_i = (int)0, _10125_ = _2542_nd; _2566_i < _10125_ ; ++_2566_i)
  {
    _10124_.push_back(_ptr__2541_shape[_ptr__2538_perm[_2566_i]]);
  }
  auto _10126_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10124_.size()),_10124_.begin(),_10124_.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2537_v->__mosek_2fusion_2Variable__getModel(),_10126_,_2539_sparsity,_2540_nativeidxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Var.index_permute_

// Begin mosek.fusion.Var.hrepeat
// Method mosek.fusion.Var.hrepeat @ src/fusion/Var.monty:611:6-108
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2567_v,
    int32_t _2568_n) { return mosek::fusion::p_Var::hrepeat(_2567_v,_2568_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2567_v,int32_t _2568_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2567_v,(int)1,_2568_n);
}
// End mosek.fusion.Var.hrepeat

// Begin mosek.fusion.Var.vrepeat
// Method mosek.fusion.Var.vrepeat @ src/fusion/Var.monty:610:6-108
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2569_v,
    int32_t _2570_n) { return mosek::fusion::p_Var::vrepeat(_2569_v,_2570_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2569_v,int32_t _2570_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2569_v,(int)0,_2570_n);
}
// End mosek.fusion.Var.vrepeat

// Begin mosek.fusion.Var.repeat
// Method mosek.fusion.Var.repeat @ src/fusion/Var.monty:609:6-108
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2571_v,
    int32_t _2572_n) { return mosek::fusion::p_Var::repeat(_2571_v,_2572_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2571_v,int32_t _2572_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2571_v,(int)0,_2572_n);
}
// End mosek.fusion.Var.repeat

// Begin mosek.fusion.Var.repeat
// Method mosek.fusion.Var.repeat @ src/fusion/Var.monty:608:6-108
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2573_v,
    int32_t _2574_dim,
    int32_t _2575_n) { return mosek::fusion::p_Var::repeat(_2573_v,_2574_dim,_2575_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2573_v,int32_t _2574_dim,int32_t _2575_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2573_v,_2574_dim,_2575_n);
}
// End mosek.fusion.Var.repeat

// Begin mosek.fusion.Var.drepeat
// Method mosek.fusion.Var.drepeat @ src/fusion/Var.monty:472:6-606:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2576_v,int32_t _2577_dim,int32_t _2578_n)
{
  if ((_2578_n < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_2578_n == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((_2578_n == (int)1))
  {
    {
      return _2576_v;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _2579_model = _2576_v->__mosek_2fusion_2Variable__getModel();
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2580_shape = _2576_v->getShape();
      _checked_ptr_1<int32_t> _ptr__2580_shape(_2580_shape ? _2580_shape->raw() : nullptr,_2580_shape ? _2580_shape->size(0) : 0);
      int32_t _2581_nd = (int)((_2580_shape)->size(0));
      if (((_2577_dim < (int)0) || (_2577_dim > _2581_nd)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int64_t _2582_domsize = ::mosek::fusion::p_Set::size(_2580_shape);
      int32_t _2583_nnz = _2576_v->numInst();
      int32_t _2584_rnnz = safe_mul( _2583_nnz,_2578_n );
      int32_t _2585_d0 = (int)1;
      int32_t _10127_ = (int)0;
      int32_t _10128_ = _2577_dim;
      for (int32_t _2586_i = _10127_; _2586_i < _10128_; ++_2586_i)
      {
        {
          _2585_d0 *= _ptr__2580_shape[_2586_i];
        }
      }
      int32_t _10129_;
      bool _10130_ = (_2577_dim < _2581_nd);
      if (_10130_)
      {
        _10129_ = _ptr__2580_shape[_2577_dim];
      }
      else
      {
        _10129_ = (int)1;
      }
      int32_t _2587_d1 = _10129_;
      int32_t _2588_nd1 = safe_mul( _2587_d1,_2578_n );
      int32_t _2589_d2 = (int)1;
      int32_t _10131_ = safe_add( _2577_dim,(int)1 );
      int32_t _10132_ = _2581_nd;
      for (int32_t _2590_i = _10131_; _2590_i < _10132_; ++_2590_i)
      {
        {
          _2589_d2 *= _ptr__2580_shape[_2590_i];
        }
      }
      int32_t _10133_;
      bool _10134_ = (_2577_dim < _2581_nd);
      if (_10134_)
      {
        _10133_ = _2581_nd;
      }
      else
      {
        _10133_ = safe_add( _2577_dim,(int)1 );
      }
      int32_t _2591_rnd = _10133_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2592_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2591_rnd)));
      _checked_ptr_1<int32_t> _ptr__2592_rshape(_2592_rshape ? _2592_rshape->raw() : nullptr,_2592_rshape ? _2592_rshape->size(0) : 0);
      int32_t _10135_ = (int)0;
      int32_t _10136_ = _2581_nd;
      for (int32_t _2593_i = _10135_; _2593_i < _10136_; ++_2593_i)
      {
        {
          _ptr__2592_rshape[_2593_i] = _ptr__2580_shape[_2593_i];
        }
      }
      int32_t _10137_ = _2581_nd;
      int32_t _10138_ = _2591_rnd;
      for (int32_t _2594_i = _10137_; _2594_i < _10138_; ++_2594_i)
      {
        {
          _ptr__2592_rshape[_2594_i] = (int)1;
        }
      }
      _ptr__2592_rshape[_2577_dim] = _2588_nd1;
      if ((_2583_nnz < _2582_domsize))
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2595_tnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2583_nnz)));
          _checked_ptr_1<int64_t> _ptr__2595_tnativeidxs(_2595_tnativeidxs ? _2595_tnativeidxs->raw() : nullptr,_2595_tnativeidxs ? _2595_tnativeidxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2596_tsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2583_nnz)));
          _checked_ptr_1<int64_t> _ptr__2596_tsp(_2596_tsp ? _2596_tsp->raw() : nullptr,_2596_tsp ? _2596_tsp->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2597_rnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2584_rnnz)));
          _checked_ptr_1<int64_t> _ptr__2597_rnativeidxs(_2597_rnativeidxs ? _2597_rnativeidxs->raw() : nullptr,_2597_rnativeidxs ? _2597_rnativeidxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2598_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2584_rnnz)));
          _checked_ptr_1<int64_t> _ptr__2598_rsp(_2598_rsp ? _2598_rsp->raw() : nullptr,_2598_rsp ? _2598_rsp->size(0) : 0);
          _2576_v->inst((int)0,_2596_tsp,(int)0,_2595_tnativeidxs);
          {
            int32_t _2599_ns0 = safe_mul( _2588_nd1,_2589_d2 );
            int32_t _2600_s0 = safe_mul( _2587_d1,_2589_d2 );
            int32_t _2601_s1 = _2589_d2;
            if ((_2577_dim == (int)0))
            {
              {
                int32_t _2602_k = (int)0;
                int32_t _10139_ = (int)0;
                int32_t _10140_ = _2578_n;
                for (int32_t _2603_i = _10139_; _2603_i < _10140_; ++_2603_i)
                {
                  {
                    int32_t _10141_ = (int)0;
                    int32_t _10142_ = _2583_nnz;
                    for (int32_t _2604_j = _10141_; _2604_j < _10142_; ++_2604_j)
                    {
                      {
                        _ptr__2598_rsp[_2602_k] = safe_add( _ptr__2596_tsp[_2604_j],safe_mul( _2603_i,_2582_domsize ) );
                        _ptr__2597_rnativeidxs[_2602_k] = _ptr__2595_tnativeidxs[_2604_j];
                        ++ _2602_k;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2579_model,_2592_rshape,_2598_rsp,_2597_rnativeidxs)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_2577_dim >= _2581_nd))
            {
              {
                int32_t _2605_k = (int)0;
                int32_t _10143_ = (int)0;
                int32_t _10144_ = _2583_nnz;
                for (int32_t _2606_j = _10143_; _2606_j < _10144_; ++_2606_j)
                {
                  {
                    int32_t _10145_ = (int)0;
                    int32_t _10146_ = _2578_n;
                    for (int32_t _2607_i = _10145_; _2607_i < _10146_; ++_2607_i)
                    {
                      {
                        _ptr__2598_rsp[_2605_k] = safe_add( safe_mul( _ptr__2596_tsp[_2606_j],_2578_n ),_2607_i );
                        _ptr__2597_rnativeidxs[_2605_k] = _ptr__2595_tnativeidxs[_2606_j];
                        ++ _2605_k;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2579_model,_2592_rshape,_2598_rsp,_2597_rnativeidxs)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int32_t _2608_k = (int)0;
                int32_t _10147_ = (int)0;
                int32_t _10148_ = _2583_nnz;
                for (int32_t _2609_i = _10147_; _2609_i < _10148_; ++_2609_i)
                {
                  {
                    int64_t _2610_i0 = (_ptr__2596_tsp[_2609_i] / _2600_s0);
                    int64_t _2611_i1 = ((_ptr__2596_tsp[_2609_i] / _2601_s1) % _2587_d1);
                    int64_t _2612_i2 = (_ptr__2596_tsp[_2609_i] % _2589_d2);
                    int32_t _10149_ = (int)0;
                    int32_t _10150_ = _2578_n;
                    for (int32_t _2613_j = _10149_; _2613_j < _10150_; ++_2613_j)
                    {
                      {
                        _ptr__2598_rsp[_2608_k] = safe_add( safe_add( safe_mul( _2610_i0,_2599_ns0 ),safe_mul( safe_add( _2611_i1,safe_mul( _2587_d1,_2613_j ) ),_2589_d2 ) ),_2612_i2 );
                        _ptr__2597_rnativeidxs[_2608_k] = _ptr__2595_tnativeidxs[_2609_i];
                        ++ _2608_k;
                      }
                    }
                  }
                }
                int32_t _2614_maxdim = (int)1;
                int32_t _10151_ = (int)0;
                int32_t _10152_ = _2591_rnd;
                for (int32_t _2615_i = _10151_; _2615_i < _10152_; ++_2615_i)
                {
                  {
                    if ((_2614_maxdim < _ptr__2592_rshape[_2615_i]))
                    {
                      {
                        _2614_maxdim = _ptr__2592_rshape[_2615_i];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int32_t,1 > > _2616_curperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2584_rnnz)));
                _checked_ptr_1<int32_t> _ptr__2616_curperm(_2616_curperm ? _2616_curperm->raw() : nullptr,_2616_curperm ? _2616_curperm->size(0) : 0);
                std::shared_ptr< monty::ndarray< int32_t,1 > > _2617_tgtperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2584_rnnz)));
                _checked_ptr_1<int32_t> _ptr__2617_tgtperm(_2617_tgtperm ? _2617_tgtperm->raw() : nullptr,_2617_tgtperm ? _2617_tgtperm->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int32_t,1 > > _2618_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _2614_maxdim,(int)1 ))));
                  _checked_ptr_1<int32_t> _ptr__2618_ptr(_2618_ptr ? _2618_ptr->raw() : nullptr,_2618_ptr ? _2618_ptr->size(0) : 0);
                  std::shared_ptr< monty::ndarray< int64_t,1 > > _2619_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2591_rnd)));
                  _checked_ptr_1<int64_t> _ptr__2619_s(_2619_s ? _2619_s->raw() : nullptr,_2619_s ? _2619_s->size(0) : 0);
                  _ptr__2619_s[(_2591_rnd - (int)1)] = (int)1;
                  int32_t _10153_ = (int)1;
                  int32_t _10154_ = _2591_rnd;
                  for (int32_t _2620_i = _10153_; _2620_i < _10154_; ++_2620_i)
                  {
                    {
                      _ptr__2619_s[((_2591_rnd - _2620_i) - (int)1)] = safe_mul( _ptr__2619_s[(_2591_rnd - _2620_i)],_ptr__2592_rshape[(_2591_rnd - _2620_i)] );
                    }
                  }
                  int32_t _10155_ = (int)0;
                  int32_t _10156_ = _2584_rnnz;
                  for (int32_t _2621_i = _10155_; _2621_i < _10156_; ++_2621_i)
                  {
                    {
                      _ptr__2616_curperm[_2621_i] = _2621_i;
                    }
                  }
                  int32_t _10157_ = (int)0;
                  int32_t _10158_ = _2591_rnd;
                  for (int32_t _2622_ii = _10157_; _2622_ii < _10158_; ++_2622_ii)
                  {
                    {
                      int32_t _2623_i = ((_2591_rnd - _2622_ii) - (int)1);
                      int32_t _10159_ = (int)0;
                      int32_t _10160_ = safe_add( _ptr__2592_rshape[_2623_i],(int)1 );
                      for (int32_t _2624_j = _10159_; _2624_j < _10160_; ++_2624_j)
                      {
                        {
                          _ptr__2618_ptr[_2624_j] = (int)0;
                        }
                      }
                      int32_t _10161_ = (int)0;
                      int32_t _10162_ = _2584_rnnz;
                      for (int32_t _2625_j = _10161_; _2625_j < _10162_; ++_2625_j)
                      {
                        {
                          ++ _ptr__2618_ptr[safe_add( ((_ptr__2598_rsp[_2625_j] / _ptr__2619_s[_2623_i]) % _ptr__2592_rshape[_2623_i]),(int)1 )];
                        }
                      }
                      int32_t _10163_ = (int)0;
                      int32_t _10164_ = _ptr__2592_rshape[_2623_i];
                      for (int32_t _2626_j = _10163_; _2626_j < _10164_; ++_2626_j)
                      {
                        {
                          _ptr__2618_ptr[safe_add( _2626_j,(int)1 )] += _ptr__2618_ptr[_2626_j];
                        }
                      }
                      int32_t _10165_ = (int)0;
                      int32_t _10166_ = _2584_rnnz;
                      for (int32_t _2627_jj = _10165_; _2627_jj < _10166_; ++_2627_jj)
                      {
                        {
                          int32_t _2628_j = _ptr__2616_curperm[_2627_jj];
                          int64_t _2629_idx = ((_ptr__2598_rsp[_2628_j] / _ptr__2619_s[_2623_i]) % _ptr__2592_rshape[_2623_i]);
                          _ptr__2617_tgtperm[_ptr__2618_ptr[_2629_idx]] = _2628_j;
                          ++ _ptr__2618_ptr[_2629_idx];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int32_t,1 > > _2630_tmp = _2616_curperm;
                      _checked_ptr_1<int32_t> _ptr__2630_tmp(_2630_tmp ? _2630_tmp->raw() : nullptr,_2630_tmp ? _2630_tmp->size(0) : 0);
                      _2616_curperm = _2617_tgtperm;
                      _ptr__2616_curperm.update(_2616_curperm ? _2616_curperm->raw() : nullptr, _2616_curperm ? _2616_curperm->size(0) : 0);
                      _2617_tgtperm = _2630_tmp;
                      _ptr__2617_tgtperm.update(_2617_tgtperm ? _2617_tgtperm->raw() : nullptr, _2617_tgtperm ? _2617_tgtperm->size(0) : 0);
                    }
                  }
                }
                std::vector<int64_t> _10167_;
                for (int32_t _2631_i = (int)0, _10168_ = _2584_rnnz; _2631_i < _10168_ ; ++_2631_i)
                {
                  _10167_.push_back(_ptr__2598_rsp[_ptr__2616_curperm[_2631_i]]);
                }
                auto _10169_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10167_.size()),_10167_.begin(),_10167_.end()));
                std::vector<int64_t> _10170_;
                for (int32_t _2632_i = (int)0, _10171_ = _2584_rnnz; _2632_i < _10171_ ; ++_2632_i)
                {
                  _10170_.push_back(_ptr__2597_rnativeidxs[_ptr__2616_curperm[_2632_i]]);
                }
                auto _10172_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10170_.size()),_10170_.begin(),_10170_.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2579_model,_2592_rshape,_10169_,_10172_)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2633_tnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2583_nnz)));
          _checked_ptr_1<int64_t> _ptr__2633_tnativeidxs(_2633_tnativeidxs ? _2633_tnativeidxs->raw() : nullptr,_2633_tnativeidxs ? _2633_tnativeidxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2634_rnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( _2583_nnz,_2578_n ))));
          _checked_ptr_1<int64_t> _ptr__2634_rnativeidxs(_2634_rnativeidxs ? _2634_rnativeidxs->raw() : nullptr,_2634_rnativeidxs ? _2634_rnativeidxs->size(0) : 0);
          _2576_v->inst((int)0,_2633_tnativeidxs);
          int32_t _2635_s0 = safe_mul( _2588_nd1,_2589_d2 );
          int32_t _2636_s1 = _2589_d2;
          int32_t _2637_k = (int)0;
          int32_t _10173_ = (int)0;
          int32_t _10174_ = _2585_d0;
          for (int32_t _2638_i0 = _10173_; _2638_i0 < _10174_; ++_2638_i0)
          {
            {
              int32_t _10175_ = (int)0;
              int32_t _10176_ = _2587_d1;
              for (int32_t _2639_i1 = _10175_; _2639_i1 < _10176_; ++_2639_i1)
              {
                {
                  int32_t _10177_ = (int)0;
                  int32_t _10178_ = _2589_d2;
                  for (int32_t _2640_i2 = _10177_; _2640_i2 < _10178_; ++_2640_i2)
                  {
                    {
                      int32_t _10179_ = (int)0;
                      int32_t _10180_ = _2578_n;
                      for (int32_t _2641_j = _10179_; _2641_j < _10180_; ++_2641_j)
                      {
                        {
                          _ptr__2634_rnativeidxs[safe_add( safe_add( safe_mul( _2638_i0,_2635_s0 ),safe_mul( safe_add( _2639_i1,safe_mul( _2641_j,_2587_d1 ) ),_2636_s1 ) ),_2640_i2 )] = _ptr__2633_tnativeidxs[_2637_k];
                        }
                      }
                      ++ _2637_k;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2579_model,_2592_rshape,nullptr,_2634_rnativeidxs)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
// End mosek.fusion.Var.drepeat

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:450:6-454:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2642_vlist) { return mosek::fusion::p_Var::stack(_2642_vlist); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2642_vlist)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _10181_;
  for (int32_t _2643_i = (int)0, _10182_ = (int)((_2642_vlist)->size(0)); _2643_i < _10182_ ; ++_2643_i)
  {
    _10181_.push_back(::mosek::fusion::p_Var::dstack(((*_2642_vlist)(_2643_i)),(int)1));
  }
  auto _10183_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_10181_.size()),_10181_.begin(),_10181_.end()));
  return ::mosek::fusion::p_Var::dstack(_10183_,(int)0);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.vstack
// Method mosek.fusion.Var.vstack @ src/fusion/Var.monty:414:6-420:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2644_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2645_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2646_v3) { return mosek::fusion::p_Var::vstack(_2644_v1,_2645_v2,_2646_v3); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2644_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2645_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2646_v3)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2644_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2645_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2646_v3.get())}),(int)0);
}
// End mosek.fusion.Var.vstack

// Begin mosek.fusion.Var.vstack
// Method mosek.fusion.Var.vstack @ src/fusion/Var.monty:396:6-401:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2647_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2648_v2) { return mosek::fusion::p_Var::vstack(_2647_v1,_2648_v2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2647_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2648_v2)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2647_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2648_v2.get())}),(int)0);
}
// End mosek.fusion.Var.vstack

// Begin mosek.fusion.Var.vstack
// Method mosek.fusion.Var.vstack @ src/fusion/Var.monty:377:6-381:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2649_v) { return mosek::fusion::p_Var::vstack(_2649_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2649_v)
{
  return ::mosek::fusion::p_Var::dstack(_2649_v,(int)0);
}
// End mosek.fusion.Var.vstack

// Begin mosek.fusion.Var.hstack
// Method mosek.fusion.Var.hstack @ src/fusion/Var.monty:357:6-363:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2650_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2651_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2652_v3) { return mosek::fusion::p_Var::hstack(_2650_v1,_2651_v2,_2652_v3); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2650_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2651_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2652_v3)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2650_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2651_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2652_v3.get())}),(int)1);
}
// End mosek.fusion.Var.hstack

// Begin mosek.fusion.Var.hstack
// Method mosek.fusion.Var.hstack @ src/fusion/Var.monty:336:6-341:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2653_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2654_v2) { return mosek::fusion::p_Var::hstack(_2653_v1,_2654_v2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2653_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2654_v2)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2653_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2654_v2.get())}),(int)1);
}
// End mosek.fusion.Var.hstack

// Begin mosek.fusion.Var.hstack
// Method mosek.fusion.Var.hstack @ src/fusion/Var.monty:315:6-319:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2655_v) { return mosek::fusion::p_Var::hstack(_2655_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2655_v)
{
  return ::mosek::fusion::p_Var::dstack(_2655_v,(int)1);
}
// End mosek.fusion.Var.hstack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:298:6-91
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2656_v,
    int32_t _2657_dim) { return mosek::fusion::p_Var::stack(_2656_v,_2657_dim); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2656_v,int32_t _2657_dim)
{
  return ::mosek::fusion::p_Var::stack(_2657_dim,_2656_v);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:297:6-130
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2658_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2659_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2660_v3,
    int32_t _2661_dim) { return mosek::fusion::p_Var::stack(_2658_v1,_2659_v2,_2660_v3,_2661_dim); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2658_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2659_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2660_v3,int32_t _2661_dim)
{
  return ::mosek::fusion::p_Var::stack(_2661_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2658_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2659_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2660_v3.get())}));
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:296:6-114
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2662_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2663_v2,
    int32_t _2664_dim) { return mosek::fusion::p_Var::stack(_2662_v1,_2663_v2,_2664_dim); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2662_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2663_v2,int32_t _2664_dim)
{
  return ::mosek::fusion::p_Var::stack(_2664_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2662_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2663_v2.get())}));
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:290:6-293:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( int32_t _2665_dim,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2666_v) { return mosek::fusion::p_Var::stack(_2665_dim,_2666_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(int32_t _2665_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2666_v)
{
  int32_t _2667_maxnd = _2665_dim;
  int32_t _10184_ = (int)0;
  int32_t _10185_ = (int)((_2666_v)->size(0));
  for (int32_t _2668_i = _10184_; _2668_i < _10185_; ++_2668_i)
  {
    {
      if ((_2667_maxnd < ((*_2666_v)(_2668_i))->getND()))
      {
        {
          _2667_maxnd = ((*_2666_v)(_2668_i))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2666_v,_2665_dim);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:289:6-131
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( int32_t _2669_dim,
    monty::rc_ptr< ::mosek::fusion::Variable > _2670_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2671_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2672_v3) { return mosek::fusion::p_Var::stack(_2669_dim,_2670_v1,_2671_v2,_2672_v3); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(int32_t _2669_dim,monty::rc_ptr< ::mosek::fusion::Variable > _2670_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2671_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2672_v3)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2670_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2671_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2672_v3.get())}),_2669_dim);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:288:6-115
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( int32_t _2673_dim,
    monty::rc_ptr< ::mosek::fusion::Variable > _2674_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2675_v2) { return mosek::fusion::p_Var::stack(_2673_dim,_2674_v1,_2675_v2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(int32_t _2673_dim,monty::rc_ptr< ::mosek::fusion::Variable > _2674_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2675_v2)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2674_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2675_v2.get())}),_2673_dim);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.promote
// Method mosek.fusion.Var.promote @ src/fusion/Var.monty:275:6-285:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2676_v,
    int32_t _2677_nd) { return mosek::fusion::p_Var::promote(_2676_v,_2677_nd); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2676_v,int32_t _2677_nd)
{
  if ((_2677_nd > _2676_v->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2678_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2677_nd)));
      _checked_ptr_1<int32_t> _ptr__2678_shape(_2678_shape ? _2678_shape->raw() : nullptr,_2678_shape ? _2678_shape->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2679_sh = _2676_v->getShape();
      _checked_ptr_1<int32_t> _ptr__2679_sh(_2679_sh ? _2679_sh->raw() : nullptr,_2679_sh ? _2679_sh->size(0) : 0);
      int32_t _10186_ = (int)0;
      int32_t _10187_ = (int)((_2679_sh)->size(0));
      for (int32_t _2680_i = _10186_; _2680_i < _10187_; ++_2680_i)
      {
        {
          _ptr__2678_shape[_2680_i] = _ptr__2679_sh[_2680_i];
        }
      }
      int32_t _10188_ = (int)((_2679_sh)->size(0));
      int32_t _10189_ = _2677_nd;
      for (int32_t _2681_i = _10188_; _2681_i < _10189_; ++_2681_i)
      {
        {
          _ptr__2678_shape[_2681_i] = (int)1;
        }
      }
      return _2676_v->__mosek_2fusion_2Variable__reshape(_2678_shape);
    }
  }
  else
  {
    {
      return _2676_v;
    }
  }
}
// End mosek.fusion.Var.promote

// Begin mosek.fusion.Var.dstack
// Method mosek.fusion.Var.dstack @ src/fusion/Var.monty:151:6-267:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2682_v,int32_t _2683_dim)
{
  if ((_2683_dim < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2684_m0 = nullptr;
  {
    int32_t _10190_ = (int)0;
    int32_t _10191_ = (int)((_2682_v)->size(0));
    for (int32_t _2685_i = _10190_; _2685_i < _10191_; ++_2685_i)
    {
      {
        if ((NULL == _2684_m0.get()))
        {
          {
            _2684_m0 = ((*_2682_v)(_2685_i))->__mosek_2fusion_2Variable__getModel();
          }
        }
        else if(((NULL != ((*_2682_v)(_2685_i))->__mosek_2fusion_2Variable__getModel().get()) && (((*_2682_v)(_2685_i))->__mosek_2fusion_2Variable__getModel() != _2684_m0)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2686_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _10192_;
            bool _10193_ = ((int)((mosek::fusion::p_Model::_get_impl(_2684_m0.get())->getName()).size()) > (int)0);
            if (_10193_)
            {
              _10192_ = mosek::fusion::p_Model::_get_impl(_2684_m0.get())->getName();
            }
            else
            {
              _10192_ = std::string ("?");
            }
            std::string _2687_m1name = _10192_;
            std::string _10194_;
            bool _10195_ = ((int)((mosek::fusion::p_Model::_get_impl(((*_2682_v)(_2685_i))->__mosek_2fusion_2Variable__getModel().get())->getName()).size()) > (int)0);
            if (_10195_)
            {
              _10194_ = mosek::fusion::p_Model::_get_impl(((*_2682_v)(_2685_i))->__mosek_2fusion_2Variable__getModel().get())->getName();
            }
            else
            {
              _10194_ = std::string ("?");
            }
            std::string _2688_m2name = _10194_;
            _2686_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2687_m1name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2688_m2name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2686_sb->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2682_v)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2682_v)->size(0)) == (int)1))
  {
    {
      return ((*_2682_v)((int)0));
    }
  }
  else
  {
    {
      int32_t _2689_n = (int)((_2682_v)->size(0));
      std::vector<int32_t> _10196_;
      for (int32_t _2691_i = (int)0, _10197_ = _2689_n; _2691_i < _10197_ ; ++_2691_i)
      {
        _10196_.push_back(((*_2682_v)(_2691_i))->numInst());
      }
      auto _10198_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10196_.size()),_10196_.begin(),_10196_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2690_numnz = _10198_;
      _checked_ptr_1<int32_t> _ptr__2690_numnz(_2690_numnz ? _2690_numnz->raw() : nullptr,_2690_numnz ? _2690_numnz->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int32_t,1 > >> _10199_;
      for (int32_t _2693_i = (int)0, _10200_ = _2689_n; _2693_i < _10200_ ; ++_2693_i)
      {
        _10199_.push_back(((*_2682_v)(_2693_i))->getShape());
      }
      auto _10201_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape(_10199_.size()),_10199_.begin(),_10199_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _2692_shapes = _10201_;
      std::vector<int32_t> _10202_;
      for (int32_t _2695_i = (int)0, _10203_ = _2689_n; _2695_i < _10203_ ; ++_2695_i)
      {
        _10202_.push_back((int)((((*_2692_shapes)(_2695_i)))->size(0)));
      }
      auto _10204_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10202_.size()),_10202_.begin(),_10202_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2694_nds = _10204_;
      _checked_ptr_1<int32_t> _ptr__2694_nds(_2694_nds ? _2694_nds->raw() : nullptr,_2694_nds ? _2694_nds->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2696_shape0 = ((*_2692_shapes)((int)0));
      _checked_ptr_1<int32_t> _ptr__2696_shape0(_2696_shape0 ? _2696_shape0->raw() : nullptr,_2696_shape0 ? _2696_shape0->size(0) : 0);
      int32_t _2697_nd0 = _ptr__2694_nds[(int)0];
      int32_t _2698_rnnz = (int)0;
      int32_t _10205_ = (int)0;
      int32_t _10206_ = _2689_n;
      for (int32_t _2699_i = _10205_; _2699_i < _10206_; ++_2699_i)
      {
        {
          _2698_rnnz += _ptr__2690_numnz[_2699_i];
        }
      }
      int32_t _2700_rnd = safe_add( _2683_dim,(int)1 );
      int32_t _10207_ = (int)0;
      int32_t _10208_ = _2689_n;
      for (int32_t _2701_i = _10207_; _2701_i < _10208_; ++_2701_i)
      {
        {
          if ((_2700_rnd < _ptr__2694_nds[_2701_i]))
          {
            {
              _2700_rnd = _ptr__2694_nds[_2701_i];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2702_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2700_rnd)));
      _checked_ptr_1<int32_t> _ptr__2702_rshape(_2702_rshape ? _2702_rshape->raw() : nullptr,_2702_rshape ? _2702_rshape->size(0) : 0);
      int32_t _10209_ = (int)0;
      int32_t _10210_ = _2697_nd0;
      for (int32_t _2703_i = _10209_; _2703_i < _10210_; ++_2703_i)
      {
        {
          _ptr__2702_rshape[_2703_i] = _ptr__2696_shape0[_2703_i];
        }
      }
      int32_t _10211_ = _2697_nd0;
      int32_t _10212_ = _2700_rnd;
      for (int32_t _2704_i = _10211_; _2704_i < _10212_; ++_2704_i)
      {
        {
          _ptr__2702_rshape[_2704_i] = (int)1;
        }
      }
      _ptr__2702_rshape[_2683_dim] = (int)0;
      int32_t _10213_ = (int)0;
      int32_t _10214_ = _2689_n;
      for (int32_t _2705_i = _10213_; _2705_i < _10214_; ++_2705_i)
      {
        {
          int32_t _10215_;
          bool _10216_ = ((int)((((*_2692_shapes)(_2705_i)))->size(0)) > _2683_dim);
          if (_10216_)
          {
            _10215_ = ((*((*_2692_shapes)(_2705_i)))(_2683_dim));
          }
          else
          {
            _10215_ = (int)1;
          }
          _ptr__2702_rshape[_2683_dim] += _10215_;
        }
      }
      int32_t _10217_ = (int)0;
      int32_t _10218_ = _2689_n;
      for (int32_t _2706_i = _10217_; _2706_i < _10218_; ++_2706_i)
      {
        {
          int32_t _10219_ = (int)0;
          int32_t _10220_ = (int)((((*_2692_shapes)(_2706_i)))->size(0));
          for (int32_t _2707_j = _10219_; _2707_j < _10220_; ++_2707_j)
          {
            {
              if (((_2707_j != _2683_dim) && (((*((*_2692_shapes)(_2706_i)))(_2707_j)) != _ptr__2702_rshape[_2707_j])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int32_t _10221_ = (int)((((*_2692_shapes)(_2706_i)))->size(0));
          int32_t _10222_ = _2700_rnd;
          for (int32_t _2708_j = _10221_; _2708_j < _10222_; ++_2708_j)
          {
            {
              if (((_2708_j != _2683_dim) && ((int)1 != _ptr__2702_rshape[_2708_j])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2709_rnidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2698_rnnz)));
      _checked_ptr_1<int64_t> _ptr__2709_rnidxs(_2709_rnidxs ? _2709_rnidxs->raw() : nullptr,_2709_rnidxs ? _2709_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2710_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2698_rnnz)));
      _checked_ptr_1<int64_t> _ptr__2710_rsp(_2710_rsp ? _2710_rsp->raw() : nullptr,_2710_rsp ? _2710_rsp->size(0) : 0);
      std::vector<int32_t> _10223_;
      for (int32_t _2712_i = (int)0, _10224_ = (int)((_2682_v)->size(0)); _2712_i < _10224_ ; ++_2712_i)
      {
        int32_t _10225_;
        bool _10226_ = (_2683_dim < (int)((((*_2692_shapes)(_2712_i)))->size(0)));
        if (_10226_)
        {
          _10225_ = ((*((*_2692_shapes)(_2712_i)))(_2683_dim));
        }
        else
        {
          _10225_ = (int)1;
        }
        _10223_.push_back(_10225_);
      }
      auto _10227_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10223_.size()),_10223_.begin(),_10223_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2711_sdims = _10227_;
      _checked_ptr_1<int32_t> _ptr__2711_sdims(_2711_sdims ? _2711_sdims->raw() : nullptr,_2711_sdims ? _2711_sdims->size(0) : 0);
      int32_t _2713_d0 = (int)1;
      int32_t _10228_ = (int)0;
      int32_t _10229_ = _2683_dim;
      for (int32_t _2714_i = _10228_; _2714_i < _10229_; ++_2714_i)
      {
        {
          int32_t _10230_;
          bool _10231_ = (_2714_i < (int)((_2696_shape0)->size(0)));
          if (_10231_)
          {
            _10230_ = _ptr__2696_shape0[_2714_i];
          }
          else
          {
            _10230_ = (int)1;
          }
          _2713_d0 *= _10230_;
        }
      }
      int32_t _2715_d1 = (int)0;
      int32_t _10232_ = (int)0;
      int32_t _10233_ = _2689_n;
      for (int32_t _2716_i = _10232_; _2716_i < _10233_; ++_2716_i)
      {
        {
          _2715_d1 += _ptr__2711_sdims[_2716_i];
        }
      }
      int32_t _2717_d2 = (int)1;
      int32_t _10234_ = safe_add( _2683_dim,(int)1 );
      int32_t _10235_ = (int)((_2696_shape0)->size(0));
      for (int32_t _2718_i = _10234_; _2718_i < _10235_; ++_2718_i)
      {
        {
          _2717_d2 *= _ptr__2696_shape0[_2718_i];
        }
      }
      if ((_2713_d0 == (int)1))
      {
        {
          int32_t _2719_k = (int)0;
          int64_t _2720_kspofs = (int)0;
          int32_t _10236_ = (int)0;
          int32_t _10237_ = _2689_n;
          for (int32_t _2721_i = _10236_; _2721_i < _10237_; ++_2721_i)
          {
            {
              ((*_2682_v)(_2721_i))->inst(_2719_k,_2710_rsp,_2719_k,_2709_rnidxs);
              int32_t _10238_ = (int)0;
              int32_t _10239_ = _ptr__2690_numnz[_2721_i];
              for (int32_t _2722_j = _10238_; _2722_j < _10239_; ++_2722_j)
              {
                {
                  _ptr__2710_rsp[_2719_k] += _2720_kspofs;
                  ++ _2719_k;
                }
              }
              _2720_kspofs += ::mosek::fusion::p_Set::size(((*_2692_shapes)(_2721_i)));
            }
          }
          std::shared_ptr< monty::ndarray< int64_t,1 > > _10240_;
          bool _10241_ = (_2698_rnnz < safe_mul( safe_mul( _2713_d0,_2715_d1 ),_2717_d2 ));
          if (_10241_)
          {
            _10240_ = _2710_rsp;
          }
          else
          {
            _10240_ = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2684_m0,_2702_rshape,_10240_,_2709_rnidxs)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int32_t _2723_b = (int)0;
          int32_t _10242_ = (int)0;
          int32_t _10243_ = _2689_n;
          for (int32_t _2724_i = _10242_; _2724_i < _10243_; ++_2724_i)
          {
            {
              _2723_b += ((*_2682_v)(_2724_i))->inst(_2723_b,_2710_rsp,_2723_b,_2709_rnidxs);
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2725_curperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2698_rnnz)));
          _checked_ptr_1<int32_t> _ptr__2725_curperm(_2725_curperm ? _2725_curperm->raw() : nullptr,_2725_curperm ? _2725_curperm->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2726_tgtperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2698_rnnz)));
          _checked_ptr_1<int32_t> _ptr__2726_tgtperm(_2726_tgtperm ? _2726_tgtperm->raw() : nullptr,_2726_tgtperm ? _2726_tgtperm->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2727_offset = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2689_n)));
          _checked_ptr_1<int32_t> _ptr__2727_offset(_2727_offset ? _2727_offset->raw() : nullptr,_2727_offset ? _2727_offset->size(0) : 0);
          int32_t _10244_ = (int)0;
          int32_t _10245_ = (_2689_n - (int)1);
          for (int32_t _2728_i = _10244_; _2728_i < _10245_; ++_2728_i)
          {
            {
              _ptr__2727_offset[safe_add( _2728_i,(int)1 )] = safe_add( _ptr__2727_offset[_2728_i],_ptr__2711_sdims[_2728_i] );
            }
          }
          int32_t _10246_ = (int)0;
          int32_t _10247_ = _2698_rnnz;
          for (int32_t _2729_i = _10246_; _2729_i < _10247_; ++_2729_i)
          {
            {
              _ptr__2725_curperm[_2729_i] = _2729_i;
            }
          }
          int32_t _2730_k = (int)0;
          int32_t _10248_ = (int)0;
          int32_t _10249_ = _2689_n;
          for (int32_t _2731_i = _10248_; _2731_i < _10249_; ++_2731_i)
          {
            {
              int32_t _10250_ = (int)0;
              int32_t _10251_ = _ptr__2690_numnz[_2731_i];
              for (int32_t _2732_j = _10250_; _2732_j < _10251_; ++_2732_j)
              {
                {
                  int64_t _2733_i0 = (_ptr__2710_rsp[_2730_k] / safe_mul( _ptr__2711_sdims[_2731_i],_2717_d2 ));
                  int64_t _2734_i1 = ((_ptr__2710_rsp[_2730_k] / _2717_d2) % _ptr__2711_sdims[_2731_i]);
                  int64_t _2735_i2 = (_ptr__2710_rsp[_2730_k] % _2717_d2);
                  _ptr__2710_rsp[_2730_k] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2733_i0,_2715_d1 ),_2734_i1 ),_ptr__2727_offset[_2731_i] ),_2717_d2 ),_2735_i2 );
                  ++ _2730_k;
                }
              }
            }
          }
          int32_t _2736_maxdim = (int)1;
          int32_t _10252_ = (int)0;
          int32_t _10253_ = _2700_rnd;
          for (int32_t _2737_i = _10252_; _2737_i < _10253_; ++_2737_i)
          {
            {
              int32_t _10254_;
              bool _10255_ = (_2736_maxdim < _ptr__2702_rshape[_2737_i]);
              if (_10255_)
              {
                _10254_ = _ptr__2702_rshape[_2737_i];
              }
              else
              {
                _10254_ = _2736_maxdim;
              }
              _2736_maxdim = _10254_;
            }
          }
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2738_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2700_rnd)));
          _checked_ptr_1<int64_t> _ptr__2738_s(_2738_s ? _2738_s->raw() : nullptr,_2738_s ? _2738_s->size(0) : 0);
          _ptr__2738_s[(_2700_rnd - (int)1)] = (int)1;
          int32_t _10256_ = (int)1;
          int32_t _10257_ = _2700_rnd;
          for (int32_t _2739_i = _10256_; _2739_i < _10257_; ++_2739_i)
          {
            {
              _ptr__2738_s[((_2700_rnd - _2739_i) - (int)1)] = safe_mul( _ptr__2738_s[(_2700_rnd - _2739_i)],_ptr__2702_rshape[(_2700_rnd - _2739_i)] );
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2740_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _2736_maxdim,(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__2740_ptr(_2740_ptr ? _2740_ptr->raw() : nullptr,_2740_ptr ? _2740_ptr->size(0) : 0);
          int32_t _10258_ = (int)0;
          int32_t _10259_ = _2700_rnd;
          for (int32_t _2741_ii = _10258_; _2741_ii < _10259_; ++_2741_ii)
          {
            {
              int32_t _2742_i = ((_2700_rnd - _2741_ii) - (int)1);
              int32_t _10260_ = (int)0;
              int32_t _10261_ = safe_add( _ptr__2702_rshape[_2742_i],(int)1 );
              for (int32_t _2743_j = _10260_; _2743_j < _10261_; ++_2743_j)
              {
                {
                  _ptr__2740_ptr[_2743_j] = (int)0;
                }
              }
              int32_t _10262_ = (int)0;
              int32_t _10263_ = _2698_rnnz;
              for (int32_t _2744_j = _10262_; _2744_j < _10263_; ++_2744_j)
              {
                {
                  ++ _ptr__2740_ptr[safe_add( ((_ptr__2710_rsp[_2744_j] / _ptr__2738_s[_2742_i]) % _ptr__2702_rshape[_2742_i]),(int)1 )];
                }
              }
              int32_t _10264_ = (int)0;
              int32_t _10265_ = _ptr__2702_rshape[_2742_i];
              for (int32_t _2745_j = _10264_; _2745_j < _10265_; ++_2745_j)
              {
                {
                  _ptr__2740_ptr[safe_add( _2745_j,(int)1 )] += _ptr__2740_ptr[_2745_j];
                }
              }
              int32_t _10266_ = (int)0;
              int32_t _10267_ = _2698_rnnz;
              for (int32_t _2746_jj = _10266_; _2746_jj < _10267_; ++_2746_jj)
              {
                {
                  int32_t _2747_j = _ptr__2725_curperm[_2746_jj];
                  int64_t _2748_idx = ((_ptr__2710_rsp[_2747_j] / _ptr__2738_s[_2742_i]) % _ptr__2702_rshape[_2742_i]);
                  _ptr__2726_tgtperm[_ptr__2740_ptr[_2748_idx]] = _2747_j;
                  ++ _ptr__2740_ptr[_2748_idx];
                }
              }
              std::shared_ptr< monty::ndarray< int32_t,1 > > _2749_tmp = _2725_curperm;
              _checked_ptr_1<int32_t> _ptr__2749_tmp(_2749_tmp ? _2749_tmp->raw() : nullptr,_2749_tmp ? _2749_tmp->size(0) : 0);
              _2725_curperm = _2726_tgtperm;
              _ptr__2725_curperm.update(_2725_curperm ? _2725_curperm->raw() : nullptr, _2725_curperm ? _2725_curperm->size(0) : 0);
              _2726_tgtperm = _2749_tmp;
              _ptr__2726_tgtperm.update(_2726_tgtperm ? _2726_tgtperm->raw() : nullptr, _2726_tgtperm ? _2726_tgtperm->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< int64_t,1 > > _10268_;
          bool _10269_ = (_2698_rnnz < safe_mul( safe_mul( _2713_d0,_2715_d1 ),_2717_d2 ));
          if (_10269_)
          {
            std::vector<int64_t> _10270_;
            for (int32_t _2750_i = (int)0, _10271_ = _2698_rnnz; _2750_i < _10271_ ; ++_2750_i)
            {
              _10270_.push_back(_ptr__2710_rsp[_ptr__2725_curperm[_2750_i]]);
            }
            auto _10272_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10270_.size()),_10270_.begin(),_10270_.end()));
            _10268_ = _10272_;
          }
          else
          {
            _10268_ = nullptr;
          }
          std::vector<int64_t> _10273_;
          for (int32_t _2751_i = (int)0, _10274_ = _2698_rnnz; _2751_i < _10274_ ; ++_2751_i)
          {
            _10273_.push_back(_ptr__2709_rnidxs[_ptr__2725_curperm[_2751_i]]);
          }
          auto _10275_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10273_.size()),_10273_.begin(),_10273_.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2684_m0,_2702_rshape,_10268_,_10275_)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
// End mosek.fusion.Var.dstack

void mosek::fusion::p_Var::destroy()
{
}
void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }
// } class Var
// class BoundInterfaceConstraint { // @ src/fusion/BoundInterfaceConstraint.mbi:26:4-69:5
mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint(mosek::fusion::p_BoundInterfaceConstraint *_impl) : mosek::fusion::SliceConstraint(_impl) { /*std::cout << "BoundInterfaceConstraint()" << this << std::endl; */ }
mosek::fusion::BoundInterfaceConstraint::~BoundInterfaceConstraint() {  /* std::cout << "~BoundInterfaceConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_BoundInterfaceConstraint::p_BoundInterfaceConstraint
  (::mosek::fusion::BoundInterfaceConstraint * _pubthis) :     mosek::fusion::p_SliceConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.BoundInterfaceConstraint.ctor @ src/fusion/BoundInterfaceConstraint.mbi:39:6-47:7
mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2752_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2753_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2754_nativeidxs,
    bool _2755_islower)
{ return new mosek::fusion::BoundInterfaceConstraint(_2752_m,_2753_shape,_2754_nativeidxs,_2755_islower); }
mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2752_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2753_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2754_nativeidxs,
    bool _2755_islower) : 
   BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this))
{ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2752_m,_2753_shape,_2754_nativeidxs,_2755_islower); }
void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2752_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2753_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2754_nativeidxs,
    bool _2755_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2753_shape(_2753_shape ? _2753_shape->raw() : nullptr, _2753_shape ? _2753_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2754_nativeidxs(_2754_nativeidxs ? _2754_nativeidxs->raw() : nullptr, _2754_nativeidxs ? _2754_nativeidxs->size(0) : 0);
    mosek::fusion::p_SliceConstraint::_initialize(_2752_m,_2753_shape,_2754_nativeidxs);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2755_islower;
  }
}
// mosek.fusion.BoundInterfaceConstraint.ctor

// mosek.fusion.BoundInterfaceConstraint.ctor @ src/fusion/BoundInterfaceConstraint.mbi:31:6-37:7
mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2756_c,
    bool _2757_islower)
{ return new mosek::fusion::BoundInterfaceConstraint(_2756_c,_2757_islower); }
mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2756_c,
    bool _2757_islower) : 
   BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this))
{ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2756_c,_2757_islower); }
void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2756_c,
    bool _2757_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_SliceConstraint::_initialize(_2756_c);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2757_islower;
  }
}
// mosek.fusion.BoundInterfaceConstraint.ctor

// Begin mosek.fusion.BoundInterfaceConstraint.dual
// Method mosek.fusion.BoundInterfaceConstraint.dual @ src/fusion/BoundInterfaceConstraint.mbi:64:6-68:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceConstraint :: dual() { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceConstraint::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2758_target = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__2758_target(_2758_target ? _2758_target->raw() : nullptr,_2758_target ? _2758_target->size(0) : 0);
  dual_lu((int)0,_2758_target,islower);
  return _2758_target;
}
// End mosek.fusion.BoundInterfaceConstraint.dual

// Begin mosek.fusion.BoundInterfaceConstraint.slice
// Method mosek.fusion.BoundInterfaceConstraint.slice @ src/fusion/BoundInterfaceConstraint.mbi:62:6-124
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2759_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2760_lasta) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2759_firsta,_2760_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2759_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2760_lasta) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2759_firsta,_2760_lasta); }
/* override: mosek.fusion.Constraint.slice*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2759_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2760_lasta) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2759_firsta,_2760_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2759_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2760_lasta)
{
  _checked_ptr_1<int32_t> _ptr__2759_firsta(_2759_firsta ? _2759_firsta->raw() : nullptr, _2759_firsta ? _2759_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2760_lasta(_2760_lasta ? _2760_lasta->raw() : nullptr, _2760_lasta ? _2760_lasta->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2761_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2759_firsta,_2760_lasta);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2761_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.slice

// Begin mosek.fusion.BoundInterfaceConstraint.slice
// Method mosek.fusion.BoundInterfaceConstraint.slice @ src/fusion/BoundInterfaceConstraint.mbi:61:6-122
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(int32_t _2762_first,int32_t _2763_last) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2762_first,_2763_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(int32_t _2762_first,int32_t _2763_last) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2762_first,_2763_last); }
/* override: mosek.fusion.Constraint.slice*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(int32_t _2762_first,int32_t _2763_last) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2762_first,_2763_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(int32_t _2762_first,int32_t _2763_last)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _2764_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2762_first,_2763_last);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2764_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.slice

// Begin mosek.fusion.BoundInterfaceConstraint.index
// Method mosek.fusion.BoundInterfaceConstraint.index @ src/fusion/BoundInterfaceConstraint.mbi:60:6-115
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2765_idxa) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2765_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2765_idxa) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2765_idxa); }
/* override: mosek.fusion.Constraint.index*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2765_idxa) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2765_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2765_idxa)
{
  _checked_ptr_1<int32_t> _ptr__2765_idxa(_2765_idxa ? _2765_idxa->raw() : nullptr, _2765_idxa ? _2765_idxa->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2766_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2765_idxa);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2766_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.index

// Begin mosek.fusion.BoundInterfaceConstraint.index
// Method mosek.fusion.BoundInterfaceConstraint.index @ src/fusion/BoundInterfaceConstraint.mbi:59:6-114
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(int32_t _2767_idx) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2767_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(int32_t _2767_idx) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2767_idx); }
/* override: mosek.fusion.Constraint.index*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(int32_t _2767_idx) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2767_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(int32_t _2767_idx)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _2768_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2767_idx);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2768_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.index

// Begin mosek.fusion.BoundInterfaceConstraint.from_
// Method mosek.fusion.BoundInterfaceConstraint.from_ @ src/fusion/BoundInterfaceConstraint.mbi:49:6-57:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__from_(monty::rc_ptr< ::mosek::fusion::Constraint > _2769_c)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _10276_ = _2769_c;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::SliceConstraint*>(_10276_.get()))
  {
    ::mosek::fusion::SliceConstraint::t _2770_cc (dynamic_cast<::mosek::fusion::SliceConstraint*>(_10276_.get()));
    {
      return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_2770_cc,islower);
    }
  }
  else
  {
    mosek::fusion::Constraint::t _2771_cc = _10276_;
    {
      return nullptr;
    }
  }
}
// End mosek.fusion.BoundInterfaceConstraint.from_

void mosek::fusion::p_BoundInterfaceConstraint::destroy()
{
}
void mosek::fusion::BoundInterfaceConstraint::destroy() { mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->destroy(); }
// } class BoundInterfaceConstraint
// class LinearPSDConstraint { // @ src/fusion/LinearPSDConstraint.monty:17:4-183:5
mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }
mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint
  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearPSDConstraint.ctor @ src/fusion/LinearPSDConstraint.monty:48:6-58:7
mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2772_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2773_m)
{ return new mosek::fusion::LinearPSDConstraint(_2772_c,_2773_m); }
mosek::fusion::LinearPSDConstraint::LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2772_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2773_m) : 
   LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this))
{ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2772_c,_2773_m); }
void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2772_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2773_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2772_c,_2773_m);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2772_c)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2772_c)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2772_c)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2772_c)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2772_c)->shape;
  }
}
// mosek.fusion.LinearPSDConstraint.ctor

// mosek.fusion.LinearPSDConstraint.ctor @ src/fusion/LinearPSDConstraint.monty:27:6-46:7
mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2774_model,
    const std::string &  _2775_name,
    int32_t _2776_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2777_shape,
    int32_t _2778_conedim,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2779_nativeidxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2780_slackidxs)
{ return new mosek::fusion::LinearPSDConstraint(_2774_model,_2775_name,_2776_conid,_2777_shape,_2778_conedim,_2779_nativeidxs,_2780_slackidxs); }
mosek::fusion::LinearPSDConstraint::LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2774_model,
    const std::string &  _2775_name,
    int32_t _2776_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2777_shape,
    int32_t _2778_conedim,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2779_nativeidxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2780_slackidxs) : 
   LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this))
{ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2774_model,_2775_name,_2776_conid,_2777_shape,_2778_conedim,_2779_nativeidxs,_2780_slackidxs); }
void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2774_model,
    const std::string &  _2775_name,
    int32_t _2776_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2777_shape,
    int32_t _2778_conedim,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2779_nativeidxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2780_slackidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2777_shape(_2777_shape ? _2777_shape->raw() : nullptr, _2777_shape ? _2777_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2779_nativeidxs(_2779_nativeidxs ? _2779_nativeidxs->raw() : nullptr, _2779_nativeidxs ? _2779_nativeidxs->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2780_slackidxs(_2780_slackidxs ? _2780_slackidxs->raw() : nullptr, _2780_slackidxs ? _2780_slackidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2774_model,_2775_name,_2777_shape,_2779_nativeidxs,_2776_conid);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2776_conid;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2780_slackidxs;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2779_nativeidxs;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2778_conedim;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2777_shape;
  }
}
// mosek.fusion.LinearPSDConstraint.ctor

// Begin mosek.fusion.LinearPSDConstraint.domainToString
// Method mosek.fusion.LinearPSDConstraint.domainToString @ src/fusion/LinearPSDConstraint.monty:174:6-182:7
void mosek::fusion::p_LinearPSDConstraint::domainToString(int64_t _2781_i,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2782_sb)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2783_k = ::mosek::fusion::p_Set::idxtokey(shape,_2781_i);
  _checked_ptr_1<int32_t> _ptr__2783_k(_2783_k ? _2783_k->raw() : nullptr,_2783_k ? _2783_k->size(0) : 0);
  _2782_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2783_k[(int)0]);
  int32_t _10277_ = (int)1;
  int32_t _10278_ = (int)((_2783_k)->size(0));
  for (int32_t _2784_j = _10277_; _2784_j < _10278_; ++_2784_j)
  {
    {
      _2782_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2783_k[_2784_j]);
    }
  }
  _2782_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _10279_ = (int)1;
  int32_t _10280_ = (int)((_2783_k)->size(0));
  for (int32_t _2785_j = _10279_; _2785_j < _10280_; ++_2785_j)
  {
    {
      _2782_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2785_j)));
    }
  }
  _2782_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
// End mosek.fusion.LinearPSDConstraint.domainToString

// Begin mosek.fusion.LinearPSDConstraint.clone
// Method mosek.fusion.LinearPSDConstraint.clone @ src/fusion/LinearPSDConstraint.monty:60:6-63:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2786_m)
{
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2786_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.LinearPSDConstraint.clone

void mosek::fusion::p_LinearPSDConstraint::destroy()
{
  shape.reset();
  slackidxs.reset();
  nativeidxs.reset();
}
void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }
// } class LinearPSDConstraint
// class PSDConstraint { // @ src/fusion/SemidefiniteConstraint.mbi:17:4-146:5
mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }
mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_PSDConstraint::p_PSDConstraint
  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.PSDConstraint.ctor @ src/fusion/SemidefiniteConstraint.mbi:104:6-117:7
mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2787_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2788_m)
{ return new mosek::fusion::PSDConstraint(_2787_c,_2788_m); }
mosek::fusion::PSDConstraint::PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2787_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2788_m) : 
   PSDConstraint(new mosek::fusion::p_PSDConstraint(this))
{ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2787_c,_2788_m); }
void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2787_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2788_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2787_c,_2788_m);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2787_c)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2787_c)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2787_c)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2787_c)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2787_c)->nativeidxs;
    names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2787_c)->names_flushed;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2787_c)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2787_c)->conedim1;
  }
}
// mosek.fusion.PSDConstraint.ctor

// mosek.fusion.PSDConstraint.ctor @ src/fusion/SemidefiniteConstraint.mbi:78:6-102:7
mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2789_model,
    const std::string &  _2790_name,
    int32_t _2791_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2792_shape,
    int32_t _2793_conedim0,
    int32_t _2794_conedim1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2795_slackidxs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2796_nativeidxs)
{ return new mosek::fusion::PSDConstraint(_2789_model,_2790_name,_2791_conid,_2792_shape,_2793_conedim0,_2794_conedim1,_2795_slackidxs,_2796_nativeidxs); }
mosek::fusion::PSDConstraint::PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2789_model,
    const std::string &  _2790_name,
    int32_t _2791_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2792_shape,
    int32_t _2793_conedim0,
    int32_t _2794_conedim1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2795_slackidxs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2796_nativeidxs) : 
   PSDConstraint(new mosek::fusion::p_PSDConstraint(this))
{ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2789_model,_2790_name,_2791_conid,_2792_shape,_2793_conedim0,_2794_conedim1,_2795_slackidxs,_2796_nativeidxs); }
void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2789_model,
    const std::string &  _2790_name,
    int32_t _2791_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2792_shape,
    int32_t _2793_conedim0,
    int32_t _2794_conedim1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2795_slackidxs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2796_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2792_shape(_2792_shape ? _2792_shape->raw() : nullptr, _2792_shape ? _2792_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2795_slackidxs(_2795_slackidxs ? _2795_slackidxs->raw() : nullptr, _2795_slackidxs ? _2795_slackidxs->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2796_nativeidxs(_2796_nativeidxs ? _2796_nativeidxs->raw() : nullptr, _2796_nativeidxs ? _2796_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2789_model,_2790_name,_2792_shape,::mosek::fusion::p_PSDConstraint::computenidxs(_2792_shape,_2793_conedim0,_2794_conedim1,_2796_nativeidxs),_2791_conid);
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2791_conid;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2796_nativeidxs;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2795_slackidxs;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2790_name;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2792_shape;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2793_conedim0;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2794_conedim1;
    names_flushed = false;
  }
}
// mosek.fusion.PSDConstraint.ctor

// Begin mosek.fusion.PSDConstraint.toString
// Method mosek.fusion.PSDConstraint.toString @ src/fusion/SemidefiniteConstraint.mbi:133:6-145:7
std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_PSDConstraint::toString()
{
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
// End mosek.fusion.PSDConstraint.toString

// Begin mosek.fusion.PSDConstraint.clone
// Method mosek.fusion.PSDConstraint.clone @ src/fusion/SemidefiniteConstraint.mbi:119:6-122:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2797_m)
{
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2797_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.PSDConstraint.clone

// Begin mosek.fusion.PSDConstraint.computenidxs
// Method mosek.fusion.PSDConstraint.computenidxs @ src/fusion/SemidefiniteConstraint.mbi:31:6-72:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int32_t,1 > > _2798_shape,int32_t _2799_d0,int32_t _2800_d1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2801_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2798_shape(_2798_shape ? _2798_shape->raw() : nullptr, _2798_shape ? _2798_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2801_nativeidxs(_2801_nativeidxs ? _2801_nativeidxs->raw() : nullptr, _2801_nativeidxs ? _2801_nativeidxs->size(0) : 0);
  int32_t _2802_nd = (int)((_2798_shape)->size(0));
  bool _2803_tril = (_2799_d0 < _2800_d1);
  int32_t _10281_;
  bool _10282_ = _2803_tril;
  if (_10282_)
  {
    _10281_ = _2799_d0;
  }
  else
  {
    _10281_ = _2800_d1;
  }
  int32_t _2804_conedim0 = _10281_;
  int32_t _10283_;
  bool _10284_ = _2803_tril;
  if (_10284_)
  {
    _10283_ = _2800_d1;
  }
  else
  {
    _10283_ = _2799_d0;
  }
  int32_t _2805_conedim1 = _10283_;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2806_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1),(int32_t)((int)1),(int32_t)((int)1),(int32_t)((int)1)});
  _checked_ptr_1<int32_t> _ptr__2806_dim(_2806_dim ? _2806_dim->raw() : nullptr,_2806_dim ? _2806_dim->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2807_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)5)));
  _checked_ptr_1<int32_t> _ptr__2807_stride(_2807_stride ? _2807_stride->raw() : nullptr,_2807_stride ? _2807_stride->size(0) : 0);
  int32_t _2808_size = (int)1;
  int32_t _10285_ = (int)0;
  int32_t _10286_ = (int)((_2798_shape)->size(0));
  for (int32_t _2809_i = _10285_; _2809_i < _10286_; ++_2809_i)
  {
    {
      _2808_size *= _ptr__2798_shape[_2809_i];
    }
  }
  int32_t _10287_ = (int)0;
  int32_t _10288_ = _2804_conedim0;
  for (int32_t _2810_i = _10287_; _2810_i < _10288_; ++_2810_i)
  {
    {
      _ptr__2806_dim[(int)0] *= _ptr__2798_shape[_2810_i];
    }
  }
  _ptr__2806_dim[(int)1] = _ptr__2798_shape[_2804_conedim0];
  int32_t _10289_ = safe_add( _2804_conedim0,(int)1 );
  int32_t _10290_ = _2805_conedim1;
  for (int32_t _2811_i = _10289_; _2811_i < _10290_; ++_2811_i)
  {
    {
      _ptr__2806_dim[(int)2] *= _ptr__2798_shape[_2811_i];
    }
  }
  _ptr__2806_dim[(int)3] = _ptr__2798_shape[_2805_conedim1];
  int32_t _10291_ = safe_add( _2805_conedim1,(int)1 );
  int32_t _10292_ = _2802_nd;
  for (int32_t _2812_i = _10291_; _2812_i < _10292_; ++_2812_i)
  {
    {
      _ptr__2806_dim[(int)4] *= _ptr__2798_shape[_2812_i];
    }
  }
  _ptr__2807_stride[(int)4] = (int)1;
  int32_t _10293_ = (int)1;
  int32_t _10294_ = (int)5;
  for (int32_t _2813_i = _10293_; _2813_i < _10294_; ++_2813_i)
  {
    {
      _ptr__2807_stride[(((int)5 - _2813_i) - (int)1)] = safe_mul( _ptr__2807_stride[((int)5 - _2813_i)],_ptr__2806_dim[((int)5 - _2813_i)] );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2814_nidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2808_size)));
  _checked_ptr_1<int32_t> _ptr__2814_nidxs(_2814_nidxs ? _2814_nidxs->raw() : nullptr,_2814_nidxs ? _2814_nidxs->size(0) : 0);
  int32_t _2815_k = (int)0;
  if (_2803_tril)
  {
    {
      int32_t _10295_ = (int)0;
      int32_t _10296_ = _ptr__2806_dim[(int)0];
      for (int32_t _2816_i0 = _10295_; _2816_i0 < _10296_; ++_2816_i0)
      {
        {
          int32_t _10297_ = (int)0;
          int32_t _10298_ = _ptr__2806_dim[(int)1];
          for (int32_t _2817_i1 = _10297_; _2817_i1 < _10298_; ++_2817_i1)
          {
            {
              int32_t _10299_ = (int)0;
              int32_t _10300_ = _ptr__2806_dim[(int)2];
              for (int32_t _2818_i2 = _10299_; _2818_i2 < _10300_; ++_2818_i2)
              {
                {
                  int32_t _10301_ = _2817_i1;
                  int32_t _10302_ = _ptr__2806_dim[(int)1];
                  for (int32_t _2819_i3 = _10301_; _2819_i3 < _10302_; ++_2819_i3)
                  {
                    {
                      int32_t _10303_ = (int)0;
                      int32_t _10304_ = _ptr__2806_dim[(int)4];
                      for (int32_t _2820_i4 = _10303_; _2820_i4 < _10304_; ++_2820_i4)
                      {
                        {
                          _ptr__2814_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2816_i0,_ptr__2807_stride[(int)0] ),safe_mul( _2817_i1,_ptr__2807_stride[(int)1] ) ),safe_mul( _2818_i2,_ptr__2807_stride[(int)2] ) ),safe_mul( _2819_i3,_ptr__2807_stride[(int)3] ) ),safe_mul( _2820_i4,_ptr__2807_stride[(int)4] ) )] = _ptr__2801_nativeidxs[_2815_k];
                          _ptr__2814_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2816_i0,_ptr__2807_stride[(int)0] ),safe_mul( _2819_i3,_ptr__2807_stride[(int)1] ) ),safe_mul( _2818_i2,_ptr__2807_stride[(int)2] ) ),safe_mul( _2817_i1,_ptr__2807_stride[(int)3] ) ),safe_mul( _2820_i4,_ptr__2807_stride[(int)4] ) )] = _ptr__2801_nativeidxs[_2815_k];
                          ++ _2815_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _10305_ = (int)0;
      int32_t _10306_ = _ptr__2806_dim[(int)0];
      for (int32_t _2821_i0 = _10305_; _2821_i0 < _10306_; ++_2821_i0)
      {
        {
          int32_t _10307_ = (int)0;
          int32_t _10308_ = _ptr__2806_dim[(int)1];
          for (int32_t _2822_i1 = _10307_; _2822_i1 < _10308_; ++_2822_i1)
          {
            {
              int32_t _10309_ = (int)0;
              int32_t _10310_ = _ptr__2806_dim[(int)2];
              for (int32_t _2823_i2 = _10309_; _2823_i2 < _10310_; ++_2823_i2)
              {
                {
                  int32_t _10311_ = (int)0;
                  int32_t _10312_ = safe_add( _2822_i1,(int)1 );
                  for (int32_t _2824_i3 = _10311_; _2824_i3 < _10312_; ++_2824_i3)
                  {
                    {
                      int32_t _10313_ = (int)0;
                      int32_t _10314_ = _ptr__2806_dim[(int)4];
                      for (int32_t _2825_i4 = _10313_; _2825_i4 < _10314_; ++_2825_i4)
                      {
                        {
                          _ptr__2814_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2821_i0,_ptr__2807_stride[(int)0] ),safe_mul( _2822_i1,_ptr__2807_stride[(int)1] ) ),safe_mul( _2823_i2,_ptr__2807_stride[(int)2] ) ),safe_mul( _2824_i3,_ptr__2807_stride[(int)3] ) ),safe_mul( _2825_i4,_ptr__2807_stride[(int)4] ) )] = _ptr__2801_nativeidxs[_2815_k];
                          _ptr__2814_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2821_i0,_ptr__2807_stride[(int)0] ),safe_mul( _2824_i3,_ptr__2807_stride[(int)1] ) ),safe_mul( _2823_i2,_ptr__2807_stride[(int)2] ) ),safe_mul( _2822_i1,_ptr__2807_stride[(int)3] ) ),safe_mul( _2825_i4,_ptr__2807_stride[(int)4] ) )] = _ptr__2801_nativeidxs[_2815_k];
                          ++ _2815_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2814_nidxs;
}
// End mosek.fusion.PSDConstraint.computenidxs

void mosek::fusion::p_PSDConstraint::destroy()
{
  shape.reset();
  slackidxs.reset();
  nativeidxs.reset();
}
void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }
// } class PSDConstraint
// class SliceConstraint { // @ src/fusion/SliceConstraint.mbi:23:4-43:5
mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }
mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SliceConstraint::p_SliceConstraint
  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SliceConstraint.ctor @ src/fusion/SliceConstraint.mbi:33:6-36:7
mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2826_c)
{ return new mosek::fusion::SliceConstraint(_2826_c); }
mosek::fusion::SliceConstraint::SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2826_c) : 
   SliceConstraint(new mosek::fusion::p_SliceConstraint(this))
{ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2826_c); }
void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2826_c)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Constraint::_initialize(_2826_c,_2826_c->__mosek_2fusion_2Constraint__getModel());
  }
}
// mosek.fusion.SliceConstraint.ctor

// mosek.fusion.SliceConstraint.ctor @ src/fusion/SliceConstraint.mbi:26:6-31:7
mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2827_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2828_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2829_nativeidxs)
{ return new mosek::fusion::SliceConstraint(_2827_model,_2828_shape,_2829_nativeidxs); }
mosek::fusion::SliceConstraint::SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2827_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2828_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2829_nativeidxs) : 
   SliceConstraint(new mosek::fusion::p_SliceConstraint(this))
{ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2827_model,_2828_shape,_2829_nativeidxs); }
void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2827_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2828_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2829_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2828_shape(_2828_shape ? _2828_shape->raw() : nullptr, _2828_shape ? _2828_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2829_nativeidxs(_2829_nativeidxs ? _2829_nativeidxs->raw() : nullptr, _2829_nativeidxs ? _2829_nativeidxs->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2827_model,_2828_shape,_2829_nativeidxs);
  }
}
// mosek.fusion.SliceConstraint.ctor

// Begin mosek.fusion.SliceConstraint.toString
// Method mosek.fusion.SliceConstraint.toString @ src/fusion/SliceConstraint.mbi:38:6-42:7
std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_SliceConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2830_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2830_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2830_sb->toString();
}
// End mosek.fusion.SliceConstraint.toString

void mosek::fusion::p_SliceConstraint::destroy()
{
}
void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }
// } class SliceConstraint
// class RangedConstraint { // @ src/fusion/RangedConstraint.mbi:13:4-204:5
mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }
mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_RangedConstraint::p_RangedConstraint
  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.RangedConstraint.ctor @ src/fusion/RangedConstraint.mbi:32:6-39:7
mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2831_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2832_m)
{ return new mosek::fusion::RangedConstraint(_2831_c,_2832_m); }
mosek::fusion::RangedConstraint::RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2831_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2832_m) : 
   RangedConstraint(new mosek::fusion::p_RangedConstraint(this))
{ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2831_c,_2832_m); }
void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2831_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2832_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2831_c,_2832_m);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2831_c)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2831_c)->nativeidxs;
  }
}
// mosek.fusion.RangedConstraint.ctor

// mosek.fusion.RangedConstraint.ctor @ src/fusion/RangedConstraint.mbi:19:6-29:7
mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2833_model,
    const std::string &  _2834_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2835_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2836_nativeidxs,
    int32_t _2837_conid)
{ return new mosek::fusion::RangedConstraint(_2833_model,_2834_name,_2835_shape,_2836_nativeidxs,_2837_conid); }
mosek::fusion::RangedConstraint::RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2833_model,
    const std::string &  _2834_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2835_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2836_nativeidxs,
    int32_t _2837_conid) : 
   RangedConstraint(new mosek::fusion::p_RangedConstraint(this))
{ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2833_model,_2834_name,_2835_shape,_2836_nativeidxs,_2837_conid); }
void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2833_model,
    const std::string &  _2834_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2835_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2836_nativeidxs,
    int32_t _2837_conid)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2835_shape(_2835_shape ? _2835_shape->raw() : nullptr, _2835_shape ? _2835_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2836_nativeidxs(_2836_nativeidxs ? _2836_nativeidxs->raw() : nullptr, _2836_nativeidxs ? _2836_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2833_model,_2834_name,_2835_shape,_2836_nativeidxs,_2837_conid);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2835_shape;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2836_nativeidxs;
  }
}
// mosek.fusion.RangedConstraint.ctor

// Begin mosek.fusion.RangedConstraint.upperBoundCon
// Method mosek.fusion.RangedConstraint.upperBoundCon @ src/fusion/RangedConstraint.mbi:55:6-57:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__upperBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__upperBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::upperBoundCon() { return __mosek_2fusion_2RangedConstraint__upperBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__upperBoundCon()
{
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,false);
}
// End mosek.fusion.RangedConstraint.upperBoundCon

// Begin mosek.fusion.RangedConstraint.lowerBoundCon
// Method mosek.fusion.RangedConstraint.lowerBoundCon @ src/fusion/RangedConstraint.mbi:49:6-51:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__lowerBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__lowerBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::lowerBoundCon() { return __mosek_2fusion_2RangedConstraint__lowerBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__lowerBoundCon()
{
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,true);
}
// End mosek.fusion.RangedConstraint.lowerBoundCon

// Begin mosek.fusion.RangedConstraint.clone
// Method mosek.fusion.RangedConstraint.clone @ src/fusion/RangedConstraint.mbi:41:6-44:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2838_m)
{
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2838_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.RangedConstraint.clone

void mosek::fusion::p_RangedConstraint::destroy()
{
  nativeidxs.reset();
  shape.reset();
}
void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }
// } class RangedConstraint
// class ConicConstraint { // @ src/fusion/ConicConstraint.mbi:22:4-94:5
mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }
mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ConicConstraint::p_ConicConstraint
  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ConicConstraint.ctor @ src/fusion/ConicConstraint.mbi:65:6-75:7
mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2839_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2840_m)
{ return new mosek::fusion::ConicConstraint(_2839_c,_2840_m); }
mosek::fusion::ConicConstraint::ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2839_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2840_m) : 
   ConicConstraint(new mosek::fusion::p_ConicConstraint(this))
{ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2839_c,_2840_m); }
void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2839_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2840_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2839_c,_2840_m);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2839_c)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2839_c)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2839_c)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2839_c)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2839_c)->nativeidxs;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2839_c)->names_flushed;
    indexnames = mosek::fusion::p_ConicConstraint::_get_impl(_2839_c)->indexnames;
  }
}
// mosek.fusion.ConicConstraint.ctor

// mosek.fusion.ConicConstraint.ctor @ src/fusion/ConicConstraint.mbi:38:6-62:7
mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2841_model,
    const std::string &  _2842_name,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2843_dom,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2844_shape,
    int32_t _2845_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2846_nativeidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2847_indexnames)
{ return new mosek::fusion::ConicConstraint(_2841_model,_2842_name,_2843_dom,_2844_shape,_2845_conid,_2846_nativeidxs,_2847_indexnames); }
mosek::fusion::ConicConstraint::ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2841_model,
    const std::string &  _2842_name,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2843_dom,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2844_shape,
    int32_t _2845_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2846_nativeidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2847_indexnames) : 
   ConicConstraint(new mosek::fusion::p_ConicConstraint(this))
{ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2841_model,_2842_name,_2843_dom,_2844_shape,_2845_conid,_2846_nativeidxs,_2847_indexnames); }
void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2841_model,
    const std::string &  _2842_name,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2843_dom,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2844_shape,
    int32_t _2845_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2846_nativeidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2847_indexnames)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2844_shape(_2844_shape ? _2844_shape->raw() : nullptr, _2844_shape ? _2844_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2846_nativeidxs(_2846_nativeidxs ? _2846_nativeidxs->raw() : nullptr, _2846_nativeidxs ? _2846_nativeidxs->size(0) : 0);
    std::vector<int32_t> _10315_;
    for (int32_t _2848_i = (int)0, _10316_ = (int)((_2846_nativeidxs)->size(0)); _2848_i < _10316_ ; ++_2848_i)
    {
      _10315_.push_back((-safe_add( (int)1,_ptr__2846_nativeidxs[_2848_i] )));
    }
    auto _10317_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10315_.size()),_10315_.begin(),_10315_.end()));
    mosek::fusion::p_ModelConstraint::_initialize(_2841_model,_2842_name,_2844_shape,_10317_,(-safe_add( (int)1,_2845_conid )));
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2843_dom;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2844_shape;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2842_name;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2846_nativeidxs;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->indexnames = _2847_indexnames;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2845_conid;
    names_flushed = false;
  }
}
// mosek.fusion.ConicConstraint.ctor

// Begin mosek.fusion.ConicConstraint.toString
// Method mosek.fusion.ConicConstraint.toString @ src/fusion/ConicConstraint.mbi:88:6-92:7
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ConicConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2849_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2849_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2849_sb->toString();
}
// End mosek.fusion.ConicConstraint.toString

// Begin mosek.fusion.ConicConstraint.domainToString
// Method mosek.fusion.ConicConstraint.domainToString @ src/fusion/ConicConstraint.mbi:83:6-85:7
void mosek::fusion::p_ConicConstraint::domainToString(int64_t _2850_i,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2851_sb)
{
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
// End mosek.fusion.ConicConstraint.domainToString

// Begin mosek.fusion.ConicConstraint.clone
// Method mosek.fusion.ConicConstraint.clone @ src/fusion/ConicConstraint.mbi:77:6-80:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2852_m)
{
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2852_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.ConicConstraint.clone

void mosek::fusion::p_ConicConstraint::destroy()
{
  indexnames.reset();
  nativeidxs.reset();
  shape.reset();
  dom.reset();
}
void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }
// } class ConicConstraint
// class LinearConstraint { // @ src/fusion/LinearConstraint.mbi:24:4-119:5
mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }
mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearConstraint::p_LinearConstraint
  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearConstraint.ctor @ src/fusion/LinearConstraint.mbi:53:6-63:7
mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2853_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2854_m)
{ return new mosek::fusion::LinearConstraint(_2853_c,_2854_m); }
mosek::fusion::LinearConstraint::LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2853_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2854_m) : 
   LinearConstraint(new mosek::fusion::p_LinearConstraint(this))
{ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2853_c,_2854_m); }
void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2853_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2854_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2853_c,_2854_m);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2853_c)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2853_c)->name;
    nidxs = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearConstraint::_get_impl(_2853_c)->nidxs);
    names_flushed = mosek::fusion::p_LinearConstraint::_get_impl(_2853_c)->names_flushed;
    indexnames = mosek::fusion::p_LinearConstraint::_get_impl(_2853_c)->indexnames;
  }
}
// mosek.fusion.LinearConstraint.ctor

// mosek.fusion.LinearConstraint.ctor @ src/fusion/LinearConstraint.mbi:37:6-51:7
mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2855_model,
    const std::string &  _2856_name,
    int32_t _2857_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2858_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2859_nidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2860_indexnames)
{ return new mosek::fusion::LinearConstraint(_2855_model,_2856_name,_2857_conid,_2858_shape,_2859_nidxs,_2860_indexnames); }
mosek::fusion::LinearConstraint::LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2855_model,
    const std::string &  _2856_name,
    int32_t _2857_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2858_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2859_nidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2860_indexnames) : 
   LinearConstraint(new mosek::fusion::p_LinearConstraint(this))
{ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2855_model,_2856_name,_2857_conid,_2858_shape,_2859_nidxs,_2860_indexnames); }
void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2855_model,
    const std::string &  _2856_name,
    int32_t _2857_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2858_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2859_nidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2860_indexnames)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2858_shape(_2858_shape ? _2858_shape->raw() : nullptr, _2858_shape ? _2858_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2859_nidxs(_2859_nidxs ? _2859_nidxs->raw() : nullptr, _2859_nidxs ? _2859_nidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2855_model,_2856_name,_2858_shape,_2859_nidxs,_2857_conid);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->nidxs = _2859_nidxs;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2857_conid;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2856_name;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->indexnames = _2860_indexnames;
  }
}
// mosek.fusion.LinearConstraint.ctor

// Begin mosek.fusion.LinearConstraint.toString
// Method mosek.fusion.LinearConstraint.toString @ src/fusion/LinearConstraint.mbi:104:6-117:7
std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_LinearConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2861_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2861_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2861_sb->toString();
}
// End mosek.fusion.LinearConstraint.toString

// Begin mosek.fusion.LinearConstraint.flushNames
// Method mosek.fusion.LinearConstraint.flushNames @ src/fusion/LinearConstraint.mbi:75:6-102:7
void mosek::fusion::p_LinearConstraint::flushNames()
{
}
// End mosek.fusion.LinearConstraint.flushNames

// Begin mosek.fusion.LinearConstraint.domainToString
// Method mosek.fusion.LinearConstraint.domainToString @ src/fusion/LinearConstraint.mbi:70:6-73:7
void mosek::fusion::p_LinearConstraint::domainToString(int64_t _2862_i,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2863_sb)
{
}
// End mosek.fusion.LinearConstraint.domainToString

// Begin mosek.fusion.LinearConstraint.clone
// Method mosek.fusion.LinearConstraint.clone @ src/fusion/LinearConstraint.mbi:65:6-68:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2864_m)
{
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2864_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.LinearConstraint.clone

void mosek::fusion::p_LinearConstraint::destroy()
{
  indexnames.reset();
  nidxs.reset();
}
void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }
// } class LinearConstraint
// class ModelConstraint { // @ src/fusion/ModelConstraint.mbi:19:4-84:5
mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }
mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ModelConstraint::p_ModelConstraint
  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ModelConstraint.ctor @ src/fusion/ModelConstraint.mbi:57:6-66:7
void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2865_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2866_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Constraint::_initialize(_2865_c,_2866_m);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = mosek::fusion::p_ModelConstraint::_get_impl(_2865_c)->conid;
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2865_c)->name;
    modelcon_nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2865_c)->modelcon_nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2865_c)->shape;
  }
}
// mosek.fusion.ModelConstraint.ctor

// mosek.fusion.ModelConstraint.ctor @ src/fusion/ModelConstraint.mbi:42:6-55:7
void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2867_model,
    const std::string &  _2868_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2869_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2870_nidxs,
    int32_t _2871_conid)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2869_shape(_2869_shape ? _2869_shape->raw() : nullptr, _2869_shape ? _2869_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2870_nidxs(_2870_nidxs ? _2870_nidxs->raw() : nullptr, _2870_nidxs ? _2870_nidxs->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2867_model,_2869_shape,_2870_nidxs);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2868_name;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->modelcon_nativeidxs = _2870_nidxs;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2869_shape;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = _2871_conid;
  }
}
// mosek.fusion.ModelConstraint.ctor

// Begin mosek.fusion.ModelConstraint.toString
// Method mosek.fusion.ModelConstraint.toString @ src/fusion/ModelConstraint.mbi:79:6-83:7
std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ModelConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2872_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2872_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2872_sb->toString();
}
// End mosek.fusion.ModelConstraint.toString

// Begin mosek.fusion.ModelConstraint.flushNames
// Method mosek.fusion.ModelConstraint.flushNames @ src/fusion/ModelConstraint.mbi:75:6-77:7
void mosek::fusion::p_ModelConstraint::flushNames()
{
}
// End mosek.fusion.ModelConstraint.flushNames

// Begin mosek.fusion.ModelConstraint.clone
// End mosek.fusion.ModelConstraint.clone

// Begin mosek.fusion.ModelConstraint.remove
// Method mosek.fusion.ModelConstraint.remove @ src/fusion/ModelConstraint.mbi:68:6-70:7
void mosek::fusion::ModelConstraint :: remove() { mosek::fusion::p_ModelConstraint::_get_impl(this)->remove(); }
void mosek::fusion::p_ModelConstraint::remove()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2Constraint__getModel().get())->removeConstraintBlock(conid);
}
// End mosek.fusion.ModelConstraint.remove

void mosek::fusion::p_ModelConstraint::destroy()
{
  shape.reset();
  modelcon_nativeidxs.reset();
}
void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }
// } class ModelConstraint
// class Constraint { // @ src/fusion/Constraint.mbi:110:4-680:5
mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Constraint::p_Constraint
  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Constraint.ctor @ src/fusion/Constraint.mbi:135:6-140:7
void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2874_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2875_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    model = _2875_m;
    shape = mosek::fusion::p_Constraint::_get_impl(_2874_c)->shape;
    con_nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2874_c)->con_nativeidxs;
  }
}
// mosek.fusion.Constraint.ctor

// mosek.fusion.Constraint.ctor @ src/fusion/Constraint.mbi:124:6-132:7
void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2876_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2877_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2878_con_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2877_shape(_2877_shape ? _2877_shape->raw() : nullptr, _2877_shape ? _2877_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2878_con_nativeidxs(_2878_con_nativeidxs ? _2878_con_nativeidxs->raw() : nullptr, _2878_con_nativeidxs ? _2878_con_nativeidxs->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2876_model;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2877_shape;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->con_nativeidxs = _2878_con_nativeidxs;
  }
}
// mosek.fusion.Constraint.ctor

// Begin mosek.fusion.Constraint.toString
// Method mosek.fusion.Constraint.toString @ src/fusion/Constraint.mbi:662:6-679:7
std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_Constraint::toString()
{
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
// End mosek.fusion.Constraint.toString

// Begin mosek.fusion.Constraint.toStringArray
// Method mosek.fusion.Constraint.toStringArray @ src/fusion/Constraint.mbi:651:6-657:7
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< int64_t,1 > > _2879_subi,int64_t _2880_dstidx,std::shared_ptr< monty::ndarray< std::string,1 > > _2881_result)
{
  _checked_ptr_1<int64_t> _ptr__2879_subi(_2879_subi ? _2879_subi->raw() : nullptr, _2879_subi ? _2879_subi->size(0) : 0);
}
// End mosek.fusion.Constraint.toStringArray

// Begin mosek.fusion.Constraint.dual_lu
// Method mosek.fusion.Constraint.dual_lu @ src/fusion/Constraint.mbi:642:6-644:7
void mosek::fusion::p_Constraint::dual_lu(int32_t _2882_offset,std::shared_ptr< monty::ndarray< double,1 > > _2883_target,bool _2884_islower)
{
  _checked_ptr_1<double> _ptr__2883_target(_2883_target ? _2883_target->raw() : nullptr, _2883_target ? _2883_target->size(0) : 0);
  model->getConstraintDuals(_2884_islower,con_nativeidxs,_2883_target,_2882_offset);
}
// End mosek.fusion.Constraint.dual_lu

// Begin mosek.fusion.Constraint.dual
// Method mosek.fusion.Constraint.dual @ src/fusion/Constraint.mbi:636:6-640:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2885_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((con_nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2885_res(_2885_res ? _2885_res->raw() : nullptr,_2885_res ? _2885_res->size(0) : 0);
  values(false,(int)0,_2885_res);
  return _2885_res;
}
// End mosek.fusion.Constraint.dual

// Begin mosek.fusion.Constraint.level
// Method mosek.fusion.Constraint.level @ src/fusion/Constraint.mbi:623:6-627:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2886_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((con_nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2886_res(_2886_res ? _2886_res->raw() : nullptr,_2886_res ? _2886_res->size(0) : 0);
  values(true,(int)0,_2886_res);
  return _2886_res;
}
// End mosek.fusion.Constraint.level

// Begin mosek.fusion.Constraint.values
// Method mosek.fusion.Constraint.values @ src/fusion/Constraint.mbi:607:6-613:7
void mosek::fusion::p_Constraint::values(bool _2887_primal,int32_t _2888_offset,std::shared_ptr< monty::ndarray< double,1 > > _2889_target)
{
  _checked_ptr_1<double> _ptr__2889_target(_2889_target ? _2889_target->raw() : nullptr, _2889_target ? _2889_target->size(0) : 0);
  model->getConstraintValues(_2887_primal,con_nativeidxs,_2889_target,_2888_offset);
}
// End mosek.fusion.Constraint.values

// Begin mosek.fusion.Constraint.remove
// Method mosek.fusion.Constraint.remove @ src/fusion/Constraint.mbi:601:6-603:7
void mosek::fusion::Constraint :: remove() { mosek::fusion::p_Constraint::_get_impl(this)->remove(); }
void mosek::fusion::p_Constraint::remove()
{
  throw ::mosek::fusion::DeletionError(std::string ("Only original constraints can be removed"));
}
// End mosek.fusion.Constraint.remove

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ src/fusion/Constraint.mbi:592:6-594:7
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2890_bfix) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2890_bfix); }
void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2890_bfix)
{
  _checked_ptr_1<double> _ptr__2890_bfix(_2890_bfix ? _2890_bfix->raw() : nullptr, _2890_bfix ? _2890_bfix->size(0) : 0);
  _pubthis->update(::mosek::fusion::p_Expr::reshape(::mosek::fusion::p_Expr::constTerm(_2890_bfix),_pubthis->getShape()),(::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>(),true);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ src/fusion/Constraint.mbi:577:6-590:7
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2891_expr) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2891_expr); }
void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2891_expr)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2892_eshape = _2891_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__2892_eshape(_2892_eshape ? _2892_eshape->raw() : nullptr,_2892_eshape ? _2892_eshape->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2892_eshape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int32_t _10318_ = (int)0;
  int32_t _10319_ = (int)((_2892_eshape)->size(0));
  for (int32_t _2893_i = _10318_; _2893_i < _10319_; ++_2893_i)
  {
    {
      if ((_ptr__2892_eshape[_2893_i] != ((*shape)(_2893_i))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int32_t _10320_ = (int)((_2892_eshape)->size(0));
  int32_t _10321_ = (int)((shape)->size(0));
  for (int32_t _2894_i = _10320_; _2894_i < _10321_; ++_2894_i)
  {
    {
      if ((((*shape)(_2894_i)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(con_nativeidxs,_2891_expr);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ src/fusion/Constraint.mbi:517:6-574:7
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2895_expr,monty::rc_ptr< ::mosek::fusion::Variable > _2896_x,bool _2897_bfixupdate) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2895_expr,_2896_x,_2897_bfixupdate); }
void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2895_expr,monty::rc_ptr< ::mosek::fusion::Variable > _2896_x,bool _2897_bfixupdate)
{
  int32_t _2898_nd = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2899_eshape = _2895_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__2899_eshape(_2899_eshape ? _2899_eshape->raw() : nullptr,_2899_eshape ? _2899_eshape->size(0) : 0);
  if ((_2898_nd < (int)((_2899_eshape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int32_t _10322_ = (int)0;
  int32_t _10323_ = (int)((_2899_eshape)->size(0));
  for (int32_t _2900_i = _10322_; _2900_i < _10323_; ++_2900_i)
  {
    {
      if ((_ptr__2899_eshape[_2900_i] != ((*shape)(_2900_i))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int32_t _10324_ = (int)((_2899_eshape)->size(0));
  int32_t _10325_ = (int)((shape)->size(0));
  for (int32_t _2901_i = _10324_; _2901_i < _10325_; ++_2901_i)
  {
    {
      if ((((*shape)(_2901_i)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int32_t _2902_ni = _2896_x->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2903_varidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2902_ni)));
  _checked_ptr_1<int64_t> _ptr__2903_varidxs(_2903_varidxs ? _2903_varidxs->raw() : nullptr,_2903_varidxs ? _2903_varidxs->size(0) : 0);
  if ((_2902_ni < _2896_x->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2904_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2902_ni)));
      _checked_ptr_1<int64_t> _ptr__2904_sp(_2904_sp ? _2904_sp->raw() : nullptr,_2904_sp ? _2904_sp->size(0) : 0);
      _2896_x->inst((int)0,_2904_sp,(int)0,_2903_varidxs);
    }
  }
  else
  {
    {
      _2896_x->inst((int)0,_2903_varidxs);
    }
  }
  int32_t _10326_ = (int)0;
  int32_t _10327_ = _2902_ni;
  for (int32_t _2905_i = _10326_; _2905_i < _10327_; ++_2905_i)
  {
    {
      if ((_ptr__2903_varidxs[_2905_i] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Semidefinite terms cannot be updated"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2906_varidxs32;
  _checked_ptr_1<int32_t> _ptr__2906_varidxs32(_2906_varidxs32 ? _2906_varidxs32->raw() : nullptr,_2906_varidxs32 ? _2906_varidxs32->size(0) : 0);
  {
    bool _2907_issorted = true;
    int32_t _10328_ = (int)0;
    int32_t _10329_ = (_2902_ni - (int)1);
    for (int32_t _2908_i = _10328_; _2908_i < _10329_; ++_2908_i)
    {
      {
        _2907_issorted = (_2907_issorted && (_ptr__2903_varidxs[_2908_i] < _ptr__2903_varidxs[safe_add( _2908_i,(int)1 )]));
      }
    }
    if (_2907_issorted)
    {
      {
        if ((!_2897_bfixupdate))
        {
          {
            std::vector<int32_t> _10330_;
            for (int32_t _2909_i = (int)0, _10331_ = _2902_ni; _2909_i < _10331_ ; ++_2909_i)
            {
              _10330_.push_back((int32_t)_ptr__2903_varidxs[_2909_i]);
            }
            auto _10332_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10330_.size()),_10330_.begin(),_10330_.end()));
            _2906_varidxs32 = _10332_;
            _ptr__2906_varidxs32.update(_2906_varidxs32 ? _2906_varidxs32->raw() : nullptr, _2906_varidxs32 ? _2906_varidxs32->size(0) : 0);
          }
        }
        else
        {
          {
            _2906_varidxs32 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _2902_ni,(int)1 ))));
            _ptr__2906_varidxs32.update(_2906_varidxs32 ? _2906_varidxs32->raw() : nullptr, _2906_varidxs32 ? _2906_varidxs32->size(0) : 0);
            _ptr__2906_varidxs32[(int)0] = (int)0;
            int32_t _10333_ = (int)0;
            int32_t _10334_ = _2902_ni;
            for (int32_t _2910_i = _10333_; _2910_i < _10334_; ++_2910_i)
            {
              {
                _ptr__2906_varidxs32[safe_add( (int)1,_2910_i )] = (int32_t)_ptr__2903_varidxs[_2910_i];
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::vector<int64_t> _10335_;
        for (int32_t _2912_i = (int)0, _10336_ = _2902_ni; _2912_i < _10336_ ; ++_2912_i)
        {
          _10335_.push_back(_2912_i);
        }
        auto _10337_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10335_.size()),_10335_.begin(),_10335_.end()));
        std::shared_ptr< monty::ndarray< int64_t,1 > > _2911_perm = _10337_;
        _checked_ptr_1<int64_t> _ptr__2911_perm(_2911_perm ? _2911_perm->raw() : nullptr,_2911_perm ? _2911_perm->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_2911_perm,_2903_varidxs,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2902_ni));
        int32_t _2913_nunique = (int)1;
        int32_t _10338_ = (int)1;
        int32_t _10339_ = _2902_ni;
        for (int32_t _2914_i = _10338_; _2914_i < _10339_; ++_2914_i)
        {
          {
            if ((_ptr__2903_varidxs[_ptr__2911_perm[(_2914_i - (int)1)]] < _ptr__2903_varidxs[_ptr__2911_perm[_2914_i]]))
            {
              {
                ++ _2913_nunique;
              }
            }
            {}
          }
        }
        if (_2897_bfixupdate)
        {
          {
            _2913_nunique += (int)1;
          }
        }
        {}
        _2906_varidxs32 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2913_nunique)));
        _ptr__2906_varidxs32.update(_2906_varidxs32 ? _2906_varidxs32->raw() : nullptr, _2906_varidxs32 ? _2906_varidxs32->size(0) : 0);
        int32_t _2915_k = (int)0;
        if (_2897_bfixupdate)
        {
          {
            _ptr__2906_varidxs32[(int)0] = (int)0;
            ++ _2915_k;
          }
        }
        {}
        _ptr__2906_varidxs32[_2915_k] = (int32_t)_ptr__2903_varidxs[_ptr__2911_perm[(int)0]];
        int32_t _10340_ = (int)1;
        int32_t _10341_ = _2902_ni;
        for (int32_t _2916_i = _10340_; _2916_i < _10341_; ++_2916_i)
        {
          {
            if ((_ptr__2903_varidxs[(_2916_i - (int)1)] < _ptr__2903_varidxs[_2916_i]))
            {
              {
                _ptr__2906_varidxs32[_2915_k] = (int32_t)_ptr__2903_varidxs[_ptr__2911_perm[_2916_i]];
                ++ _2915_k;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(con_nativeidxs,_2895_expr,_2906_varidxs32);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ src/fusion/Constraint.mbi:513:6-515:7
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2917_expr,monty::rc_ptr< ::mosek::fusion::Variable > _2918_x) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2917_expr,_2918_x); }
void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2917_expr,monty::rc_ptr< ::mosek::fusion::Variable > _2918_x)
{
  _pubthis->update(_2917_expr,_2918_x,false);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.get_model
// Method mosek.fusion.Constraint.get_model @ src/fusion/Constraint.mbi:505:6-508:7
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model()
{
  return model;
}
// End mosek.fusion.Constraint.get_model

// Begin mosek.fusion.Constraint.get_nd
// Method mosek.fusion.Constraint.get_nd @ src/fusion/Constraint.mbi:498:6-501:7
int32_t mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }
int32_t mosek::fusion::p_Constraint::get_nd()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.Constraint.get_nd

// Begin mosek.fusion.Constraint.size
// Method mosek.fusion.Constraint.size @ src/fusion/Constraint.mbi:491:6-494:7
int64_t mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }
int64_t mosek::fusion::p_Constraint::size()
{
  int64_t _2919_sz = (int)1;
  int32_t _10342_ = (int)0;
  int32_t _10343_ = (int)((shape)->size(0));
  for (int32_t _2920_i = _10342_; _2920_i < _10343_; ++_2920_i)
  {
    {
      _2919_sz *= ((*shape)(_2920_i));
    }
  }
  return _2919_sz;
}
// End mosek.fusion.Constraint.size

// Begin mosek.fusion.Constraint.stack
// Method mosek.fusion.Constraint.stack @ src/fusion/Constraint.mbi:479:6-484:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2921_clist,
    int32_t _2922_dim) { return mosek::fusion::p_Constraint::stack(_2921_clist,_2922_dim); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2921_clist,int32_t _2922_dim)
{
  return ::mosek::fusion::p_Constraint::dstack(_2921_clist,_2922_dim);
}
// End mosek.fusion.Constraint.stack

// Begin mosek.fusion.Constraint.stack
// Method mosek.fusion.Constraint.stack @ src/fusion/Constraint.mbi:471:6-478:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2923_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2924_v2,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2925_v3,
    int32_t _2926_dim) { return mosek::fusion::p_Constraint::stack(_2923_v1,_2924_v2,_2925_v3,_2926_dim); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2923_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2924_v2,monty::rc_ptr< ::mosek::fusion::Constraint > _2925_v3,int32_t _2926_dim)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2923_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2924_v2.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2925_v3.get())}),_2926_dim);
}
// End mosek.fusion.Constraint.stack

// Begin mosek.fusion.Constraint.stack
// Method mosek.fusion.Constraint.stack @ src/fusion/Constraint.mbi:463:6-469:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2927_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2928_v2,
    int32_t _2929_dim) { return mosek::fusion::p_Constraint::stack(_2927_v1,_2928_v2,_2929_dim); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2927_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2928_v2,int32_t _2929_dim)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2927_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2928_v2.get())}),_2929_dim);
}
// End mosek.fusion.Constraint.stack

// Begin mosek.fusion.Constraint.hstack
// Method mosek.fusion.Constraint.hstack @ src/fusion/Constraint.mbi:456:6-460:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2930_clist) { return mosek::fusion::p_Constraint::hstack(_2930_clist); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2930_clist)
{
  return ::mosek::fusion::p_Constraint::dstack(_2930_clist,(int)1);
}
// End mosek.fusion.Constraint.hstack

// Begin mosek.fusion.Constraint.vstack
// Method mosek.fusion.Constraint.vstack @ src/fusion/Constraint.mbi:451:6-455:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2931_clist) { return mosek::fusion::p_Constraint::vstack(_2931_clist); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2931_clist)
{
  return ::mosek::fusion::p_Constraint::dstack(_2931_clist,(int)0);
}
// End mosek.fusion.Constraint.vstack

// Begin mosek.fusion.Constraint.hstack
// Method mosek.fusion.Constraint.hstack @ src/fusion/Constraint.mbi:432:6-438:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2932_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2933_v2,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2934_v3) { return mosek::fusion::p_Constraint::hstack(_2932_v1,_2933_v2,_2934_v3); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2932_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2933_v2,monty::rc_ptr< ::mosek::fusion::Constraint > _2934_v3)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2932_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2933_v2.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2934_v3.get())}),(int)1);
}
// End mosek.fusion.Constraint.hstack

// Begin mosek.fusion.Constraint.vstack
// Method mosek.fusion.Constraint.vstack @ src/fusion/Constraint.mbi:425:6-431:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2935_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2936_v2,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2937_v3) { return mosek::fusion::p_Constraint::vstack(_2935_v1,_2936_v2,_2937_v3); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2935_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2936_v2,monty::rc_ptr< ::mosek::fusion::Constraint > _2937_v3)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2935_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2936_v2.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2937_v3.get())}),(int)0);
}
// End mosek.fusion.Constraint.vstack

// Begin mosek.fusion.Constraint.hstack
// Method mosek.fusion.Constraint.hstack @ src/fusion/Constraint.mbi:406:6-411:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2938_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2939_v2) { return mosek::fusion::p_Constraint::hstack(_2938_v1,_2939_v2); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2938_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2939_v2)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2938_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2939_v2.get())}),(int)1);
}
// End mosek.fusion.Constraint.hstack

// Begin mosek.fusion.Constraint.vstack
// Method mosek.fusion.Constraint.vstack @ src/fusion/Constraint.mbi:399:6-404:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2940_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2941_v2) { return mosek::fusion::p_Constraint::vstack(_2940_v1,_2941_v2); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2940_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2941_v2)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2940_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2941_v2.get())}),(int)0);
}
// End mosek.fusion.Constraint.vstack

// Begin mosek.fusion.Constraint.dstack
// Method mosek.fusion.Constraint.dstack @ src/fusion/Constraint.mbi:277:6-386:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2942_c,int32_t _2943_dim)
{
  monty::rc_ptr< ::mosek::fusion::Model > _2944_m0 = nullptr;
  {
    int32_t _10344_ = (int)0;
    int32_t _10345_ = (int)((_2942_c)->size(0));
    for (int32_t _2945_i = _10344_; _2945_i < _10345_; ++_2945_i)
    {
      {
        if ((NULL == _2944_m0.get()))
        {
          {
            _2944_m0 = ((*_2942_c)(_2945_i))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_2942_c)(_2945_i)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_2942_c)(_2945_i)))->model != _2944_m0)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2946_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _10346_;
            bool _10347_ = ((int)((mosek::fusion::p_Model::_get_impl(_2944_m0.get())->getName()).size()) > (int)0);
            if (_10347_)
            {
              _10346_ = mosek::fusion::p_Model::_get_impl(_2944_m0.get())->getName();
            }
            else
            {
              _10346_ = std::string ("?");
            }
            std::string _2947_m1name = _10346_;
            std::string _10348_;
            bool _10349_ = ((int)((mosek::fusion::p_Model::_get_impl(((*_2942_c)(_2945_i))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_10349_)
            {
              _10348_ = mosek::fusion::p_Model::_get_impl(((*_2942_c)(_2945_i))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _10348_ = std::string ("?");
            }
            std::string _2948_m2name = _10348_;
            _2946_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2947_m1name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2948_m2name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2946_sb->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2942_c)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_2942_c)->size(0)) == (int)1))
  {
    {
      return ((*_2942_c)((int)1));
    }
  }
  else
  {
    {
      int32_t _2949_n = (int)((_2942_c)->size(0));
      int32_t _2950_nd = (int)1;
      int32_t _10350_ = (int)0;
      int32_t _10351_ = _2949_n;
      for (int32_t _2951_i = _10350_; _2951_i < _10351_; ++_2951_i)
      {
        {
          int32_t _10352_;
          bool _10353_ = (((*_2942_c)(_2951_i))->getND() > _2950_nd);
          if (_10353_)
          {
            _10352_ = ((*_2942_c)(_2951_i))->getND();
          }
          else
          {
            _10352_ = _2950_nd;
          }
          _2950_nd = _10352_;
        }
      }
      if ((_2943_dim == _2950_nd))
      {
        {
          ++ _2950_nd;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int32_t,2 > > _2952_shape = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape(_2949_n,_2950_nd)));
      int32_t _10354_ = (int)0;
      int32_t _10355_ = _2949_n;
      for (int32_t _2953_i = _10354_; _2953_i < _10355_; ++_2953_i)
      {
        {
          int32_t _10356_ = (int)0;
          int32_t _10357_ = _2950_nd;
          for (int32_t _2954_j = _10356_; _2954_j < _10357_; ++_2954_j)
          {
            {
              ((*_2952_shape)(_2953_i,_2954_j)) = (int)1;
            }
          }
        }
      }
      std::vector<int32_t> _10358_;
      for (int32_t _2956_i = (int)0, _10359_ = _2949_n; _2956_i < _10359_ ; ++_2956_i)
      {
        _10358_.push_back(((*_2942_c)(_2956_i))->getSize());
      }
      auto _10360_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10358_.size()),_10358_.begin(),_10358_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2955_numnz = _10360_;
      _checked_ptr_1<int32_t> _ptr__2955_numnz(_2955_numnz ? _2955_numnz->raw() : nullptr,_2955_numnz ? _2955_numnz->size(0) : 0);
      int32_t _2957_totalnnz = (int)0;
      int32_t _10361_ = (int)0;
      int32_t _10362_ = _2949_n;
      for (int32_t _2958_i = _10361_; _2958_i < _10362_; ++_2958_i)
      {
        {
          _2957_totalnnz += _ptr__2955_numnz[_2958_i];
        }
      }
      int32_t _10363_ = (int)0;
      int32_t _10364_ = _2949_n;
      for (int32_t _2959_i = _10363_; _2959_i < _10364_; ++_2959_i)
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2960_shpi = ((*_2942_c)(_2959_i))->getShape();
          _checked_ptr_1<int32_t> _ptr__2960_shpi(_2960_shpi ? _2960_shpi->raw() : nullptr,_2960_shpi ? _2960_shpi->size(0) : 0);
          int32_t _10365_ = (int)0;
          int32_t _10366_ = (int)((_2960_shpi)->size(0));
          for (int32_t _2961_j = _10365_; _2961_j < _10366_; ++_2961_j)
          {
            {
              ((*_2952_shape)(_2959_i,_2961_j)) = _ptr__2960_shpi[_2961_j];
            }
          }
        }
      }
      if (((_2943_dim < (int)0) || (_2943_dim > _2950_nd)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int32_t _10367_ = (int)0;
      int32_t _10368_ = _2943_dim;
      for (int32_t _2962_i = _10367_; _2962_i < _10368_; ++_2962_i)
      {
        {
          int32_t _10369_ = (int)1;
          int32_t _10370_ = _2949_n;
          for (int32_t _2963_j = _10369_; _2963_j < _10370_; ++_2963_j)
          {
            {
              if ((((*_2952_shape)((int)0,_2962_i)) != ((*_2952_shape)(_2963_j,_2962_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int32_t _10371_ = safe_add( _2943_dim,(int)1 );
      int32_t _10372_ = _2950_nd;
      for (int32_t _2964_i = _10371_; _2964_i < _10372_; ++_2964_i)
      {
        {
          int32_t _10373_ = (int)1;
          int32_t _10374_ = _2949_n;
          for (int32_t _2965_j = _10373_; _2965_j < _10374_; ++_2965_j)
          {
            {
              if ((((*_2952_shape)((int)0,_2964_i)) != ((*_2952_shape)(_2965_j,_2964_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2966_con_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2957_totalnnz)));
      _checked_ptr_1<int32_t> _ptr__2966_con_nativeidxs(_2966_con_nativeidxs ? _2966_con_nativeidxs->raw() : nullptr,_2966_con_nativeidxs ? _2966_con_nativeidxs->size(0) : 0);
      std::vector<int32_t> _10375_;
      for (int32_t _2968_i = (int)0, _10376_ = _2950_nd; _2968_i < _10376_ ; ++_2968_i)
      {
        _10375_.push_back(((*_2952_shape)((int)0,_2968_i)));
      }
      auto _10377_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10375_.size()),_10375_.begin(),_10375_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2967_resshape = _10377_;
      _checked_ptr_1<int32_t> _ptr__2967_resshape(_2967_resshape ? _2967_resshape->raw() : nullptr,_2967_resshape ? _2967_resshape->size(0) : 0);
      int32_t _10378_ = (int)1;
      int32_t _10379_ = _2949_n;
      for (int32_t _2969_i = _10378_; _2969_i < _10379_; ++_2969_i)
      {
        {
          _ptr__2967_resshape[_2943_dim] += ((*_2952_shape)(_2969_i,_2943_dim));
        }
      }
      {
        int32_t _2970_rnd = (int)((_2967_resshape)->size(0));
        std::shared_ptr< monty::ndarray< int64_t,1 > > _2971_cumdims = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( (int)((_2942_c)->size(0)),(int)1 ))));
        _checked_ptr_1<int64_t> _ptr__2971_cumdims(_2971_cumdims ? _2971_cumdims->raw() : nullptr,_2971_cumdims ? _2971_cumdims->size(0) : 0);
        int32_t _10380_ = (int)0;
        int32_t _10381_ = (int)((_2942_c)->size(0));
        for (int32_t _2972_i = _10380_; _2972_i < _10381_; ++_2972_i)
        {
          {
            _ptr__2971_cumdims[safe_add( _2972_i,(int)1 )] = safe_add( _ptr__2971_cumdims[_2972_i],((*_2952_shape)(_2972_i,_2943_dim)) );
          }
        }
        if ((_2943_dim == (int)0))
        {
          {
            int32_t _2973_b = (int)0;
            int32_t _10382_ = (int)0;
            int32_t _10383_ = _2949_n;
            for (int32_t _2974_i = _10382_; _2974_i < _10383_; ++_2974_i)
            {
              {
                int32_t _2975_nnz = (int)((mosek::fusion::p_Constraint::_get_impl(((*_2942_c)(_2974_i)))->con_nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_2942_c)(_2974_i)))->con_nativeidxs,(int)0,_2966_con_nativeidxs,_2973_b,_2975_nnz);
                _2973_b += _2975_nnz;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int32_t,1 > >> _10384_;
            for (int32_t _2977_i = (int)0, _10385_ = _2949_n; _2977_i < _10385_ ; ++_2977_i)
            {
              _10384_.push_back(mosek::fusion::p_Constraint::_get_impl(((*_2942_c)(_2977_i)))->con_nativeidxs);
            }
            auto _10386_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape(_10384_.size()),_10384_.begin(),_10384_.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _2976_nidxlist = _10386_;
            if ((_2943_dim < _2950_nd))
            {
              {
                int32_t _2978_d0 = (int)1;
                int32_t _10387_ = (int)0;
                int32_t _10388_ = _2943_dim;
                for (int32_t _2979_i = _10387_; _2979_i < _10388_; ++_2979_i)
                {
                  {
                    _2978_d0 *= _ptr__2967_resshape[_2979_i];
                  }
                }
                int32_t _2980_d2 = (int)1;
                int32_t _10389_ = safe_add( _2943_dim,(int)1 );
                int32_t _10390_ = _2950_nd;
                for (int32_t _2981_i = _10389_; _2981_i < _10390_; ++_2981_i)
                {
                  {
                    _2980_d2 *= _ptr__2967_resshape[_2981_i];
                  }
                }
                int32_t _2982_k = (int)0;
                int32_t _10391_ = (int)0;
                int32_t _10392_ = _2978_d0;
                for (int32_t _2983_i0 = _10391_; _2983_i0 < _10392_; ++_2983_i0)
                {
                  {
                    int32_t _10393_ = (int)0;
                    int32_t _10394_ = _2949_n;
                    for (int32_t _2984_j = _10393_; _2984_j < _10394_; ++_2984_j)
                    {
                      {
                        int32_t _2985_l = (int)0;
                        int32_t _2986_d1 = ((*_2952_shape)(_2984_j,_2943_dim));
                        int32_t _10395_ = (int)0;
                        int32_t _10396_ = _2986_d1;
                        for (int32_t _2987_i1 = _10395_; _2987_i1 < _10396_; ++_2987_i1)
                        {
                          {
                            int32_t _10397_ = (int)0;
                            int32_t _10398_ = _2980_d2;
                            for (int32_t _2988_i2 = _10397_; _2988_i2 < _10398_; ++_2988_i2)
                            {
                              {
                                _ptr__2966_con_nativeidxs[_2982_k] = ((*mosek::fusion::p_Constraint::_get_impl(((*_2942_c)(_2949_n)))->con_nativeidxs)(safe_add( safe_mul( safe_mul( _2983_i0,_2980_d2 ),_2986_d1 ),_2985_l )));
                                ++ _2982_k;
                                ++ _2985_l;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int32_t _2989_prodshape = (int)1;
                int32_t _10399_ = (int)0;
                int32_t _10400_ = _2950_nd;
                for (int32_t _2990_i = _10399_; _2990_i < _10400_; ++_2990_i)
                {
                  {
                    _2989_prodshape *= _ptr__2967_resshape[_2990_i];
                  }
                }
                int32_t _2991_k = (int)0;
                int32_t _10401_ = (int)0;
                int32_t _10402_ = _2989_prodshape;
                for (int32_t _2992_i = _10401_; _2992_i < _10402_; ++_2992_i)
                {
                  {
                    int32_t _10403_ = (int)0;
                    int32_t _10404_ = _2949_n;
                    for (int32_t _2993_j = _10403_; _2993_j < _10404_; ++_2993_j)
                    {
                      {
                        _ptr__2966_con_nativeidxs[_2991_k] = ((*((*_2976_nidxlist)(_2993_j)))(_2992_i));
                        ++ _2991_k;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_2944_m0,_2967_resshape,_2966_con_nativeidxs)).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.dstack

// Begin mosek.fusion.Constraint.index
// Method mosek.fusion.Constraint.index @ src/fusion/Constraint.mbi:251:6-266:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2994_idxa) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2994_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2994_idxa) { return __mosek_2fusion_2Constraint__index(_2994_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2994_idxa)
{
  _checked_ptr_1<int32_t> _ptr__2994_idxa(_2994_idxa ? _2994_idxa->raw() : nullptr, _2994_idxa ? _2994_idxa->size(0) : 0);
  if (((int)((_2994_idxa)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int32_t _10405_ = (int)0;
      int32_t _10406_ = (int)((shape)->size(0));
      for (int32_t _2995_i = _10405_; _2995_i < _10406_; ++_2995_i)
      {
        {
          if (((_ptr__2994_idxa[_2995_i] < (int)0) || (_ptr__2994_idxa[_2995_i] > ((*shape)(_2995_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int32_t _2996_nd = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2997_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2996_nd)));
      _checked_ptr_1<int64_t> _ptr__2997_strides(_2997_strides ? _2997_strides->raw() : nullptr,_2997_strides ? _2997_strides->size(0) : 0);
      _ptr__2997_strides[(_2996_nd - (int)1)] = (int)1;
      int32_t _10407_ = (int)1;
      int32_t _10408_ = _2996_nd;
      for (int32_t _2998_i = _10407_; _2998_i < _10408_; ++_2998_i)
      {
        {
          _ptr__2997_strides[((_2996_nd - _2998_i) - (int)1)] = safe_mul( _ptr__2997_strides[(_2996_nd - _2998_i)],((*shape)((_2996_nd - _2998_i))) );
        }
      }
      int32_t _2999_ii = (int)0;
      int32_t _10409_ = (int)0;
      int32_t _10410_ = _2996_nd;
      for (int32_t _3000_i = _10409_; _3000_i < _10410_; ++_3000_i)
      {
        {
          _2999_ii += (int32_t)safe_mul( _ptr__2997_strides[_3000_i],_ptr__2994_idxa[_3000_i] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*con_nativeidxs)(_2999_ii)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.index

// Begin mosek.fusion.Constraint.index
// Method mosek.fusion.Constraint.index @ src/fusion/Constraint.mbi:236:6-246:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int32_t _3001_idx) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_3001_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int32_t _3001_idx) { return __mosek_2fusion_2Constraint__index(_3001_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int32_t _3001_idx)
{
  if ((((int)((shape)->size(0)) == (int)0) && (_3001_idx == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_3001_idx < (int)0) || (_3001_idx > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*con_nativeidxs)(_3001_idx)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.index

// Begin mosek.fusion.Constraint.slice
// Method mosek.fusion.Constraint.slice @ src/fusion/Constraint.mbi:179:6-231:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3002_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _3003_lasta) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_3002_firsta,_3003_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3002_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _3003_lasta) { return __mosek_2fusion_2Constraint__slice(_3002_firsta,_3003_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3002_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _3003_lasta)
{
  _checked_ptr_1<int32_t> _ptr__3002_firsta(_3002_firsta ? _3002_firsta->raw() : nullptr, _3002_firsta ? _3002_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3003_lasta(_3003_lasta ? _3003_lasta->raw() : nullptr, _3003_lasta ? _3003_lasta->size(0) : 0);
  if (((int)((_3002_firsta)->size(0)) != (int)((_3003_lasta)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_3002_firsta)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int32_t _10411_ = (int)0;
      int32_t _10412_ = (int)((shape)->size(0));
      for (int32_t _3004_i = _10411_; _3004_i < _10412_; ++_3004_i)
      {
        {
          if (((_ptr__3002_firsta[_3004_i] < (int)0) || (_ptr__3003_lasta[_3004_i] > ((*shape)(_3004_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__3002_firsta[_3004_i] > _ptr__3003_lasta[_3004_i]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int32_t _3005_nd = (int)((shape)->size(0));
      std::vector<int32_t> _10413_;
      for (int32_t _3007_i = (int)0, _10414_ = _3005_nd; _3007_i < _10414_ ; ++_3007_i)
      {
        _10413_.push_back((_ptr__3003_lasta[_3007_i] - _ptr__3002_firsta[_3007_i]));
      }
      auto _10415_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10413_.size()),_10413_.begin(),_10413_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3006_sliceshape = _10415_;
      _checked_ptr_1<int32_t> _ptr__3006_sliceshape(_3006_sliceshape ? _3006_sliceshape->raw() : nullptr,_3006_sliceshape ? _3006_sliceshape->size(0) : 0);
      int32_t _3008_slicesize = (int)1;
      int32_t _10416_ = (int)0;
      int32_t _10417_ = _3005_nd;
      for (int32_t _3009_i = _10416_; _3009_i < _10417_; ++_3009_i)
      {
        {
          _3008_slicesize *= (_ptr__3003_lasta[_3009_i] - _ptr__3002_firsta[_3009_i]);
        }
      }
      if ((_3008_slicesize == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_3006_sliceshape,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3010_sliceidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3008_slicesize)));
          _checked_ptr_1<int32_t> _ptr__3010_sliceidxs(_3010_sliceidxs ? _3010_sliceidxs->raw() : nullptr,_3010_sliceidxs ? _3010_sliceidxs->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int32_t,1 > > _3011_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3005_nd)));
            _checked_ptr_1<int32_t> _ptr__3011_strides(_3011_strides ? _3011_strides->raw() : nullptr,_3011_strides ? _3011_strides->size(0) : 0);
            _ptr__3011_strides[(_3005_nd - (int)1)] = (int)1;
            int32_t _10418_ = (int)1;
            int32_t _10419_ = _3005_nd;
            for (int32_t _3012_i = _10418_; _3012_i < _10419_; ++_3012_i)
            {
              {
                _ptr__3011_strides[((_3005_nd - _3012_i) - (int)1)] = safe_mul( _ptr__3011_strides[(_3005_nd - _3012_i)],((*shape)((_3005_nd - _3012_i))) );
              }
            }
            int32_t _3013_start = (int)0;
            int32_t _10420_ = (int)0;
            int32_t _10421_ = _3005_nd;
            for (int32_t _3014_i = _10420_; _3014_i < _10421_; ++_3014_i)
            {
              {
                _3013_start += safe_mul( _ptr__3002_firsta[_3014_i],_ptr__3011_strides[_3014_i] );
              }
            }
            std::vector<int32_t> _10422_;
            for (int32_t _3016_i = (int)0, _10423_ = _3005_nd; _3016_i < _10423_ ; ++_3016_i)
            {
              _10422_.push_back(_3013_start);
            }
            auto _10424_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10422_.size()),_10422_.begin(),_10422_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _3015_pp = _10424_;
            _checked_ptr_1<int32_t> _ptr__3015_pp(_3015_pp ? _3015_pp->raw() : nullptr,_3015_pp ? _3015_pp->size(0) : 0);
            std::vector<int32_t> _10425_;
            for (int32_t _3018_i = (int)0, _10426_ = _3005_nd; _3018_i < _10426_ ; ++_3018_i)
            {
              _10425_.push_back(_ptr__3002_firsta[_3018_i]);
            }
            auto _10427_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10425_.size()),_10425_.begin(),_10425_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _3017_ii = _10427_;
            _checked_ptr_1<int32_t> _ptr__3017_ii(_3017_ii ? _3017_ii->raw() : nullptr,_3017_ii ? _3017_ii->size(0) : 0);
            int32_t _10428_ = (int)0;
            int32_t _10429_ = _3008_slicesize;
            for (int32_t _3019_i = _10428_; _3019_i < _10429_; ++_3019_i)
            {
              {
                _ptr__3010_sliceidxs[_3019_i] = ((*con_nativeidxs)(_ptr__3015_pp[(_3005_nd - (int)1)]));
                _ptr__3017_ii[(_3005_nd - (int)1)] += (int)1;
                _ptr__3015_pp[(_3005_nd - (int)1)] += _ptr__3011_strides[(_3005_nd - (int)1)];
                if ((_ptr__3017_ii[(_3005_nd - (int)1)] >= _ptr__3003_lasta[(_3005_nd - (int)1)]))
                {
                  {
                    int32_t _3020_k = (_3005_nd - (int)1);
                    while ( ((_3020_k > (int)0) && (_ptr__3017_ii[_3020_k] >= _ptr__3003_lasta[_3020_k])) )
                    {
                      {
                        _ptr__3017_ii[_3020_k] = _ptr__3002_firsta[_3020_k];
                        _ptr__3017_ii[(_3020_k - (int)1)] += (int)1;
                        _ptr__3015_pp[(_3020_k - (int)1)] += _ptr__3011_strides[(_3020_k - (int)1)];
                        -- _3020_k;
                      }
                    }
                    int32_t _10430_ = safe_add( _3020_k,(int)1 );
                    int32_t _10431_ = _3005_nd;
                    for (int32_t _3021_k2 = _10430_; _3021_k2 < _10431_; ++_3021_k2)
                    {
                      {
                        _ptr__3015_pp[_3021_k2] = _ptr__3015_pp[_3020_k];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_3006_sliceshape,_3010_sliceidxs)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
// End mosek.fusion.Constraint.slice

// Begin mosek.fusion.Constraint.slice
// Method mosek.fusion.Constraint.slice @ src/fusion/Constraint.mbi:166:6-177:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int32_t _3022_first,int32_t _3023_last) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_3022_first,_3023_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int32_t _3022_first,int32_t _3023_last) { return __mosek_2fusion_2Constraint__slice(_3022_first,_3023_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int32_t _3022_first,int32_t _3023_last)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_3022_first == (int)0) && (_3023_last == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_3022_first < (int)0) || (_3023_last > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_3022_first > _3023_last))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int32_t> _10432_;
      for (int32_t _3024_i = _3022_first, _10433_ = _3023_last; _3024_i < _10433_ ; ++_3024_i)
      {
        _10432_.push_back(((*con_nativeidxs)(_3024_i)));
      }
      auto _10434_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10432_.size()),_10432_.begin(),_10432_.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((_3023_last - _3022_first))}),_10434_)).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.slice

// Begin mosek.fusion.Constraint.getND
// Method mosek.fusion.Constraint.getND @ src/fusion/Constraint.mbi:162:6-164:7
int32_t mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_Constraint::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.Constraint.getND

// Begin mosek.fusion.Constraint.getSize
// Method mosek.fusion.Constraint.getSize @ src/fusion/Constraint.mbi:156:6-159:7
int32_t mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }
int32_t mosek::fusion::p_Constraint::getSize()
{
  int32_t _3025_sz = (int)1;
  int32_t _10435_ = (int)0;
  int32_t _10436_ = (int)((shape)->size(0));
  for (int32_t _3026_i = _10435_; _3026_i < _10436_; ++_3026_i)
  {
    {
      _3025_sz *= ((*shape)(_3026_i));
    }
  }
  return _3025_sz;
}
// End mosek.fusion.Constraint.getSize

// Begin mosek.fusion.Constraint.getModel
// Method mosek.fusion.Constraint.getModel @ src/fusion/Constraint.mbi:153:6-55
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel()
{
  return model;
}
// End mosek.fusion.Constraint.getModel

// Begin mosek.fusion.Constraint.getShape
// Method mosek.fusion.Constraint.getShape @ src/fusion/Constraint.mbi:147:6-150:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Constraint::getShape()
{
  std::vector<int32_t> _10437_;
  for (int32_t _3027_i = (int)0, _10438_ = (int)((shape)->size(0)); _3027_i < _10438_ ; ++_3027_i)
  {
    _10437_.push_back(((*shape)(_3027_i)));
  }
  auto _10439_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10437_.size()),_10437_.begin(),_10437_.end()));
  return _10439_;
}
// End mosek.fusion.Constraint.getShape

// Begin mosek.fusion.Constraint.getNativeidxs
// Method mosek.fusion.Constraint.getNativeidxs @ src/fusion/Constraint.mbi:142:6-144:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Constraint::getNativeidxs()
{
  return con_nativeidxs;
}
// End mosek.fusion.Constraint.getNativeidxs

void mosek::fusion::p_Constraint::destroy()
{
  con_nativeidxs.reset();
  shape.reset();
  model.reset();
}
void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }
// } class Constraint
// class Set { // @ src/fusion/Set.mbi:34:4-207:5
mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Set::p_Set
  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Set.size
// Method mosek.fusion.Set.size @ src/fusion/Set.mbi:204:6-206:7
int64_t mosek::fusion::Set::size
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3028_shape) { return mosek::fusion::p_Set::size(_3028_shape); }
int64_t mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int32_t,1 > > _3028_shape)
{
  _checked_ptr_1<int32_t> _ptr__3028_shape(_3028_shape ? _3028_shape->raw() : nullptr, _3028_shape ? _3028_shape->size(0) : 0);
  int64_t _3029_sz = (int64_t)1;
  int32_t _10440_ = (int)0;
  int32_t _10441_ = (int)((_3028_shape)->size(0));
  for (int32_t _3030_i = _10440_; _3030_i < _10441_; ++_3030_i)
  {
    {
      _3029_sz *= _ptr__3028_shape[_3030_i];
    }
  }
  return _3029_sz;
}
// End mosek.fusion.Set.size

// Begin mosek.fusion.Set.match
// Method mosek.fusion.Set.match @ src/fusion/Set.mbi:195:6-201:7
bool mosek::fusion::Set::match
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3031_s1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3032_s2) { return mosek::fusion::p_Set::match(_3031_s1,_3032_s2); }
bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int32_t,1 > > _3031_s1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3032_s2)
{
  _checked_ptr_1<int32_t> _ptr__3031_s1(_3031_s1 ? _3031_s1->raw() : nullptr, _3031_s1 ? _3031_s1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3032_s2(_3032_s2 ? _3032_s2->raw() : nullptr, _3032_s2 ? _3032_s2->size(0) : 0);
  if (((int)((_3031_s1)->size(0)) != (int)((_3032_s2)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int32_t _10442_ = (int)0;
  int32_t _10443_ = (int)((_3031_s1)->size(0));
  for (int32_t _3033_i = _10442_; _3033_i < _10443_; ++_3033_i)
  {
    {
      if ((_ptr__3031_s1[_3033_i] != _ptr__3032_s2[_3033_i]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Set.match

// Begin mosek.fusion.Set.linearidx
// Method mosek.fusion.Set.linearidx @ src/fusion/Set.mbi:186:6-192:7
int64_t mosek::fusion::Set::linearidx
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3034_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3035_key) { return mosek::fusion::p_Set::linearidx(_3034_shape,_3035_key); }
int64_t mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int32_t,1 > > _3034_shape,std::shared_ptr< monty::ndarray< int32_t,1 > > _3035_key)
{
  _checked_ptr_1<int32_t> _ptr__3034_shape(_3034_shape ? _3034_shape->raw() : nullptr, _3034_shape ? _3034_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3035_key(_3035_key ? _3035_key->raw() : nullptr, _3035_key ? _3035_key->size(0) : 0);
  int64_t _3036_res = _ptr__3035_key[(int)0];
  int32_t _10444_ = (int)1;
  int32_t _10445_ = (int)((_3035_key)->size(0));
  for (int32_t _3037_i = _10444_; _3037_i < _10445_; ++_3037_i)
  {
    {
      _3036_res = safe_add( safe_mul( _3036_res,_ptr__3034_shape[_3037_i] ),_ptr__3035_key[_3037_i] );
    }
  }
  return _3036_res;
}
// End mosek.fusion.Set.linearidx

// Begin mosek.fusion.Set.idxtokey
// Method mosek.fusion.Set.idxtokey @ src/fusion/Set.mbi:169:6-174:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::idxtokey
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3038_shape,
    int64_t _3039_idx) { return mosek::fusion::p_Set::idxtokey(_3038_shape,_3039_idx); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int32_t,1 > > _3038_shape,int64_t _3039_idx)
{
  _checked_ptr_1<int32_t> _ptr__3038_shape(_3038_shape ? _3038_shape->raw() : nullptr, _3038_shape ? _3038_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3040_res = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_3038_shape)->size(0)))));
  _checked_ptr_1<int32_t> _ptr__3040_res(_3040_res ? _3040_res->raw() : nullptr,_3040_res ? _3040_res->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_3038_shape,_3039_idx,_3040_res);
  return _3040_res;
}
// End mosek.fusion.Set.idxtokey

// Begin mosek.fusion.Set.idxtokey
// Method mosek.fusion.Set.idxtokey @ src/fusion/Set.mbi:154:6-167:7
void mosek::fusion::Set::idxtokey
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3041_shape,
    int64_t _3042_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3043_dest) { mosek::fusion::p_Set::idxtokey(_3041_shape,_3042_idx,_3043_dest); }
void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int32_t,1 > > _3041_shape,int64_t _3042_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _3043_dest)
{
  _checked_ptr_1<int32_t> _ptr__3041_shape(_3041_shape ? _3041_shape->raw() : nullptr, _3041_shape ? _3041_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3043_dest(_3043_dest ? _3043_dest->raw() : nullptr, _3043_dest ? _3043_dest->size(0) : 0);
  int32_t _3044_nd = (int)((_3041_shape)->size(0));
  if ((_3044_nd > (int)0))
  {
    {
      int64_t _3045_ix = _3042_idx;
      int32_t _10446_ = (int)0;
      int32_t _10447_ = (_3044_nd - (int)1);
      for (int32_t _3046_i = _10446_; _3046_i < _10447_; ++_3046_i)
      {
        {
          _ptr__3043_dest[((_3044_nd - _3046_i) - (int)1)] = (int32_t)(_3045_ix % _ptr__3041_shape[((_3044_nd - _3046_i) - (int)1)]);
          _3045_ix /= _ptr__3041_shape[((_3044_nd - _3046_i) - (int)1)];
        }
      }
      _ptr__3043_dest[(int)0] = (int32_t)_3045_ix;
    }
  }
  {}
}
// End mosek.fusion.Set.idxtokey

// Begin mosek.fusion.Set.indexToString
// Method mosek.fusion.Set.indexToString @ src/fusion/Set.mbi:124:6-148:7
std::string mosek::fusion::Set::indexToString
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3047_shape,
    int64_t _3048_key) { return mosek::fusion::p_Set::indexToString(_3047_shape,_3048_key); }
std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int32_t,1 > > _3047_shape,int64_t _3048_key)
{
  _checked_ptr_1<int32_t> _ptr__3047_shape(_3047_shape ? _3047_shape->raw() : nullptr, _3047_shape ? _3047_shape->size(0) : 0);
  int32_t _3049_nd = (int)((_3047_shape)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3050_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_3049_nd == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_3049_nd == (int)1))
  {
    {
      return _3050_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_3048_key)->toString();
    }
  }
  else
  {
    {
      int64_t _3051_rem = _3048_key;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3052_k = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3049_nd)));
      _checked_ptr_1<int32_t> _ptr__3052_k(_3052_k ? _3052_k->raw() : nullptr,_3052_k ? _3052_k->size(0) : 0);
      int32_t _10448_ = (int)1;
      int32_t _10449_ = _3049_nd;
      for (int32_t _3053_i = _10448_; _3053_i < _10449_; ++_3053_i)
      {
        {
          _ptr__3052_k[(_3049_nd - _3053_i)] = (int32_t)(_3051_rem % _ptr__3047_shape[(_3049_nd - _3053_i)]);
          _3051_rem /= _ptr__3047_shape[(_3049_nd - _3053_i)];
        }
      }
      _ptr__3052_k[(int)0] = (int32_t)_3051_rem;
      _3050_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3052_k[(int)0]);
      int32_t _10450_ = (int)1;
      int32_t _10451_ = _3049_nd;
      for (int32_t _3054_i = _10450_; _3054_i < _10451_; ++_3054_i)
      {
        {
          _3050_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3052_k[_3054_i]);
        }
      }
      return _3050_sb->toString();
    }
  }
}
// End mosek.fusion.Set.indexToString

// Begin mosek.fusion.Set.keyToString
// Method mosek.fusion.Set.keyToString @ src/fusion/Set.mbi:112:6-119:7
std::string mosek::fusion::Set::keyToString
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3055_key) { return mosek::fusion::p_Set::keyToString(_3055_key); }
std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int32_t,1 > > _3055_key)
{
  _checked_ptr_1<int32_t> _ptr__3055_key(_3055_key ? _3055_key->raw() : nullptr, _3055_key ? _3055_key->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3056_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _3056_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3055_key[(int)0]);
  int32_t _10452_ = (int)1;
  int32_t _10453_ = (int)((_3055_key)->size(0));
  for (int32_t _3057_i = _10452_; _3057_i < _10453_; ++_3057_i)
  {
    {
      _3056_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3055_key[_3057_i]);
    }
  }
  return _3056_sb->toString();
}
// End mosek.fusion.Set.keyToString

// Begin mosek.fusion.Set.indexToKey
// Method mosek.fusion.Set.indexToKey @ src/fusion/Set.mbi:92:6-107:7
void mosek::fusion::Set::indexToKey
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3058_shape,
    int64_t _3059_key,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3060_res) { mosek::fusion::p_Set::indexToKey(_3058_shape,_3059_key,_3060_res); }
void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int32_t,1 > > _3058_shape,int64_t _3059_key,std::shared_ptr< monty::ndarray< int32_t,1 > > _3060_res)
{
  _checked_ptr_1<int32_t> _ptr__3058_shape(_3058_shape ? _3058_shape->raw() : nullptr, _3058_shape ? _3058_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3060_res(_3060_res ? _3060_res->raw() : nullptr, _3060_res ? _3060_res->size(0) : 0);
  int32_t _3061_nd = (int)((_3058_shape)->size(0));
  if ((_3061_nd == (int)1))
  {
    {
      _ptr__3060_res[(int)0] = (int32_t)_3059_key;
    }
  }
  else
  {
    {
      int64_t _3062_rem = _3059_key;
      int32_t _10454_ = (int)1;
      int32_t _10455_ = _3061_nd;
      for (int32_t _3063_i = _10454_; _3063_i < _10455_; ++_3063_i)
      {
        {
          _ptr__3060_res[(_3061_nd - _3063_i)] = (int32_t)(_3062_rem % _ptr__3058_shape[(_3061_nd - _3063_i)]);
          _3062_rem /= _ptr__3058_shape[(_3061_nd - _3063_i)];
        }
      }
      _ptr__3060_res[(int)0] = (int32_t)_3062_rem;
    }
  }
}
// End mosek.fusion.Set.indexToKey

// Begin mosek.fusion.Set.strides
// Method mosek.fusion.Set.strides @ src/fusion/Set.mbi:81:6-87:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::Set::strides
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3064_shape) { return mosek::fusion::p_Set::strides(_3064_shape); }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int32_t,1 > > _3064_shape)
{
  _checked_ptr_1<int32_t> _ptr__3064_shape(_3064_shape ? _3064_shape->raw() : nullptr, _3064_shape ? _3064_shape->size(0) : 0);
  int32_t _3065_nd = (int)((_3064_shape)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3066_st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3065_nd)));
  _checked_ptr_1<int64_t> _ptr__3066_st(_3066_st ? _3066_st->raw() : nullptr,_3066_st ? _3066_st->size(0) : 0);
  _ptr__3066_st[(_3065_nd - (int)1)] = (int)1;
  int32_t _10456_ = (int)1;
  int32_t _10457_ = _3065_nd;
  for (int32_t _3067_i = _10456_; _3067_i < _10457_; ++_3067_i)
  {
    {
      _ptr__3066_st[((_3065_nd - _3067_i) - (int)1)] = safe_mul( _ptr__3066_st[(_3065_nd - _3067_i)],_ptr__3064_shape[(_3065_nd - _3067_i)] );
    }
  }
  return _3066_st;
}
// End mosek.fusion.Set.strides

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:66:6-72:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3068_set1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3069_set2) { return mosek::fusion::p_Set::make(_3068_set1,_3069_set2); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _3068_set1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3069_set2)
{
  _checked_ptr_1<int32_t> _ptr__3068_set1(_3068_set1 ? _3068_set1->raw() : nullptr, _3068_set1 ? _3068_set1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3069_set2(_3069_set2 ? _3069_set2->raw() : nullptr, _3069_set2 ? _3069_set2->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3070_r = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( (int)((_3068_set1)->size(0)),(int)((_3069_set2)->size(0)) ))));
  _checked_ptr_1<int32_t> _ptr__3070_r(_3070_r ? _3070_r->raw() : nullptr,_3070_r ? _3070_r->size(0) : 0);
  int32_t _10458_ = (int)0;
  int32_t _10459_ = (int)((_3068_set1)->size(0));
  for (int32_t _3071_i = _10458_; _3071_i < _10459_; ++_3071_i)
  {
    {
      _ptr__3070_r[_3071_i] = _ptr__3068_set1[_3071_i];
    }
  }
  int32_t _10460_ = (int)0;
  int32_t _10461_ = (int)((_3069_set2)->size(0));
  for (int32_t _3072_i = _10460_; _3072_i < _10461_; ++_3072_i)
  {
    {
      _ptr__3070_r[safe_add( (int)((_3068_set1)->size(0)),_3072_i )] = _ptr__3069_set2[_3072_i];
    }
  }
  return _3070_r;
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:61:6-64:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3073_sizes) { return mosek::fusion::p_Set::make(_3073_sizes); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _3073_sizes)
{
  _checked_ptr_1<int32_t> _ptr__3073_sizes(_3073_sizes ? _3073_sizes->raw() : nullptr, _3073_sizes ? _3073_sizes->size(0) : 0);
  std::vector<int32_t> _10462_;
  for (int32_t _3074_i = (int)0, _10463_ = (int)((_3073_sizes)->size(0)); _3074_i < _10463_ ; ++_3074_i)
  {
    _10462_.push_back(_ptr__3073_sizes[_3074_i]);
  }
  auto _10464_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10462_.size()),_10462_.begin(),_10462_.end()));
  return _10464_;
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:56:6-59:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( int32_t _3075_s1,
    int32_t _3076_s2,
    int32_t _3077_s3) { return mosek::fusion::p_Set::make(_3075_s1,_3076_s2,_3077_s3); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(int32_t _3075_s1,int32_t _3076_s2,int32_t _3077_s3)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3075_s1),(int32_t)(_3076_s2),(int32_t)(_3077_s3)});
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:51:6-54:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( int32_t _3078_s1,
    int32_t _3079_s2) { return mosek::fusion::p_Set::make(_3078_s1,_3079_s2); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(int32_t _3078_s1,int32_t _3079_s2)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3078_s1),(int32_t)(_3079_s2)});
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:46:6-49:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( int32_t _3080_sz) { return mosek::fusion::p_Set::make(_3080_sz); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(int32_t _3080_sz)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3080_sz)});
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.scalar
// Method mosek.fusion.Set.scalar @ src/fusion/Set.mbi:44:6-67
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::scalar
  ( ) { return mosek::fusion::p_Set::scalar(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::scalar()
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
}
// End mosek.fusion.Set.scalar

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:36:6-39:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( std::shared_ptr< monty::ndarray< std::string,1 > > _3081_names) { return mosek::fusion::p_Set::make(_3081_names); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _3081_names)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3081_names)->size(0)))});
}
// End mosek.fusion.Set.make

void mosek::fusion::p_Set::destroy()
{
}
void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }
// } class Set
// class ConeDomain { // @ src/fusion/domain.mbi:1631:4-1786:5
mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ConeDomain::p_ConeDomain
  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.ConeDomain.ctor @ src/fusion/domain.mbi:1725:6-1736:7
mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain
  (mosek::fusion::QConeKey _3082_k,
    std::shared_ptr< monty::ndarray< double,1 > > _3083_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3084_d)
{ return new mosek::fusion::ConeDomain(_3082_k,_3083_alpha,_3084_d); }
mosek::fusion::ConeDomain::ConeDomain
  (mosek::fusion::QConeKey _3082_k,
    std::shared_ptr< monty::ndarray< double,1 > > _3083_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3084_d) : 
   ConeDomain(new mosek::fusion::p_ConeDomain(this))
{ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_3082_k,_3083_alpha,_3084_d); }
void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _3082_k,
    std::shared_ptr< monty::ndarray< double,1 > > _3083_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3084_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3083_alpha(_3083_alpha ? _3083_alpha->raw() : nullptr, _3083_alpha ? _3083_alpha->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3084_d(_3084_d ? _3084_d->raw() : nullptr, _3084_d ? _3084_d->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _10465_;
    bool _10466_ = (NULL != _3084_d.get());
    if (_10466_)
    {
      _10465_ = ::mosek::fusion::Utils::Tools::arraycopy(_3084_d);
    }
    else
    {
      _10465_ = nullptr;
    }
    shape = _10465_;
    domsize = (int)0;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _3083_alpha;
    key = _3082_k;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    domofs = nullptr;
    indexnames = nullptr;
  }
}
// mosek.fusion.ConeDomain.ctor

// mosek.fusion.ConeDomain.ctor @ src/fusion/domain.mbi:1699:6-1701:7
mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain
  (mosek::fusion::QConeKey _3085_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3086_d)
{ return new mosek::fusion::ConeDomain(_3085_k,_3086_d); }
mosek::fusion::ConeDomain::ConeDomain
  (mosek::fusion::QConeKey _3085_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3086_d) : 
   ConeDomain(new mosek::fusion::p_ConeDomain(this))
{ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_3085_k,_3086_d); }
void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _3085_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3086_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__3086_d(_3086_d ? _3086_d->raw() : nullptr, _3086_d ? _3086_d->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_3085_k,nullptr,_3086_d);
  }
}
// mosek.fusion.ConeDomain.ctor

// mosek.fusion.ConeDomain.ctor @ src/fusion/domain.mbi:1645:6-1655:7
mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain
  (monty::rc_ptr< ::mosek::fusion::ConeDomain > _3087_other)
{ return new mosek::fusion::ConeDomain(_3087_other); }
mosek::fusion::ConeDomain::ConeDomain
  (monty::rc_ptr< ::mosek::fusion::ConeDomain > _3087_other) : 
   ConeDomain(new mosek::fusion::p_ConeDomain(this))
{ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_3087_other); }
void mosek::fusion::p_ConeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::ConeDomain > _3087_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    key = mosek::fusion::p_ConeDomain::_get_impl(_3087_other)->key;
    axisidx = mosek::fusion::p_ConeDomain::_get_impl(_3087_other)->axisidx;
    axisset = mosek::fusion::p_ConeDomain::_get_impl(_3087_other)->axisset;
    int_flag = mosek::fusion::p_ConeDomain::_get_impl(_3087_other)->int_flag;
    shape = mosek::fusion::p_ConeDomain::_get_impl(_3087_other)->shape;
    alpha = mosek::fusion::p_ConeDomain::_get_impl(_3087_other)->alpha;
    domofs = mosek::fusion::p_ConeDomain::_get_impl(_3087_other)->domofs;
    domsize = mosek::fusion::p_ConeDomain::_get_impl(_3087_other)->domsize;
    indexnames = mosek::fusion::p_ConeDomain::_get_impl(_3087_other)->indexnames;
  }
}
// mosek.fusion.ConeDomain.ctor

// Begin mosek.fusion.ConeDomain.match_shape
// Method mosek.fusion.ConeDomain.match_shape @ src/fusion/domain.mbi:1781:6-1785:7
bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3088_shp)
{
  _checked_ptr_1<int32_t> _ptr__3088_shp(_3088_shp ? _3088_shp->raw() : nullptr, _3088_shp ? _3088_shp->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_3088_shp,shape));
}
// End mosek.fusion.ConeDomain.match_shape

// Begin mosek.fusion.ConeDomain.integral
// Method mosek.fusion.ConeDomain.integral @ src/fusion/domain.mbi:1779:6-76
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral()
{
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.integral

// Begin mosek.fusion.ConeDomain.axisIsSet
// Method mosek.fusion.ConeDomain.axisIsSet @ src/fusion/domain.mbi:1772:6-66
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }
bool mosek::fusion::p_ConeDomain::axisIsSet()
{
  return axisset;
}
// End mosek.fusion.ConeDomain.axisIsSet

// Begin mosek.fusion.ConeDomain.getAxis
// Method mosek.fusion.ConeDomain.getAxis @ src/fusion/domain.mbi:1769:6-66
int32_t mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }
int32_t mosek::fusion::p_ConeDomain::getAxis()
{
  return axisidx;
}
// End mosek.fusion.ConeDomain.getAxis

// Begin mosek.fusion.ConeDomain.axis
// Method mosek.fusion.ConeDomain.axis @ src/fusion/domain.mbi:1766:6-94
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int32_t _3089_a) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_3089_a); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int32_t _3089_a) { return __mosek_2fusion_2ConeDomain__axis(_3089_a); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int32_t _3089_a)
{
  axisidx = _3089_a;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.axis

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ src/fusion/domain.mbi:1762:6-121
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(int32_t _3090_dim0,int32_t _3091_dim1,int32_t _3092_dim2) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3090_dim0,_3091_dim1,_3092_dim2); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(int32_t _3090_dim0,int32_t _3091_dim1,int32_t _3092_dim2) { return __mosek_2fusion_2ConeDomain__withShape(_3090_dim0,_3091_dim1,_3092_dim2); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(int32_t _3090_dim0,int32_t _3091_dim1,int32_t _3092_dim2)
{
  return __mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3090_dim0),(int32_t)(_3091_dim1),(int32_t)(_3092_dim2)}));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ src/fusion/domain.mbi:1761:6-105
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(int32_t _3093_dim0,int32_t _3094_dim1) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3093_dim0,_3094_dim1); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(int32_t _3093_dim0,int32_t _3094_dim1) { return __mosek_2fusion_2ConeDomain__withShape(_3093_dim0,_3094_dim1); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(int32_t _3093_dim0,int32_t _3094_dim1)
{
  return __mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3093_dim0),(int32_t)(_3094_dim1)}));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ src/fusion/domain.mbi:1760:6-89
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(int32_t _3095_dim0) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3095_dim0); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(int32_t _3095_dim0) { return __mosek_2fusion_2ConeDomain__withShape(_3095_dim0); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(int32_t _3095_dim0)
{
  return __mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3095_dim0)}));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ src/fusion/domain.mbi:1759:6-104
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3096_shp) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3096_shp); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3096_shp) { return __mosek_2fusion_2ConeDomain__withShape(_3096_shp); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3096_shp)
{
  _checked_ptr_1<int32_t> _ptr__3096_shp(_3096_shp ? _3096_shp->raw() : nullptr, _3096_shp ? _3096_shp->size(0) : 0);
  return __mosek_2fusion_2ConeDomain__withShape_(::mosek::fusion::Utils::Tools::arraycopy(_3096_shp));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape_
// Method mosek.fusion.ConeDomain.withShape_ @ src/fusion/domain.mbi:1758:6-85
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > > _3097_shp)
{
  _checked_ptr_1<int32_t> _ptr__3097_shp(_3097_shp ? _3097_shp->raw() : nullptr, _3097_shp ? _3097_shp->size(0) : 0);
  shape = _3097_shp;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.withShape_

// Begin mosek.fusion.ConeDomain.withNamesOnAxis
// Method mosek.fusion.ConeDomain.withNamesOnAxis @ src/fusion/domain.mbi:1738:6-1751:7
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3098_names,int32_t _3099_axis) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withNamesOnAxis(_3098_names,_3099_axis); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3098_names,int32_t _3099_axis) { return __mosek_2fusion_2ConeDomain__withNamesOnAxis(_3098_names,_3099_axis); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3098_names,int32_t _3099_axis)
{
  if ((NULL == _3098_names.get()))
  {
    {
      indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(safe_add( _3099_axis,(int)1 ))));
      std::vector<std::string> _10467_;
      for (int32_t _3100_i = (int)0, _10468_ = (int)((_3098_names)->size(0)); _3100_i < _10468_ ; ++_3100_i)
      {
        _10467_.push_back(((*_3098_names)(_3100_i)));
      }
      auto _10469_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10467_.size()),_10467_.begin(),_10467_.end()));
      ((*indexnames)(_3099_axis)) = _10469_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3099_axis,(int)1 )))
  {
    {
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3101_ixnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_3099_axis)));
      int32_t _10470_ = (int)0;
      int32_t _10471_ = (int)((indexnames)->size(0));
      for (int32_t _3102_i = _10470_; _3102_i < _10471_; ++_3102_i)
      {
        {
          ((*_3101_ixnames)(_3102_i)) = ((*indexnames)(_3102_i));
        }
      }
      indexnames = _3101_ixnames;
    }
  }
  {}
  std::vector<std::string> _10472_;
  for (int32_t _3103_i = (int)0, _10473_ = (int)((_3098_names)->size(0)); _3103_i < _10473_ ; ++_3103_i)
  {
    _10472_.push_back(((*_3098_names)(_3103_i)));
  }
  auto _10474_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10472_.size()),_10472_.begin(),_10472_.end()));
  ((*indexnames)(_3099_axis)) = _10474_;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.withNamesOnAxis

// Begin mosek.fusion.ConeDomain.finalize_and_validate_inplace
// Method mosek.fusion.ConeDomain.finalize_and_validate_inplace @ src/fusion/domain.mbi:1663:6-1697:7
void mosek::fusion::p_ConeDomain::finalize_and_validate_inplace(std::shared_ptr< monty::ndarray< int32_t,1 > > _3104_shp)
{
  _checked_ptr_1<int32_t> _ptr__3104_shp(_3104_shp ? _3104_shp->raw() : nullptr, _3104_shp ? _3104_shp->size(0) : 0);
  domsize = (int)1;
  if ((NULL == shape.get()))
  {
    {
      if ((NULL != _3104_shp.get()))
      {
        {
          shape = _3104_shp;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Missing domain shape"));
        }
      }
    }
  }
  else if((NULL != _3104_shp.get()))
  {
    {
      if (((int)((_3104_shp)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
        }
      }
      {}
      int32_t _10475_ = (int)0;
      int32_t _10476_ = (int)((_3104_shp)->size(0));
      for (int32_t _3105_i = _10475_; _3105_i < _10476_; ++_3105_i)
      {
        {
          if ((_ptr__3104_shp[_3105_i] != ((*shape)(_3105_i))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  int32_t _10477_ = (int)0;
  int32_t _10478_ = (int)((shape)->size(0));
  for (int32_t _3106_i = _10477_; _3106_i < _10478_; ++_3106_i)
  {
    {
      domsize *= ((*shape)(_3106_i));
    }
  }
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
        }
      }
      {}
      int32_t _10479_ = (int)0;
      int32_t _10480_ = (int)((shape)->size(0));
      for (int32_t _3107_i = _10479_; _3107_i < _10480_; ++_3107_i)
      {
        {
          if (((NULL != ((*indexnames)(_3107_i)).get()) && ((int)((((*indexnames)(_3107_i)))->size(0)) != ((*shape)(_3107_i)))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  if ((!axisset))
  {
    {
      axisset = true;
      axisidx = ((int)((shape)->size(0)) - (int)1);
    }
  }
  else if(((axisidx < (int)0) || (axisidx >= (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cone axis is invalid"));
    }
  }
  {}
  if (((NULL != domofs.get()) && ((int)((domofs)->size(0)) != domsize)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Domain offset does not match shape"));
    }
  }
  {}
}
// End mosek.fusion.ConeDomain.finalize_and_validate_inplace

// Begin mosek.fusion.ConeDomain.finalize_and_validate
// Method mosek.fusion.ConeDomain.finalize_and_validate @ src/fusion/domain.mbi:1658:6-1662:7
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3108_shp)
{
  _checked_ptr_1<int32_t> _ptr__3108_shp(_3108_shp ? _3108_shp->raw() : nullptr, _3108_shp ? _3108_shp->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::ConeDomain > _3109_res = ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::ConeDomain::t(_pubthis));
  mosek::fusion::p_ConeDomain::_get_impl(_3109_res.get())->finalize_and_validate_inplace(_3108_shp);
  return _3109_res;
}
// End mosek.fusion.ConeDomain.finalize_and_validate

void mosek::fusion::p_ConeDomain::destroy()
{
  indexnames.reset();
  domofs.reset();
  alpha.reset();
  shape.reset();
}
void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }
// } class ConeDomain
// class PSDDomain { // @ src/fusion/domain.mbi:1429:4-1585:5
mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_PSDDomain::p_PSDDomain
  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.PSDDomain.ctor @ src/fusion/domain.mbi:1502:6-1519:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (mosek::fusion::PSDKey _3110_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3111_shp,
    int32_t _3112_conedim1,
    int32_t _3113_conedim2)
{ return new mosek::fusion::PSDDomain(_3110_k,_3111_shp,_3112_conedim1,_3113_conedim2); }
mosek::fusion::PSDDomain::PSDDomain
  (mosek::fusion::PSDKey _3110_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3111_shp,
    int32_t _3112_conedim1,
    int32_t _3113_conedim2) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3110_k,_3111_shp,_3112_conedim1,_3113_conedim2); }
void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _3110_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3111_shp,
    int32_t _3112_conedim1,
    int32_t _3113_conedim2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__3111_shp(_3111_shp ? _3111_shp->raw() : nullptr, _3111_shp ? _3111_shp->size(0) : 0);
    axisIsSet = true;
    shape = _3111_shp;
    key = _3110_k;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _3112_conedim1;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _3113_conedim2;
    indexnames = nullptr;
    int32_t _3114_nd = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _3112_conedim1) && (((int)((shape)->size(0)) > _3113_conedim2) && ((_3112_conedim1 >= (int)0) && ((_3113_conedim2 >= (int)0) && (_3112_conedim1 != _3113_conedim2)))))) && (((*shape)(_3112_conedim1)) == ((*shape)(_3113_conedim2)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.PSDDomain.ctor

// mosek.fusion.PSDDomain.ctor @ src/fusion/domain.mbi:1498:6-1500:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (mosek::fusion::PSDKey _3115_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3116_shp)
{ return new mosek::fusion::PSDDomain(_3115_k,_3116_shp); }
mosek::fusion::PSDDomain::PSDDomain
  (mosek::fusion::PSDKey _3115_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3116_shp) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3115_k,_3116_shp); }
void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _3115_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3116_shp)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__3116_shp(_3116_shp ? _3116_shp->raw() : nullptr, _3116_shp ? _3116_shp->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_3115_k,_3116_shp,((int)((_3116_shp)->size(0)) - (int)2),((int)((_3116_shp)->size(0)) - (int)1));
  }
}
// mosek.fusion.PSDDomain.ctor

// mosek.fusion.PSDDomain.ctor @ src/fusion/domain.mbi:1490:6-1497:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (mosek::fusion::PSDKey _3117_k)
{ return new mosek::fusion::PSDDomain(_3117_k); }
mosek::fusion::PSDDomain::PSDDomain
  (mosek::fusion::PSDKey _3117_k) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3117_k); }
void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _3117_k)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    shape = nullptr;
    key = _3117_k;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
    indexnames = nullptr;
  }
}
// mosek.fusion.PSDDomain.ctor

// mosek.fusion.PSDDomain.ctor @ src/fusion/domain.mbi:1437:6-1444:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (monty::rc_ptr< ::mosek::fusion::PSDDomain > _3118_other)
{ return new mosek::fusion::PSDDomain(_3118_other); }
mosek::fusion::PSDDomain::PSDDomain
  (monty::rc_ptr< ::mosek::fusion::PSDDomain > _3118_other) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3118_other); }
void mosek::fusion::p_PSDDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDDomain > _3118_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    shape = mosek::fusion::p_PSDDomain::_get_impl(_3118_other)->shape;
    key = mosek::fusion::p_PSDDomain::_get_impl(_3118_other)->key;
    conedim1 = mosek::fusion::p_PSDDomain::_get_impl(_3118_other)->conedim1;
    conedim2 = mosek::fusion::p_PSDDomain::_get_impl(_3118_other)->conedim2;
    axisIsSet = mosek::fusion::p_PSDDomain::_get_impl(_3118_other)->axisIsSet;
    indexnames = mosek::fusion::p_PSDDomain::_get_impl(_3118_other)->indexnames;
  }
}
// mosek.fusion.PSDDomain.ctor

// Begin mosek.fusion.PSDDomain.axis
// Method mosek.fusion.PSDDomain.axis @ src/fusion/domain.mbi:1547:6-1566:7
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int32_t _3119_conedim1,int32_t _3120_conedim2) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_3119_conedim1,_3120_conedim2); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int32_t _3119_conedim1,int32_t _3120_conedim2) { return __mosek_2fusion_2PSDDomain__axis(_3119_conedim1,_3120_conedim2); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int32_t _3119_conedim1,int32_t _3120_conedim2)
{
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _3119_conedim1;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _3120_conedim2;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_3119_conedim1 >= (int)0) && ((_3120_conedim2 >= (int)0) && (_3119_conedim1 != _3120_conedim2))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _3119_conedim1) && (((int)((shape)->size(0)) > _3120_conedim2) && ((_3119_conedim1 >= (int)0) && ((_3120_conedim2 >= (int)0) && (_3119_conedim1 != _3120_conedim2)))))) && (((*shape)(_3119_conedim1)) == ((*shape)(_3120_conedim2))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
// End mosek.fusion.PSDDomain.axis

// Begin mosek.fusion.PSDDomain.withNamesOnAxis
// Method mosek.fusion.PSDDomain.withNamesOnAxis @ src/fusion/domain.mbi:1523:6-1536:7
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3121_names,int32_t _3122_axis) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__withNamesOnAxis(_3121_names,_3122_axis); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3121_names,int32_t _3122_axis) { return __mosek_2fusion_2PSDDomain__withNamesOnAxis(_3121_names,_3122_axis); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3121_names,int32_t _3122_axis)
{
  if ((NULL == indexnames.get()))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10481_;
      for (int32_t _3123_i = (int)0, _10482_ = safe_add( _3122_axis,(int)1 ); _3123_i < _10482_ ; ++_3123_i)
      {
        _10481_.push_back(nullptr);
      }
      auto _10483_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10481_.size()),_10481_.begin(),_10481_.end()));
      indexnames = _10483_;
      std::vector<std::string> _10484_;
      for (int32_t _3124_i = (int)0, _10485_ = (int)((_3121_names)->size(0)); _3124_i < _10485_ ; ++_3124_i)
      {
        _10484_.push_back(((*_3121_names)(_3124_i)));
      }
      auto _10486_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10484_.size()),_10484_.begin(),_10484_.end()));
      ((*indexnames)(_3122_axis)) = _10486_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3122_axis,(int)1 )))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10487_;
      for (int32_t _3126_i = (int)0, _10488_ = safe_add( _3122_axis,(int)1 ); _3126_i < _10488_ ; ++_3126_i)
      {
        _10487_.push_back(nullptr);
      }
      auto _10489_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10487_.size()),_10487_.begin(),_10487_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3125_ixnames = _10489_;
      int32_t _10490_ = (int)0;
      int32_t _10491_ = (int)((indexnames)->size(0));
      for (int32_t _3127_i = _10490_; _3127_i < _10491_; ++_3127_i)
      {
        {
          ((*_3125_ixnames)(_3127_i)) = ((*indexnames)(_3127_i));
        }
      }
      indexnames = _3125_ixnames;
    }
  }
  {}
  std::vector<std::string> _10492_;
  for (int32_t _3128_i = (int)0, _10493_ = (int)((_3121_names)->size(0)); _3128_i < _10493_ ; ++_3128_i)
  {
    _10492_.push_back(((*_3121_names)(_3128_i)));
  }
  auto _10494_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10492_.size()),_10492_.begin(),_10492_.end()));
  ((*indexnames)(_3122_axis)) = _10494_;
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
// End mosek.fusion.PSDDomain.withNamesOnAxis

// Begin mosek.fusion.PSDDomain.finalize_and_validate_inplace
// Method mosek.fusion.PSDDomain.finalize_and_validate_inplace @ src/fusion/domain.mbi:1451:6-1487:7
void mosek::fusion::p_PSDDomain::finalize_and_validate_inplace(std::shared_ptr< monty::ndarray< int32_t,1 > > _3129_shp)
{
  _checked_ptr_1<int32_t> _ptr__3129_shp(_3129_shp ? _3129_shp->raw() : nullptr, _3129_shp ? _3129_shp->size(0) : 0);
  if ((NULL != _3129_shp.get()))
  {
    {
      if ((NULL == shape.get()))
      {
        {
          shape = _3129_shp;
        }
      }
      else
      {
        {
          if (((int)((_3129_shp)->size(0)) != (int)((shape)->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
          int32_t _10495_ = (int)0;
          int32_t _10496_ = (int)((_3129_shp)->size(0));
          for (int32_t _3130_i = _10495_; _3130_i < _10496_; ++_3130_i)
          {
            {
              if ((_ptr__3129_shp[_3130_i] != ((*shape)(_3130_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  if (((int)((shape)->size(0)) < (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Positive semidefinite domain must have at least two dimensions"));
    }
  }
  {}
  if ((!axisIsSet))
  {
    {
      conedim1 = ((int)((shape)->size(0)) - (int)2);
      conedim2 = ((int)((shape)->size(0)) - (int)1);
    }
  }
  {}
  if (((conedim1 < (int)0) || ((conedim1 >= (int)((shape)->size(0))) || ((conedim2 < (int)0) || ((conedim2 >= (int)((shape)->size(0))) || (conedim1 == conedim2))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension specification"));
    }
  }
  {}
  if ((((*shape)(conedim1)) != ((*shape)(conedim2))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cone dimensions must have same size"));
    }
  }
  {}
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match the domain shape"));
        }
      }
      else
      {
        {
          int32_t _10497_ = (int)0;
          int32_t _10498_ = (int)((shape)->size(0));
          for (int32_t _3131_i = _10497_; _3131_i < _10498_; ++_3131_i)
          {
            {
              if (((NULL != ((*indexnames)(_3131_i)).get()) && ((int)((((*indexnames)(_3131_i)))->size(0)) != ((*shape)(_3131_i)))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Index names do not match the domain shape"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
}
// End mosek.fusion.PSDDomain.finalize_and_validate_inplace

// Begin mosek.fusion.PSDDomain.finalize_and_validate
// Method mosek.fusion.PSDDomain.finalize_and_validate @ src/fusion/domain.mbi:1446:6-1450:7
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3132_shp)
{
  _checked_ptr_1<int32_t> _ptr__3132_shp(_3132_shp ? _3132_shp->raw() : nullptr, _3132_shp ? _3132_shp->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::PSDDomain > _3133_res = ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDDomain::t(_pubthis));
  mosek::fusion::p_PSDDomain::_get_impl(_3133_res.get())->finalize_and_validate_inplace(_3132_shp);
  return _3133_res;
}
// End mosek.fusion.PSDDomain.finalize_and_validate

void mosek::fusion::p_PSDDomain::destroy()
{
  indexnames.reset();
  shape.reset();
}
void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }
// } class PSDDomain
// class SymmetricRangeDomain { // @ src/fusion/domain.mbi:1384:4-1399:5
mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }
mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain
  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SymmetricRangeDomain.ctor @ src/fusion/domain.mbi:1388:6-1397:7
mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain
  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3134_other)
{ return new mosek::fusion::SymmetricRangeDomain(_3134_other); }
mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain
  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3134_other) : 
   SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this))
{ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_3134_other); }
void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3134_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_RangeDomain::_initialize(_3134_other);
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int32_t _10499_;
    bool _10500_ = (NULL == shape.get());
    if (_10500_)
    {
      _10499_ = (int)0;
    }
    else
    {
      _10499_ = ((*shape)((int)0));
    }
    dim = _10499_;
  }
}
// mosek.fusion.SymmetricRangeDomain.ctor

void mosek::fusion::p_SymmetricRangeDomain::destroy()
{
}
void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }
// } class SymmetricRangeDomain
// class RangeDomain { // @ src/fusion/domain.mbi:1120:4-1376:5
mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_RangeDomain::p_RangeDomain
  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.RangeDomain.ctor @ src/fusion/domain.mbi:1268:6-1275:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (bool _3135_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3136_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3137_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3138_dims)
{ return new mosek::fusion::RangeDomain(_3135_scalable,_3136_lb,_3137_ub,_3138_dims); }
mosek::fusion::RangeDomain::RangeDomain
  (bool _3135_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3136_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3137_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3138_dims) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3135_scalable,_3136_lb,_3137_ub,_3138_dims); }
void mosek::fusion::p_RangeDomain::_initialize  (bool _3135_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3136_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3137_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3138_dims)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3136_lb(_3136_lb ? _3136_lb->raw() : nullptr, _3136_lb ? _3136_lb->size(0) : 0);
    _checked_ptr_1<double> _ptr__3137_ub(_3137_ub ? _3137_ub->raw() : nullptr, _3137_ub ? _3137_ub->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3138_dims(_3138_dims ? _3138_dims->raw() : nullptr, _3138_dims ? _3138_dims->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_3135_scalable,_3136_lb,_3137_ub,_3138_dims,nullptr,(int)1);
  }
}
// mosek.fusion.RangeDomain.ctor

// mosek.fusion.RangeDomain.ctor @ src/fusion/domain.mbi:1258:6-1266:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (bool _3139_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3140_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3141_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3142_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3143_sp)
{ return new mosek::fusion::RangeDomain(_3139_scalable,_3140_lb,_3141_ub,_3142_dims,_3143_sp); }
mosek::fusion::RangeDomain::RangeDomain
  (bool _3139_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3140_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3141_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3142_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3143_sp) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3139_scalable,_3140_lb,_3141_ub,_3142_dims,_3143_sp); }
void mosek::fusion::p_RangeDomain::_initialize  (bool _3139_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3140_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3141_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3142_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3143_sp)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3140_lb(_3140_lb ? _3140_lb->raw() : nullptr, _3140_lb ? _3140_lb->size(0) : 0);
    _checked_ptr_1<double> _ptr__3141_ub(_3141_ub ? _3141_ub->raw() : nullptr, _3141_ub ? _3141_ub->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3142_dims(_3142_dims ? _3142_dims->raw() : nullptr, _3142_dims ? _3142_dims->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_3139_scalable,_3140_lb,_3141_ub,_3142_dims,_3143_sp,(int)1);
  }
}
// mosek.fusion.RangeDomain.ctor

// mosek.fusion.RangeDomain.ctor @ src/fusion/domain.mbi:1237:6-1256:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (bool _3144_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3145_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3146_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3147_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3148_sp,
    int32_t _3149_steal)
{ return new mosek::fusion::RangeDomain(_3144_scalable,_3145_lb,_3146_ub,_3147_dims,_3148_sp,_3149_steal); }
mosek::fusion::RangeDomain::RangeDomain
  (bool _3144_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3145_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3146_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3147_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3148_sp,
    int32_t _3149_steal) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3144_scalable,_3145_lb,_3146_ub,_3147_dims,_3148_sp,_3149_steal); }
void mosek::fusion::p_RangeDomain::_initialize  (bool _3144_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3145_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3146_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3147_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3148_sp,
    int32_t _3149_steal)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3145_lb(_3145_lb ? _3145_lb->raw() : nullptr, _3145_lb ? _3145_lb->size(0) : 0);
    _checked_ptr_1<double> _ptr__3146_ub(_3146_ub ? _3146_ub->raw() : nullptr, _3146_ub ? _3146_ub->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3147_dims(_3147_dims ? _3147_dims->raw() : nullptr, _3147_dims ? _3147_dims->size(0) : 0);
    cardinal_flag = false;
    shape = _3147_dims;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _3144_scalable;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _3146_ub;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _3145_lb;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _3148_sp;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->indexnames = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->domsize = (int)0;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->nelements = (int)0;
  }
}
// mosek.fusion.RangeDomain.ctor

// mosek.fusion.RangeDomain.ctor @ src/fusion/domain.mbi:1222:6-1235:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3150_other)
{ return new mosek::fusion::RangeDomain(_3150_other); }
mosek::fusion::RangeDomain::RangeDomain
  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3150_other) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3150_other); }
void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3150_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->lb;
    domsize = mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->domsize;
    nelements = mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->nelements;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->empty;
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _10501_;
    bool _10502_ = (NULL != mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->indexnames.get());
    if (_10502_)
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10503_;
      for (int32_t _3151_i = (int)0, _10504_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->indexnames)->size(0)); _3151_i < _10504_ ; ++_3151_i)
      {
        _10503_.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_3150_other)->indexnames)(_3151_i)));
      }
      auto _10505_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10503_.size()),_10503_.begin(),_10503_.end()));
      _10501_ = _10505_;
    }
    else
    {
      _10501_ = nullptr;
    }
    indexnames = _10501_;
  }
}
// mosek.fusion.RangeDomain.ctor

// Begin mosek.fusion.RangeDomain.symmetric
// Method mosek.fusion.RangeDomain.symmetric @ src/fusion/domain.mbi:1375:6-96
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__symmetric() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric() { return __mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__symmetric()
{
  return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
}
// End mosek.fusion.RangeDomain.symmetric

// Begin mosek.fusion.RangeDomain.sparse
// Method mosek.fusion.RangeDomain.sparse @ src/fusion/domain.mbi:1364:6-1371:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3152_sparsity) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_3152_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3152_sparsity) { return __mosek_2fusion_2RangeDomain__sparse(_3152_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3152_sparsity)
{
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3152_sparsity)->size(0)),(int)((_3152_sparsity)->size(1)))));
  {
    int32_t _3153_i = (int)0;
    for(;(_3153_i < (int)((_3152_sparsity)->size(0)));++ _3153_i)
    {
      {
        {
          int32_t _3154_j = (int)0;
          for(;(_3154_j < (int)((_3152_sparsity)->size(1)));++ _3154_j)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_3153_i,_3154_j)) = ((*_3152_sparsity)(_3153_i,_3154_j));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.sparse

// Begin mosek.fusion.RangeDomain.sparse
// Method mosek.fusion.RangeDomain.sparse @ src/fusion/domain.mbi:1350:6-1356:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3155_sparsity) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_3155_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3155_sparsity) { return __mosek_2fusion_2RangeDomain__sparse(_3155_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3155_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3155_sparsity(_3155_sparsity ? _3155_sparsity->raw() : nullptr, _3155_sparsity ? _3155_sparsity->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3155_sparsity)->size(0)),(int)1)));
  int32_t _10506_ = (int)0;
  int32_t _10507_ = (int)((_3155_sparsity)->size(0));
  for (int32_t _3156_i = _10506_; _3156_i < _10507_; ++_3156_i)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_3156_i,(int)0)) = _ptr__3155_sparsity[_3156_i];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.sparse

// Begin mosek.fusion.RangeDomain.sparse
// Method mosek.fusion.RangeDomain.sparse @ src/fusion/domain.mbi:1338:6-1343:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse()
{
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.sparse

// Begin mosek.fusion.RangeDomain.integral
// Method mosek.fusion.RangeDomain.integral @ src/fusion/domain.mbi:1330:6-83
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral()
{
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.integral

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ src/fusion/domain.mbi:1317:6-124
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int32_t _3157_dim0,int32_t _3158_dim1,int32_t _3159_dim2) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3157_dim0,_3158_dim1,_3159_dim2); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int32_t _3157_dim0,int32_t _3158_dim1,int32_t _3159_dim2) { return __mosek_2fusion_2RangeDomain__withShape(_3157_dim0,_3158_dim1,_3159_dim2); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int32_t _3157_dim0,int32_t _3158_dim1,int32_t _3159_dim2)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3157_dim0),(int32_t)(_3158_dim1),(int32_t)(_3159_dim2)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ src/fusion/domain.mbi:1316:6-108
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int32_t _3160_dim0,int32_t _3161_dim1) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3160_dim0,_3161_dim1); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int32_t _3160_dim0,int32_t _3161_dim1) { return __mosek_2fusion_2RangeDomain__withShape(_3160_dim0,_3161_dim1); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int32_t _3160_dim0,int32_t _3161_dim1)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3160_dim0),(int32_t)(_3161_dim1)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ src/fusion/domain.mbi:1315:6-92
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int32_t _3162_dim0) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3162_dim0); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int32_t _3162_dim0) { return __mosek_2fusion_2RangeDomain__withShape(_3162_dim0); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int32_t _3162_dim0)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3162_dim0)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ src/fusion/domain.mbi:1314:6-83
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3163_shp) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3163_shp); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3163_shp) { return __mosek_2fusion_2RangeDomain__withShape(_3163_shp); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3163_shp)
{
  _checked_ptr_1<int32_t> _ptr__3163_shp(_3163_shp ? _3163_shp->raw() : nullptr, _3163_shp ? _3163_shp->size(0) : 0);
  shape = _3163_shp;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withNamesOnAxis
// Method mosek.fusion.RangeDomain.withNamesOnAxis @ src/fusion/domain.mbi:1290:6-1303:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3164_names,int32_t _3165_axis) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withNamesOnAxis(_3164_names,_3165_axis); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3164_names,int32_t _3165_axis) { return __mosek_2fusion_2RangeDomain__withNamesOnAxis(_3164_names,_3165_axis); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3164_names,int32_t _3165_axis)
{
  if ((NULL == indexnames.get()))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10508_;
      for (int32_t _3166_i = (int)0, _10509_ = safe_add( _3165_axis,(int)1 ); _3166_i < _10509_ ; ++_3166_i)
      {
        _10508_.push_back(nullptr);
      }
      auto _10510_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10508_.size()),_10508_.begin(),_10508_.end()));
      indexnames = _10510_;
      std::vector<std::string> _10511_;
      for (int32_t _3167_i = (int)0, _10512_ = (int)((_3164_names)->size(0)); _3167_i < _10512_ ; ++_3167_i)
      {
        _10511_.push_back(((*_3164_names)(_3167_i)));
      }
      auto _10513_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10511_.size()),_10511_.begin(),_10511_.end()));
      ((*indexnames)(_3165_axis)) = _10513_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3165_axis,(int)1 )))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10514_;
      for (int32_t _3169_i = (int)0, _10515_ = safe_add( _3165_axis,(int)1 ); _3169_i < _10515_ ; ++_3169_i)
      {
        _10514_.push_back(nullptr);
      }
      auto _10516_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10514_.size()),_10514_.begin(),_10514_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3168_ixnames = _10516_;
      int32_t _10517_ = (int)0;
      int32_t _10518_ = (int)((indexnames)->size(0));
      for (int32_t _3170_i = _10517_; _3170_i < _10518_; ++_3170_i)
      {
        {
          ((*_3168_ixnames)(_3170_i)) = ((*indexnames)(_3170_i));
        }
      }
      indexnames = _3168_ixnames;
    }
  }
  {}
  std::vector<std::string> _10519_;
  for (int32_t _3171_i = (int)0, _10520_ = (int)((_3164_names)->size(0)); _3171_i < _10520_ ; ++_3171_i)
  {
    _10519_.push_back(((*_3164_names)(_3171_i)));
  }
  auto _10521_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10519_.size()),_10519_.begin(),_10519_.end()));
  ((*indexnames)(_3165_axis)) = _10521_;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withNamesOnAxis

// Begin mosek.fusion.RangeDomain.match_shape
// Method mosek.fusion.RangeDomain.match_shape @ src/fusion/domain.mbi:1277:6-1288:7
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3172_shp)
{
  _checked_ptr_1<int32_t> _ptr__3172_shp(_3172_shp ? _3172_shp->raw() : nullptr, _3172_shp ? _3172_shp->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_3172_shp)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int32_t _10522_ = (int)0;
      int32_t _10523_ = (int)((shape)->size(0));
      for (int32_t _3173_i = _10522_; _3173_i < _10523_; ++_3173_i)
      {
        {
          if ((((*shape)(_3173_i)) != _ptr__3172_shp[_3173_i]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
// End mosek.fusion.RangeDomain.match_shape

// Begin mosek.fusion.RangeDomain.finalize_and_validate_inplace
// Method mosek.fusion.RangeDomain.finalize_and_validate_inplace @ src/fusion/domain.mbi:1156:6-1220:7
void mosek::fusion::p_RangeDomain::finalize_and_validate_inplace(std::shared_ptr< monty::ndarray< int32_t,1 > > _3174_shp)
{
  _checked_ptr_1<int32_t> _ptr__3174_shp(_3174_shp ? _3174_shp->raw() : nullptr, _3174_shp ? _3174_shp->size(0) : 0);
  domsize = (int)1;
  if (scalable)
  {
    {
      if ((NULL != _3174_shp.get()))
      {
        {
          shape = _3174_shp;
        }
      }
      else
      {
        {
          shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
        }
      }
      int32_t _10524_ = (int)0;
      int32_t _10525_ = (int)((shape)->size(0));
      for (int32_t _3175_i = _10524_; _3175_i < _10525_; ++_3175_i)
      {
        {
          domsize *= ((*shape)(_3175_i));
        }
      }
    }
  }
  else
  {
    {
      if ((NULL != _3174_shp.get()))
      {
        {
          if (((int)((_3174_shp)->size(0)) != (int)((shape)->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
          int32_t _10526_ = (int)0;
          int32_t _10527_ = (int)((_3174_shp)->size(0));
          for (int32_t _3176_i = _10526_; _3176_i < _10527_; ++_3176_i)
          {
            {
              if ((_ptr__3174_shp[_3176_i] != ((*shape)(_3176_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
                }
              }
              {}
            }
          }
          int32_t _10528_ = (int)0;
          int32_t _10529_ = (int)((shape)->size(0));
          for (int32_t _3177_i = _10528_; _3177_i < _10529_; ++_3177_i)
          {
            {
              domsize *= ((*shape)(_3177_i));
            }
          }
        }
      }
      {}
    }
  }
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
        }
      }
      {}
      int32_t _10530_ = (int)0;
      int32_t _10531_ = (int)((shape)->size(0));
      for (int32_t _3178_i = _10530_; _3178_i < _10531_; ++_3178_i)
      {
        {
          if (((NULL != ((*indexnames)(_3178_i)).get()) && ((int)((((*indexnames)(_3178_i)))->size(0)) != ((*shape)(_3178_i)))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  if ((NULL != sparsity.get()))
  {
    {
      nelements = (int)((sparsity)->size(0));
      if (((int)((shape)->size(0)) != (int)((sparsity)->size(1))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and sparsity pattern"));
        }
      }
      {}
      int32_t _10532_ = (int)0;
      int64_t _10533_ = nelements;
      for (int64_t _3179_i = _10532_; _3179_i < _10533_; ++_3179_i)
      {
        {
          int32_t _10534_ = (int)0;
          int32_t _10535_ = (int)((sparsity)->size(1));
          for (int32_t _3180_j = _10534_; _3180_j < _10535_; ++_3180_j)
          {
            {
              if (((((*sparsity)(_3179_i,_3180_j)) < (int)0) || (((*sparsity)(_3179_i,_3180_j)) >= ((*shape)(_3180_j)))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern entry is out of bounds"));
                }
              }
              {}
            }
          }
        }
      }
      if (((!scalable) && ((NULL != lb.get()) && ((int)((lb)->size(0)) != nelements))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern does not match bound"));
        }
      }
      {}
      if (((!scalable) && ((NULL != ub.get()) && ((int)((ub)->size(0)) != nelements))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern does not match bound"));
        }
      }
      {}
    }
  }
  else
  {
    {
      nelements = domsize;
      if (((NULL != lb.get()) && (!scalable)))
      {
        {
          if (((int)((lb)->size(0)) != nelements))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Domain bound does not match shape"));
            }
          }
          {}
        }
      }
      {}
      if (((NULL != ub.get()) && (!scalable)))
      {
        {
          if (((int)((ub)->size(0)) != nelements))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Domain bound does not match shape"));
            }
          }
          {}
        }
      }
      {}
    }
  }
}
// End mosek.fusion.RangeDomain.finalize_and_validate_inplace

// Begin mosek.fusion.RangeDomain.finalize_and_validate
// Method mosek.fusion.RangeDomain.finalize_and_validate @ src/fusion/domain.mbi:1151:6-1155:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3181_shp)
{
  _checked_ptr_1<int32_t> _ptr__3181_shp(_3181_shp ? _3181_shp->raw() : nullptr, _3181_shp ? _3181_shp->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::RangeDomain > _3182_res = ::mosek::fusion::p_RangeDomain::_new_RangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
  mosek::fusion::p_RangeDomain::_get_impl(_3182_res.get())->finalize_and_validate_inplace(_3181_shp);
  return _3182_res;
}
// End mosek.fusion.RangeDomain.finalize_and_validate

void mosek::fusion::p_RangeDomain::destroy()
{
  indexnames.reset();
  ub.reset();
  lb.reset();
  sparsity.reset();
  shape.reset();
}
void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }
// } class RangeDomain
// class SymmetricLinearDomain { // @ src/fusion/domain.mbi:1023:4-1093:5
mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain
  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.SymmetricLinearDomain.ctor @ src/fusion/domain.mbi:1034:6-1048:7
mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain
  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3183_other)
{ return new mosek::fusion::SymmetricLinearDomain(_3183_other); }
mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain
  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3183_other) : 
   SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this))
{ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_3183_other); }
void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3183_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    dom = _3183_other;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_3183_other)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_3183_other)->key;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_3183_other)->cardinal_flag;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_3183_other)->sparsity;
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int32_t _10536_;
    bool _10537_ = (NULL == shape.get());
    if (_10537_)
    {
      _10536_ = (int)0;
    }
    else
    {
      _10536_ = ((*shape)((int)0));
    }
    dim = _10536_;
  }
}
// mosek.fusion.SymmetricLinearDomain.ctor

// Begin mosek.fusion.SymmetricLinearDomain.sparse
// Method mosek.fusion.SymmetricLinearDomain.sparse @ src/fusion/domain.mbi:1085:6-1092:7
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3184_sparsity) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_3184_sparsity); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3184_sparsity) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_3184_sparsity); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3184_sparsity)
{
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3184_sparsity)->size(0)),(int)((_3184_sparsity)->size(1)))));
  {
    int32_t _3185_i = (int)0;
    for(;(_3185_i < (int)((_3184_sparsity)->size(0)));++ _3185_i)
    {
      {
        {
          int32_t _3186_j = (int)0;
          for(;(_3186_j < (int)((_3184_sparsity)->size(1)));++ _3186_j)
          {
            {
              ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_3185_i,_3186_j)) = ((*_3184_sparsity)(_3185_i,_3186_j));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
// End mosek.fusion.SymmetricLinearDomain.sparse

// Begin mosek.fusion.SymmetricLinearDomain.sparse
// Method mosek.fusion.SymmetricLinearDomain.sparse @ src/fusion/domain.mbi:1071:6-1077:7
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3187_sparsity) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_3187_sparsity); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3187_sparsity) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_3187_sparsity); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3187_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3187_sparsity(_3187_sparsity ? _3187_sparsity->raw() : nullptr, _3187_sparsity ? _3187_sparsity->size(0) : 0);
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3187_sparsity)->size(0)),(int)1)));
  int32_t _10538_ = (int)0;
  int32_t _10539_ = (int)((_3187_sparsity)->size(0));
  for (int32_t _3188_i = _10538_; _3188_i < _10539_; ++_3188_i)
  {
    {
      ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_3188_i,(int)0)) = _ptr__3187_sparsity[_3188_i];
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
// End mosek.fusion.SymmetricLinearDomain.sparse

// Begin mosek.fusion.SymmetricLinearDomain.integral
// Method mosek.fusion.SymmetricLinearDomain.integral @ src/fusion/domain.mbi:1063:6-92
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__integral() { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral() { return __mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__integral()
{
  cardinal_flag = true;
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
// End mosek.fusion.SymmetricLinearDomain.integral

// Begin mosek.fusion.SymmetricLinearDomain.match_shape
// Method mosek.fusion.SymmetricLinearDomain.match_shape @ src/fusion/domain.mbi:1050:6-1055:7
bool mosek::fusion::p_SymmetricLinearDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3189_shp)
{
  _checked_ptr_1<int32_t> _ptr__3189_shp(_3189_shp ? _3189_shp->raw() : nullptr, _3189_shp ? _3189_shp->size(0) : 0);
  int32_t _10540_ = (int)0;
  int32_t _10541_ = (int)((_3189_shp)->size(0));
  for (int32_t _3190_i = _10540_; _3190_i < _10541_; ++_3190_i)
  {
    {
      if ((_ptr__3189_shp[_3190_i] == ((*shape)(_3190_i))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.SymmetricLinearDomain.match_shape

void mosek::fusion::p_SymmetricLinearDomain::destroy()
{
  sparsity.reset();
  shape.reset();
  dom.reset();
}
void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }
// } class SymmetricLinearDomain
// class LinearDomain { // @ src/fusion/domain.mbi:765:4-1016:5
mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_LinearDomain::p_LinearDomain
  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.LinearDomain.ctor @ src/fusion/domain.mbi:909:6-915:6
mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain
  (mosek::fusion::RelationKey _3191_k,
    bool _3192_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3193_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3194_dims)
{ return new mosek::fusion::LinearDomain(_3191_k,_3192_scalable,_3193_rhs,_3194_dims); }
mosek::fusion::LinearDomain::LinearDomain
  (mosek::fusion::RelationKey _3191_k,
    bool _3192_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3193_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3194_dims) : 
   LinearDomain(new mosek::fusion::p_LinearDomain(this))
{ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_3191_k,_3192_scalable,_3193_rhs,_3194_dims); }
void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _3191_k,
    bool _3192_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3193_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3194_dims)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3193_rhs(_3193_rhs ? _3193_rhs->raw() : nullptr, _3193_rhs ? _3193_rhs->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3194_dims(_3194_dims ? _3194_dims->raw() : nullptr, _3194_dims ? _3194_dims->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_3191_k,_3192_scalable,_3193_rhs,_3194_dims,nullptr,(int)1);
  }
}
// mosek.fusion.LinearDomain.ctor

// mosek.fusion.LinearDomain.ctor @ src/fusion/domain.mbi:890:6-907:7
mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain
  (mosek::fusion::RelationKey _3195_k,
    bool _3196_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3197_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3198_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3199_sp,
    int32_t _3200_steal)
{ return new mosek::fusion::LinearDomain(_3195_k,_3196_scalable,_3197_rhs,_3198_dims,_3199_sp,_3200_steal); }
mosek::fusion::LinearDomain::LinearDomain
  (mosek::fusion::RelationKey _3195_k,
    bool _3196_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3197_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3198_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3199_sp,
    int32_t _3200_steal) : 
   LinearDomain(new mosek::fusion::p_LinearDomain(this))
{ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_3195_k,_3196_scalable,_3197_rhs,_3198_dims,_3199_sp,_3200_steal); }
void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _3195_k,
    bool _3196_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3197_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3198_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3199_sp,
    int32_t _3200_steal)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3197_rhs(_3197_rhs ? _3197_rhs->raw() : nullptr, _3197_rhs ? _3197_rhs->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3198_dims(_3198_dims ? _3198_dims->raw() : nullptr, _3198_dims ? _3198_dims->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _3196_scalable;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _3198_dims;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _3195_k;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _3197_rhs;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _3199_sp;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
    indexnames = nullptr;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->domsize = (int)0;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->nelements = (int)0;
  }
}
// mosek.fusion.LinearDomain.ctor

// mosek.fusion.LinearDomain.ctor @ src/fusion/domain.mbi:875:6-888:7
mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain
  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3201_other)
{ return new mosek::fusion::LinearDomain(_3201_other); }
mosek::fusion::LinearDomain::LinearDomain
  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3201_other) : 
   LinearDomain(new mosek::fusion::p_LinearDomain(this))
{ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_3201_other); }
void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3201_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_3201_other)->scalable;
    nelements = mosek::fusion::p_LinearDomain::_get_impl(_3201_other)->nelements;
    domsize = mosek::fusion::p_LinearDomain::_get_impl(_3201_other)->domsize;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_3201_other)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_3201_other)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_3201_other)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_3201_other)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_3201_other)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_3201_other)->empty;
    indexnames = mosek::fusion::p_LinearDomain::_get_impl(_3201_other)->indexnames;
  }
}
// mosek.fusion.LinearDomain.ctor

// Begin mosek.fusion.LinearDomain.symmetric
// Method mosek.fusion.LinearDomain.symmetric @ src/fusion/domain.mbi:1015:6-98
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__symmetric() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric() { return __mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__symmetric()
{
  return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
}
// End mosek.fusion.LinearDomain.symmetric

// Begin mosek.fusion.LinearDomain.sparse
// Method mosek.fusion.LinearDomain.sparse @ src/fusion/domain.mbi:1003:6-1011:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3202_sparsity) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_3202_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3202_sparsity) { return __mosek_2fusion_2LinearDomain__sparse(_3202_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3202_sparsity)
{
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3202_sparsity)->size(0)),(int)((_3202_sparsity)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int32_t _3203_i = (int)0;
    for(;(_3203_i < (int)((_3202_sparsity)->size(0)));++ _3203_i)
    {
      {
        {
          int32_t _3204_j = (int)0;
          for(;(_3204_j < (int)((_3202_sparsity)->size(1)));++ _3204_j)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_3203_i,_3204_j)) = ((*_3202_sparsity)(_3203_i,_3204_j));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.sparse

// Begin mosek.fusion.LinearDomain.sparse
// Method mosek.fusion.LinearDomain.sparse @ src/fusion/domain.mbi:988:6-995:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3205_sparsity) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_3205_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3205_sparsity) { return __mosek_2fusion_2LinearDomain__sparse(_3205_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3205_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3205_sparsity(_3205_sparsity ? _3205_sparsity->raw() : nullptr, _3205_sparsity ? _3205_sparsity->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3205_sparsity)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int32_t _10542_ = (int)0;
  int32_t _10543_ = (int)((_3205_sparsity)->size(0));
  for (int32_t _3206_i = _10542_; _3206_i < _10543_; ++_3206_i)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_3206_i,(int)0)) = _ptr__3205_sparsity[_3206_i];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.sparse

// Begin mosek.fusion.LinearDomain.sparse
// Method mosek.fusion.LinearDomain.sparse @ src/fusion/domain.mbi:976:6-981:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse()
{
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.sparse

// Begin mosek.fusion.LinearDomain.integral
// Method mosek.fusion.LinearDomain.integral @ src/fusion/domain.mbi:966:6-83
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral()
{
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.integral

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ src/fusion/domain.mbi:958:6-125
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int32_t _3207_dim0,int32_t _3208_dim1,int32_t _3209_dim2) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3207_dim0,_3208_dim1,_3209_dim2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int32_t _3207_dim0,int32_t _3208_dim1,int32_t _3209_dim2) { return __mosek_2fusion_2LinearDomain__withShape(_3207_dim0,_3208_dim1,_3209_dim2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int32_t _3207_dim0,int32_t _3208_dim1,int32_t _3209_dim2)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3207_dim0),(int32_t)(_3208_dim1),(int32_t)(_3209_dim2)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ src/fusion/domain.mbi:957:6-109
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int32_t _3210_dim0,int32_t _3211_dim1) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3210_dim0,_3211_dim1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int32_t _3210_dim0,int32_t _3211_dim1) { return __mosek_2fusion_2LinearDomain__withShape(_3210_dim0,_3211_dim1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int32_t _3210_dim0,int32_t _3211_dim1)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3210_dim0),(int32_t)(_3211_dim1)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ src/fusion/domain.mbi:956:6-93
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int32_t _3212_dim0) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3212_dim0); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int32_t _3212_dim0) { return __mosek_2fusion_2LinearDomain__withShape(_3212_dim0); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int32_t _3212_dim0)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3212_dim0)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ src/fusion/domain.mbi:955:6-85
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3213_shp) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3213_shp); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3213_shp) { return __mosek_2fusion_2LinearDomain__withShape(_3213_shp); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3213_shp)
{
  _checked_ptr_1<int32_t> _ptr__3213_shp(_3213_shp ? _3213_shp->raw() : nullptr, _3213_shp ? _3213_shp->size(0) : 0);
  shape = _3213_shp;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withNamesOnAxis
// Method mosek.fusion.LinearDomain.withNamesOnAxis @ src/fusion/domain.mbi:929:6-942:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3214_names,int32_t _3215_axis) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withNamesOnAxis(_3214_names,_3215_axis); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3214_names,int32_t _3215_axis) { return __mosek_2fusion_2LinearDomain__withNamesOnAxis(_3214_names,_3215_axis); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3214_names,int32_t _3215_axis)
{
  if ((NULL == indexnames.get()))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10544_;
      for (int32_t _3216_i = (int)0, _10545_ = safe_add( _3215_axis,(int)1 ); _3216_i < _10545_ ; ++_3216_i)
      {
        _10544_.push_back(nullptr);
      }
      auto _10546_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10544_.size()),_10544_.begin(),_10544_.end()));
      indexnames = _10546_;
      std::vector<std::string> _10547_;
      for (int32_t _3217_i = (int)0, _10548_ = (int)((_3214_names)->size(0)); _3217_i < _10548_ ; ++_3217_i)
      {
        _10547_.push_back(((*_3214_names)(_3217_i)));
      }
      auto _10549_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10547_.size()),_10547_.begin(),_10547_.end()));
      ((*indexnames)(_3215_axis)) = _10549_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3215_axis,(int)1 )))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10550_;
      for (int32_t _3219_i = (int)0, _10551_ = safe_add( _3215_axis,(int)1 ); _3219_i < _10551_ ; ++_3219_i)
      {
        _10550_.push_back(nullptr);
      }
      auto _10552_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10550_.size()),_10550_.begin(),_10550_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3218_ixnames = _10552_;
      int32_t _10553_ = (int)0;
      int32_t _10554_ = (int)((indexnames)->size(0));
      for (int32_t _3220_i = _10553_; _3220_i < _10554_; ++_3220_i)
      {
        {
          ((*_3218_ixnames)(_3220_i)) = ((*indexnames)(_3220_i));
        }
      }
      indexnames = _3218_ixnames;
    }
  }
  {}
  std::vector<std::string> _10555_;
  for (int32_t _3221_i = (int)0, _10556_ = (int)((_3214_names)->size(0)); _3221_i < _10556_ ; ++_3221_i)
  {
    _10555_.push_back(((*_3214_names)(_3221_i)));
  }
  auto _10557_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10555_.size()),_10555_.begin(),_10555_.end()));
  ((*indexnames)(_3215_axis)) = _10557_;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withNamesOnAxis

// Begin mosek.fusion.LinearDomain.match_shape
// Method mosek.fusion.LinearDomain.match_shape @ src/fusion/domain.mbi:917:6-925:7
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3222_shp)
{
  _checked_ptr_1<int32_t> _ptr__3222_shp(_3222_shp ? _3222_shp->raw() : nullptr, _3222_shp ? _3222_shp->size(0) : 0);
  if ((!scalable))
  {
    {
      int32_t _10558_ = (int)0;
      int32_t _10559_ = (int)((_3222_shp)->size(0));
      for (int32_t _3223_i = _10558_; _3223_i < _10559_; ++_3223_i)
      {
        {
          if ((_ptr__3222_shp[_3223_i] == ((*shape)(_3223_i))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
// End mosek.fusion.LinearDomain.match_shape

// Begin mosek.fusion.LinearDomain.finalize_and_validate_inplace
// Method mosek.fusion.LinearDomain.finalize_and_validate_inplace @ src/fusion/domain.mbi:804:6-872:7
void mosek::fusion::p_LinearDomain::finalize_and_validate_inplace(std::shared_ptr< monty::ndarray< int32_t,1 > > _3224_shp)
{
  _checked_ptr_1<int32_t> _ptr__3224_shp(_3224_shp ? _3224_shp->raw() : nullptr, _3224_shp ? _3224_shp->size(0) : 0);
  if (scalable)
  {
    {
      if ((NULL == shape.get()))
      {
        {
          if (((NULL != sparsity.get()) && (NULL == _3224_shp.get())))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Sparse domain requires a fixed shape"));
            }
          }
          {}
          if ((NULL != _3224_shp.get()))
          {
            {
              shape = _3224_shp;
            }
          }
          else
          {
            {
              shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((NULL != _3224_shp.get()))
      {
        {
          if (((int)((_3224_shp)->size(0)) != (int)((shape)->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
          int32_t _10560_ = (int)0;
          int32_t _10561_ = (int)((_3224_shp)->size(0));
          for (int32_t _3225_i = _10560_; _3225_i < _10561_; ++_3225_i)
          {
            {
              if ((_ptr__3224_shp[_3225_i] != ((*shape)(_3225_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
                }
              }
              {}
            }
          }
        }
      }
      {}
    }
  }
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) > (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
        }
      }
      {}
      int32_t _10562_ = (int)0;
      int32_t _10563_ = (int)((indexnames)->size(0));
      for (int32_t _3226_i = _10562_; _3226_i < _10563_; ++_3226_i)
      {
        {
          if (((NULL != ((*indexnames)(_3226_i)).get()) && ((int)((((*indexnames)(_3226_i)))->size(0)) != ((*shape)(_3226_i)))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
            }
          }
          {}
        }
      }
      if (((int)((indexnames)->size(0)) < (int)((shape)->size(0))))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3227_tmpindexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((int)((shape)->size(0)))));
          int32_t _10564_ = (int)0;
          int32_t _10565_ = (int)((indexnames)->size(0));
          for (int32_t _3228_i = _10564_; _3228_i < _10565_; ++_3228_i)
          {
            {
              ((*_3227_tmpindexnames)(_3228_i)) = ((*indexnames)(_3228_i));
            }
          }
          indexnames = _3227_tmpindexnames;
        }
      }
      {}
    }
  }
  {}
  domsize = (int)1;
  int32_t _10566_ = (int)0;
  int32_t _10567_ = (int)((shape)->size(0));
  for (int32_t _3229_i = _10566_; _3229_i < _10567_; ++_3229_i)
  {
    {
      domsize *= ((*shape)(_3229_i));
    }
  }
  if ((NULL != sparsity.get()))
  {
    {
      nelements = (int)((sparsity)->size(0));
      if (((int)((shape)->size(0)) != (int)((sparsity)->size(1))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and sparsity pattern"));
        }
      }
      {}
      int32_t _10568_ = (int)0;
      int64_t _10569_ = nelements;
      for (int64_t _3230_i = _10568_; _3230_i < _10569_; ++_3230_i)
      {
        {
          int32_t _10570_ = (int)0;
          int32_t _10571_ = (int)((sparsity)->size(1));
          for (int32_t _3231_j = _10570_; _3231_j < _10571_; ++_3231_j)
          {
            {
              if (((((*sparsity)(_3230_i,_3231_j)) < (int)0) || (((*sparsity)(_3230_i,_3231_j)) >= ((*shape)(_3231_j)))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern entry is out of bounds"));
                }
              }
              {}
            }
          }
        }
      }
      if (((!scalable) && ((NULL != bnd.get()) && ((int)((bnd)->size(0)) != nelements))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern does not match bound"));
        }
      }
      {}
    }
  }
  else
  {
    {
      nelements = domsize;
      if (((NULL != bnd.get()) && (!scalable)))
      {
        {
          if (((int)((bnd)->size(0)) != nelements))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Domain bound does not match shape"));
            }
          }
          {}
        }
      }
      {}
    }
  }
}
// End mosek.fusion.LinearDomain.finalize_and_validate_inplace

// Begin mosek.fusion.LinearDomain.finalize_and_validate
// Method mosek.fusion.LinearDomain.finalize_and_validate @ src/fusion/domain.mbi:799:6-803:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3232_shp)
{
  _checked_ptr_1<int32_t> _ptr__3232_shp(_3232_shp ? _3232_shp->raw() : nullptr, _3232_shp ? _3232_shp->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::LinearDomain > _3233_res = ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
  mosek::fusion::p_LinearDomain::_get_impl(_3233_res.get())->finalize_and_validate_inplace(_3232_shp);
  return _3233_res;
}
// End mosek.fusion.LinearDomain.finalize_and_validate

void mosek::fusion::p_LinearDomain::destroy()
{
  indexnames.reset();
  sparsity.reset();
  bnd.reset();
  shape.reset();
}
void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }
// } class LinearDomain
// class Domain { // @ src/fusion/domain.mbi:402:4-744:5
mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Domain::p_Domain
  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Domain.dimsize
// Method mosek.fusion.Domain.dimsize @ src/fusion/domain.mbi:743:6-126
int64_t mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int32_t,1 > > _3234_dims)
{
  _checked_ptr_1<int32_t> _ptr__3234_dims(_3234_dims ? _3234_dims->raw() : nullptr, _3234_dims ? _3234_dims->size(0) : 0);
  int64_t _3235_sz = (int64_t)1;
  int32_t _10572_ = (int)0;
  int32_t _10573_ = (int)((_3234_dims)->size(0));
  for (int32_t _3236_i = _10572_; _3236_i < _10573_; ++_3236_i)
  {
    {
      _3235_sz *= _ptr__3234_dims[_3236_i];
    }
  }
  return _3235_sz;
}
// End mosek.fusion.Domain.dimsize

// Begin mosek.fusion.Domain.mkRangedDomain
// Method mosek.fusion.Domain.mkRangedDomain @ src/fusion/domain.mbi:624:6-741:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(monty::rc_ptr< ::mosek::fusion::Matrix > _3237_lb,monty::rc_ptr< ::mosek::fusion::Matrix > _3238_ub)
{
  if (((mosek::fusion::p_Matrix::_get_impl(_3237_lb)->dimi != mosek::fusion::p_Matrix::_get_impl(_3238_ub)->dimi) || (mosek::fusion::p_Matrix::_get_impl(_3237_lb)->dimj != mosek::fusion::p_Matrix::_get_impl(_3238_ub)->dimj)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  if ((_3237_lb->isSparse() && _3238_ub->isSparse()))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3239_lsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3237_lb->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3239_lsubi(_3239_lsubi ? _3239_lsubi->raw() : nullptr,_3239_lsubi ? _3239_lsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3240_lsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3237_lb->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3240_lsubj(_3240_lsubj ? _3240_lsubj->raw() : nullptr,_3240_lsubj ? _3240_lsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3241_lval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3237_lb->numNonzeros())));
      _checked_ptr_1<double> _ptr__3241_lval(_3241_lval ? _3241_lval->raw() : nullptr,_3241_lval ? _3241_lval->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3242_usubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3238_ub->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3242_usubi(_3242_usubi ? _3242_usubi->raw() : nullptr,_3242_usubi ? _3242_usubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3243_usubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3238_ub->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3243_usubj(_3243_usubj ? _3243_usubj->raw() : nullptr,_3243_usubj ? _3243_usubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3244_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3238_ub->numNonzeros())));
      _checked_ptr_1<double> _ptr__3244_uval(_3244_uval ? _3244_uval->raw() : nullptr,_3244_uval ? _3244_uval->size(0) : 0);
      _3237_lb->getDataAsTriplets(_3239_lsubi,_3240_lsubj,_3241_lval);
      _3238_ub->getDataAsTriplets(_3242_usubi,_3243_usubj,_3244_uval);
      int64_t _3245_n = (int)0;
      {
        int32_t _3246_ui = (int)0;
        int32_t _3247_li = (int)0;
        while ( ((_3247_li < (int)((_3239_lsubi)->size(0))) && (_3246_ui < (int)((_3242_usubi)->size(0)))) )
        {
          {
            if (((_ptr__3239_lsubi[_3247_li] < _ptr__3242_usubi[_3246_ui]) || ((_ptr__3239_lsubi[_3247_li] == _ptr__3242_usubi[_3246_ui]) && (_ptr__3240_lsubj[_3247_li] < _ptr__3243_usubj[_3246_ui]))))
            {
              {
                ++ _3245_n;
                ++ _3247_li;
              }
            }
            else
            {
              {
                if (((_ptr__3239_lsubi[_3247_li] > _ptr__3242_usubi[_3246_ui]) || ((_ptr__3239_lsubi[_3247_li] == _ptr__3242_usubi[_3246_ui]) && (_ptr__3240_lsubj[_3247_li] > _ptr__3243_usubj[_3246_ui]))))
                {
                  {
                    ++ _3245_n;
                    ++ _3246_ui;
                  }
                }
                else
                {
                  {
                    ++ _3245_n;
                    ++ _3247_li;
                    ++ _3246_ui;
                  }
                }
              }
            }
          }
        }
        _3245_n += ((int)((_3239_lsubi)->size(0)) - _3247_li);
        _3245_n += ((int)((_3242_usubi)->size(0)) - _3246_ui);
      }
      std::shared_ptr< monty::ndarray< int32_t,2 > > _3248_inst = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape(_3245_n,(int)2)));
      std::shared_ptr< monty::ndarray< double,1 > > _3249_lbv = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3245_n)));
      _checked_ptr_1<double> _ptr__3249_lbv(_3249_lbv ? _3249_lbv->raw() : nullptr,_3249_lbv ? _3249_lbv->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3250_ubv = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3245_n)));
      _checked_ptr_1<double> _ptr__3250_ubv(_3250_ubv ? _3250_ubv->raw() : nullptr,_3250_ubv ? _3250_ubv->size(0) : 0);
      {
        int32_t _3251_k = (int)0;
        int32_t _3252_ui = (int)0;
        int32_t _3253_li = (int)0;
        while ( ((_3253_li < (int)((_3239_lsubi)->size(0))) && (_3252_ui < (int)((_3242_usubi)->size(0)))) )
        {
          {
            if (((_ptr__3239_lsubi[_3253_li] < _ptr__3242_usubi[_3252_ui]) || ((_ptr__3239_lsubi[_3253_li] == _ptr__3242_usubi[_3252_ui]) && (_ptr__3240_lsubj[_3253_li] < _ptr__3243_usubj[_3252_ui]))))
            {
              {
                ((*_3248_inst)(_3251_k,(int)0)) = _ptr__3239_lsubi[_3253_li];
                ((*_3248_inst)(_3251_k,(int)1)) = _ptr__3240_lsubj[_3253_li];
                _ptr__3249_lbv[_3251_k] = _ptr__3241_lval[_3253_li];
                _ptr__3250_ubv[_3251_k] = 0.0;
                ++ _3251_k;
                ++ _3253_li;
              }
            }
            else
            {
              {
                if (((_ptr__3239_lsubi[_3253_li] > _ptr__3242_usubi[_3252_ui]) || ((_ptr__3239_lsubi[_3253_li] == _ptr__3242_usubi[_3252_ui]) && (_ptr__3240_lsubj[_3253_li] > _ptr__3243_usubj[_3252_ui]))))
                {
                  {
                    ((*_3248_inst)(_3251_k,(int)0)) = _ptr__3242_usubi[_3252_ui];
                    ((*_3248_inst)(_3251_k,(int)1)) = _ptr__3243_usubj[_3252_ui];
                    _ptr__3249_lbv[_3251_k] = 0.0;
                    _ptr__3250_ubv[_3251_k] = _ptr__3244_uval[_3252_ui];
                    ++ _3251_k;
                    ++ _3252_ui;
                  }
                }
                else
                {
                  {
                    ((*_3248_inst)(_3251_k,(int)0)) = _ptr__3242_usubi[_3252_ui];
                    ((*_3248_inst)(_3251_k,(int)1)) = _ptr__3243_usubj[_3252_ui];
                    _ptr__3249_lbv[_3251_k] = _ptr__3241_lval[_3252_ui];
                    _ptr__3250_ubv[_3251_k] = _ptr__3244_uval[_3252_ui];
                    ++ _3251_k;
                    ++ _3253_li;
                    ++ _3252_ui;
                  }
                }
              }
            }
          }
        }
        while ( (_3253_li < (int)((_3239_lsubi)->size(0))) )
        {
          {
            ((*_3248_inst)(_3251_k,(int)0)) = _ptr__3239_lsubi[_3253_li];
            ((*_3248_inst)(_3251_k,(int)1)) = _ptr__3240_lsubj[_3253_li];
            _ptr__3249_lbv[_3251_k] = _ptr__3241_lval[_3253_li];
            _ptr__3250_ubv[_3251_k] = 0.0;
            ++ _3251_k;
            ++ _3253_li;
          }
        }
        while ( (_3252_ui < (int)((_3242_usubi)->size(0))) )
        {
          {
            ((*_3248_inst)(_3251_k,(int)0)) = _ptr__3242_usubi[_3252_ui];
            ((*_3248_inst)(_3251_k,(int)1)) = _ptr__3243_usubj[_3252_ui];
            _ptr__3249_lbv[_3251_k] = 0.0;
            _ptr__3250_ubv[_3251_k] = _ptr__3244_uval[_3252_ui];
            ++ _3251_k;
            ++ _3252_ui;
          }
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3249_lbv,_3250_ubv,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3237_lb)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3237_lb)->dimj)}),_3248_inst,(int)1);
    }
  }
  else
  {
    {
      int32_t _3254_dimj = mosek::fusion::p_Matrix::_get_impl(_3237_lb)->dimj;
      int32_t _3255_dimi = mosek::fusion::p_Matrix::_get_impl(_3237_lb)->dimi;
      int32_t _3256_n = safe_mul( _3255_dimi,_3254_dimj );
      std::shared_ptr< monty::ndarray< double,1 > > _3257_lval;
      _checked_ptr_1<double> _ptr__3257_lval(_3257_lval ? _3257_lval->raw() : nullptr,_3257_lval ? _3257_lval->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3258_uval;
      _checked_ptr_1<double> _ptr__3258_uval(_3258_uval ? _3258_uval->raw() : nullptr,_3258_uval ? _3258_uval->size(0) : 0);
      if (_3237_lb->isSparse())
      {
        {
          _3257_lval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3256_n)));
          _ptr__3257_lval.update(_3257_lval ? _3257_lval->raw() : nullptr, _3257_lval ? _3257_lval->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3259_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3237_lb->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3259_subi(_3259_subi ? _3259_subi->raw() : nullptr,_3259_subi ? _3259_subi->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3260_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3237_lb->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3260_subj(_3260_subj ? _3260_subj->raw() : nullptr,_3260_subj ? _3260_subj->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3261_v = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3237_lb->numNonzeros())));
          _checked_ptr_1<double> _ptr__3261_v(_3261_v ? _3261_v->raw() : nullptr,_3261_v ? _3261_v->size(0) : 0);
          _3237_lb->getDataAsTriplets(_3259_subi,_3260_subj,_3261_v);
          int32_t _10574_ = (int)0;
          int32_t _10575_ = (int)((_3259_subi)->size(0));
          for (int32_t _3262_i = _10574_; _3262_i < _10575_; ++_3262_i)
          {
            {
              _ptr__3257_lval[safe_add( safe_mul( _ptr__3259_subi[_3262_i],_3254_dimj ),_ptr__3260_subj[_3262_i] )] = _ptr__3261_v[_3262_i];
            }
          }
        }
      }
      else
      {
        {
          _3257_lval = _3237_lb->getDataAsArray();
          _ptr__3257_lval.update(_3257_lval ? _3257_lval->raw() : nullptr, _3257_lval ? _3257_lval->size(0) : 0);
        }
      }
      if (_3238_ub->isSparse())
      {
        {
          _3258_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3256_n)));
          _ptr__3258_uval.update(_3258_uval ? _3258_uval->raw() : nullptr, _3258_uval ? _3258_uval->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3263_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3238_ub->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3263_subi(_3263_subi ? _3263_subi->raw() : nullptr,_3263_subi ? _3263_subi->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3264_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3238_ub->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3264_subj(_3264_subj ? _3264_subj->raw() : nullptr,_3264_subj ? _3264_subj->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3265_v = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3238_ub->numNonzeros())));
          _checked_ptr_1<double> _ptr__3265_v(_3265_v ? _3265_v->raw() : nullptr,_3265_v ? _3265_v->size(0) : 0);
          _3238_ub->getDataAsTriplets(_3263_subi,_3264_subj,_3265_v);
          int32_t _10576_ = (int)0;
          int32_t _10577_ = (int)((_3263_subi)->size(0));
          for (int32_t _3266_i = _10576_; _3266_i < _10577_; ++_3266_i)
          {
            {
              _ptr__3258_uval[safe_add( safe_mul( _ptr__3263_subi[_3266_i],_3254_dimj ),_ptr__3264_subj[_3266_i] )] = _ptr__3265_v[_3266_i];
            }
          }
        }
      }
      else
      {
        {
          _3258_uval = _3238_ub->getDataAsArray();
          _ptr__3258_uval.update(_3258_uval ? _3258_uval->raw() : nullptr, _3258_uval ? _3258_uval->size(0) : 0);
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3257_lval,_3258_uval,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3237_lb)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3237_lb)->dimj)}),nullptr,(int)1);
    }
  }
}
// End mosek.fusion.Domain.mkRangedDomain

// Begin mosek.fusion.Domain.mkRangedDomain
// Method mosek.fusion.Domain.mkRangedDomain @ src/fusion/domain.mbi:603:6-622:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(std::shared_ptr< monty::ndarray< double,2 > > _3267_lb,std::shared_ptr< monty::ndarray< double,2 > > _3268_ub)
{
  if ((((int)((_3267_lb)->size(0)) != (int)((_3268_ub)->size(0))) || ((int)((_3267_lb)->size(1)) != (int)((_3268_ub)->size(1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  int32_t _3269_dimj = (int)((_3267_lb)->size(1));
  int32_t _3270_dimi = (int)((_3267_lb)->size(0));
  int32_t _3271_n = safe_mul( _3270_dimi,_3269_dimj );
  std::shared_ptr< monty::ndarray< double,1 > > _3272_lval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3271_n)));
  _checked_ptr_1<double> _ptr__3272_lval(_3272_lval ? _3272_lval->raw() : nullptr,_3272_lval ? _3272_lval->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3273_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3271_n)));
  _checked_ptr_1<double> _ptr__3273_uval(_3273_uval ? _3273_uval->raw() : nullptr,_3273_uval ? _3273_uval->size(0) : 0);
  int32_t _3274_k = (int)0;
  int32_t _10578_ = (int)0;
  int32_t _10579_ = _3270_dimi;
  for (int32_t _3275_i = _10578_; _3275_i < _10579_; ++_3275_i)
  {
    {
      int32_t _10580_ = (int)0;
      int32_t _10581_ = _3269_dimj;
      for (int32_t _3276_j = _10580_; _3276_j < _10581_; ++_3276_j)
      {
        {
          _ptr__3272_lval[_3274_k] = ((*_3267_lb)(_3275_i,_3276_j));
          _ptr__3273_uval[_3274_k] = ((*_3268_ub)(_3275_i,_3276_j));
          ++ _3274_k;
        }
      }
    }
  }
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3272_lval,_3273_uval,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3270_dimi),(int32_t)(_3269_dimj)}),nullptr,(int)1);
}
// End mosek.fusion.Domain.mkRangedDomain

// Begin mosek.fusion.Domain.mkLinearDomain
// Method mosek.fusion.Domain.mkLinearDomain @ src/fusion/domain.mbi:583:6-601:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _3277_k,monty::rc_ptr< ::mosek::fusion::Matrix > _3278_mx)
{
  if (_3278_mx->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3279_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3278_mx->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3279_msubi(_3279_msubi ? _3279_msubi->raw() : nullptr,_3279_msubi ? _3279_msubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3280_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3278_mx->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3280_msubj(_3280_msubj ? _3280_msubj->raw() : nullptr,_3280_msubj ? _3280_msubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3281_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3278_mx->numNonzeros())));
      _checked_ptr_1<double> _ptr__3281_mval(_3281_mval ? _3281_mval->raw() : nullptr,_3281_mval ? _3281_mval->size(0) : 0);
      _3278_mx->getDataAsTriplets(_3279_msubi,_3280_msubj,_3281_mval);
      std::shared_ptr< monty::ndarray< int32_t,2 > > _3282_inst = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3279_msubi)->size(0)),(int)2)));
      int32_t _10582_ = (int)0;
      int32_t _10583_ = (int)((_3279_msubi)->size(0));
      for (int32_t _3283_i = _10582_; _3283_i < _10583_; ++_3283_i)
      {
        {
          ((*_3282_inst)(_3283_i,(int)0)) = _ptr__3279_msubi[_3283_i];
          ((*_3282_inst)(_3283_i,(int)1)) = _ptr__3280_msubj[_3283_i];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3277_k,false,_3281_mval,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3278_mx)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3278_mx)->dimj)}),_3282_inst,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3277_k,false,_3278_mx->getDataAsArray(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3278_mx)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3278_mx)->dimj)}),nullptr,(int)1);
    }
  }
}
// End mosek.fusion.Domain.mkLinearDomain

// Begin mosek.fusion.Domain.prod
// Method mosek.fusion.Domain.prod @ src/fusion/domain.mbi:581:6-121
int64_t mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int32_t,1 > > _3284_dim)
{
  _checked_ptr_1<int32_t> _ptr__3284_dim(_3284_dim ? _3284_dim->raw() : nullptr, _3284_dim ? _3284_dim->size(0) : 0);
  int64_t _3285_r = (int)1;
  int32_t _10584_ = (int)0;
  int32_t _10585_ = (int)((_3284_dim)->size(0));
  for (int32_t _3286_i = _10584_; _3286_i < _10585_; ++_3286_i)
  {
    {
      _3285_r *= _ptr__3284_dim[_3286_i];
    }
  }
  return _3285_r;
}
// End mosek.fusion.Domain.prod

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:564:6-579:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _3287_scalable,std::shared_ptr< monty::ndarray< double,1 > > _3288_lb,std::shared_ptr< monty::ndarray< double,1 > > _3289_ub,std::shared_ptr< monty::ndarray< int32_t,2 > > _3290_sp,std::shared_ptr< monty::ndarray< int32_t,1 > > _3291_dims)
{
  _checked_ptr_1<double> _ptr__3288_lb(_3288_lb ? _3288_lb->raw() : nullptr, _3288_lb ? _3288_lb->size(0) : 0);
  _checked_ptr_1<double> _ptr__3289_ub(_3289_ub ? _3289_ub->raw() : nullptr, _3289_ub ? _3289_ub->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3291_dims(_3291_dims ? _3291_dims->raw() : nullptr, _3291_dims ? _3291_dims->size(0) : 0);
  if (((!_3287_scalable) && ((int)((_3288_lb)->size(0)) != (int)((_3289_ub)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _3290_sp.get()) && ((int)((_3290_sp)->size(0)) != (int)((_3288_lb)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int32_t _10586_ = (int)0;
  int32_t _10587_ = (int)((_3289_ub)->size(0));
  for (int32_t _3292_i = _10586_; _3292_i < _10587_; ++_3292_i)
  {
    {
      if ((_ptr__3288_lb[_3292_i] > _ptr__3289_ub[_3292_i]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _3291_dims.get()) && (::mosek::fusion::p_Domain::dimsize(_3291_dims) != (int)((_3288_lb)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_3287_scalable,_3288_lb,_3289_ub,_3291_dims)->__mosek_2fusion_2RangeDomain__sparse(_3290_sp);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.symmetric
// Method mosek.fusion.Domain.symmetric @ src/fusion/domain.mbi:561:6-103
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3293_rd) { return mosek::fusion::p_Domain::symmetric(_3293_rd); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3293_rd)
{
  return _3293_rd->__mosek_2fusion_2RangeDomain__symmetric();
}
// End mosek.fusion.Domain.symmetric

// Begin mosek.fusion.Domain.symmetric
// Method mosek.fusion.Domain.symmetric @ src/fusion/domain.mbi:560:6-103
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3294_ld) { return mosek::fusion::p_Domain::symmetric(_3294_ld); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3294_ld)
{
  return _3294_ld->__mosek_2fusion_2LinearDomain__symmetric();
}
// End mosek.fusion.Domain.symmetric

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ src/fusion/domain.mbi:557:6-118
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3295_rd,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3296_sparsity) { return mosek::fusion::p_Domain::sparse(_3295_rd,_3296_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3295_rd,std::shared_ptr< monty::ndarray< int32_t,2 > > _3296_sparsity)
{
  return _3295_rd->__mosek_2fusion_2RangeDomain__sparse(_3296_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ src/fusion/domain.mbi:556:6-118
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3297_rd,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3298_sparsity) { return mosek::fusion::p_Domain::sparse(_3297_rd,_3298_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3297_rd,std::shared_ptr< monty::ndarray< int32_t,1 > > _3298_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3298_sparsity(_3298_sparsity ? _3298_sparsity->raw() : nullptr, _3298_sparsity ? _3298_sparsity->size(0) : 0);
  return _3297_rd->__mosek_2fusion_2RangeDomain__sparse(_3298_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ src/fusion/domain.mbi:555:6-118
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3299_ld,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3300_sparsity) { return mosek::fusion::p_Domain::sparse(_3299_ld,_3300_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3299_ld,std::shared_ptr< monty::ndarray< int32_t,2 > > _3300_sparsity)
{
  return _3299_ld->__mosek_2fusion_2LinearDomain__sparse(_3300_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ src/fusion/domain.mbi:554:6-118
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3301_ld,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3302_sparsity) { return mosek::fusion::p_Domain::sparse(_3301_ld,_3302_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3301_ld,std::shared_ptr< monty::ndarray< int32_t,1 > > _3302_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3302_sparsity(_3302_sparsity ? _3302_sparsity->raw() : nullptr, _3302_sparsity ? _3302_sparsity->size(0) : 0);
  return _3301_ld->__mosek_2fusion_2LinearDomain__sparse(_3302_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.integral
// Method mosek.fusion.Domain.integral @ src/fusion/domain.mbi:552:6-92
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3303_rd) { return mosek::fusion::p_Domain::integral(_3303_rd); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3303_rd)
{
  return _3303_rd->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.integral

// Begin mosek.fusion.Domain.integral
// Method mosek.fusion.Domain.integral @ src/fusion/domain.mbi:551:6-92
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3304_ld) { return mosek::fusion::p_Domain::integral(_3304_ld); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3304_ld)
{
  return _3304_ld->__mosek_2fusion_2LinearDomain__integral();
}
// End mosek.fusion.Domain.integral

// Begin mosek.fusion.Domain.integral
// Method mosek.fusion.Domain.integral @ src/fusion/domain.mbi:550:6-88
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral
  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3305_c) { return mosek::fusion::p_Domain::integral(_3305_c); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3305_c)
{
  return _3305_c->__mosek_2fusion_2ConeDomain__integral();
}
// End mosek.fusion.Domain.integral

// Begin mosek.fusion.Domain.axis
// Method mosek.fusion.Domain.axis @ src/fusion/domain.mbi:548:6-93
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis
  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3306_c,
    int32_t _3307_a) { return mosek::fusion::p_Domain::axis(_3306_c,_3307_a); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3306_c,int32_t _3307_a)
{
  return _3306_c->__mosek_2fusion_2ConeDomain__axis(_3307_a);
}
// End mosek.fusion.Domain.axis

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:545:6-178
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3308_alphas,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3309_dims) { return mosek::fusion::p_Domain::inDPowerCone(_3308_alphas,_3309_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3308_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > > _3309_dims)
{
  _checked_ptr_1<double> _ptr__3308_alphas(_3308_alphas ? _3308_alphas->raw() : nullptr, _3308_alphas ? _3308_alphas->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3309_dims(_3309_dims ? _3309_dims->raw() : nullptr, _3309_dims ? _3309_dims->size(0) : 0);
  std::vector<int32_t> _10588_;
  for (int32_t _3310_i = (int)0, _10589_ = (int)((_3309_dims)->size(0)); _3310_i < _10589_ ; ++_3310_i)
  {
    _10588_.push_back(_ptr__3309_dims[_3310_i]);
  }
  auto _10590_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10588_.size()),_10588_.begin(),_10588_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3308_alphas,_10590_);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:544:6-153
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3311_alphas,
    int32_t _3312_m) { return mosek::fusion::p_Domain::inDPowerCone(_3311_alphas,_3312_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3311_alphas,int32_t _3312_m)
{
  _checked_ptr_1<double> _ptr__3311_alphas(_3311_alphas ? _3311_alphas->raw() : nullptr, _3311_alphas ? _3311_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3311_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3312_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:543:6-147
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3313_alphas) { return mosek::fusion::p_Domain::inDPowerCone(_3313_alphas); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3313_alphas)
{
  _checked_ptr_1<double> _ptr__3313_alphas(_3313_alphas ? _3313_alphas->raw() : nullptr, _3313_alphas ? _3313_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3313_alphas,nullptr);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:541:6-191
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( double _3314_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3315_dims) { return mosek::fusion::p_Domain::inDPowerCone(_3314_alpha,_3315_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3314_alpha,std::shared_ptr< monty::ndarray< int32_t,1 > > _3315_dims)
{
  _checked_ptr_1<int32_t> _ptr__3315_dims(_3315_dims ? _3315_dims->raw() : nullptr, _3315_dims ? _3315_dims->size(0) : 0);
  std::vector<int32_t> _10591_;
  for (int32_t _3316_i = (int)0, _10592_ = (int)((_3315_dims)->size(0)); _3316_i < _10592_ ; ++_3316_i)
  {
    _10591_.push_back(_ptr__3315_dims[_3316_i]);
  }
  auto _10593_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10591_.size()),_10591_.begin(),_10591_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3314_alpha),(double)((1.0 - _3314_alpha))}),_10593_);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:540:6-166
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( double _3317_alpha,
    int32_t _3318_m) { return mosek::fusion::p_Domain::inDPowerCone(_3317_alpha,_3318_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3317_alpha,int32_t _3318_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3317_alpha),(double)((1.0 - _3317_alpha))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3318_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:539:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( double _3319_alpha) { return mosek::fusion::p_Domain::inDPowerCone(_3319_alpha); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3319_alpha)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3319_alpha),(double)((1.0 - _3319_alpha))}),nullptr);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:536:6-178
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3320_alphas,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3321_dims) { return mosek::fusion::p_Domain::inPPowerCone(_3320_alphas,_3321_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3320_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > > _3321_dims)
{
  _checked_ptr_1<double> _ptr__3320_alphas(_3320_alphas ? _3320_alphas->raw() : nullptr, _3320_alphas ? _3320_alphas->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3321_dims(_3321_dims ? _3321_dims->raw() : nullptr, _3321_dims ? _3321_dims->size(0) : 0);
  std::vector<int32_t> _10594_;
  for (int32_t _3322_i = (int)0, _10595_ = (int)((_3321_dims)->size(0)); _3322_i < _10595_ ; ++_3322_i)
  {
    _10594_.push_back(_ptr__3321_dims[_3322_i]);
  }
  auto _10596_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10594_.size()),_10594_.begin(),_10594_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3320_alphas,_10596_);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:535:6-153
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3323_alphas,
    int32_t _3324_m) { return mosek::fusion::p_Domain::inPPowerCone(_3323_alphas,_3324_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3323_alphas,int32_t _3324_m)
{
  _checked_ptr_1<double> _ptr__3323_alphas(_3323_alphas ? _3323_alphas->raw() : nullptr, _3323_alphas ? _3323_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3323_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3324_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:534:6-147
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3325_alphas) { return mosek::fusion::p_Domain::inPPowerCone(_3325_alphas); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3325_alphas)
{
  _checked_ptr_1<double> _ptr__3325_alphas(_3325_alphas ? _3325_alphas->raw() : nullptr, _3325_alphas ? _3325_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3325_alphas,nullptr);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:532:6-191
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( double _3326_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3327_dims) { return mosek::fusion::p_Domain::inPPowerCone(_3326_alpha,_3327_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3326_alpha,std::shared_ptr< monty::ndarray< int32_t,1 > > _3327_dims)
{
  _checked_ptr_1<int32_t> _ptr__3327_dims(_3327_dims ? _3327_dims->raw() : nullptr, _3327_dims ? _3327_dims->size(0) : 0);
  std::vector<int32_t> _10597_;
  for (int32_t _3328_i = (int)0, _10598_ = (int)((_3327_dims)->size(0)); _3328_i < _10598_ ; ++_3328_i)
  {
    _10597_.push_back(_ptr__3327_dims[_3328_i]);
  }
  auto _10599_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10597_.size()),_10597_.begin(),_10597_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3326_alpha),(double)((1.0 - _3326_alpha))}),_10599_);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:531:6-166
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( double _3329_alpha,
    int32_t _3330_m) { return mosek::fusion::p_Domain::inPPowerCone(_3329_alpha,_3330_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3329_alpha,int32_t _3330_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3329_alpha),(double)((1.0 - _3329_alpha))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3330_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:530:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( double _3331_alpha) { return mosek::fusion::p_Domain::inPPowerCone(_3331_alpha); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3331_alpha)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3331_alpha),(double)((1.0 - _3331_alpha))}),nullptr);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inDExpCone
// Method mosek.fusion.Domain.inDExpCone @ src/fusion/domain.mbi:527:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3332_dims) { return mosek::fusion::p_Domain::inDExpCone(_3332_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3332_dims)
{
  _checked_ptr_1<int32_t> _ptr__3332_dims(_3332_dims ? _3332_dims->raw() : nullptr, _3332_dims ? _3332_dims->size(0) : 0);
  std::vector<int32_t> _10600_;
  for (int32_t _3333_i = (int)0, _10601_ = (int)((_3332_dims)->size(0)); _3333_i < _10601_ ; ++_3333_i)
  {
    _10600_.push_back(_ptr__3332_dims[_3333_i]);
  }
  auto _10602_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10600_.size()),_10600_.begin(),_10600_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_10602_);
}
// End mosek.fusion.Domain.inDExpCone

// Begin mosek.fusion.Domain.inDExpCone
// Method mosek.fusion.Domain.inDExpCone @ src/fusion/domain.mbi:526:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone
  ( int32_t _3334_m) { return mosek::fusion::p_Domain::inDExpCone(_3334_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int32_t _3334_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3334_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inDExpCone

// Begin mosek.fusion.Domain.inDExpCone
// Method mosek.fusion.Domain.inDExpCone @ src/fusion/domain.mbi:525:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone
  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
// End mosek.fusion.Domain.inDExpCone

// Begin mosek.fusion.Domain.inPExpCone
// Method mosek.fusion.Domain.inPExpCone @ src/fusion/domain.mbi:522:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3335_dims) { return mosek::fusion::p_Domain::inPExpCone(_3335_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3335_dims)
{
  _checked_ptr_1<int32_t> _ptr__3335_dims(_3335_dims ? _3335_dims->raw() : nullptr, _3335_dims ? _3335_dims->size(0) : 0);
  std::vector<int32_t> _10603_;
  for (int32_t _3336_i = (int)0, _10604_ = (int)((_3335_dims)->size(0)); _3336_i < _10604_ ; ++_3336_i)
  {
    _10603_.push_back(_ptr__3335_dims[_3336_i]);
  }
  auto _10605_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10603_.size()),_10603_.begin(),_10603_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_10605_);
}
// End mosek.fusion.Domain.inPExpCone

// Begin mosek.fusion.Domain.inPExpCone
// Method mosek.fusion.Domain.inPExpCone @ src/fusion/domain.mbi:521:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone
  ( int32_t _3337_m) { return mosek::fusion::p_Domain::inPExpCone(_3337_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int32_t _3337_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3337_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inPExpCone

// Begin mosek.fusion.Domain.inPExpCone
// Method mosek.fusion.Domain.inPExpCone @ src/fusion/domain.mbi:520:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone
  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
// End mosek.fusion.Domain.inPExpCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ src/fusion/domain.mbi:516:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3338_dims) { return mosek::fusion::p_Domain::inDGeoMeanCone(_3338_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3338_dims)
{
  _checked_ptr_1<int32_t> _ptr__3338_dims(_3338_dims ? _3338_dims->raw() : nullptr, _3338_dims ? _3338_dims->size(0) : 0);
  std::vector<int32_t> _10606_;
  for (int32_t _3339_i = (int)0, _10607_ = (int)((_3338_dims)->size(0)); _3339_i < _10607_ ; ++_3339_i)
  {
    _10606_.push_back(_ptr__3338_dims[_3339_i]);
  }
  auto _10608_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10606_.size()),_10606_.begin(),_10606_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,_10608_);
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ src/fusion/domain.mbi:515:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( int32_t _3340_m,
    int32_t _3341_n) { return mosek::fusion::p_Domain::inDGeoMeanCone(_3340_m,_3341_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone(int32_t _3340_m,int32_t _3341_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3340_m),(int32_t)(_3341_n)}));
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ src/fusion/domain.mbi:514:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( int32_t _3342_n) { return mosek::fusion::p_Domain::inDGeoMeanCone(_3342_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone(int32_t _3342_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3342_n)}));
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ src/fusion/domain.mbi:513:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( ) { return mosek::fusion::p_Domain::inDGeoMeanCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,nullptr);
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ src/fusion/domain.mbi:511:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3343_dims) { return mosek::fusion::p_Domain::inPGeoMeanCone(_3343_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3343_dims)
{
  _checked_ptr_1<int32_t> _ptr__3343_dims(_3343_dims ? _3343_dims->raw() : nullptr, _3343_dims ? _3343_dims->size(0) : 0);
  std::vector<int32_t> _10609_;
  for (int32_t _3344_i = (int)0, _10610_ = (int)((_3343_dims)->size(0)); _3344_i < _10610_ ; ++_3344_i)
  {
    _10609_.push_back(_ptr__3343_dims[_3344_i]);
  }
  auto _10611_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10609_.size()),_10609_.begin(),_10609_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,_10611_);
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ src/fusion/domain.mbi:510:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( int32_t _3345_m,
    int32_t _3346_n) { return mosek::fusion::p_Domain::inPGeoMeanCone(_3345_m,_3346_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone(int32_t _3345_m,int32_t _3346_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3345_m),(int32_t)(_3346_n)}));
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ src/fusion/domain.mbi:509:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( int32_t _3347_n) { return mosek::fusion::p_Domain::inPGeoMeanCone(_3347_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone(int32_t _3347_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3347_n)}));
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ src/fusion/domain.mbi:508:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( ) { return mosek::fusion::p_Domain::inPGeoMeanCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,nullptr);
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ src/fusion/domain.mbi:493:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3348_dims) { return mosek::fusion::p_Domain::inRotatedQCone(_3348_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3348_dims)
{
  _checked_ptr_1<int32_t> _ptr__3348_dims(_3348_dims ? _3348_dims->raw() : nullptr, _3348_dims ? _3348_dims->size(0) : 0);
  std::vector<int32_t> _10612_;
  for (int32_t _3349_i = (int)0, _10613_ = (int)((_3348_dims)->size(0)); _3349_i < _10613_ ; ++_3349_i)
  {
    _10612_.push_back(_ptr__3348_dims[_3349_i]);
  }
  auto _10614_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10612_.size()),_10612_.begin(),_10612_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,_10614_);
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ src/fusion/domain.mbi:492:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( int32_t _3350_m,
    int32_t _3351_n) { return mosek::fusion::p_Domain::inRotatedQCone(_3350_m,_3351_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int32_t _3350_m,int32_t _3351_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3350_m),(int32_t)(_3351_n)}));
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ src/fusion/domain.mbi:491:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( int32_t _3352_n) { return mosek::fusion::p_Domain::inRotatedQCone(_3352_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int32_t _3352_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3352_n)}));
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ src/fusion/domain.mbi:490:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,nullptr);
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ src/fusion/domain.mbi:488:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3353_dims) { return mosek::fusion::p_Domain::inQCone(_3353_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3353_dims)
{
  _checked_ptr_1<int32_t> _ptr__3353_dims(_3353_dims ? _3353_dims->raw() : nullptr, _3353_dims ? _3353_dims->size(0) : 0);
  std::vector<int32_t> _10615_;
  for (int32_t _3354_i = (int)0, _10616_ = (int)((_3353_dims)->size(0)); _3354_i < _10616_ ; ++_3354_i)
  {
    _10615_.push_back(_ptr__3353_dims[_3354_i]);
  }
  auto _10617_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10615_.size()),_10615_.begin(),_10615_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,_10617_);
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ src/fusion/domain.mbi:487:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( int32_t _3355_m,
    int32_t _3356_n) { return mosek::fusion::p_Domain::inQCone(_3355_m,_3356_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int32_t _3355_m,int32_t _3356_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3355_m),(int32_t)(_3356_n)}));
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ src/fusion/domain.mbi:486:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( int32_t _3357_n) { return mosek::fusion::p_Domain::inQCone(_3357_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int32_t _3357_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3357_n)}));
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ src/fusion/domain.mbi:485:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( ) { return mosek::fusion::p_Domain::inQCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,nullptr);
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ src/fusion/domain.mbi:482:6-128
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3358_dims) { return mosek::fusion::p_Domain::inSVecPSDCone(_3358_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3358_dims)
{
  _checked_ptr_1<int32_t> _ptr__3358_dims(_3358_dims ? _3358_dims->raw() : nullptr, _3358_dims ? _3358_dims->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,_3358_dims);
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ src/fusion/domain.mbi:481:6-136
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( int32_t _3359_d1,
    int32_t _3360_d2) { return mosek::fusion::p_Domain::inSVecPSDCone(_3359_d1,_3360_d2); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone(int32_t _3359_d1,int32_t _3360_d2)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3359_d1),(int32_t)(_3360_d2)}));
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ src/fusion/domain.mbi:480:6-132
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( int32_t _3361_n) { return mosek::fusion::p_Domain::inSVecPSDCone(_3361_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone(int32_t _3361_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3361_n)}));
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ src/fusion/domain.mbi:479:6-128
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( ) { return mosek::fusion::p_Domain::inSVecPSDCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,nullptr);
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.isTrilPSD
// Method mosek.fusion.Domain.isTrilPSD @ src/fusion/domain.mbi:469:6-130
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD
  ( int32_t _3362_n,
    int32_t _3363_m) { return mosek::fusion::p_Domain::isTrilPSD(_3362_n,_3363_m); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int32_t _3362_n,int32_t _3363_m)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3363_m),(int32_t)(_3362_n),(int32_t)(_3362_n)}),(int)1,(int)2);
}
// End mosek.fusion.Domain.isTrilPSD

// Begin mosek.fusion.Domain.isTrilPSD
// Method mosek.fusion.Domain.isTrilPSD @ src/fusion/domain.mbi:468:6-128
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD
  ( int32_t _3364_n) { return mosek::fusion::p_Domain::isTrilPSD(_3364_n); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int32_t _3364_n)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3364_n),(int32_t)(_3364_n)}),(int)0,(int)1);
}
// End mosek.fusion.Domain.isTrilPSD

// Begin mosek.fusion.Domain.isTrilPSD
// Method mosek.fusion.Domain.isTrilPSD @ src/fusion/domain.mbi:467:6-112
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD
  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD()
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
// End mosek.fusion.Domain.isTrilPSD

// Begin mosek.fusion.Domain.inPSDCone
// Method mosek.fusion.Domain.inPSDCone @ src/fusion/domain.mbi:465:6-126
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone
  ( int32_t _3365_n,
    int32_t _3366_m) { return mosek::fusion::p_Domain::inPSDCone(_3365_n,_3366_m); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int32_t _3365_n,int32_t _3366_m)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3366_m),(int32_t)(_3365_n),(int32_t)(_3365_n)}));
}
// End mosek.fusion.Domain.inPSDCone

// Begin mosek.fusion.Domain.inPSDCone
// Method mosek.fusion.Domain.inPSDCone @ src/fusion/domain.mbi:464:6-124
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone
  ( int32_t _3367_n) { return mosek::fusion::p_Domain::inPSDCone(_3367_n); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int32_t _3367_n)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3367_n),(int32_t)(_3367_n)}));
}
// End mosek.fusion.Domain.inPSDCone

// Begin mosek.fusion.Domain.inPSDCone
// Method mosek.fusion.Domain.inPSDCone @ src/fusion/domain.mbi:463:6-111
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone
  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone()
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
// End mosek.fusion.Domain.inPSDCone

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ src/fusion/domain.mbi:460:6-160
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( ) { return mosek::fusion::p_Domain::binary(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary()
{
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),nullptr)->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ src/fusion/domain.mbi:459:6-160
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3368_dims) { return mosek::fusion::p_Domain::binary(_3368_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int32_t,1 > > _3368_dims)
{
  _checked_ptr_1<int32_t> _ptr__3368_dims(_3368_dims ? _3368_dims->raw() : nullptr, _3368_dims ? _3368_dims->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),_3368_dims)->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ src/fusion/domain.mbi:458:6-166
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( int32_t _3369_m,
    int32_t _3370_n) { return mosek::fusion::p_Domain::binary(_3369_m,_3370_n); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int32_t _3369_m,int32_t _3370_n)
{
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3369_m),(int32_t)(_3370_n)}))->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ src/fusion/domain.mbi:457:6-164
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( int32_t _3371_n) { return mosek::fusion::p_Domain::binary(_3371_n); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int32_t _3371_n)
{
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3371_n)}))->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:451:6-120
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3372_lbm,
    monty::rc_ptr< ::mosek::fusion::Matrix > _3373_ubm) { return mosek::fusion::p_Domain::inRange(_3372_lbm,_3373_ubm); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(monty::rc_ptr< ::mosek::fusion::Matrix > _3372_lbm,monty::rc_ptr< ::mosek::fusion::Matrix > _3373_ubm)
{
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3372_lbm,_3373_ubm);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:450:6-120
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,2 > > _3374_lba,
    std::shared_ptr< monty::ndarray< double,2 > > _3375_uba) { return mosek::fusion::p_Domain::inRange(_3374_lba,_3375_uba); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,2 > > _3374_lba,std::shared_ptr< monty::ndarray< double,2 > > _3375_uba)
{
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3374_lba,_3375_uba);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:448:6-201
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3376_lba,
    std::shared_ptr< monty::ndarray< double,1 > > _3377_uba,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3378_dims) { return mosek::fusion::p_Domain::inRange(_3376_lba,_3377_uba,_3378_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3376_lba,std::shared_ptr< monty::ndarray< double,1 > > _3377_uba,std::shared_ptr< monty::ndarray< int32_t,1 > > _3378_dims)
{
  _checked_ptr_1<double> _ptr__3376_lba(_3376_lba ? _3376_lba->raw() : nullptr, _3376_lba ? _3376_lba->size(0) : 0);
  _checked_ptr_1<double> _ptr__3377_uba(_3377_uba ? _3377_uba->raw() : nullptr, _3377_uba ? _3377_uba->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3378_dims(_3378_dims ? _3378_dims->raw() : nullptr, _3378_dims ? _3378_dims->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3376_lba,_3377_uba,_3378_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:447:6-201
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3379_lba,
    double _3380_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3381_dims) { return mosek::fusion::p_Domain::inRange(_3379_lba,_3380_ub,_3381_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3379_lba,double _3380_ub,std::shared_ptr< monty::ndarray< int32_t,1 > > _3381_dims)
{
  _checked_ptr_1<double> _ptr__3379_lba(_3379_lba ? _3379_lba->raw() : nullptr, _3379_lba ? _3379_lba->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3381_dims(_3381_dims ? _3381_dims->raw() : nullptr, _3381_dims ? _3381_dims->size(0) : 0);
  std::vector<double> _10618_;
  for (int32_t _3382_i = (int)0, _10619_ = (int)((_3379_lba)->size(0)); _3382_i < _10619_ ; ++_3382_i)
  {
    _10618_.push_back(_3380_ub);
  }
  auto _10620_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10618_.size()),_10618_.begin(),_10618_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3379_lba,_10620_,_3381_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:446:6-201
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3383_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3384_uba,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3385_dims) { return mosek::fusion::p_Domain::inRange(_3383_lb,_3384_uba,_3385_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3383_lb,std::shared_ptr< monty::ndarray< double,1 > > _3384_uba,std::shared_ptr< monty::ndarray< int32_t,1 > > _3385_dims)
{
  _checked_ptr_1<double> _ptr__3384_uba(_3384_uba ? _3384_uba->raw() : nullptr, _3384_uba ? _3384_uba->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3385_dims(_3385_dims ? _3385_dims->raw() : nullptr, _3385_dims ? _3385_dims->size(0) : 0);
  std::vector<double> _10621_;
  for (int32_t _3386_i = (int)0, _10622_ = (int)((_3384_uba)->size(0)); _3386_i < _10622_ ; ++_3386_i)
  {
    _10621_.push_back(_3383_lb);
  }
  auto _10623_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10621_.size()),_10621_.begin(),_10621_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10623_,_3384_uba,_3385_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:445:6-201
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3387_lb,
    double _3388_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3389_dims) { return mosek::fusion::p_Domain::inRange(_3387_lb,_3388_ub,_3389_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3387_lb,double _3388_ub,std::shared_ptr< monty::ndarray< int32_t,1 > > _3389_dims)
{
  _checked_ptr_1<int32_t> _ptr__3389_dims(_3389_dims ? _3389_dims->raw() : nullptr, _3389_dims ? _3389_dims->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3387_lb)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3388_ub)}),_3389_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:443:6-198
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3390_lba,
    std::shared_ptr< monty::ndarray< double,1 > > _3391_uba) { return mosek::fusion::p_Domain::inRange(_3390_lba,_3391_uba); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3390_lba,std::shared_ptr< monty::ndarray< double,1 > > _3391_uba)
{
  _checked_ptr_1<double> _ptr__3390_lba(_3390_lba ? _3390_lba->raw() : nullptr, _3390_lba ? _3390_lba->size(0) : 0);
  _checked_ptr_1<double> _ptr__3391_uba(_3391_uba ? _3391_uba->raw() : nullptr, _3391_uba ? _3391_uba->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3390_lba,_3391_uba,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3390_lba)->size(0)))}));
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:442:6-198
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3392_lba,
    double _3393_ub) { return mosek::fusion::p_Domain::inRange(_3392_lba,_3393_ub); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3392_lba,double _3393_ub)
{
  _checked_ptr_1<double> _ptr__3392_lba(_3392_lba ? _3392_lba->raw() : nullptr, _3392_lba ? _3392_lba->size(0) : 0);
  std::vector<double> _10624_;
  for (int32_t _3394_i = (int)0, _10625_ = (int)((_3392_lba)->size(0)); _3394_i < _10625_ ; ++_3394_i)
  {
    _10624_.push_back(_3393_ub);
  }
  auto _10626_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10624_.size()),_10624_.begin(),_10624_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3392_lba,_10626_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3392_lba)->size(0)))}));
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:441:6-198
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3395_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3396_uba) { return mosek::fusion::p_Domain::inRange(_3395_lb,_3396_uba); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3395_lb,std::shared_ptr< monty::ndarray< double,1 > > _3396_uba)
{
  _checked_ptr_1<double> _ptr__3396_uba(_3396_uba ? _3396_uba->raw() : nullptr, _3396_uba ? _3396_uba->size(0) : 0);
  std::vector<double> _10627_;
  for (int32_t _3397_i = (int)0, _10628_ = (int)((_3396_uba)->size(0)); _3397_i < _10628_ ; ++_3397_i)
  {
    _10627_.push_back(_3395_lb);
  }
  auto _10629_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10627_.size()),_10627_.begin(),_10627_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10629_,_3396_uba,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3396_uba)->size(0)))}));
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:440:6-187
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3398_lb,
    double _3399_ub) { return mosek::fusion::p_Domain::inRange(_3398_lb,_3399_ub); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3398_lb,double _3399_ub)
{
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3398_lb)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3399_ub)}),nullptr);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:437:6-138
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3400_mx) { return mosek::fusion::p_Domain::greaterThan(_3400_mx); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3400_mx)
{
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_3400_mx);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:436:6-177
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3401_a1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3402_dims) { return mosek::fusion::p_Domain::greaterThan(_3401_a1,_3402_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3401_a1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3402_dims)
{
  _checked_ptr_1<double> _ptr__3401_a1(_3401_a1 ? _3401_a1->raw() : nullptr, _3401_a1 ? _3401_a1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3402_dims(_3402_dims ? _3402_dims->raw() : nullptr, _3402_dims ? _3402_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3401_a1),_3402_dims);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:435:6-230
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( std::shared_ptr< monty::ndarray< double,2 > > _3403_a2) { return mosek::fusion::p_Domain::greaterThan(_3403_a2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _3403_a2)
{
  std::vector<double> _10630_;
  for (int32_t _3404_i = (int)0, _10631_ = (int)((_3403_a2)->size(0)); _3404_i < _10631_ ; ++_3404_i)
  {
    for (int32_t _3405_j = (int)0, _10632_ = (int)((_3403_a2)->size(1)); _3405_j < _10632_ ; ++_3405_j)
    {
      _10630_.push_back(((*_3403_a2)(_3404_i,_3405_j)));
    }
  }
  auto _10633_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10630_.size()),_10630_.begin(),_10630_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10633_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3403_a2)->size(0))),(int32_t)((int)((_3403_a2)->size(1)))}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:434:6-187
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3406_a1) { return mosek::fusion::p_Domain::greaterThan(_3406_a1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3406_a1)
{
  _checked_ptr_1<double> _ptr__3406_a1(_3406_a1 ? _3406_a1->raw() : nullptr, _3406_a1 ? _3406_a1->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3406_a1),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3406_a1)->size(0)))}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:433:6-184
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3407_b,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3408_dims) { return mosek::fusion::p_Domain::greaterThan(_3407_b,_3408_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3407_b,std::shared_ptr< monty::ndarray< int32_t,1 > > _3408_dims)
{
  _checked_ptr_1<int32_t> _ptr__3408_dims(_3408_dims ? _3408_dims->raw() : nullptr, _3408_dims ? _3408_dims->size(0) : 0);
  std::vector<double> _10634_;
  for (int64_t _3409_i = (int)0, _10635_ = ::mosek::fusion::p_Domain::prod(_3408_dims); _3409_i < _10635_ ; ++_3409_i)
  {
    _10634_.push_back(_3407_b);
  }
  auto _10636_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10634_.size()),_10634_.begin(),_10634_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10636_,_3408_dims);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:432:6-183
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3410_b,
    int32_t _3411_m,
    int32_t _3412_n) { return mosek::fusion::p_Domain::greaterThan(_3410_b,_3411_m,_3412_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3410_b,int32_t _3411_m,int32_t _3412_n)
{
  std::vector<double> _10637_;
  for (int32_t _3413_i = (int)0, _10638_ = safe_mul( _3412_n,_3411_m ); _3413_i < _10638_ ; ++_3413_i)
  {
    _10637_.push_back(_3410_b);
  }
  auto _10639_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10637_.size()),_10637_.begin(),_10637_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10639_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3411_m),(int32_t)(_3412_n)}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:431:6-179
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3414_b,
    int32_t _3415_n) { return mosek::fusion::p_Domain::greaterThan(_3414_b,_3415_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3414_b,int32_t _3415_n)
{
  std::vector<double> _10640_;
  for (int32_t _3416_i = (int)0, _10641_ = _3415_n; _3416_i < _10641_ ; ++_3416_i)
  {
    _10640_.push_back(_3414_b);
  }
  auto _10642_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10640_.size()),_10640_.begin(),_10640_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10642_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3415_n)}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:430:6-161
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3417_b) { return mosek::fusion::p_Domain::greaterThan(_3417_b); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3417_b)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3417_b)}),nullptr);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:428:6-135
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3418_mx) { return mosek::fusion::p_Domain::lessThan(_3418_mx); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3418_mx)
{
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_3418_mx);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:427:6-177
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3419_a1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3420_dims) { return mosek::fusion::p_Domain::lessThan(_3419_a1,_3420_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3419_a1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3420_dims)
{
  _checked_ptr_1<double> _ptr__3419_a1(_3419_a1 ? _3419_a1->raw() : nullptr, _3419_a1 ? _3419_a1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3420_dims(_3420_dims ? _3420_dims->raw() : nullptr, _3420_dims ? _3420_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3419_a1),_3420_dims);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:426:6-230
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( std::shared_ptr< monty::ndarray< double,2 > > _3421_a2) { return mosek::fusion::p_Domain::lessThan(_3421_a2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _3421_a2)
{
  std::vector<double> _10643_;
  for (int32_t _3422_i = (int)0, _10644_ = (int)((_3421_a2)->size(0)); _3422_i < _10644_ ; ++_3422_i)
  {
    for (int32_t _3423_j = (int)0, _10645_ = (int)((_3421_a2)->size(1)); _3423_j < _10645_ ; ++_3423_j)
    {
      _10643_.push_back(((*_3421_a2)(_3422_i,_3423_j)));
    }
  }
  auto _10646_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10643_.size()),_10643_.begin(),_10643_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_10646_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3421_a2)->size(0))),(int32_t)((int)((_3421_a2)->size(1)))}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:425:6-187
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3424_a1) { return mosek::fusion::p_Domain::lessThan(_3424_a1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3424_a1)
{
  _checked_ptr_1<double> _ptr__3424_a1(_3424_a1 ? _3424_a1->raw() : nullptr, _3424_a1 ? _3424_a1->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3424_a1),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3424_a1)->size(0)))}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:424:6-160
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3425_b,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3426_dims) { return mosek::fusion::p_Domain::lessThan(_3425_b,_3426_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3425_b,std::shared_ptr< monty::ndarray< int32_t,1 > > _3426_dims)
{
  _checked_ptr_1<int32_t> _ptr__3426_dims(_3426_dims ? _3426_dims->raw() : nullptr, _3426_dims ? _3426_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3425_b)}),_3426_dims);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:423:6-166
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3427_b,
    int32_t _3428_m,
    int32_t _3429_n) { return mosek::fusion::p_Domain::lessThan(_3427_b,_3428_m,_3429_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3427_b,int32_t _3428_m,int32_t _3429_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3427_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3428_m),(int32_t)(_3429_n)}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:422:6-164
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3430_b,
    int32_t _3431_n) { return mosek::fusion::p_Domain::lessThan(_3430_b,_3431_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3430_b,int32_t _3431_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3430_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3431_n)}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:421:6-159
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3432_b) { return mosek::fusion::p_Domain::lessThan(_3432_b); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3432_b)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3432_b)}),nullptr);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:418:6-137
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3433_mx) { return mosek::fusion::p_Domain::equalsTo(_3433_mx); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _3433_mx)
{
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_3433_mx);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:417:6-177
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( std::shared_ptr< monty::ndarray< double,1 > > _3434_a1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3435_dims) { return mosek::fusion::p_Domain::equalsTo(_3434_a1,_3435_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3434_a1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3435_dims)
{
  _checked_ptr_1<double> _ptr__3434_a1(_3434_a1 ? _3434_a1->raw() : nullptr, _3434_a1 ? _3434_a1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3435_dims(_3435_dims ? _3435_dims->raw() : nullptr, _3435_dims ? _3435_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3434_a1),_3435_dims);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:416:6-230
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( std::shared_ptr< monty::ndarray< double,2 > > _3436_a2) { return mosek::fusion::p_Domain::equalsTo(_3436_a2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _3436_a2)
{
  std::vector<double> _10647_;
  for (int32_t _3437_i = (int)0, _10648_ = (int)((_3436_a2)->size(0)); _3437_i < _10648_ ; ++_3437_i)
  {
    for (int32_t _3438_j = (int)0, _10649_ = (int)((_3436_a2)->size(1)); _3438_j < _10649_ ; ++_3438_j)
    {
      _10647_.push_back(((*_3436_a2)(_3437_i,_3438_j)));
    }
  }
  auto _10650_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10647_.size()),_10647_.begin(),_10647_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_10650_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3436_a2)->size(0))),(int32_t)((int)((_3436_a2)->size(1)))}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:415:6-187
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( std::shared_ptr< monty::ndarray< double,1 > > _3439_a1) { return mosek::fusion::p_Domain::equalsTo(_3439_a1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3439_a1)
{
  _checked_ptr_1<double> _ptr__3439_a1(_3439_a1 ? _3439_a1->raw() : nullptr, _3439_a1 ? _3439_a1->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3439_a1),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3439_a1)->size(0)))}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:414:6-160
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3440_b,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3441_dims) { return mosek::fusion::p_Domain::equalsTo(_3440_b,_3441_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3440_b,std::shared_ptr< monty::ndarray< int32_t,1 > > _3441_dims)
{
  _checked_ptr_1<int32_t> _ptr__3441_dims(_3441_dims ? _3441_dims->raw() : nullptr, _3441_dims ? _3441_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3440_b)}),_3441_dims);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:413:6-166
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3442_b,
    int32_t _3443_m,
    int32_t _3444_n) { return mosek::fusion::p_Domain::equalsTo(_3442_b,_3443_m,_3444_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3442_b,int32_t _3443_m,int32_t _3444_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3442_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3443_m),(int32_t)(_3444_n)}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:412:6-164
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3445_b,
    int32_t _3446_n) { return mosek::fusion::p_Domain::equalsTo(_3445_b,_3446_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3445_b,int32_t _3446_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3445_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3446_n)}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:411:6-159
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3447_b) { return mosek::fusion::p_Domain::equalsTo(_3447_b); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3447_b)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3447_b)}),nullptr);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ src/fusion/domain.mbi:408:6-188
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3448_dims) { return mosek::fusion::p_Domain::unbounded(_3448_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int32_t,1 > > _3448_dims)
{
  _checked_ptr_1<int32_t> _ptr__3448_dims(_3448_dims ? _3448_dims->raw() : nullptr, _3448_dims ? _3448_dims->size(0) : 0);
  std::vector<int32_t> _10651_;
  for (int32_t _3449_i = (int)0, _10652_ = (int)((_3448_dims)->size(0)); _3449_i < _10652_ ; ++_3449_i)
  {
    _10651_.push_back(_ptr__3448_dims[_3449_i]);
  }
  auto _10653_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10651_.size()),_10651_.begin(),_10651_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_10653_);
}
// End mosek.fusion.Domain.unbounded

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ src/fusion/domain.mbi:407:6-163
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( int32_t _3450_m,
    int32_t _3451_n) { return mosek::fusion::p_Domain::unbounded(_3450_m,_3451_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int32_t _3450_m,int32_t _3451_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3450_m),(int32_t)(_3451_n)}));
}
// End mosek.fusion.Domain.unbounded

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ src/fusion/domain.mbi:406:6-161
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( int32_t _3452_n) { return mosek::fusion::p_Domain::unbounded(_3452_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int32_t _3452_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3452_n)}));
}
// End mosek.fusion.Domain.unbounded

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ src/fusion/domain.mbi:405:6-156
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( ) { return mosek::fusion::p_Domain::unbounded(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded()
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
// End mosek.fusion.Domain.unbounded

void mosek::fusion::p_Domain::destroy()
{
}
void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }
// } class Domain
// class ExprCode { // @ src/fusion/Parameter.monty:3001:4-3121:5
mosek::fusion::ExprCode::ExprCode(mosek::fusion::p_ExprCode *_impl) : _impl(_impl) { /*std::cout << "ExprCode() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ExprCode::~ExprCode() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ExprCode::p_ExprCode
  (::mosek::fusion::ExprCode * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.ExprCode.inplace_relocate
// Method mosek.fusion.ExprCode.inplace_relocate @ src/fusion/Parameter.monty:3115:6-3120:7
void mosek::fusion::ExprCode::inplace_relocate
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3453_code,
    int32_t _3454_from_offset,
    int32_t _3455_num,
    int32_t _3456_const_base) { mosek::fusion::p_ExprCode::inplace_relocate(_3453_code,_3454_from_offset,_3455_num,_3456_const_base); }
void mosek::fusion::p_ExprCode::inplace_relocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3453_code,int32_t _3454_from_offset,int32_t _3455_num,int32_t _3456_const_base)
{
  _checked_ptr_1<int32_t> _ptr__3453_code(_3453_code ? _3453_code->raw() : nullptr, _3453_code ? _3453_code->size(0) : 0);
  int32_t _10654_ = (int)0;
  int32_t _10655_ = _3455_num;
  int32_t _10656_ = (int)2;
  for (int32_t _3457_i = _10654_; _3457_i < _10655_; _3457_i += _10656_)
  {
    {
      if ((_ptr__3453_code[_3457_i] == (int)2))
      {
        {
          _ptr__3453_code[safe_add( _3457_i,(int)1 )] += _3456_const_base;
        }
      }
      {}
    }
  }
}
// End mosek.fusion.ExprCode.inplace_relocate

// Begin mosek.fusion.ExprCode.op2str
// Method mosek.fusion.ExprCode.op2str @ src/fusion/Parameter.monty:3102:6-3112:7
std::string mosek::fusion::ExprCode::op2str
  ( int32_t _3458_op) { return mosek::fusion::p_ExprCode::op2str(_3458_op); }
std::string mosek::fusion::p_ExprCode::op2str(int32_t _3458_op)
{
  if ((_3458_op == 0))
  {
    {
      return std::string ("NOP");
    }
  }
  else if((_3458_op == 1))
  {
    {
      return std::string ("PARAMREF");
    }
  }
  else if((_3458_op == 2))
  {
    {
      return std::string ("CONST");
    }
  }
  else if((_3458_op == 3))
  {
    {
      return std::string ("ADD");
    }
  }
  else if((_3458_op == 4))
  {
    {
      return std::string ("NEG");
    }
  }
  else if((_3458_op == 5))
  {
    {
      return std::string ("MUL");
    }
  }
  else if((_3458_op == 6))
  {
    {
      return std::string ("INV");
    }
  }
  else if((_3458_op == 8))
  {
    {
      return std::string ("SUM");
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("?("))->__mosek_2fusion_2Utils_2StringBuffer__a(_3458_op)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
}
// End mosek.fusion.ExprCode.op2str

// Begin mosek.fusion.ExprCode.eval_add_list
// Method mosek.fusion.ExprCode.eval_add_list @ src/fusion/Parameter.monty:3048:6-3099:7
void mosek::fusion::ExprCode::eval_add_list
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3459_code,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3460_ptr,
    std::shared_ptr< monty::ndarray< double,1 > > _3461_consts,
    int32_t _3462_offset,
    std::shared_ptr< monty::ndarray< double,1 > > _3463_target,
    std::shared_ptr< monty::ndarray< double,1 > > _3464_P,
    monty::rc_ptr< ::mosek::fusion::WorkStack > _3465_xs) { mosek::fusion::p_ExprCode::eval_add_list(_3459_code,_3460_ptr,_3461_consts,_3462_offset,_3463_target,_3464_P,_3465_xs); }
void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int32_t,1 > > _3459_code,std::shared_ptr< monty::ndarray< int32_t,1 > > _3460_ptr,std::shared_ptr< monty::ndarray< double,1 > > _3461_consts,int32_t _3462_offset,std::shared_ptr< monty::ndarray< double,1 > > _3463_target,std::shared_ptr< monty::ndarray< double,1 > > _3464_P,monty::rc_ptr< ::mosek::fusion::WorkStack > _3465_xs)
{
  _checked_ptr_1<int32_t> _ptr__3459_code(_3459_code ? _3459_code->raw() : nullptr, _3459_code ? _3459_code->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3460_ptr(_3460_ptr ? _3460_ptr->raw() : nullptr, _3460_ptr ? _3460_ptr->size(0) : 0);
  _checked_ptr_1<double> _ptr__3461_consts(_3461_consts ? _3461_consts->raw() : nullptr, _3461_consts ? _3461_consts->size(0) : 0);
  _checked_ptr_1<double> _ptr__3463_target(_3463_target ? _3463_target->raw() : nullptr, _3463_target ? _3463_target->size(0) : 0);
  _checked_ptr_1<double> _ptr__3464_P(_3464_P ? _3464_P->raw() : nullptr, _3464_P ? _3464_P->size(0) : 0);
  int32_t _3466_stack = _3465_xs->allocf64((int)((_3459_code)->size(0)));
  int32_t _3467_stackp = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _3468_xf64 = mosek::fusion::p_WorkStack::_get_impl(_3465_xs)->f64;
  _checked_ptr_1<double> _ptr__3468_xf64(_3468_xf64 ? _3468_xf64->raw() : nullptr,_3468_xf64 ? _3468_xf64->size(0) : 0);
  int32_t _10657_ = (int)0;
  int32_t _10658_ = ((int)((_3460_ptr)->size(0)) - (int)1);
  for (int32_t _3469_i = _10657_; _3469_i < _10658_; ++_3469_i)
  {
    {
      int32_t _10659_ = _ptr__3460_ptr[_3469_i];
      int32_t _10660_ = _ptr__3460_ptr[safe_add( _3469_i,(int)1 )];
      int32_t _10661_ = (int)2;
      for (int32_t _3470_j = _10659_; _3470_j < _10660_; _3470_j += _10661_)
      {
        {
          if ((_ptr__3459_code[_3470_j] == 0))
          {
            {
            }
          }
          else if((_ptr__3459_code[_3470_j] == 1))
          {
            {
              _ptr__3468_xf64[safe_add( _3466_stack,_3467_stackp )] = _ptr__3464_P[_ptr__3459_code[safe_add( _3470_j,(int)1 )]];
              ++ _3467_stackp;
            }
          }
          else if((_ptr__3459_code[_3470_j] == 2))
          {
            {
              _ptr__3468_xf64[safe_add( _3466_stack,_3467_stackp )] = _ptr__3461_consts[(_3470_j / (int)2)];
              ++ _3467_stackp;
            }
          }
          else if((_ptr__3459_code[_3470_j] == 3))
          {
            {
              _ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)2)] = (_ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)1)] + _ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)2)]);
              -- _3467_stackp;
            }
          }
          else if((_ptr__3459_code[_3470_j] == 4))
          {
            {
              _ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)1)] = (-_ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)1)]);
            }
          }
          else if((_ptr__3459_code[_3470_j] == 5))
          {
            {
              _ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)2)] = (_ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)1)] * _ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)2)]);
              -- _3467_stackp;
            }
          }
          else if((_ptr__3459_code[_3470_j] == 6))
          {
            {
              _ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)1)] = (1.0 / _ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)1)]);
            }
          }
          else if((_ptr__3459_code[_3470_j] == 8))
          {
            {
              double _3471_r = 0.0;
              int32_t _10662_ = (int)0;
              int32_t _10663_ = _ptr__3459_code[safe_add( _3470_j,(int)1 )];
              for (int32_t _3472_k = _10662_; _3472_k < _10663_; ++_3472_k)
              {
                {
                  -- _3467_stackp;
                  _3471_r += _ptr__3468_xf64[safe_add( _3466_stack,_3467_stackp )];
                }
              }
              _ptr__3468_xf64[safe_add( _3466_stack,_3467_stackp )] = _3471_r;
              ++ _3467_stackp;
            }
          }
          {}
        }
      }
      _ptr__3463_target[safe_add( _3462_offset,_3469_i )] += _ptr__3468_xf64[(safe_add( _3466_stack,_3467_stackp ) - (int)1)];
    }
  }
  _3465_xs->clear();
}
// End mosek.fusion.ExprCode.eval_add_list

// Begin mosek.fusion.ExprCode.eval_add_list
// Method mosek.fusion.ExprCode.eval_add_list @ src/fusion/Parameter.monty:3044:6-3046:7
void mosek::fusion::ExprCode::eval_add_list
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3473_code,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3474_ptr,
    std::shared_ptr< monty::ndarray< double,1 > > _3475_consts,
    std::shared_ptr< monty::ndarray< double,1 > > _3476_target,
    std::shared_ptr< monty::ndarray< double,1 > > _3477_P,
    monty::rc_ptr< ::mosek::fusion::WorkStack > _3478_xs) { mosek::fusion::p_ExprCode::eval_add_list(_3473_code,_3474_ptr,_3475_consts,_3476_target,_3477_P,_3478_xs); }
void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int32_t,1 > > _3473_code,std::shared_ptr< monty::ndarray< int32_t,1 > > _3474_ptr,std::shared_ptr< monty::ndarray< double,1 > > _3475_consts,std::shared_ptr< monty::ndarray< double,1 > > _3476_target,std::shared_ptr< monty::ndarray< double,1 > > _3477_P,monty::rc_ptr< ::mosek::fusion::WorkStack > _3478_xs)
{
  _checked_ptr_1<int32_t> _ptr__3473_code(_3473_code ? _3473_code->raw() : nullptr, _3473_code ? _3473_code->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3474_ptr(_3474_ptr ? _3474_ptr->raw() : nullptr, _3474_ptr ? _3474_ptr->size(0) : 0);
  _checked_ptr_1<double> _ptr__3475_consts(_3475_consts ? _3475_consts->raw() : nullptr, _3475_consts ? _3475_consts->size(0) : 0);
  _checked_ptr_1<double> _ptr__3476_target(_3476_target ? _3476_target->raw() : nullptr, _3476_target ? _3476_target->size(0) : 0);
  _checked_ptr_1<double> _ptr__3477_P(_3477_P ? _3477_P->raw() : nullptr, _3477_P ? _3477_P->size(0) : 0);
  ::mosek::fusion::p_ExprCode::eval_add_list(_3473_code,_3474_ptr,_3475_consts,(int)0,_3476_target,_3477_P,_3478_xs);
}
// End mosek.fusion.ExprCode.eval_add_list

// Begin mosek.fusion.ExprCode.emit_sum
// Method mosek.fusion.ExprCode.emit_sum @ src/fusion/Parameter.monty:3037:6-3041:7
int32_t mosek::fusion::ExprCode::emit_sum
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3479_tgt,
    int32_t _3480_ofs,
    int32_t _3481_num) { return mosek::fusion::p_ExprCode::emit_sum(_3479_tgt,_3480_ofs,_3481_num); }
int32_t mosek::fusion::p_ExprCode::emit_sum(std::shared_ptr< monty::ndarray< int32_t,1 > > _3479_tgt,int32_t _3480_ofs,int32_t _3481_num)
{
  _checked_ptr_1<int32_t> _ptr__3479_tgt(_3479_tgt ? _3479_tgt->raw() : nullptr, _3479_tgt ? _3479_tgt->size(0) : 0);
  _ptr__3479_tgt[_3480_ofs] = 8;
  _ptr__3479_tgt[safe_add( _3480_ofs,(int)1 )] = _3481_num;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_sum

// Begin mosek.fusion.ExprCode.emit_inv
// Method mosek.fusion.ExprCode.emit_inv @ src/fusion/Parameter.monty:3032:6-3036:7
int32_t mosek::fusion::ExprCode::emit_inv
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3482_tgt,
    int32_t _3483_ofs) { return mosek::fusion::p_ExprCode::emit_inv(_3482_tgt,_3483_ofs); }
int32_t mosek::fusion::p_ExprCode::emit_inv(std::shared_ptr< monty::ndarray< int32_t,1 > > _3482_tgt,int32_t _3483_ofs)
{
  _checked_ptr_1<int32_t> _ptr__3482_tgt(_3482_tgt ? _3482_tgt->raw() : nullptr, _3482_tgt ? _3482_tgt->size(0) : 0);
  _ptr__3482_tgt[_3483_ofs] = 6;
  _ptr__3482_tgt[safe_add( _3483_ofs,(int)1 )] = (int)0;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_inv

// Begin mosek.fusion.ExprCode.emit_mul
// Method mosek.fusion.ExprCode.emit_mul @ src/fusion/Parameter.monty:3027:6-3031:7
int32_t mosek::fusion::ExprCode::emit_mul
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3484_tgt,
    int32_t _3485_ofs) { return mosek::fusion::p_ExprCode::emit_mul(_3484_tgt,_3485_ofs); }
int32_t mosek::fusion::p_ExprCode::emit_mul(std::shared_ptr< monty::ndarray< int32_t,1 > > _3484_tgt,int32_t _3485_ofs)
{
  _checked_ptr_1<int32_t> _ptr__3484_tgt(_3484_tgt ? _3484_tgt->raw() : nullptr, _3484_tgt ? _3484_tgt->size(0) : 0);
  _ptr__3484_tgt[_3485_ofs] = 5;
  _ptr__3484_tgt[safe_add( _3485_ofs,(int)1 )] = (int)0;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_mul

// Begin mosek.fusion.ExprCode.emit_neg
// Method mosek.fusion.ExprCode.emit_neg @ src/fusion/Parameter.monty:3022:6-3026:7
int32_t mosek::fusion::ExprCode::emit_neg
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3486_tgt,
    int32_t _3487_ofs) { return mosek::fusion::p_ExprCode::emit_neg(_3486_tgt,_3487_ofs); }
int32_t mosek::fusion::p_ExprCode::emit_neg(std::shared_ptr< monty::ndarray< int32_t,1 > > _3486_tgt,int32_t _3487_ofs)
{
  _checked_ptr_1<int32_t> _ptr__3486_tgt(_3486_tgt ? _3486_tgt->raw() : nullptr, _3486_tgt ? _3486_tgt->size(0) : 0);
  _ptr__3486_tgt[_3487_ofs] = 4;
  _ptr__3486_tgt[safe_add( _3487_ofs,(int)1 )] = (int)0;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_neg

// Begin mosek.fusion.ExprCode.emit_add
// Method mosek.fusion.ExprCode.emit_add @ src/fusion/Parameter.monty:3017:6-3021:7
int32_t mosek::fusion::ExprCode::emit_add
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3488_tgt,
    int32_t _3489_ofs) { return mosek::fusion::p_ExprCode::emit_add(_3488_tgt,_3489_ofs); }
int32_t mosek::fusion::p_ExprCode::emit_add(std::shared_ptr< monty::ndarray< int32_t,1 > > _3488_tgt,int32_t _3489_ofs)
{
  _checked_ptr_1<int32_t> _ptr__3488_tgt(_3488_tgt ? _3488_tgt->raw() : nullptr, _3488_tgt ? _3488_tgt->size(0) : 0);
  _ptr__3488_tgt[_3489_ofs] = 3;
  _ptr__3488_tgt[safe_add( _3489_ofs,(int)1 )] = (int)0;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_add

// Begin mosek.fusion.ExprCode.emit_constref
// Method mosek.fusion.ExprCode.emit_constref @ src/fusion/Parameter.monty:3012:6-3016:7
int32_t mosek::fusion::ExprCode::emit_constref
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3490_tgt,
    int32_t _3491_ofs,
    int32_t _3492_i) { return mosek::fusion::p_ExprCode::emit_constref(_3490_tgt,_3491_ofs,_3492_i); }
int32_t mosek::fusion::p_ExprCode::emit_constref(std::shared_ptr< monty::ndarray< int32_t,1 > > _3490_tgt,int32_t _3491_ofs,int32_t _3492_i)
{
  _checked_ptr_1<int32_t> _ptr__3490_tgt(_3490_tgt ? _3490_tgt->raw() : nullptr, _3490_tgt ? _3490_tgt->size(0) : 0);
  _ptr__3490_tgt[_3491_ofs] = 2;
  _ptr__3490_tgt[safe_add( _3491_ofs,(int)1 )] = _3492_i;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_constref

// Begin mosek.fusion.ExprCode.emit_paramref
// Method mosek.fusion.ExprCode.emit_paramref @ src/fusion/Parameter.monty:3007:6-3011:7
int32_t mosek::fusion::ExprCode::emit_paramref
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3493_tgt,
    int32_t _3494_ofs,
    int32_t _3495_i) { return mosek::fusion::p_ExprCode::emit_paramref(_3493_tgt,_3494_ofs,_3495_i); }
int32_t mosek::fusion::p_ExprCode::emit_paramref(std::shared_ptr< monty::ndarray< int32_t,1 > > _3493_tgt,int32_t _3494_ofs,int32_t _3495_i)
{
  _checked_ptr_1<int32_t> _ptr__3493_tgt(_3493_tgt ? _3493_tgt->raw() : nullptr, _3493_tgt ? _3493_tgt->size(0) : 0);
  _ptr__3493_tgt[_3494_ofs] = 1;
  _ptr__3493_tgt[safe_add( _3494_ofs,(int)1 )] = _3495_i;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_paramref

// Begin mosek.fusion.ExprCode.emit_nop
// Method mosek.fusion.ExprCode.emit_nop @ src/fusion/Parameter.monty:3002:6-3006:7
int32_t mosek::fusion::ExprCode::emit_nop
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3496_tgt,
    int32_t _3497_ofs) { return mosek::fusion::p_ExprCode::emit_nop(_3496_tgt,_3497_ofs); }
int32_t mosek::fusion::p_ExprCode::emit_nop(std::shared_ptr< monty::ndarray< int32_t,1 > > _3496_tgt,int32_t _3497_ofs)
{
  _checked_ptr_1<int32_t> _ptr__3496_tgt(_3496_tgt ? _3496_tgt->raw() : nullptr, _3496_tgt ? _3496_tgt->size(0) : 0);
  _ptr__3496_tgt[_3497_ofs] = 0;
  _ptr__3496_tgt[safe_add( _3497_ofs,(int)1 )] = (int)0;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_nop

void mosek::fusion::p_ExprCode::destroy()
{
}
void mosek::fusion::ExprCode::destroy() { mosek::fusion::p_ExprCode::_get_impl(this)->destroy(); }
// } class ExprCode
// class ExprParameter { // @ src/fusion/Parameter.monty:2981:4-2998:5
mosek::fusion::ExprParameter::ExprParameter(mosek::fusion::p_ExprParameter *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprParameter()" << this << std::endl; */ }
mosek::fusion::ExprParameter::~ExprParameter() {  /* std::cout << "~ExprParameter()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprParameter::p_ExprParameter
  (::mosek::fusion::ExprParameter * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprParameter.ctor @ src/fusion/Parameter.monty:2985:6-2988:7
mosek::fusion::ExprParameter::t mosek::fusion::p_ExprParameter::_new_ExprParameter
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3498_p)
{ return new mosek::fusion::ExprParameter(_3498_p); }
mosek::fusion::ExprParameter::ExprParameter
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3498_p) : 
   ExprParameter(new mosek::fusion::p_ExprParameter(this))
{ mosek::fusion::p_ExprParameter::_get_impl(this)->_initialize(_3498_p); }
void mosek::fusion::p_ExprParameter::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3498_p)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_3498_p->getShape());
    mosek::fusion::p_ExprParameter::_get_impl(::mosek::fusion::ExprParameter::t(_pubthis))->p = _3498_p;
  }
}
// mosek.fusion.ExprParameter.ctor

// Begin mosek.fusion.ExprParameter.eval
// Method mosek.fusion.ExprParameter.eval @ src/fusion/Parameter.monty:2995:6-2997:7
void mosek::fusion::ExprParameter :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3499_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3500_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3501_xs) { mosek::fusion::p_ExprParameter::_get_impl(this)->eval(_3499_rs,_3500_ws,_3501_xs); }
void mosek::fusion::p_ExprParameter::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3499_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3500_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3501_xs)
{
  p->eval(_3499_rs,_3500_ws,_3501_xs);
}
// End mosek.fusion.ExprParameter.eval

// Begin mosek.fusion.ExprParameter.slice
// Method mosek.fusion.ExprParameter.slice @ src/fusion/Parameter.monty:2993:6-116
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3502_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3503_stop) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3502_start,_3503_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3502_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3503_stop) { return __mosek_2fusion_2ExprParameter__slice(_3502_start,_3503_stop); }
/* override: mosek.fusion.BaseExpression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3502_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3503_stop) { return __mosek_2fusion_2ExprParameter__slice(_3502_start,_3503_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3502_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3503_stop)
{
  _checked_ptr_1<int32_t> _ptr__3502_start(_3502_start ? _3502_start->raw() : nullptr, _3502_start ? _3502_start->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3503_stop(_3503_stop ? _3503_stop->raw() : nullptr, _3503_stop ? _3503_stop->size(0) : 0);
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3502_start,_3503_stop))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.ExprParameter.slice

// Begin mosek.fusion.ExprParameter.slice
// Method mosek.fusion.ExprParameter.slice @ src/fusion/Parameter.monty:2992:6-112
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(int32_t _3504_start,int32_t _3505_stop) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3504_start,_3505_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(int32_t _3504_start,int32_t _3505_stop) { return __mosek_2fusion_2ExprParameter__slice(_3504_start,_3505_stop); }
/* override: mosek.fusion.BaseExpression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(int32_t _3504_start,int32_t _3505_stop) { return __mosek_2fusion_2ExprParameter__slice(_3504_start,_3505_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(int32_t _3504_start,int32_t _3505_stop)
{
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3504_start,_3505_stop))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.ExprParameter.slice

// Begin mosek.fusion.ExprParameter.toString
// Method mosek.fusion.ExprParameter.toString @ src/fusion/Parameter.monty:2990:6-128
std::string mosek::fusion::ExprParameter :: toString() { return mosek::fusion::p_ExprParameter::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprParameter::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprParameter("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprParameter.toString

void mosek::fusion::p_ExprParameter::destroy()
{
  p.reset();
}
void mosek::fusion::ExprParameter::destroy() { mosek::fusion::p_ExprParameter::_get_impl(this)->destroy(); }
// } class ExprParameter
// class Param { // @ src/fusion/Parameter.monty:2855:4-2978:5
mosek::fusion::Param::Param(mosek::fusion::p_Param *_impl) : _impl(_impl) { /*std::cout << "Param() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Param::~Param() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Param::p_Param
  (::mosek::fusion::Param * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Param.repeat
// Method mosek.fusion.Param.repeat @ src/fusion/Parameter.monty:2977:6-122
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::repeat
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3506_p,
    int32_t _3507_n,
    int32_t _3508_dim) { return mosek::fusion::p_Param::repeat(_3506_p,_3507_n,_3508_dim); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::repeat(monty::rc_ptr< ::mosek::fusion::Parameter > _3506_p,int32_t _3507_n,int32_t _3508_dim)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10664_;
  for (int32_t _3509_i = (int)0, _10665_ = _3507_n; _3509_i < _10665_ ; ++_3509_i)
  {
    _10664_.push_back(_3506_p);
  }
  auto _10666_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10664_.size()),_10664_.begin(),_10664_.end()));
  return ::mosek::fusion::p_Param::stack(_3508_dim,_10666_);
}
// End mosek.fusion.Param.repeat

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ src/fusion/Parameter.monty:2976:6-136
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( int32_t _3510_dim,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3511_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3512_p2,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3513_p3) { return mosek::fusion::p_Param::stack(_3510_dim,_3511_p1,_3512_p2,_3513_p3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int32_t _3510_dim,monty::rc_ptr< ::mosek::fusion::Parameter > _3511_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3512_p2,monty::rc_ptr< ::mosek::fusion::Parameter > _3513_p3)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3511_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3512_p2.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3513_p3.get())}),_3510_dim);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ src/fusion/Parameter.monty:2975:6-119
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( int32_t _3514_dim,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3515_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3516_p2) { return mosek::fusion::p_Param::stack(_3514_dim,_3515_p1,_3516_p2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int32_t _3514_dim,monty::rc_ptr< ::mosek::fusion::Parameter > _3515_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3516_p2)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3515_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3516_p2.get())}),_3514_dim);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ src/fusion/Parameter.monty:2974:6-95
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( int32_t _3517_dim,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3518_p) { return mosek::fusion::p_Param::stack(_3517_dim,_3518_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int32_t _3517_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3518_p)
{
  return ::mosek::fusion::p_Param::dstack(_3518_p,_3517_dim);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ src/fusion/Parameter.monty:2973:6-119
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3519_p) { return mosek::fusion::p_Param::stack(_3519_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3519_p)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10667_;
  for (int32_t _3520_i = (int)0, _10668_ = (int)((_3519_p)->size(0)); _3520_i < _10668_ ; ++_3520_i)
  {
    _10667_.push_back(::mosek::fusion::p_Param::hstack(((*_3519_p)(_3520_i))));
  }
  auto _10669_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10667_.size()),_10667_.begin(),_10667_.end()));
  return ::mosek::fusion::p_Param::vstack(_10669_);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.hstack
// Method mosek.fusion.Param.hstack @ src/fusion/Parameter.monty:2972:6-123
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3521_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3522_p2,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3523_p3) { return mosek::fusion::p_Param::hstack(_3521_p1,_3522_p2,_3523_p3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3521_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3522_p2,monty::rc_ptr< ::mosek::fusion::Parameter > _3523_p3)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3521_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3522_p2.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3523_p3.get())}),(int)1);
}
// End mosek.fusion.Param.hstack

// Begin mosek.fusion.Param.hstack
// Method mosek.fusion.Param.hstack @ src/fusion/Parameter.monty:2971:6-107
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3524_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3525_p2) { return mosek::fusion::p_Param::hstack(_3524_p1,_3525_p2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3524_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3525_p2)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3524_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3525_p2.get())}),(int)1);
}
// End mosek.fusion.Param.hstack

// Begin mosek.fusion.Param.hstack
// Method mosek.fusion.Param.hstack @ src/fusion/Parameter.monty:2970:6-83
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3526_p) { return mosek::fusion::p_Param::hstack(_3526_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3526_p)
{
  return ::mosek::fusion::p_Param::dstack(_3526_p,(int)1);
}
// End mosek.fusion.Param.hstack

// Begin mosek.fusion.Param.vstack
// Method mosek.fusion.Param.vstack @ src/fusion/Parameter.monty:2969:6-123
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3527_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3528_p2,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3529_p3) { return mosek::fusion::p_Param::vstack(_3527_p1,_3528_p2,_3529_p3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3527_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3528_p2,monty::rc_ptr< ::mosek::fusion::Parameter > _3529_p3)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3527_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3528_p2.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3529_p3.get())}),(int)0);
}
// End mosek.fusion.Param.vstack

// Begin mosek.fusion.Param.vstack
// Method mosek.fusion.Param.vstack @ src/fusion/Parameter.monty:2968:6-107
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3530_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3531_p2) { return mosek::fusion::p_Param::vstack(_3530_p1,_3531_p2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3530_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3531_p2)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3530_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3531_p2.get())}),(int)0);
}
// End mosek.fusion.Param.vstack

// Begin mosek.fusion.Param.vstack
// Method mosek.fusion.Param.vstack @ src/fusion/Parameter.monty:2967:6-83
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3532_p) { return mosek::fusion::p_Param::vstack(_3532_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3532_p)
{
  return ::mosek::fusion::p_Param::dstack(_3532_p,(int)0);
}
// End mosek.fusion.Param.vstack

// Begin mosek.fusion.Param.dstack
// Method mosek.fusion.Param.dstack @ src/fusion/Parameter.monty:2856:6-2965:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3533_p,int32_t _3534_dim)
{
  if ((_3534_dim < (int)0))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3535_dimsizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_3533_p)->size(0)))));
  _checked_ptr_1<int32_t> _ptr__3535_dimsizes(_3535_dimsizes ? _3535_dimsizes->raw() : nullptr,_3535_dimsizes ? _3535_dimsizes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3536_itemsizes = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_3533_p)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__3536_itemsizes(_3536_itemsizes ? _3536_itemsizes->raw() : nullptr,_3536_itemsizes ? _3536_itemsizes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3537_rshape;
  _checked_ptr_1<int32_t> _ptr__3537_rshape(_3537_rshape ? _3537_rshape->raw() : nullptr,_3537_rshape ? _3537_rshape->size(0) : 0);
  int32_t _3538_rnd = ((*_3533_p)((int)0))->getND();
  int32_t _10670_ = (int)1;
  int32_t _10671_ = (int)((_3533_p)->size(0));
  for (int32_t _3539_i = _10670_; _3539_i < _10671_; ++_3539_i)
  {
    {
      if ((_3538_rnd < ((*_3533_p)(_3539_i))->getND()))
      {
        {
          _3538_rnd = ((*_3533_p)(_3539_i))->getND();
        }
      }
      {}
    }
  }
  if ((_3534_dim < _3538_rnd))
  {
    {
      int32_t _3540_i = (int)0;
      while ( ((_3540_i < (int)((_3533_p)->size(0))) && (_3538_rnd != ((*_3533_p)(_3540_i))->getND())) )
      {
        {
          ++ _3540_i;
        }
      }
      _3537_rshape = ((*_3533_p)(_3540_i))->getShape();
      _ptr__3537_rshape.update(_3537_rshape ? _3537_rshape->raw() : nullptr, _3537_rshape ? _3537_rshape->size(0) : 0);
      {
        int32_t _3541_i = (int)0;
        while ( ((_3541_i < (int)((_3533_p)->size(0))) && (_3538_rnd != ((*_3533_p)(_3541_i))->getND())) )
        {
          {
            ++ _3541_i;
          }
        }
        _3537_rshape = ((*_3533_p)(_3541_i))->getShape();
        _ptr__3537_rshape.update(_3537_rshape ? _3537_rshape->raw() : nullptr, _3537_rshape ? _3537_rshape->size(0) : 0);
      }
    }
  }
  else
  {
    {
      std::vector<int32_t> _10672_;
      for (int32_t _3542_i = (int)0, _10673_ = safe_add( _3534_dim,(int)1 ); _3542_i < _10673_ ; ++_3542_i)
      {
        _10672_.push_back((int)1);
      }
      auto _10674_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10672_.size()),_10672_.begin(),_10672_.end()));
      _3537_rshape = _10674_;
      _ptr__3537_rshape.update(_3537_rshape ? _3537_rshape->raw() : nullptr, _3537_rshape ? _3537_rshape->size(0) : 0);
      {
        int32_t _3543_i = (int)0;
        while ( ((_3543_i < (int)((_3533_p)->size(0))) && (_3538_rnd != ((*_3533_p)(_3543_i))->getND())) )
        {
          {
            ++ _3543_i;
          }
        }
        int32_t _3544_ndi = ((*_3533_p)(_3543_i))->getND();
        std::shared_ptr< monty::ndarray< int32_t,1 > > _3545_shapei = ((*_3533_p)(_3543_i))->getShape();
        _checked_ptr_1<int32_t> _ptr__3545_shapei(_3545_shapei ? _3545_shapei->raw() : nullptr,_3545_shapei ? _3545_shapei->size(0) : 0);
        int32_t _10675_ = (int)0;
        int32_t _10676_ = _3544_ndi;
        for (int32_t _3546_j = _10675_; _3546_j < _10676_; ++_3546_j)
        {
          {
            _ptr__3537_rshape[_3546_j] = _ptr__3545_shapei[_3546_j];
          }
        }
      }
    }
  }
  _3538_rnd = (int)((_3537_rshape)->size(0));
  int32_t _3547_dimsize = (int)0;
  {
    bool _3548_dimerr = false;
    int32_t _10677_ = (int)0;
    int32_t _10678_ = (int)((_3533_p)->size(0));
    for (int32_t _3549_i = _10677_; _3549_i < _10678_; ++_3549_i)
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _3550_shapei = ((*_3533_p)(_3549_i))->getShape();
        _checked_ptr_1<int32_t> _ptr__3550_shapei(_3550_shapei ? _3550_shapei->raw() : nullptr,_3550_shapei ? _3550_shapei->size(0) : 0);
        _ptr__3536_itemsizes[_3549_i] = ::mosek::fusion::p_Set::size(_3550_shapei);
        int32_t _10679_ = (int)0;
        int32_t _10680_ = (int)((_3550_shapei)->size(0));
        for (int32_t _3551_j = _10679_; _3551_j < _10680_; ++_3551_j)
        {
          {
            _3548_dimerr = (_3548_dimerr && ((_3551_j == _3534_dim) || (_ptr__3550_shapei[_3551_j] == _ptr__3537_rshape[_3551_j])));
          }
        }
        if ((_3534_dim < (int)((_3550_shapei)->size(0))))
        {
          {
            _ptr__3535_dimsizes[_3549_i] = _ptr__3550_shapei[_3534_dim];
            _3547_dimsize += _ptr__3550_shapei[_3534_dim];
            int32_t _10681_ = (int)((_3550_shapei)->size(0));
            int32_t _10682_ = _3538_rnd;
            for (int32_t _3552_j = _10681_; _3552_j < _10682_; ++_3552_j)
            {
              {
                _3548_dimerr = (_3548_dimerr && ((_3552_j == _3534_dim) || (_ptr__3537_rshape[_3552_j] == (int)1)));
              }
            }
          }
        }
        else
        {
          {
            _3547_dimsize += (int)1;
            _ptr__3535_dimsizes[_3549_i] = (int)1;
          }
        }
      }
    }
    if (_3548_dimerr)
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for stacking"));
      }
    }
    {}
  }
  _ptr__3537_rshape[_3534_dim] = _3547_dimsize;
  std::vector<int32_t> _10683_;
  for (int32_t _3554_i = (int)0, _10684_ = (int)((_3533_p)->size(0)); _3554_i < _10684_ ; ++_3554_i)
  {
    _10683_.push_back(((*_3533_p)(_3554_i))->getNumNonzero());
  }
  auto _10685_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10683_.size()),_10683_.begin(),_10683_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3553_nnzs = _10685_;
  _checked_ptr_1<int32_t> _ptr__3553_nnzs(_3553_nnzs ? _3553_nnzs->raw() : nullptr,_3553_nnzs ? _3553_nnzs->size(0) : 0);
  int32_t _3555_rnnz = (int)0;
  int32_t _10686_ = (int)0;
  int32_t _10687_ = (int)((_3553_nnzs)->size(0));
  for (int32_t _3556_i = _10686_; _3556_i < _10687_; ++_3556_i)
  {
    {
      _3555_rnnz += _ptr__3553_nnzs[_3556_i];
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3557_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3555_rnnz)));
  _checked_ptr_1<int64_t> _ptr__3557_sp(_3557_sp ? _3557_sp->raw() : nullptr,_3557_sp ? _3557_sp->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3558_idx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3555_rnnz)));
  _checked_ptr_1<int32_t> _ptr__3558_idx(_3558_idx ? _3558_idx->raw() : nullptr,_3558_idx ? _3558_idx->size(0) : 0);
  int64_t _3559_dim0 = (int)1;
  int32_t _10688_ = (int)0;
  int32_t _10689_ = _3534_dim;
  for (int32_t _3560_i = _10688_; _3560_i < _10689_; ++_3560_i)
  {
    {
      _3559_dim0 *= _ptr__3537_rshape[_3560_i];
    }
  }
  int64_t _3561_dim1 = _3547_dimsize;
  int64_t _3562_dim2 = (int)1;
  int32_t _10690_ = safe_add( _3534_dim,(int)1 );
  int32_t _10691_ = _3538_rnd;
  for (int32_t _3563_i = _10690_; _3563_i < _10691_; ++_3563_i)
  {
    {
      _3562_dim2 *= _ptr__3537_rshape[_3563_i];
    }
  }
  {
    int32_t _3564_ofs = (int)0;
    int64_t _3565_ofsdim = (int)0;
    int32_t _10692_ = (int)0;
    int32_t _10693_ = (int)((_3533_p)->size(0));
    for (int32_t _3566_i = _10692_; _3566_i < _10693_; ++_3566_i)
    {
      {
        int32_t _3567_ni = ((*_3533_p)(_3566_i))->getNumNonzero();
        ((*_3533_p)(_3566_i))->getSp(_3557_sp,_3564_ofs);
        ((*_3533_p)(_3566_i))->getAllIndexes(_3558_idx,_3564_ofs);
        if ((_3534_dim == (int)0))
        {
          {
            int32_t _10694_ = _3564_ofs;
            int32_t _10695_ = safe_add( _3564_ofs,_3567_ni );
            for (int32_t _3568_j = _10694_; _3568_j < _10695_; ++_3568_j)
            {
              {
                _ptr__3557_sp[_3568_j] += _3565_ofsdim;
              }
            }
            _3565_ofsdim += _ptr__3536_itemsizes[_3566_i];
          }
        }
        else
        {
          {
            int32_t _10696_ = _3564_ofs;
            int32_t _10697_ = safe_add( _3564_ofs,_3567_ni );
            for (int32_t _3569_j = _10696_; _3569_j < _10697_; ++_3569_j)
            {
              {
                int64_t _3570_i0 = (_ptr__3557_sp[_3569_j] / safe_mul( _ptr__3535_dimsizes[_3566_i],_3562_dim2 ));
                int64_t _3571_i1 = ((_ptr__3557_sp[_3569_j] / _3562_dim2) % _ptr__3535_dimsizes[_3566_i]);
                int64_t _3572_i2 = (_ptr__3557_sp[_3569_j] % _3562_dim2);
                _ptr__3557_sp[_3569_j] = safe_add( safe_add( safe_mul( _3570_i0,safe_mul( _3547_dimsize,_3562_dim2 ) ),safe_mul( safe_add( _3571_i1,_3565_ofsdim ),_3562_dim2 ) ),_3572_i2 );
              }
            }
            _3565_ofsdim += _ptr__3535_dimsizes[_3566_i];
          }
        }
        _3564_ofs += _3567_ni;
      }
    }
  }
  int32_t _3573_maxdim = _ptr__3537_rshape[(int)0];
  int32_t _10698_ = (int)1;
  int32_t _10699_ = _3538_rnd;
  for (int32_t _3574_i = _10698_; _3574_i < _10699_; ++_3574_i)
  {
    {
      if ((_3573_maxdim < _ptr__3537_rshape[_3574_i]))
      {
        {
          _3573_maxdim = _ptr__3537_rshape[_3574_i];
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3575_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _3573_maxdim,(int)1 ))));
  _checked_ptr_1<int32_t> _ptr__3575_ptr(_3575_ptr ? _3575_ptr->raw() : nullptr,_3575_ptr ? _3575_ptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3576_perm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3555_rnnz)));
  _checked_ptr_1<int32_t> _ptr__3576_perm(_3576_perm ? _3576_perm->raw() : nullptr,_3576_perm ? _3576_perm->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3577_perm2 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3555_rnnz)));
  _checked_ptr_1<int32_t> _ptr__3577_perm2(_3577_perm2 ? _3577_perm2->raw() : nullptr,_3577_perm2 ? _3577_perm2->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3578_rstrides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3538_rnd)));
  _checked_ptr_1<int64_t> _ptr__3578_rstrides(_3578_rstrides ? _3578_rstrides->raw() : nullptr,_3578_rstrides ? _3578_rstrides->size(0) : 0);
  _ptr__3578_rstrides[(_3538_rnd - (int)1)] = (int)1;
  int32_t _10700_ = (int)1;
  int32_t _10701_ = _3538_rnd;
  for (int32_t _3579_i = _10700_; _3579_i < _10701_; ++_3579_i)
  {
    {
      _ptr__3578_rstrides[((_3538_rnd - _3579_i) - (int)1)] = safe_mul( _ptr__3578_rstrides[(_3538_rnd - _3579_i)],_ptr__3537_rshape[(_3538_rnd - _3579_i)] );
    }
  }
  int32_t _10702_ = (int)0;
  int32_t _10703_ = _3555_rnnz;
  for (int32_t _3580_i = _10702_; _3580_i < _10703_; ++_3580_i)
  {
    {
      _ptr__3576_perm[_3580_i] = _3580_i;
    }
  }
  int32_t _10704_ = (int)0;
  int32_t _10705_ = _3538_rnd;
  for (int32_t _3581_d_ = _10704_; _3581_d_ < _10705_; ++_3581_d_)
  {
    {
      int32_t _3582_d = ((_3538_rnd - _3581_d_) - (int)1);
      int32_t _10706_ = (int)0;
      int32_t _10707_ = safe_add( _3573_maxdim,(int)1 );
      for (int32_t _3583_i = _10706_; _3583_i < _10707_; ++_3583_i)
      {
        {
          _ptr__3575_ptr[_3583_i] = (int)0;
        }
      }
      int32_t _10708_ = (int)0;
      int32_t _10709_ = _3555_rnnz;
      for (int32_t _3584_i = _10708_; _3584_i < _10709_; ++_3584_i)
      {
        {
          ++ _ptr__3575_ptr[safe_add( (int)1,((_ptr__3557_sp[_3584_i] / _ptr__3578_rstrides[_3582_d]) % _ptr__3537_rshape[_3582_d]) )];
        }
      }
      int32_t _10710_ = (int)0;
      int32_t _10711_ = _3573_maxdim;
      for (int32_t _3585_i = _10710_; _3585_i < _10711_; ++_3585_i)
      {
        {
          _ptr__3575_ptr[safe_add( _3585_i,(int)1 )] += _ptr__3575_ptr[_3585_i];
        }
      }
      int32_t _10712_ = (int)0;
      int32_t _10713_ = _3555_rnnz;
      for (int32_t _3586_i = _10712_; _3586_i < _10713_; ++_3586_i)
      {
        {
          int64_t _3587_idx = ((_ptr__3557_sp[_ptr__3576_perm[_3586_i]] / _ptr__3578_rstrides[_3582_d]) % _ptr__3537_rshape[_3582_d]);
          _ptr__3577_perm2[_ptr__3575_ptr[_3587_idx]] = _ptr__3576_perm[_3586_i];
          ++ _ptr__3575_ptr[_3587_idx];
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3588_tmp = _3577_perm2;
      _checked_ptr_1<int32_t> _ptr__3588_tmp(_3588_tmp ? _3588_tmp->raw() : nullptr,_3588_tmp ? _3588_tmp->size(0) : 0);
      _3577_perm2 = _3576_perm;
      _ptr__3577_perm2.update(_3577_perm2 ? _3577_perm2->raw() : nullptr, _3577_perm2 ? _3577_perm2->size(0) : 0);
      _3576_perm = _3588_tmp;
      _ptr__3576_perm.update(_3576_perm ? _3576_perm->raw() : nullptr, _3576_perm ? _3576_perm->size(0) : 0);
    }
  }
  std::vector<int64_t> _10714_;
  for (int32_t _3590_i = (int)0, _10715_ = _3555_rnnz; _3590_i < _10715_ ; ++_3590_i)
  {
    _10714_.push_back(_ptr__3557_sp[_ptr__3576_perm[_3590_i]]);
  }
  auto _10716_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10714_.size()),_10714_.begin(),_10714_.end()));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3589_rsp = _10716_;
  _checked_ptr_1<int64_t> _ptr__3589_rsp(_3589_rsp ? _3589_rsp->raw() : nullptr,_3589_rsp ? _3589_rsp->size(0) : 0);
  std::vector<int32_t> _10717_;
  for (int32_t _3592_i = (int)0, _10718_ = _3555_rnnz; _3592_i < _10718_ ; ++_3592_i)
  {
    _10717_.push_back(_ptr__3558_idx[_ptr__3576_perm[_3592_i]]);
  }
  auto _10719_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10717_.size()),_10717_.begin(),_10717_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3591_ridx = _10719_;
  _checked_ptr_1<int32_t> _ptr__3591_ridx(_3591_ridx ? _3591_ridx->raw() : nullptr,_3591_ridx ? _3591_ridx->size(0) : 0);
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(((*_3533_p)((int)0))->__mosek_2fusion_2Parameter__getModel(),_3537_rshape,_3589_rsp,_3591_ridx)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.Param.dstack

void mosek::fusion::p_Param::destroy()
{
}
void mosek::fusion::Param::destroy() { mosek::fusion::p_Param::_get_impl(this)->destroy(); }
// } class Param
// class ExprMulParamScalarExpr { // @ src/fusion/Parameter.monty:2623:4-2768:5
mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr(mosek::fusion::p_ExprMulParamScalarExpr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalarExpr()" << this << std::endl; */ }
mosek::fusion::ExprMulParamScalarExpr::~ExprMulParamScalarExpr() {  /* std::cout << "~ExprMulParamScalarExpr()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamScalarExpr::p_ExprMulParamScalarExpr
  (::mosek::fusion::ExprMulParamScalarExpr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamScalarExpr.ctor @ src/fusion/Parameter.monty:2627:6-2633:7
mosek::fusion::ExprMulParamScalarExpr::t mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3593_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3594_e)
{ return new mosek::fusion::ExprMulParamScalarExpr(_3593_p,_3594_e); }
mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3593_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3594_e) : 
   ExprMulParamScalarExpr(new mosek::fusion::p_ExprMulParamScalarExpr(this))
{ mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->_initialize(_3593_p,_3594_e); }
void mosek::fusion::p_ExprMulParamScalarExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3593_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3594_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_3593_p->getShape());
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->p = _3593_p;
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->e = _3594_e;
    if ((_3594_e->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamScalarExpr.ctor

// Begin mosek.fusion.ExprMulParamScalarExpr.eval
// Method mosek.fusion.ExprMulParamScalarExpr.eval @ src/fusion/Parameter.monty:2637:6-2767:7
void mosek::fusion::ExprMulParamScalarExpr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3595_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3596_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3597_xs) { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->eval(_3595_rs,_3596_ws,_3597_xs); }
void mosek::fusion::p_ExprMulParamScalarExpr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3595_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3596_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3597_xs)
{
  e->eval(_3596_ws,_3595_rs,_3597_xs);
  _3596_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3598_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3598_wi32(_3598_wi32 ? _3598_wi32->raw() : nullptr,_3598_wi32 ? _3598_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3599_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3599_wi64(_3599_wi64 ? _3599_wi64->raw() : nullptr,_3599_wi64 ? _3599_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3600_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->f64;
  _checked_ptr_1<double> _ptr__3600_wf64(_3600_wf64 ? _3600_wf64->raw() : nullptr,_3600_wf64 ? _3600_wf64->size(0) : 0);
  int32_t _3601_nd = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->nd;
  if ((_3601_nd != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int32_t _3602_nelem = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->nelem;
  int32_t _3603_nnz = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->nnz;
  bool _3604_hassp = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->hassp;
  int32_t _3605_ptr = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->ptr_base;
  int32_t _3606_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->ncodeatom;
  int32_t _3607_sp = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->sp_base;
  int32_t _3608_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->nidxs_base;
  int32_t _3609_cof = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->cof_base;
  int32_t _3610_cconst = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->cconst_base;
  int32_t _3611_ptrcode = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->codeptr_base;
  int32_t _3612_code = mosek::fusion::p_WorkStack::_get_impl(_3596_ws)->code_base;
  int32_t _3613_rnd = p->getND();
  int32_t _3614_rnelem = p->getNumNonzero();
  int32_t _3615_rnnz = safe_mul( _3603_nnz,p->getNumNonzero() );
  bool _3616_rhassp = (p->getNumNonzero() < p->getSize());
  int32_t _10720_;
  bool _10721_ = (_3606_ncodeatom > (int)0);
  if (_10721_)
  {
    _10720_ = safe_add( safe_mul( _3606_ncodeatom,_3614_rnelem ),safe_mul( _3615_rnnz,(int)4 ) );
  }
  else
  {
    _10720_ = safe_mul( _3615_rnnz,(int)3 );
  }
  int32_t _3617_rncodeatom = _10720_;
  int32_t _3618_pidxs = _3597_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3619_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3597_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3619_xi32(_3619_xi32 ? _3619_xi32->raw() : nullptr,_3619_xi32 ? _3619_xi32->size(0) : 0);
  p->getAllIndexes(_3619_xi32,_3618_pidxs);
  _3595_rs->alloc_expr(_3613_rnd,_3614_rnelem,_3615_rnnz,_3616_rhassp,_3617_rncodeatom);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3620_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__3620_ri64(_3620_ri64 ? _3620_ri64->raw() : nullptr,_3620_ri64 ? _3620_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3621_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->f64;
  _checked_ptr_1<double> _ptr__3621_rf64(_3621_rf64 ? _3621_rf64->raw() : nullptr,_3621_rf64 ? _3621_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3622_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__3622_ri32(_3622_ri32 ? _3622_ri32->raw() : nullptr,_3622_ri32 ? _3622_ri32->size(0) : 0);
  int32_t _3623_rptr = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->ptr_base;
  int32_t _3624_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->nidxs_base;
  int32_t _3625_rsp = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->sp_base;
  int32_t _3626_rcof = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->cof_base;
  bool _3627_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->hassp;
  int32_t _3628_rshape = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->shape_base;
  int32_t _3629_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->codeptr_base;
  int32_t _3630_rcode = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->code_base;
  int32_t _3631_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3595_rs)->cconst_base;
  {
    int32_t _10722_ = (int)0;
    int32_t _10723_ = _3615_rnnz;
    for (int32_t _3632_i = _10722_; _3632_i < _10723_; ++_3632_i)
    {
      {
        _ptr__3621_rf64[safe_add( _3626_rcof,_3632_i )] = 0.0;
      }
    }
    int32_t _10724_ = (int)0;
    int32_t _10725_ = safe_add( _3614_rnelem,(int)1 );
    for (int32_t _3633_i = _10724_; _3633_i < _10725_; ++_3633_i)
    {
      {
        _ptr__3622_ri32[safe_add( _3623_rptr,_3633_i )] = safe_mul( _3633_i,_3603_nnz );
      }
    }
    int32_t _10726_ = (int)0;
    int32_t _10727_ = _3613_rnd;
    for (int32_t _3634_i = _10726_; _3634_i < _10727_; ++_3634_i)
    {
      {
        _ptr__3622_ri32[safe_add( _3628_rshape,_3634_i )] = p->getDim(_3634_i);
      }
    }
    if (_3627_rhassp)
    {
      {
        p->getSp(_3620_ri64,_3625_rsp);
      }
    }
    {}
    int32_t _10728_ = (int)0;
    int32_t _10729_ = _3615_rnnz;
    for (int32_t _3635_i = _10728_; _3635_i < _10729_; ++_3635_i)
    {
      {
        _ptr__3620_ri64[safe_add( _3624_rnidxs,_3635_i )] = (-(int)999);
      }
    }
    {
      int32_t _3636_k = (int)0;
      int32_t _10730_ = (int)0;
      int32_t _10731_ = _3614_rnelem;
      for (int32_t _3637_i = _10730_; _3637_i < _10731_; ++_3637_i)
      {
        {
          int32_t _10732_ = (int)0;
          int32_t _10733_ = _3603_nnz;
          for (int32_t _3638_j = _10732_; _3638_j < _10733_; ++_3638_j)
          {
            {
              _ptr__3620_ri64[safe_add( _3624_rnidxs,_3636_k )] = _ptr__3599_wi64[safe_add( _3608_nidxs,_3638_j )];
              ++ _3636_k;
            }
          }
        }
      }
    }
    if ((_3617_rncodeatom > (int)0))
    {
      {
        _ptr__3622_ri32[_3629_rcodeptr] = (int)0;
      }
    }
    {}
    {
      if ((_3606_ncodeatom == (int)0))
      {
        {
          int32_t _3639_nzi = (int)0;
          int32_t _3640_codei = (int)0;
          int32_t _10734_ = (int)0;
          int32_t _10735_ = _3614_rnelem;
          for (int32_t _3641_i = _10734_; _3641_i < _10735_; ++_3641_i)
          {
            {
              int32_t _10736_ = (int)0;
              int32_t _10737_ = _3603_nnz;
              for (int32_t _3642_k = _10736_; _3642_k < _10737_; ++_3642_k)
              {
                {
                  _ptr__3622_ri32[safe_add( _3630_rcode,_3640_codei )] = 2;
                  _ptr__3621_rf64[safe_add( _3631_rcconst,_3640_codei )] = _ptr__3600_wf64[safe_add( _3609_cof,_3642_k )];
                  ++ _3640_codei;
                  _ptr__3622_ri32[safe_add( _3630_rcode,_3640_codei )] = 1;
                  _ptr__3621_rf64[safe_add( _3631_rcconst,_3640_codei )] = _ptr__3619_xi32[safe_add( _3618_pidxs,_3641_i )];
                  ++ _3640_codei;
                  _ptr__3622_ri32[safe_add( _3630_rcode,_3640_codei )] = 5;
                  ++ _3640_codei;
                  _ptr__3622_ri32[safe_add( safe_add( _3629_rcodeptr,_3639_nzi ),(int)1 )] = _3640_codei;
                  ++ _3639_nzi;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _3643_codei = (int)0;
          int32_t _3644_nzi = (int)0;
          int32_t _10738_ = (int)0;
          int32_t _10739_ = _3614_rnelem;
          for (int32_t _3645_i = _10738_; _3645_i < _10739_; ++_3645_i)
          {
            {
              int32_t _10740_ = (int)0;
              int32_t _10741_ = _3603_nnz;
              for (int32_t _3646_k = _10740_; _3646_k < _10741_; ++_3646_k)
              {
                {
                  _ptr__3622_ri32[safe_add( _3630_rcode,_3643_codei )] = 2;
                  _ptr__3621_rf64[safe_add( _3631_rcconst,_3643_codei )] = _ptr__3600_wf64[safe_add( _3609_cof,_3646_k )];
                  ++ _3643_codei;
                  int32_t _10742_ = _ptr__3598_wi32[safe_add( _3611_ptrcode,_3646_k )];
                  int32_t _10743_ = _ptr__3598_wi32[safe_add( safe_add( _3611_ptrcode,_3646_k ),(int)1 )];
                  for (int32_t _3647_l = _10742_; _3647_l < _10743_; ++_3647_l)
                  {
                    {
                      _ptr__3622_ri32[safe_add( _3630_rcode,_3643_codei )] = _ptr__3598_wi32[safe_add( _3612_code,_3647_l )];
                      _ptr__3621_rf64[safe_add( _3631_rcconst,_3643_codei )] = _ptr__3600_wf64[safe_add( _3610_cconst,_3647_l )];
                      ++ _3643_codei;
                    }
                  }
                  _ptr__3622_ri32[safe_add( _3630_rcode,_3643_codei )] = 3;
                  ++ _3643_codei;
                  _ptr__3622_ri32[safe_add( _3630_rcode,_3643_codei )] = 1;
                  _ptr__3621_rf64[safe_add( _3631_rcconst,_3643_codei )] = _ptr__3619_xi32[safe_add( _3618_pidxs,_3645_i )];
                  ++ _3643_codei;
                  _ptr__3622_ri32[safe_add( _3630_rcode,_3643_codei )] = 5;
                  ++ _3643_codei;
                  _ptr__3622_ri32[safe_add( safe_add( _3629_rcodeptr,_3644_nzi ),(int)1 )] = _3643_codei;
                  ++ _3644_nzi;
                }
              }
            }
          }
        }
      }
    }
  }
  _3597_xs->clear();
}
// End mosek.fusion.ExprMulParamScalarExpr.eval

// Begin mosek.fusion.ExprMulParamScalarExpr.toString
// Method mosek.fusion.ExprMulParamScalarExpr.toString @ src/fusion/Parameter.monty:2635:6-160
std::string mosek::fusion::ExprMulParamScalarExpr :: toString() { return mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamScalarExpr::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalarExpr("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamScalarExpr.toString

void mosek::fusion::p_ExprMulParamScalarExpr::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamScalarExpr::destroy() { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->destroy(); }
// } class ExprMulParamScalarExpr
// class ExprMulParamScalar { // @ src/fusion/Parameter.monty:2496:4-2620:5
mosek::fusion::ExprMulParamScalar::ExprMulParamScalar(mosek::fusion::p_ExprMulParamScalar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalar()" << this << std::endl; */ }
mosek::fusion::ExprMulParamScalar::~ExprMulParamScalar() {  /* std::cout << "~ExprMulParamScalar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamScalar::p_ExprMulParamScalar
  (::mosek::fusion::ExprMulParamScalar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamScalar.ctor @ src/fusion/Parameter.monty:2500:6-2507:7
mosek::fusion::ExprMulParamScalar::t mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3648_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3649_e)
{ return new mosek::fusion::ExprMulParamScalar(_3648_p,_3649_e); }
mosek::fusion::ExprMulParamScalar::ExprMulParamScalar
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3648_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3649_e) : 
   ExprMulParamScalar(new mosek::fusion::p_ExprMulParamScalar(this))
{ mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->_initialize(_3648_p,_3649_e); }
void mosek::fusion::p_ExprMulParamScalar::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3648_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3649_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_3649_e->getShape());
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->p = _3648_p;
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->e = _3649_e;
    if ((_3648_p->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamScalar.ctor

// Begin mosek.fusion.ExprMulParamScalar.eval
// Method mosek.fusion.ExprMulParamScalar.eval @ src/fusion/Parameter.monty:2511:6-2619:7
void mosek::fusion::ExprMulParamScalar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3650_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3651_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3652_xs) { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->eval(_3650_rs,_3651_ws,_3652_xs); }
void mosek::fusion::p_ExprMulParamScalar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3650_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3651_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3652_xs)
{
  e->eval(_3651_ws,_3650_rs,_3652_xs);
  _3651_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3653_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3653_wi32(_3653_wi32 ? _3653_wi32->raw() : nullptr,_3653_wi32 ? _3653_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3654_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3654_wi64(_3654_wi64 ? _3654_wi64->raw() : nullptr,_3654_wi64 ? _3654_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3655_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->f64;
  _checked_ptr_1<double> _ptr__3655_wf64(_3655_wf64 ? _3655_wf64->raw() : nullptr,_3655_wf64 ? _3655_wf64->size(0) : 0);
  int32_t _3656_nd = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->nd;
  int32_t _3657_nelem = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->nelem;
  int32_t _3658_nnz = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->nnz;
  bool _3659_hassp = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->hassp;
  int32_t _3660_ptr = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->ptr_base;
  int32_t _3661_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->ncodeatom;
  int32_t _3662_shape = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->shape_base;
  int32_t _3663_sp = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->sp_base;
  int32_t _3664_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->nidxs_base;
  int32_t _3665_cof = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->cof_base;
  int32_t _3666_cconst = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->cconst_base;
  int32_t _3667_ptrcode = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->codeptr_base;
  int32_t _3668_code = mosek::fusion::p_WorkStack::_get_impl(_3651_ws)->code_base;
  int32_t _3669_rnd = _3656_nd;
  int32_t _3670_rnelem = _3657_nelem;
  int32_t _3671_rnnz = _3658_nnz;
  bool _3672_rhassp = (p->getNumNonzero() < p->getSize());
  int32_t _10744_;
  bool _10745_ = (_3661_ncodeatom == (int)0);
  if (_10745_)
  {
    _10744_ = safe_mul( _3658_nnz,(int)3 );
  }
  else
  {
    _10744_ = safe_add( safe_mul( _3658_nnz,(int)4 ),_3661_ncodeatom );
  }
  int32_t _3673_rncodeatom = _10744_;
  _3650_rs->alloc_expr(_3669_rnd,_3670_rnelem,_3671_rnnz,_3672_rhassp,_3673_rncodeatom);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3674_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__3674_ri64(_3674_ri64 ? _3674_ri64->raw() : nullptr,_3674_ri64 ? _3674_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3675_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->f64;
  _checked_ptr_1<double> _ptr__3675_rf64(_3675_rf64 ? _3675_rf64->raw() : nullptr,_3675_rf64 ? _3675_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3676_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__3676_ri32(_3676_ri32 ? _3676_ri32->raw() : nullptr,_3676_ri32 ? _3676_ri32->size(0) : 0);
  int32_t _3677_rptr = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->ptr_base;
  int32_t _3678_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->nidxs_base;
  int32_t _3679_rsp = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->sp_base;
  int32_t _3680_rcof = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->cof_base;
  bool _3681_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->hassp;
  int32_t _3682_rshape = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->shape_base;
  int32_t _3683_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->codeptr_base;
  int32_t _3684_rcode = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->code_base;
  int32_t _3685_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3650_rs)->cconst_base;
  int32_t _3686_pidx0 = p->getIndex((int)0);
  {
    int32_t _10746_ = (int)0;
    int32_t _10747_ = _3671_rnnz;
    for (int32_t _3687_i = _10746_; _3687_i < _10747_; ++_3687_i)
    {
      {
        _ptr__3675_rf64[safe_add( _3680_rcof,_3687_i )] = 0.0;
      }
    }
    int32_t _10748_ = (int)0;
    int32_t _10749_ = safe_add( _3670_rnelem,(int)1 );
    for (int32_t _3688_i = _10748_; _3688_i < _10749_; ++_3688_i)
    {
      {
        _ptr__3676_ri32[safe_add( _3677_rptr,_3688_i )] = _ptr__3653_wi32[safe_add( _3660_ptr,_3688_i )];
      }
    }
    int32_t _10750_ = (int)0;
    int32_t _10751_ = _3669_rnd;
    for (int32_t _3689_i = _10750_; _3689_i < _10751_; ++_3689_i)
    {
      {
        _ptr__3676_ri32[safe_add( _3682_rshape,_3689_i )] = _ptr__3653_wi32[safe_add( _3662_shape,_3689_i )];
      }
    }
    int32_t _10752_ = (int)0;
    int32_t _10753_ = _3658_nnz;
    for (int32_t _3690_i = _10752_; _3690_i < _10753_; ++_3690_i)
    {
      {
        _ptr__3674_ri64[safe_add( _3678_rnidxs,_3690_i )] = _ptr__3654_wi64[safe_add( _3664_nidxs,_3690_i )];
      }
    }
    if (_3681_rhassp)
    {
      {
        int32_t _10754_ = (int)0;
        int32_t _10755_ = _3670_rnelem;
        for (int32_t _3691_i = _10754_; _3691_i < _10755_; ++_3691_i)
        {
          {
            _ptr__3674_ri64[safe_add( _3679_rsp,_3691_i )] = _ptr__3654_wi64[safe_add( _3663_sp,_3691_i )];
          }
        }
      }
    }
    {}
    int32_t _3692_codei = (int)0;
    if ((_3673_rncodeatom > (int)0))
    {
      {
        _ptr__3676_ri32[_3683_rcodeptr] = (int)0;
      }
    }
    {}
    int32_t _10756_ = (int)0;
    int32_t _10757_ = _3658_nnz;
    for (int32_t _3693_i = _10756_; _3693_i < _10757_; ++_3693_i)
    {
      {
        _ptr__3676_ri32[safe_add( _3684_rcode,_3692_codei )] = 2;
        _ptr__3675_rf64[safe_add( _3685_rcconst,_3692_codei )] = _ptr__3655_wf64[safe_add( _3665_cof,_3693_i )];
        ++ _3692_codei;
        if ((_3661_ncodeatom > (int)0))
        {
          {
            int32_t _10758_ = _ptr__3653_wi32[safe_add( _3667_ptrcode,_3693_i )];
            int32_t _10759_ = _ptr__3653_wi32[safe_add( safe_add( _3667_ptrcode,_3693_i ),(int)1 )];
            for (int32_t _3694_j = _10758_; _3694_j < _10759_; ++_3694_j)
            {
              {
                _ptr__3676_ri32[safe_add( _3684_rcode,_3692_codei )] = _ptr__3653_wi32[safe_add( _3668_code,_3694_j )];
                _ptr__3675_rf64[safe_add( _3685_rcconst,_3692_codei )] = _ptr__3655_wf64[safe_add( _3666_cconst,_3694_j )];
                ++ _3692_codei;
              }
            }
            _ptr__3676_ri32[safe_add( _3684_rcode,_3692_codei )] = 3;
            ++ _3692_codei;
          }
        }
        {}
        _ptr__3676_ri32[safe_add( _3684_rcode,_3692_codei )] = 1;
        _ptr__3675_rf64[safe_add( _3685_rcconst,_3692_codei )] = _3686_pidx0;
        ++ _3692_codei;
        _ptr__3676_ri32[safe_add( _3684_rcode,_3692_codei )] = 5;
        ++ _3692_codei;
        _ptr__3676_ri32[safe_add( safe_add( _3683_rcodeptr,_3693_i ),(int)1 )] = _3692_codei;
      }
    }
  }
  _3652_xs->clear();
}
// End mosek.fusion.ExprMulParamScalar.eval

// Begin mosek.fusion.ExprMulParamScalar.toString
// Method mosek.fusion.ExprMulParamScalar.toString @ src/fusion/Parameter.monty:2509:6-156
std::string mosek::fusion::ExprMulParamScalar :: toString() { return mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamScalar::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalar("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamScalar.toString

void mosek::fusion::p_ExprMulParamScalar::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamScalar::destroy() { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->destroy(); }
// } class ExprMulParamScalar
// class ExprMulParamDiagLeft { // @ src/fusion/Parameter.monty:2127:4-2490:5
mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft(mosek::fusion::p_ExprMulParamDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulParamDiagLeft::~ExprMulParamDiagLeft() {  /* std::cout << "~ExprMulParamDiagLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamDiagLeft::p_ExprMulParamDiagLeft
  (::mosek::fusion::ExprMulParamDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamDiagLeft.ctor @ src/fusion/Parameter.monty:2131:6-2141:7
mosek::fusion::ExprMulParamDiagLeft::t mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3695_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3696_e)
{ return new mosek::fusion::ExprMulParamDiagLeft(_3695_p,_3696_e); }
mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3695_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3696_e) : 
   ExprMulParamDiagLeft(new mosek::fusion::p_ExprMulParamDiagLeft(this))
{ mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->_initialize(_3695_p,_3696_e); }
void mosek::fusion::p_ExprMulParamDiagLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3695_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3696_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3696_e->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->p = _3695_p;
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->e = _3696_e;
    if (((_3695_p->getND() != (int)2) || (_3696_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3695_p->getDim((int)1) != _3696_e->getDim((int)0)) || (_3695_p->getDim((int)0) != _3696_e->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamDiagLeft.ctor

// Begin mosek.fusion.ExprMulParamDiagLeft.eval
// Method mosek.fusion.ExprMulParamDiagLeft.eval @ src/fusion/Parameter.monty:2144:6-2489:7
void mosek::fusion::ExprMulParamDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3697_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3698_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3699_xs) { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->eval(_3697_rs,_3698_ws,_3699_xs); }
void mosek::fusion::p_ExprMulParamDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3697_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3698_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3699_xs)
{
  e->eval(_3698_ws,_3697_rs,_3699_xs);
  _3698_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3700_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3700_wi32(_3700_wi32 ? _3700_wi32->raw() : nullptr,_3700_wi32 ? _3700_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3701_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3701_wi64(_3701_wi64 ? _3701_wi64->raw() : nullptr,_3701_wi64 ? _3701_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3702_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->f64;
  _checked_ptr_1<double> _ptr__3702_wf64(_3702_wf64 ? _3702_wf64->raw() : nullptr,_3702_wf64 ? _3702_wf64->size(0) : 0);
  int32_t _3703_nd = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->nd;
  int32_t _3704_nelem = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->nelem;
  int32_t _3705_nnz = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->nnz;
  bool _3706_hassp = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->hassp;
  int32_t _3707_ptr = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->ptr_base;
  int32_t _3708_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->ncodeatom;
  int32_t _3709_shape = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->shape_base;
  int32_t _3710_sp = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->sp_base;
  int32_t _3711_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->nidxs_base;
  int32_t _3712_cof = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->cof_base;
  int32_t _3713_cconst = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->cconst_base;
  int32_t _3714_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->codeptr_base;
  int32_t _3715_code = mosek::fusion::p_WorkStack::_get_impl(_3698_ws)->code_base;
  if (((_3703_nd != (int)2) || ((_ptr__3700_wi32[_3709_shape] != p->getDim((int)1)) || (_ptr__3700_wi32[safe_add( _3709_shape,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int32_t _3716_pnnz = p->getNumNonzero();
  int32_t _3717_psp = _3699_xs->alloci64(_3716_pnnz);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3718_xi64 = mosek::fusion::p_WorkStack::_get_impl(_3699_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__3718_xi64(_3718_xi64 ? _3718_xi64->raw() : nullptr,_3718_xi64 ? _3718_xi64->size(0) : 0);
  p->getSp(_3718_xi64,_3717_psp);
  int32_t _3719_pdim0 = p->getDim((int)0);
  int32_t _3720_pdim1 = p->getDim((int)1);
  int32_t _3721_edim0 = _ptr__3700_wi32[_3709_shape];
  int32_t _3722_edim1 = _ptr__3700_wi32[safe_add( _3709_shape,(int)1 )];
  int32_t _3723_pidxs = _3699_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3724_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3699_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3724_xi32(_3724_xi32 ? _3724_xi32->raw() : nullptr,_3724_xi32 ? _3724_xi32->size(0) : 0);
  p->getAllIndexes(_3724_xi32,_3723_pidxs);
  if (_3706_hassp)
  {
    {
      int32_t _3725_eperm = _3699_xs->alloci32(_3704_nelem);
      int32_t _3726_eptr = _3699_xs->alloci32(safe_add( _3722_edim1,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3727_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3699_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__3727_xi32(_3727_xi32 ? _3727_xi32->raw() : nullptr,_3727_xi32 ? _3727_xi32->size(0) : 0);
      int32_t _10760_ = (int)0;
      int32_t _10761_ = safe_add( _3722_edim1,(int)1 );
      for (int32_t _3728_i = _10760_; _3728_i < _10761_; ++_3728_i)
      {
        {
          _ptr__3727_xi32[safe_add( _3726_eptr,_3728_i )] = (int)0;
        }
      }
      int32_t _10762_ = (int)0;
      int32_t _10763_ = _3704_nelem;
      for (int32_t _3729_i = _10762_; _3729_i < _10763_; ++_3729_i)
      {
        {
          ++ _ptr__3727_xi32[safe_add( safe_add( _3726_eptr,(_ptr__3701_wi64[safe_add( _3710_sp,_3729_i )] % _3722_edim1) ),(int)1 )];
        }
      }
      int32_t _10764_ = (int)0;
      int32_t _10765_ = _3722_edim1;
      for (int32_t _3730_i = _10764_; _3730_i < _10765_; ++_3730_i)
      {
        {
          _ptr__3727_xi32[safe_add( safe_add( _3726_eptr,_3730_i ),(int)1 )] += _ptr__3727_xi32[safe_add( _3726_eptr,_3730_i )];
        }
      }
      int32_t _10766_ = (int)0;
      int32_t _10767_ = _3704_nelem;
      for (int32_t _3731_i = _10766_; _3731_i < _10767_; ++_3731_i)
      {
        {
          int64_t _3732_colidx = (_ptr__3701_wi64[safe_add( _3710_sp,_3731_i )] % _3722_edim1);
          _ptr__3727_xi32[safe_add( _3725_eperm,_ptr__3727_xi32[safe_add( _3726_eptr,_3732_colidx )] )] = _3731_i;
          ++ _ptr__3727_xi32[safe_add( _3726_eptr,_3732_colidx )];
        }
      }
      int32_t _3733_rnelem = (int)0;
      int32_t _3734_rnnz = (int)0;
      int32_t _3735_rncodeatom = (int)0;
      {
        int32_t _3736_pe = (int)0;
        int32_t _3737_pp = (int)0;
        while ( ((_3737_pp < _3716_pnnz) && (_3736_pe < _3704_nelem)) )
        {
          {
            int32_t _3738_eidx = _ptr__3727_xi32[safe_add( _3725_eperm,_3736_pe )];
            int64_t _3739_psubi = (_ptr__3718_xi64[safe_add( _3717_psp,_3737_pp )] / _3720_pdim1);
            int64_t _3740_esubj = (_ptr__3701_wi64[safe_add( _3710_sp,_3738_eidx )] % _3722_edim1);
            if ((_3739_psubi < _3740_esubj))
            {
              {
                while ( ((_3737_pp < _3716_pnnz) && (_ptr__3718_xi64[safe_add( _3717_psp,_3737_pp )] < safe_mul( safe_add( _3739_psubi,(int)1 ),_3720_pdim1 ))) )
                {
                  {
                    ++ _3737_pp;
                  }
                }
              }
            }
            else if((_3740_esubj < _3739_psubi))
            {
              {
                while ( ((_3736_pe < _3716_pnnz) && ((_ptr__3701_wi64[safe_add( _3710_sp,_ptr__3727_xi32[safe_add( _3725_eperm,_3736_pe )] )] % _3722_edim1) == _3740_esubj)) )
                {
                  {
                    ++ _3736_pe;
                  }
                }
              }
            }
            else
            {
              {
                int32_t _3741_ie = _3736_pe;
                int32_t _3742_ip = _3737_pp;
                while ( ((_3737_pp < _3716_pnnz) && (_ptr__3718_xi64[safe_add( _3717_psp,_3737_pp )] < safe_mul( safe_add( _3739_psubi,(int)1 ),_3720_pdim1 ))) )
                {
                  {
                    ++ _3737_pp;
                  }
                }
                while ( ((_3736_pe < _3716_pnnz) && ((_ptr__3701_wi64[safe_add( _3710_sp,_ptr__3727_xi32[safe_add( _3725_eperm,_3736_pe )] )] % _3722_edim1) == _3740_esubj)) )
                {
                  {
                    ++ _3736_pe;
                  }
                }
                bool _3743_haselm = false;
                while ( ((_3742_ip < _3737_pp) && (_3741_ie < _3736_pe)) )
                {
                  {
                    int64_t _3744_psubj = (_ptr__3718_xi64[safe_add( _3717_psp,_3742_ip )] % _3720_pdim1);
                    int32_t _3745_eidx = _ptr__3727_xi32[safe_add( _3725_eperm,_3741_ie )];
                    int64_t _3746_esubi = (_ptr__3701_wi64[safe_add( _3710_sp,_3745_eidx )] / _3722_edim1);
                    if ((_3744_psubj < _3746_esubi))
                    {
                      {
                        ++ _3742_ip;
                      }
                    }
                    else if((_3744_psubj > _3746_esubi))
                    {
                      {
                        ++ _3741_ie;
                      }
                    }
                    else
                    {
                      {
                        _3734_rnnz += (_ptr__3700_wi32[safe_add( safe_add( _3707_ptr,_3745_eidx ),(int)1 )] - _ptr__3700_wi32[safe_add( _3707_ptr,_3745_eidx )]);
                        _3743_haselm = true;
                        int32_t _3747_n = (_ptr__3700_wi32[safe_add( safe_add( _3707_ptr,_3745_eidx ),(int)1 )] - _ptr__3700_wi32[safe_add( _3707_ptr,_3745_eidx )]);
                        int32_t _10768_;
                        bool _10769_ = (_3708_ncodeatom > (int)0);
                        if (_10769_)
                        {
                          _10768_ = safe_add( (_ptr__3700_wi32[safe_add( _3714_codeptr,_ptr__3700_wi32[safe_add( safe_add( _3707_ptr,_3745_eidx ),(int)1 )] )] - _ptr__3700_wi32[safe_add( _3714_codeptr,_ptr__3700_wi32[safe_add( _3707_ptr,_3745_eidx )] )]),safe_mul( (int)4,_3747_n ) );
                        }
                        else
                        {
                          _10768_ = safe_mul( (int)3,_3747_n );
                        }
                        _3735_rncodeatom += _10768_;
                        ++ _3742_ip;
                        ++ _3741_ie;
                      }
                    }
                  }
                }
                if (_3743_haselm)
                {
                  {
                    ++ _3733_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int32_t _3748_rnd = (int)1;
      bool _3749_rhassp = (_3733_rnelem < _3719_pdim0);
      _3697_rs->alloc_expr(_3748_rnd,_3733_rnelem,_3734_rnnz,_3749_rhassp,_3735_rncodeatom);
      int32_t _3750_rptr = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->ptr_base;
      int32_t _3751_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->nidxs_base;
      int32_t _10770_;
      bool _10771_ = _3749_rhassp;
      if (_10771_)
      {
        _10770_ = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->sp_base;
      }
      else
      {
        _10770_ = _3697_rs->alloci64(_3733_rnelem);
      }
      int32_t _3752_rsp = _10770_;
      int32_t _3753_rcof = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->cof_base;
      bool _3754_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->hassp;
      int32_t _3755_rshape = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->shape_base;
      int32_t _3756_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->codeptr_base;
      int32_t _3757_rcode = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->code_base;
      int32_t _3758_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3759_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3759_ri64(_3759_ri64 ? _3759_ri64->raw() : nullptr,_3759_ri64 ? _3759_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3760_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->f64;
      _checked_ptr_1<double> _ptr__3760_rf64(_3760_rf64 ? _3760_rf64->raw() : nullptr,_3760_rf64 ? _3760_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3761_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3761_ri32(_3761_ri32 ? _3761_ri32->raw() : nullptr,_3761_ri32 ? _3761_ri32->size(0) : 0);
      if ((_3733_rnelem > (int)0))
      {
        {
          _ptr__3761_ri32[_3750_rptr] = (int)0;
          if ((_3734_rnnz > (int)0))
          {
            {
              _ptr__3761_ri32[_3756_rcodeptr] = (int)0;
            }
          }
          {}
          _ptr__3761_ri32[_3755_rshape] = (int32_t)_3719_pdim0;
          int32_t _3762_codei = (int)0;
          int32_t _3763_elmi = (int)0;
          int32_t _3764_nzi = (int)0;
          int32_t _3765_pe = (int)0;
          int32_t _3766_pp = (int)0;
          while ( ((_3766_pp < _3716_pnnz) && (_3765_pe < _3704_nelem)) )
          {
            {
              int32_t _3767_eidx = _ptr__3727_xi32[safe_add( _3725_eperm,_3765_pe )];
              int64_t _3768_psubi = (_ptr__3718_xi64[safe_add( _3717_psp,_3766_pp )] / _3720_pdim1);
              int64_t _3769_esubj = (_ptr__3701_wi64[safe_add( _3710_sp,_3767_eidx )] % _3722_edim1);
              if ((_3768_psubi < _3769_esubj))
              {
                {
                  while ( ((_3766_pp < _3716_pnnz) && (_ptr__3718_xi64[safe_add( _3717_psp,_3766_pp )] < safe_mul( safe_add( _3768_psubi,(int)1 ),_3720_pdim1 ))) )
                  {
                    {
                      ++ _3766_pp;
                    }
                  }
                }
              }
              else if((_3769_esubj < _3768_psubi))
              {
                {
                  while ( ((_3765_pe < _3716_pnnz) && ((_ptr__3701_wi64[safe_add( _3710_sp,_ptr__3727_xi32[safe_add( _3725_eperm,_3765_pe )] )] % _3722_edim1) == _3769_esubj)) )
                  {
                    {
                      ++ _3765_pe;
                    }
                  }
                }
              }
              else
              {
                {
                  int32_t _3770_ie = _3765_pe;
                  int32_t _3771_ip = _3766_pp;
                  while ( ((_3766_pp < _3716_pnnz) && (_ptr__3718_xi64[safe_add( _3717_psp,_3766_pp )] < safe_mul( safe_add( _3768_psubi,(int)1 ),_3720_pdim1 ))) )
                  {
                    {
                      ++ _3766_pp;
                    }
                  }
                  while ( ((_3765_pe < _3716_pnnz) && ((_ptr__3701_wi64[safe_add( _3710_sp,_ptr__3727_xi32[safe_add( _3725_eperm,_3765_pe )] )] % _3722_edim1) == _3769_esubj)) )
                  {
                    {
                      ++ _3765_pe;
                    }
                  }
                  int32_t _3772_numelm = (int)0;
                  while ( ((_3771_ip < _3766_pp) && (_3770_ie < _3765_pe)) )
                  {
                    {
                      int64_t _3773_psubj = (_ptr__3718_xi64[safe_add( _3717_psp,_3771_ip )] % _3720_pdim1);
                      int32_t _3774_eidx = _ptr__3727_xi32[safe_add( _3725_eperm,_3770_ie )];
                      int64_t _3775_esubi = (_ptr__3701_wi64[safe_add( _3710_sp,_3774_eidx )] / _3722_edim1);
                      if ((_3773_psubj < _3775_esubi))
                      {
                        {
                          ++ _3771_ip;
                        }
                      }
                      else if((_3773_psubj > _3775_esubi))
                      {
                        {
                          ++ _3770_ie;
                        }
                      }
                      else
                      {
                        {
                          int32_t _10772_ = _ptr__3700_wi32[safe_add( _3707_ptr,_3774_eidx )];
                          int32_t _10773_ = _ptr__3700_wi32[safe_add( safe_add( _3707_ptr,_3774_eidx ),(int)1 )];
                          for (int32_t _3776_i = _10772_; _3776_i < _10773_; ++_3776_i)
                          {
                            {
                              _ptr__3760_rf64[safe_add( _3753_rcof,_3764_nzi )] = 0.0;
                              _ptr__3759_ri64[safe_add( _3751_rnidxs,_3764_nzi )] = _ptr__3701_wi64[safe_add( _3711_nidxs,_3776_i )];
                              _ptr__3761_ri32[safe_add( _3757_rcode,_3762_codei )] = 2;
                              _ptr__3760_rf64[safe_add( _3758_rcconst,_3762_codei )] = _ptr__3702_wf64[safe_add( _3712_cof,_3776_i )];
                              ++ _3762_codei;
                              if ((_3708_ncodeatom > (int)0))
                              {
                                {
                                  int32_t _10774_ = _ptr__3700_wi32[safe_add( _3714_codeptr,_3776_i )];
                                  int32_t _10775_ = _ptr__3700_wi32[safe_add( safe_add( _3714_codeptr,_3776_i ),(int)1 )];
                                  for (int32_t _3777_k = _10774_; _3777_k < _10775_; ++_3777_k)
                                  {
                                    {
                                      _ptr__3761_ri32[safe_add( _3757_rcode,_3762_codei )] = _ptr__3700_wi32[safe_add( _3715_code,_3777_k )];
                                      _ptr__3760_rf64[safe_add( _3758_rcconst,_3762_codei )] = _ptr__3702_wf64[safe_add( _3713_cconst,_3777_k )];
                                      ++ _3762_codei;
                                    }
                                  }
                                  _ptr__3761_ri32[safe_add( _3757_rcode,_3762_codei )] = 3;
                                  ++ _3762_codei;
                                }
                              }
                              {}
                              _ptr__3761_ri32[safe_add( _3757_rcode,_3762_codei )] = 1;
                              _ptr__3760_rf64[safe_add( _3758_rcconst,_3762_codei )] = _ptr__3727_xi32[safe_add( _3723_pidxs,_3771_ip )];
                              ++ _3762_codei;
                              _ptr__3761_ri32[safe_add( _3757_rcode,_3762_codei )] = 5;
                              ++ _3762_codei;
                              _ptr__3761_ri32[safe_add( safe_add( _3756_rcodeptr,_3764_nzi ),(int)1 )] = _3762_codei;
                              ++ _3764_nzi;
                            }
                          }
                          ++ _3771_ip;
                          ++ _3770_ie;
                          ++ _3772_numelm;
                        }
                      }
                    }
                  }
                  if ((_3772_numelm > (int)0))
                  {
                    {
                      _ptr__3759_ri64[safe_add( _3752_rsp,_3763_elmi )] = _3768_psubi;
                      _ptr__3761_ri32[safe_add( safe_add( _3750_rptr,_3763_elmi ),(int)1 )] = _3764_nzi;
                      ++ _3763_elmi;
                    }
                  }
                  {}
                }
              }
            }
          }
        }
      }
      {}
      if ((!_3754_rhassp))
      {
        {
          _3697_rs->popi64(_3733_rnelem);
        }
      }
      {}
      _3699_xs->clear();
    }
  }
  else
  {
    {
      int32_t _3778_rnelem = (int)0;
      int32_t _3779_rnnz = (int)0;
      int32_t _3780_rncodeatom = (int)0;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3781_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3699_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__3781_xi32(_3781_xi32 ? _3781_xi32->raw() : nullptr,_3781_xi32 ? _3781_xi32->size(0) : 0);
      {
        int32_t _3782_pi = (int)0;
        while ( (_3782_pi < _3716_pnnz) )
        {
          {
            int64_t _3783_prow = (_ptr__3718_xi64[safe_add( _3717_psp,_3782_pi )] / _3720_pdim1);
            int64_t _3784_prowend = safe_mul( safe_add( _3783_prow,(int)1 ),_3720_pdim1 );
            bool _3785_haselm = false;
            while ( ((_3782_pi < _3716_pnnz) && (_ptr__3718_xi64[safe_add( _3717_psp,_3782_pi )] < _3784_prowend)) )
            {
              {
                int64_t _3786_pcol = (_ptr__3718_xi64[safe_add( _3717_psp,_3782_pi )] % _3720_pdim1);
                int64_t _3787_eidx = safe_add( safe_mul( _3786_pcol,_3722_edim1 ),_3783_prow );
                int32_t _3788_n = (_ptr__3700_wi32[safe_add( safe_add( _3707_ptr,_3787_eidx ),(int)1 )] - _ptr__3700_wi32[safe_add( _3707_ptr,_3787_eidx )]);
                _3779_rnnz += _3788_n;
                _3785_haselm = true;
                int32_t _10776_;
                bool _10777_ = (_3708_ncodeatom > (int)0);
                if (_10777_)
                {
                  _10776_ = safe_add( (_ptr__3700_wi32[safe_add( _3714_codeptr,_ptr__3700_wi32[safe_add( safe_add( _3707_ptr,_3787_eidx ),(int)1 )] )] - _ptr__3700_wi32[safe_add( _3714_codeptr,_ptr__3700_wi32[safe_add( _3707_ptr,_3787_eidx )] )]),safe_mul( _3788_n,(int)4 ) );
                }
                else
                {
                  _10776_ = safe_mul( _3788_n,(int)3 );
                }
                _3780_rncodeatom += _10776_;
                ++ _3782_pi;
              }
            }
            if (_3785_haselm)
            {
              {
                ++ _3778_rnelem;
              }
            }
            {}
          }
        }
      }
      int32_t _3789_rnd = (int)1;
      bool _3790_rhassp = (_3778_rnelem < _3719_pdim0);
      _3697_rs->alloc_expr(_3789_rnd,_3778_rnelem,_3779_rnnz,_3790_rhassp,_3780_rncodeatom);
      int32_t _3791_rptr = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->ptr_base;
      int32_t _3792_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->nidxs_base;
      int32_t _10778_;
      bool _10779_ = _3790_rhassp;
      if (_10779_)
      {
        _10778_ = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->sp_base;
      }
      else
      {
        _10778_ = _3697_rs->alloci64(_3778_rnelem);
      }
      int32_t _3793_rsp = _10778_;
      int32_t _3794_rcof = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->cof_base;
      bool _3795_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->hassp;
      int32_t _3796_rshape = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->shape_base;
      int32_t _3797_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->codeptr_base;
      int32_t _3798_rcode = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->code_base;
      int32_t _3799_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3800_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3800_ri64(_3800_ri64 ? _3800_ri64->raw() : nullptr,_3800_ri64 ? _3800_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3801_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->f64;
      _checked_ptr_1<double> _ptr__3801_rf64(_3801_rf64 ? _3801_rf64->raw() : nullptr,_3801_rf64 ? _3801_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3802_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3697_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3802_ri32(_3802_ri32 ? _3802_ri32->raw() : nullptr,_3802_ri32 ? _3802_ri32->size(0) : 0);
      {
        _ptr__3802_ri32[_3791_rptr] = (int)0;
        if ((_3780_rncodeatom > (int)0))
        {
          {
            _ptr__3802_ri32[_3797_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__3802_ri32[_3796_rshape] = (int32_t)_3719_pdim0;
        int32_t _3803_codei = (int)0;
        int32_t _3804_elmi = (int)0;
        int32_t _3805_nzi = (int)0;
        int32_t _3806_pi = (int)0;
        while ( (_3806_pi < _3716_pnnz) )
        {
          {
            int64_t _3807_psubi = (_ptr__3718_xi64[safe_add( _3717_psp,_3806_pi )] / _3720_pdim1);
            int64_t _3808_prowend = safe_mul( safe_add( _3807_psubi,(int)1 ),_3720_pdim1 );
            int32_t _3809_numelm = (int)0;
            while ( ((_3806_pi < _3716_pnnz) && (_ptr__3718_xi64[safe_add( _3717_psp,_3806_pi )] < _3808_prowend)) )
            {
              {
                int64_t _3810_psubj = (_ptr__3718_xi64[safe_add( _3717_psp,_3806_pi )] % _3720_pdim1);
                int64_t _3811_eidx = safe_add( safe_mul( _3810_psubj,_3722_edim1 ),_3807_psubi );
                int32_t _10780_ = _ptr__3700_wi32[safe_add( _3707_ptr,_3811_eidx )];
                int32_t _10781_ = _ptr__3700_wi32[safe_add( safe_add( _3707_ptr,_3811_eidx ),(int)1 )];
                for (int32_t _3812_k = _10780_; _3812_k < _10781_; ++_3812_k)
                {
                  {
                    _ptr__3800_ri64[safe_add( _3792_rnidxs,_3805_nzi )] = _ptr__3701_wi64[safe_add( _3711_nidxs,_3812_k )];
                    _ptr__3801_rf64[safe_add( _3794_rcof,_3805_nzi )] = 0.0;
                    _ptr__3802_ri32[safe_add( _3798_rcode,_3803_codei )] = 2;
                    _ptr__3801_rf64[safe_add( _3799_rcconst,_3803_codei )] = _ptr__3702_wf64[safe_add( _3712_cof,_3812_k )];
                    ++ _3803_codei;
                    if ((_3708_ncodeatom > (int)0))
                    {
                      {
                        int32_t _10782_ = _ptr__3700_wi32[safe_add( _3714_codeptr,_3812_k )];
                        int32_t _10783_ = _ptr__3700_wi32[safe_add( safe_add( _3714_codeptr,_3812_k ),(int)1 )];
                        for (int32_t _3813_l = _10782_; _3813_l < _10783_; ++_3813_l)
                        {
                          {
                            _ptr__3802_ri32[safe_add( _3798_rcode,_3803_codei )] = _ptr__3700_wi32[safe_add( _3715_code,_3813_l )];
                            _ptr__3801_rf64[safe_add( _3799_rcconst,_3803_codei )] = _ptr__3702_wf64[safe_add( _3713_cconst,_3813_l )];
                            ++ _3803_codei;
                          }
                        }
                        _ptr__3802_ri32[safe_add( _3798_rcode,_3803_codei )] = 3;
                        ++ _3803_codei;
                      }
                    }
                    {}
                    _ptr__3802_ri32[safe_add( _3798_rcode,_3803_codei )] = 1;
                    _ptr__3801_rf64[safe_add( _3799_rcconst,_3803_codei )] = _ptr__3781_xi32[safe_add( _3723_pidxs,_3806_pi )];
                    ++ _3803_codei;
                    _ptr__3802_ri32[safe_add( _3798_rcode,_3803_codei )] = 5;
                    ++ _3803_codei;
                    _ptr__3802_ri32[safe_add( safe_add( _3797_rcodeptr,_3805_nzi ),(int)1 )] = _3803_codei;
                    ++ _3805_nzi;
                  }
                }
                ++ _3809_numelm;
                ++ _3806_pi;
              }
            }
            if ((_3809_numelm > (int)0))
            {
              {
                _ptr__3800_ri64[safe_add( _3793_rsp,_3804_elmi )] = _3807_psubi;
                _ptr__3802_ri32[safe_add( safe_add( _3791_rptr,_3804_elmi ),(int)1 )] = _3805_nzi;
                ++ _3804_elmi;
              }
            }
            {}
          }
        }
      }
      if ((!_3795_rhassp))
      {
        {
          _3697_rs->popi64(_3778_rnelem);
        }
      }
      {}
      _3699_xs->clear();
    }
  }
}
// End mosek.fusion.ExprMulParamDiagLeft.eval

// Begin mosek.fusion.ExprMulParamDiagLeft.toString
// Method mosek.fusion.ExprMulParamDiagLeft.toString @ src/fusion/Parameter.monty:2142:6-158
std::string mosek::fusion::ExprMulParamDiagLeft :: toString() { return mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamDiagLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamDiagLeft.toString

void mosek::fusion::p_ExprMulParamDiagLeft::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamDiagLeft::destroy() { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->destroy(); }
// } class ExprMulParamDiagLeft
// class ExprMulParamDiagRight { // @ src/fusion/Parameter.monty:1746:4-2124:5
mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight(mosek::fusion::p_ExprMulParamDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagRight()" << this << std::endl; */ }
mosek::fusion::ExprMulParamDiagRight::~ExprMulParamDiagRight() {  /* std::cout << "~ExprMulParamDiagRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamDiagRight::p_ExprMulParamDiagRight
  (::mosek::fusion::ExprMulParamDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamDiagRight.ctor @ src/fusion/Parameter.monty:1750:6-1760:7
mosek::fusion::ExprMulParamDiagRight::t mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _3814_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3815_p)
{ return new mosek::fusion::ExprMulParamDiagRight(_3814_e,_3815_p); }
mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _3814_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3815_p) : 
   ExprMulParamDiagRight(new mosek::fusion::p_ExprMulParamDiagRight(this))
{ mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->_initialize(_3814_e,_3815_p); }
void mosek::fusion::p_ExprMulParamDiagRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3814_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3815_p)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3814_e->getDim((int)0))}));
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->p = _3815_p;
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->e = _3814_e;
    if (((_3815_p->getND() != (int)2) || (_3814_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3815_p->getDim((int)1) != _3814_e->getDim((int)0)) || (_3815_p->getDim((int)0) != _3814_e->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamDiagRight.ctor

// Begin mosek.fusion.ExprMulParamDiagRight.eval
// Method mosek.fusion.ExprMulParamDiagRight.eval @ src/fusion/Parameter.monty:1764:6-2123:7
void mosek::fusion::ExprMulParamDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3816_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3817_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3818_xs) { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->eval(_3816_rs,_3817_ws,_3818_xs); }
void mosek::fusion::p_ExprMulParamDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3816_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3817_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3818_xs)
{
  e->eval(_3817_ws,_3816_rs,_3818_xs);
  _3817_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3819_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3819_wi32(_3819_wi32 ? _3819_wi32->raw() : nullptr,_3819_wi32 ? _3819_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3820_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3820_wi64(_3820_wi64 ? _3820_wi64->raw() : nullptr,_3820_wi64 ? _3820_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3821_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->f64;
  _checked_ptr_1<double> _ptr__3821_wf64(_3821_wf64 ? _3821_wf64->raw() : nullptr,_3821_wf64 ? _3821_wf64->size(0) : 0);
  int32_t _3822_nd = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->nd;
  int32_t _3823_nelem = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->nelem;
  int32_t _3824_nnz = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->nnz;
  bool _3825_hassp = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->hassp;
  int32_t _3826_ptr = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->ptr_base;
  int32_t _3827_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->ncodeatom;
  int32_t _3828_shape = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->shape_base;
  int32_t _3829_sp = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->sp_base;
  int32_t _3830_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->nidxs_base;
  int32_t _3831_cof = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->cof_base;
  int32_t _3832_cconst = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->cconst_base;
  int32_t _3833_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->codeptr_base;
  int32_t _3834_code = mosek::fusion::p_WorkStack::_get_impl(_3817_ws)->code_base;
  if (((_3822_nd != (int)2) || ((_ptr__3819_wi32[_3828_shape] != p->getDim((int)1)) || (_ptr__3819_wi32[safe_add( _3828_shape,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int32_t _3835_pnnz = p->getNumNonzero();
  int32_t _3836_psp = _3818_xs->alloci64(_3835_pnnz);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3837_xi64 = mosek::fusion::p_WorkStack::_get_impl(_3818_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__3837_xi64(_3837_xi64 ? _3837_xi64->raw() : nullptr,_3837_xi64 ? _3837_xi64->size(0) : 0);
  int32_t _3838_pidxs = _3818_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3839_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3818_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3839_xi32(_3839_xi32 ? _3839_xi32->raw() : nullptr,_3839_xi32 ? _3839_xi32->size(0) : 0);
  p->getAllIndexes(_3839_xi32,_3838_pidxs);
  p->getSp(_3837_xi64,_3836_psp);
  int32_t _3840_pdim0 = p->getDim((int)0);
  int32_t _3841_pdim1 = p->getDim((int)1);
  int32_t _3842_edim0 = _ptr__3819_wi32[_3828_shape];
  int32_t _3843_edim1 = _ptr__3819_wi32[safe_add( _3828_shape,(int)1 )];
  int32_t _3844_pperm = _3818_xs->alloci32(_3835_pnnz);
  int32_t _3845_pptr = _3818_xs->alloci32(safe_add( _3841_pdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3846_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3818_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3846_xi32(_3846_xi32 ? _3846_xi32->raw() : nullptr,_3846_xi32 ? _3846_xi32->size(0) : 0);
  int32_t _10784_ = (int)0;
  int32_t _10785_ = safe_add( _3841_pdim1,(int)1 );
  for (int32_t _3847_i = _10784_; _3847_i < _10785_; ++_3847_i)
  {
    {
      _ptr__3846_xi32[safe_add( _3845_pptr,_3847_i )] = (int)0;
    }
  }
  int32_t _10786_ = (int)0;
  int32_t _10787_ = _3835_pnnz;
  for (int32_t _3848_i = _10786_; _3848_i < _10787_; ++_3848_i)
  {
    {
      ++ _ptr__3846_xi32[safe_add( safe_add( _3845_pptr,(_ptr__3837_xi64[safe_add( _3836_psp,_3848_i )] % _3841_pdim1) ),(int)1 )];
    }
  }
  int32_t _10788_ = (int)1;
  int32_t _10789_ = _3841_pdim1;
  for (int32_t _3849_i = _10788_; _3849_i < _10789_; ++_3849_i)
  {
    {
      _ptr__3846_xi32[safe_add( _3845_pptr,_3849_i )] += _ptr__3846_xi32[(safe_add( _3845_pptr,_3849_i ) - (int)1)];
    }
  }
  int32_t _10790_ = (int)0;
  int32_t _10791_ = _3835_pnnz;
  for (int32_t _3850_i = _10790_; _3850_i < _10791_; ++_3850_i)
  {
    {
      int64_t _3851_colidx = (_ptr__3837_xi64[safe_add( _3836_psp,_3850_i )] % _3841_pdim1);
      _ptr__3846_xi32[safe_add( _3844_pperm,_ptr__3846_xi32[safe_add( _3845_pptr,_3851_colidx )] )] = _3850_i;
      ++ _ptr__3846_xi32[safe_add( _3845_pptr,_3851_colidx )];
    }
  }
  if (_3825_hassp)
  {
    {
      int32_t _3852_rncodeatom = (int)0;
      int32_t _3853_rnelem = (int)0;
      int32_t _3854_rnnz = (int)0;
      int32_t _3855_i1 = (int)0;
      int32_t _3856_i0 = (int)0;
      while ( ((_3856_i0 < _3823_nelem) && (_3855_i1 < _3835_pnnz)) )
      {
        {
          int64_t _3857_esubi = (_ptr__3820_wi64[safe_add( _3829_sp,_3856_i0 )] / _3843_edim1);
          int64_t _3858_psubj = (_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3855_i1 )] )] % _3841_pdim1);
          if ((_3857_esubi < _3858_psubj))
          {
            {
              ++ _3856_i0;
            }
          }
          else if((_3857_esubi > _3858_psubj))
          {
            {
              ++ _3855_i1;
            }
          }
          else
          {
            {
              int32_t _3859_b0 = _3856_i0;
              ++ _3856_i0;
              int32_t _3860_b1 = _3855_i1;
              ++ _3855_i1;
              while ( ((_3856_i0 < _3823_nelem) && ((_ptr__3820_wi64[safe_add( _3829_sp,_3856_i0 )] / _3843_edim1) == _3857_esubi)) )
              {
                {
                  ++ _3856_i0;
                }
              }
              while ( ((_3855_i1 < _3835_pnnz) && ((_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3855_i1 )] )] % _3841_pdim1) == _3858_psubj)) )
              {
                {
                  ++ _3855_i1;
                }
              }
              int32_t _3861_p1 = _3860_b1;
              int32_t _3862_p0 = _3859_b0;
              bool _3863_haselm = false;
              while ( ((_3862_p0 < _3856_i0) && (_3861_p1 < _3855_i1)) )
              {
                {
                  int64_t _3864_esubj = (_ptr__3820_wi64[safe_add( _3829_sp,_3862_p0 )] % _3843_edim1);
                  int64_t _3865_psubi = (_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3861_p1 )] )] / _3841_pdim1);
                  if ((_3864_esubj < _3865_psubi))
                  {
                    {
                      ++ _3862_p0;
                    }
                  }
                  else if((_3864_esubj > _3865_psubi))
                  {
                    {
                      ++ _3861_p1;
                    }
                  }
                  else
                  {
                    {
                      _3863_haselm = true;
                      int32_t _3866_n = (_ptr__3819_wi32[safe_add( safe_add( _3826_ptr,_3862_p0 ),(int)1 )] - _ptr__3819_wi32[safe_add( _3826_ptr,_3862_p0 )]);
                      _3854_rnnz += _3866_n;
                      int32_t _10792_;
                      bool _10793_ = (_3827_ncodeatom > (int)0);
                      if (_10793_)
                      {
                        _10792_ = safe_add( (_ptr__3819_wi32[safe_add( _3833_codeptr,_ptr__3819_wi32[safe_add( safe_add( _3826_ptr,_3862_p0 ),(int)1 )] )] - _ptr__3819_wi32[safe_add( _3833_codeptr,_ptr__3819_wi32[safe_add( _3826_ptr,_3862_p0 )] )]),safe_mul( _3866_n,(int)4 ) );
                      }
                      else
                      {
                        _10792_ = safe_mul( _3866_n,(int)3 );
                      }
                      _3852_rncodeatom += _10792_;
                      ++ _3862_p0;
                      ++ _3861_p1;
                    }
                  }
                }
              }
              if (_3863_haselm)
              {
                {
                  ++ _3853_rnelem;
                }
              }
              {}
            }
          }
        }
      }
      int32_t _3867_rnd = (int)1;
      bool _3868_rhassp = (_3853_rnelem < _3842_edim0);
      _3816_rs->alloc_expr(_3867_rnd,_3853_rnelem,_3854_rnnz,_3868_rhassp,_3852_rncodeatom);
      int32_t _3869_rptr = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->ptr_base;
      int32_t _3870_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->nidxs_base;
      int32_t _10794_;
      bool _10795_ = _3868_rhassp;
      if (_10795_)
      {
        _10794_ = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->sp_base;
      }
      else
      {
        _10794_ = _3816_rs->alloci64(_3853_rnelem);
      }
      int32_t _3871_rsp = _10794_;
      int32_t _3872_rcof = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->cof_base;
      bool _3873_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->hassp;
      int32_t _3874_rshape = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->shape_base;
      int32_t _3875_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->codeptr_base;
      int32_t _3876_rcode = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->code_base;
      int32_t _3877_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3878_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3878_ri64(_3878_ri64 ? _3878_ri64->raw() : nullptr,_3878_ri64 ? _3878_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3879_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->f64;
      _checked_ptr_1<double> _ptr__3879_rf64(_3879_rf64 ? _3879_rf64->raw() : nullptr,_3879_rf64 ? _3879_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3880_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3880_ri32(_3880_ri32 ? _3880_ri32->raw() : nullptr,_3880_ri32 ? _3880_ri32->size(0) : 0);
      if ((_3853_rnelem > (int)0))
      {
        {
          _ptr__3880_ri32[_3869_rptr] = (int)0;
          if ((_3852_rncodeatom > (int)0))
          {
            {
              _ptr__3880_ri32[_3875_rcodeptr] = (int)0;
            }
          }
          {}
          _ptr__3880_ri32[_3874_rshape] = (int32_t)_3842_edim0;
          int32_t _3881_codei = (int)0;
          int32_t _3882_elmi = (int)0;
          int32_t _3883_nzi = (int)0;
          int32_t _3884_i1 = (int)0;
          int32_t _3885_i0 = (int)0;
          while ( ((_3885_i0 < _3823_nelem) && (_3884_i1 < _3835_pnnz)) )
          {
            {
              int64_t _3886_esubi = (_ptr__3820_wi64[safe_add( _3829_sp,_3885_i0 )] / _3843_edim1);
              int64_t _3887_psubj = (_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3884_i1 )] )] % _3841_pdim1);
              if ((_3886_esubi < _3887_psubj))
              {
                {
                  while ( ((_3885_i0 < _3823_nelem) && ((_ptr__3820_wi64[safe_add( _3829_sp,_3885_i0 )] / _3843_edim1) == _3886_esubi)) )
                  {
                    {
                      ++ _3885_i0;
                    }
                  }
                }
              }
              else if((_3886_esubi > _3887_psubj))
              {
                {
                  while ( ((_3884_i1 < _3835_pnnz) && ((_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3884_i1 )] )] % _3841_pdim1) == _3887_psubj)) )
                  {
                    {
                      ++ _3884_i1;
                    }
                  }
                }
              }
              else
              {
                {
                  int32_t _3888_b0 = _3885_i0;
                  ++ _3885_i0;
                  int32_t _3889_b1 = _3884_i1;
                  ++ _3884_i1;
                  while ( ((_3885_i0 < _3823_nelem) && ((_ptr__3820_wi64[safe_add( _3829_sp,_3885_i0 )] / _3843_edim1) == _3886_esubi)) )
                  {
                    {
                      ++ _3885_i0;
                    }
                  }
                  while ( ((_3884_i1 < _3835_pnnz) && ((_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3884_i1 )] )] % _3841_pdim1) == _3887_psubj)) )
                  {
                    {
                      ++ _3884_i1;
                    }
                  }
                  int32_t _3890_p1 = _3889_b1;
                  int32_t _3891_p0 = _3888_b0;
                  int32_t _3892_numelm = (int)0;
                  while ( ((_3891_p0 < _3885_i0) && (_3890_p1 < _3884_i1)) )
                  {
                    {
                      int64_t _3893_esubj = (_ptr__3820_wi64[safe_add( _3829_sp,_3891_p0 )] % _3843_edim1);
                      int64_t _3894_psubi = (_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3890_p1 )] )] / _3841_pdim1);
                      if ((_3893_esubj < _3894_psubi))
                      {
                        {
                          ++ _3891_p0;
                        }
                      }
                      else if((_3893_esubj > _3894_psubi))
                      {
                        {
                          ++ _3890_p1;
                        }
                      }
                      else
                      {
                        {
                          int32_t _10796_ = _ptr__3819_wi32[safe_add( _3826_ptr,_3891_p0 )];
                          int32_t _10797_ = _ptr__3819_wi32[safe_add( safe_add( _3826_ptr,_3891_p0 ),(int)1 )];
                          for (int32_t _3895_j = _10796_; _3895_j < _10797_; ++_3895_j)
                          {
                            {
                              _ptr__3878_ri64[safe_add( _3870_rnidxs,_3883_nzi )] = _ptr__3820_wi64[safe_add( _3830_nidxs,_3895_j )];
                              _ptr__3879_rf64[safe_add( _3872_rcof,_3883_nzi )] = 0.0;
                              _ptr__3880_ri32[safe_add( _3876_rcode,_3881_codei )] = 2;
                              _ptr__3879_rf64[safe_add( _3877_rcconst,_3881_codei )] = _ptr__3821_wf64[safe_add( _3831_cof,_3895_j )];
                              ++ _3881_codei;
                              if ((_3827_ncodeatom > (int)0))
                              {
                                {
                                  int32_t _10798_ = _ptr__3819_wi32[safe_add( _3833_codeptr,_3895_j )];
                                  int32_t _10799_ = _ptr__3819_wi32[safe_add( safe_add( _3833_codeptr,_3895_j ),(int)1 )];
                                  for (int32_t _3896_k = _10798_; _3896_k < _10799_; ++_3896_k)
                                  {
                                    {
                                      _ptr__3880_ri32[safe_add( _3876_rcode,_3881_codei )] = _ptr__3819_wi32[safe_add( _3834_code,_3896_k )];
                                      _ptr__3879_rf64[safe_add( _3877_rcconst,_3881_codei )] = _ptr__3821_wf64[safe_add( _3832_cconst,_3896_k )];
                                      ++ _3881_codei;
                                    }
                                  }
                                  _ptr__3880_ri32[safe_add( _3876_rcode,_3881_codei )] = 3;
                                  ++ _3881_codei;
                                }
                              }
                              {}
                              _ptr__3880_ri32[safe_add( _3876_rcode,_3881_codei )] = 1;
                              _ptr__3879_rf64[safe_add( _3877_rcconst,_3881_codei )] = _ptr__3846_xi32[safe_add( _3838_pidxs,_ptr__3846_xi32[safe_add( _3844_pperm,_3890_p1 )] )];
                              ++ _3881_codei;
                              _ptr__3880_ri32[safe_add( _3876_rcode,_3881_codei )] = 5;
                              ++ _3881_codei;
                              _ptr__3880_ri32[safe_add( safe_add( _3875_rcodeptr,_3883_nzi ),(int)1 )] = _3881_codei;
                              ++ _3883_nzi;
                            }
                          }
                          ++ _3892_numelm;
                          ++ _3891_p0;
                          ++ _3890_p1;
                        }
                      }
                    }
                  }
                  if ((_3892_numelm > (int)0))
                  {
                    {
                      _ptr__3878_ri64[safe_add( _3871_rsp,_3882_elmi )] = _3886_esubi;
                      _ptr__3880_ri32[safe_add( safe_add( _3869_rptr,_3882_elmi ),(int)1 )] = _3883_nzi;
                      ++ _3882_elmi;
                    }
                  }
                  {}
                }
              }
            }
          }
          if ((_3853_rnelem > _ptr__3880_ri32[_3874_rshape]))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
            }
          }
          {}
          if ((_3882_elmi != _3853_rnelem))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_3883_nzi != _3854_rnnz))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
        }
      }
      {}
      if ((!_3873_rhassp))
      {
        {
          _3816_rs->popi64(_3853_rnelem);
        }
      }
      {}
      _3818_xs->clear();
    }
  }
  else
  {
    {
      int32_t _3897_rncodeatom = (int)0;
      int32_t _3898_rnelem = (int)0;
      int32_t _3899_rnnz = (int)0;
      int32_t _3900_i1 = (int)0;
      while ( (_3900_i1 < _3835_pnnz) )
      {
        {
          int64_t _3901_psubj = (_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3900_i1 )] )] % _3841_pdim1);
          int32_t _3902_b1 = _3900_i1;
          ++ _3900_i1;
          while ( ((_3900_i1 < _3835_pnnz) && ((_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3900_i1 )] )] % _3841_pdim1) == _3901_psubj)) )
          {
            {
              ++ _3900_i1;
            }
          }
          int32_t _10800_ = _3902_b1;
          int32_t _10801_ = _3900_i1;
          for (int32_t _3903_k1 = _10800_; _3903_k1 < _10801_; ++_3903_k1)
          {
            {
              int64_t _3904_psubi = (_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3900_i1 )] )] / _3841_pdim1);
              int64_t _3905_eidx = safe_add( safe_mul( _3901_psubj,_3843_edim1 ),_3904_psubi );
              int32_t _3906_n = (_ptr__3819_wi32[safe_add( safe_add( _3826_ptr,_3905_eidx ),(int)1 )] - _ptr__3819_wi32[safe_add( _3826_ptr,_3905_eidx )]);
              _3899_rnnz += _3906_n;
              int32_t _10802_;
              bool _10803_ = (_3827_ncodeatom > (int)0);
              if (_10803_)
              {
                _10802_ = safe_add( (_ptr__3819_wi32[safe_add( _3833_codeptr,_ptr__3819_wi32[safe_add( safe_add( _3826_ptr,_3905_eidx ),(int)1 )] )] - _ptr__3819_wi32[safe_add( _3833_codeptr,_ptr__3819_wi32[safe_add( _3826_ptr,_3905_eidx )] )]),safe_mul( _3906_n,(int)4 ) );
              }
              else
              {
                _10802_ = safe_mul( _3906_n,(int)3 );
              }
              _3897_rncodeatom += _10802_;
            }
          }
          ++ _3898_rnelem;
        }
      }
      int32_t _3907_rnd = (int)1;
      bool _3908_rhassp = (_3898_rnelem < _3842_edim0);
      _3816_rs->alloc_expr(_3907_rnd,_3898_rnelem,_3899_rnnz,_3908_rhassp,_3897_rncodeatom);
      int32_t _3909_rptr = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->ptr_base;
      int32_t _3910_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->nidxs_base;
      int32_t _10804_;
      bool _10805_ = _3908_rhassp;
      if (_10805_)
      {
        _10804_ = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->sp_base;
      }
      else
      {
        _10804_ = _3816_rs->alloci64(_3898_rnelem);
      }
      int32_t _3911_rsp = _10804_;
      int32_t _3912_rcof = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->cof_base;
      bool _3913_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->hassp;
      int32_t _3914_rshape = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->shape_base;
      int32_t _3915_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->codeptr_base;
      int32_t _3916_rcode = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->code_base;
      int32_t _3917_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3918_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3918_ri64(_3918_ri64 ? _3918_ri64->raw() : nullptr,_3918_ri64 ? _3918_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3919_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->f64;
      _checked_ptr_1<double> _ptr__3919_rf64(_3919_rf64 ? _3919_rf64->raw() : nullptr,_3919_rf64 ? _3919_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3920_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3816_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3920_ri32(_3920_ri32 ? _3920_ri32->raw() : nullptr,_3920_ri32 ? _3920_ri32->size(0) : 0);
      {
        _ptr__3920_ri32[_3909_rptr] = (int)0;
        if ((_3897_rncodeatom > (int)0))
        {
          {
            _ptr__3920_ri32[_3915_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__3920_ri32[_3914_rshape] = (int32_t)_3842_edim0;
        int32_t _3921_codei = (int)0;
        int32_t _3922_elmi = (int)0;
        int32_t _3923_nzi = (int)0;
        int32_t _3924_i1 = (int)0;
        while ( (_3924_i1 < _3835_pnnz) )
        {
          {
            int64_t _3925_psubj = (_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3924_i1 )] )] % _3841_pdim1);
            int32_t _3926_b1 = _3924_i1;
            ++ _3924_i1;
            while ( ((_3924_i1 < _3835_pnnz) && ((_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3924_i1 )] )] % _3841_pdim1) == _3925_psubj)) )
            {
              {
                ++ _3924_i1;
              }
            }
            int32_t _10806_ = _3926_b1;
            int32_t _10807_ = _3924_i1;
            for (int32_t _3927_k1 = _10806_; _3927_k1 < _10807_; ++_3927_k1)
            {
              {
                int64_t _3928_psubi = (_ptr__3837_xi64[safe_add( _3836_psp,_ptr__3846_xi32[safe_add( _3844_pperm,_3927_k1 )] )] / _3841_pdim1);
                int64_t _3929_eidx = safe_add( safe_mul( _3925_psubj,_3843_edim1 ),_3928_psubi );
                int32_t _10808_ = _ptr__3819_wi32[safe_add( _3826_ptr,_3929_eidx )];
                int32_t _10809_ = _ptr__3819_wi32[safe_add( safe_add( _3826_ptr,_3929_eidx ),(int)1 )];
                for (int32_t _3930_i = _10808_; _3930_i < _10809_; ++_3930_i)
                {
                  {
                    _ptr__3918_ri64[safe_add( _3910_rnidxs,_3923_nzi )] = _ptr__3820_wi64[safe_add( _3830_nidxs,_3930_i )];
                    _ptr__3919_rf64[safe_add( _3912_rcof,_3923_nzi )] = 0.0;
                    _ptr__3920_ri32[safe_add( _3916_rcode,_3921_codei )] = 2;
                    _ptr__3919_rf64[safe_add( _3917_rcconst,_3921_codei )] = _ptr__3821_wf64[safe_add( _3831_cof,_3930_i )];
                    ++ _3921_codei;
                    if ((_3827_ncodeatom > (int)0))
                    {
                      {
                        int32_t _10810_ = _ptr__3819_wi32[safe_add( _3833_codeptr,_3930_i )];
                        int32_t _10811_ = _ptr__3819_wi32[safe_add( safe_add( _3833_codeptr,_3930_i ),(int)1 )];
                        for (int32_t _3931_k = _10810_; _3931_k < _10811_; ++_3931_k)
                        {
                          {
                            _ptr__3920_ri32[safe_add( _3916_rcode,_3921_codei )] = _ptr__3819_wi32[safe_add( _3834_code,_3931_k )];
                            _ptr__3919_rf64[safe_add( _3917_rcconst,_3921_codei )] = _ptr__3821_wf64[safe_add( _3832_cconst,_3931_k )];
                            ++ _3921_codei;
                          }
                        }
                        _ptr__3920_ri32[safe_add( _3916_rcode,_3921_codei )] = 3;
                        ++ _3921_codei;
                      }
                    }
                    {}
                    _ptr__3920_ri32[safe_add( _3916_rcode,_3921_codei )] = 1;
                    _ptr__3919_rf64[safe_add( _3917_rcconst,_3921_codei )] = _ptr__3846_xi32[safe_add( _3838_pidxs,_ptr__3846_xi32[safe_add( _3844_pperm,_3927_k1 )] )];
                    ++ _3921_codei;
                    _ptr__3920_ri32[safe_add( _3916_rcode,_3921_codei )] = 5;
                    ++ _3921_codei;
                    _ptr__3920_ri32[safe_add( safe_add( _3915_rcodeptr,_3923_nzi ),(int)1 )] = _3921_codei;
                    ++ _3923_nzi;
                  }
                }
              }
            }
            _ptr__3918_ri64[safe_add( _3911_rsp,_3922_elmi )] = _3925_psubj;
            _ptr__3920_ri32[safe_add( safe_add( _3909_rptr,_3922_elmi ),(int)1 )] = _3923_nzi;
            ++ _3922_elmi;
          }
        }
        if ((_3898_rnelem > _ptr__3920_ri32[_3914_rshape]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
          }
        }
        {}
        if ((_3922_elmi != _3898_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
          }
        }
        {}
        if ((_3923_nzi != _3899_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
          }
        }
        {}
      }
      if ((!_3913_rhassp))
      {
        {
          _3816_rs->popi64(_3898_rnelem);
        }
      }
      {}
      _3818_xs->clear();
    }
  }
}
// End mosek.fusion.ExprMulParamDiagRight.eval

// Begin mosek.fusion.ExprMulParamDiagRight.toString
// Method mosek.fusion.ExprMulParamDiagRight.toString @ src/fusion/Parameter.monty:1762:6-159
std::string mosek::fusion::ExprMulParamDiagRight :: toString() { return mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamDiagRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamDiagRight.toString

void mosek::fusion::p_ExprMulParamDiagRight::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamDiagRight::destroy() { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->destroy(); }
// } class ExprMulParamDiagRight
// class ExprDotParam { // @ src/fusion/Parameter.monty:1545:4-1741:5
mosek::fusion::ExprDotParam::ExprDotParam(mosek::fusion::p_ExprDotParam *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDotParam()" << this << std::endl; */ }
mosek::fusion::ExprDotParam::~ExprDotParam() {  /* std::cout << "~ExprDotParam()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprDotParam::p_ExprDotParam
  (::mosek::fusion::ExprDotParam * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprDotParam.ctor @ src/fusion/Parameter.monty:1549:6-1559:7
mosek::fusion::ExprDotParam::t mosek::fusion::p_ExprDotParam::_new_ExprDotParam
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3932_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3933_e)
{ return new mosek::fusion::ExprDotParam(_3932_p,_3933_e); }
mosek::fusion::ExprDotParam::ExprDotParam
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3932_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3933_e) : 
   ExprDotParam(new mosek::fusion::p_ExprDotParam(this))
{ mosek::fusion::p_ExprDotParam::_get_impl(this)->_initialize(_3932_p,_3933_e); }
void mosek::fusion::p_ExprDotParam::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3932_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3933_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->p = _3932_p;
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->e = _3933_e;
    if ((_3932_p->getND() != _3933_e->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int32_t _10812_ = (int)0;
    int32_t _10813_ = _3932_p->getND();
    for (int32_t _3934_i = _10812_; _3934_i < _10813_; ++_3934_i)
    {
      {
        if ((_3932_p->getDim(_3934_i) != _3933_e->getDim(_3934_i)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprDotParam.ctor

// Begin mosek.fusion.ExprDotParam.eval
// Method mosek.fusion.ExprDotParam.eval @ src/fusion/Parameter.monty:1563:6-1740:7
void mosek::fusion::ExprDotParam :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3935_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3936_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3937_xs) { mosek::fusion::p_ExprDotParam::_get_impl(this)->eval(_3935_rs,_3936_ws,_3937_xs); }
void mosek::fusion::p_ExprDotParam::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3935_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3936_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3937_xs)
{
  e->eval(_3936_ws,_3935_rs,_3937_xs);
  _3936_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3938_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3938_wi32(_3938_wi32 ? _3938_wi32->raw() : nullptr,_3938_wi32 ? _3938_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3939_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3939_wi64(_3939_wi64 ? _3939_wi64->raw() : nullptr,_3939_wi64 ? _3939_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3940_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->f64;
  _checked_ptr_1<double> _ptr__3940_wf64(_3940_wf64 ? _3940_wf64->raw() : nullptr,_3940_wf64 ? _3940_wf64->size(0) : 0);
  int32_t _3941_nd = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->nd;
  int32_t _3942_nelem = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->nelem;
  int32_t _3943_nnz = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->nnz;
  bool _3944_hassp = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->hassp;
  int32_t _3945_ptr = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->ptr_base;
  int32_t _3946_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->ncodeatom;
  int32_t _3947_shape = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->shape_base;
  int32_t _3948_sp = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->sp_base;
  int32_t _3949_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->nidxs_base;
  int32_t _3950_cof = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->cof_base;
  int32_t _3951_cconst = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->cconst_base;
  int32_t _3952_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->codeptr_base;
  int32_t _3953_code = mosek::fusion::p_WorkStack::_get_impl(_3936_ws)->code_base;
  int32_t _3954_pnnz = p->getNumNonzero();
  int32_t _3955_psp = _3937_xs->alloci64(_3954_pnnz);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3937_xs)->i64,_3955_psp);
  int32_t _3956_pidxs = _3937_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3957_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3937_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3957_xi32(_3957_xi32 ? _3957_xi32->raw() : nullptr,_3957_xi32 ? _3957_xi32->size(0) : 0);
  p->getAllIndexes(_3957_xi32,_3956_pidxs);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3958_xi64 = mosek::fusion::p_WorkStack::_get_impl(_3937_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__3958_xi64(_3958_xi64 ? _3958_xi64->raw() : nullptr,_3958_xi64 ? _3958_xi64->size(0) : 0);
  int32_t _3959_rnnz = (int)0;
  int32_t _3960_rnelem = (int)1;
  int32_t _3961_rncodeatom = (int)0;
  if (_3944_hassp)
  {
    {
      int32_t _3962_ei = (int)0;
      int32_t _3963_pi = (int)0;
      while ( ((_3962_ei < _3942_nelem) && (_3963_pi < _3954_pnnz)) )
      {
        {
          if ((_ptr__3939_wi64[safe_add( _3948_sp,_3962_ei )] < _ptr__3958_xi64[safe_add( _3955_psp,_3963_pi )]))
          {
            {
              ++ _3962_ei;
            }
          }
          else if((_ptr__3939_wi64[safe_add( _3948_sp,_3962_ei )] > _ptr__3958_xi64[safe_add( _3955_psp,_3963_pi )]))
          {
            {
              ++ _3963_pi;
            }
          }
          else
          {
            {
              int32_t _3964_n = (_ptr__3938_wi32[safe_add( safe_add( _3945_ptr,_3962_ei ),(int)1 )] - _ptr__3938_wi32[safe_add( _3945_ptr,_3962_ei )]);
              _3959_rnnz += _3964_n;
              int32_t _10814_;
              bool _10815_ = (_3946_ncodeatom > (int)0);
              if (_10815_)
              {
                _10814_ = safe_add( (_ptr__3938_wi32[safe_add( _3952_codeptr,_ptr__3938_wi32[safe_add( safe_add( _3945_ptr,_3962_ei ),(int)1 )] )] - _ptr__3938_wi32[safe_add( _3952_codeptr,_ptr__3938_wi32[safe_add( _3945_ptr,_3962_ei )] )]),safe_mul( (int)4,_3964_n ) );
              }
              else
              {
                _10814_ = safe_mul( (int)3,_3964_n );
              }
              _3961_rncodeatom += _10814_;
              ++ _3962_ei;
              ++ _3963_pi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _10816_ = (int)0;
      int32_t _10817_ = _3954_pnnz;
      for (int32_t _3965_i = _10816_; _3965_i < _10817_; ++_3965_i)
      {
        {
          _3959_rnnz += (_ptr__3938_wi32[safe_add( safe_add( _3945_ptr,_ptr__3958_xi64[safe_add( _3955_psp,_3965_i )] ),(int)1 )] - _ptr__3938_wi32[safe_add( _3945_ptr,_ptr__3958_xi64[safe_add( _3955_psp,_3965_i )] )]);
        }
      }
      if ((_3946_ncodeatom > (int)0))
      {
        {
          int32_t _10818_ = (int)0;
          int32_t _10819_ = _3954_pnnz;
          for (int32_t _3966_i = _10818_; _3966_i < _10819_; ++_3966_i)
          {
            {
              _3961_rncodeatom += safe_add( (_ptr__3938_wi32[safe_add( _3952_codeptr,_ptr__3938_wi32[safe_add( safe_add( _3945_ptr,_ptr__3958_xi64[safe_add( _3955_psp,_3966_i )] ),(int)1 )] )] - _ptr__3938_wi32[safe_add( _3952_codeptr,_ptr__3938_wi32[safe_add( _3945_ptr,_ptr__3958_xi64[safe_add( _3955_psp,_3966_i )] )] )]),safe_mul( (int)4,(_ptr__3938_wi32[safe_add( safe_add( _3945_ptr,_ptr__3958_xi64[safe_add( _3955_psp,_3966_i )] ),(int)1 )] - _ptr__3938_wi32[safe_add( _3945_ptr,_ptr__3958_xi64[safe_add( _3955_psp,_3966_i )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int32_t _10820_ = (int)0;
          int32_t _10821_ = _3954_pnnz;
          for (int32_t _3967_i = _10820_; _3967_i < _10821_; ++_3967_i)
          {
            {
              _3961_rncodeatom += safe_mul( (int)3,(_ptr__3938_wi32[safe_add( safe_add( _3945_ptr,_ptr__3958_xi64[safe_add( _3955_psp,_3967_i )] ),(int)1 )] - _ptr__3938_wi32[safe_add( _3945_ptr,_ptr__3958_xi64[safe_add( _3955_psp,_3967_i )] )]) );
            }
          }
        }
      }
    }
  }
  int64_t _3968_rsz = (int)1;
  int32_t _10822_ = (int)0;
  int32_t _10823_ = _3941_nd;
  for (int32_t _3969_i = _10822_; _3969_i < _10823_; ++_3969_i)
  {
    {
      _3968_rsz *= _ptr__3938_wi32[safe_add( _3947_shape,_3969_i )];
    }
  }
  _3935_rs->alloc_expr((int)0,_3960_rnelem,_3959_rnnz,false,_3961_rncodeatom);
  int32_t _3970_rptr = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->ptr_base;
  int32_t _3971_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->nidxs_base;
  int32_t _3972_rcof = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->cof_base;
  bool _3973_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->hassp;
  int32_t _3974_rshape = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->shape_base;
  int32_t _3975_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->codeptr_base;
  int32_t _3976_rcode = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->code_base;
  int32_t _3977_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3978_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__3978_ri64(_3978_ri64 ? _3978_ri64->raw() : nullptr,_3978_ri64 ? _3978_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3979_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->f64;
  _checked_ptr_1<double> _ptr__3979_rf64(_3979_rf64 ? _3979_rf64->raw() : nullptr,_3979_rf64 ? _3979_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3980_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3935_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__3980_ri32(_3980_ri32 ? _3980_ri32->raw() : nullptr,_3980_ri32 ? _3980_ri32->size(0) : 0);
  _ptr__3980_ri32[_3970_rptr] = (int)0;
  _ptr__3980_ri32[safe_add( _3970_rptr,(int)1 )] = _3959_rnnz;
  if ((_3961_rncodeatom > (int)0))
  {
    {
      _ptr__3980_ri32[_3975_rcodeptr] = (int)0;
    }
  }
  {}
  if (_3944_hassp)
  {
    {
      int32_t _3981_codei = (int)0;
      int32_t _3982_nzi = (int)0;
      int32_t _3983_elmi = (int)0;
      int32_t _3984_ei = (int)0;
      int32_t _3985_pi = (int)0;
      while ( ((_3984_ei < _3942_nelem) && (_3985_pi < _3954_pnnz)) )
      {
        {
          if ((_ptr__3939_wi64[safe_add( _3948_sp,_3984_ei )] < _ptr__3958_xi64[safe_add( _3955_psp,_3985_pi )]))
          {
            {
              ++ _3984_ei;
            }
          }
          else if((_ptr__3939_wi64[safe_add( _3948_sp,_3984_ei )] > _ptr__3958_xi64[safe_add( _3955_psp,_3985_pi )]))
          {
            {
              ++ _3985_pi;
            }
          }
          else
          {
            {
              int32_t _10824_ = _ptr__3938_wi32[safe_add( _3945_ptr,_3984_ei )];
              int32_t _10825_ = _ptr__3938_wi32[safe_add( safe_add( _3945_ptr,_3984_ei ),(int)1 )];
              for (int32_t _3986_i = _10824_; _3986_i < _10825_; ++_3986_i)
              {
                {
                  _ptr__3978_ri64[safe_add( _3971_rnidxs,_3982_nzi )] = _ptr__3939_wi64[safe_add( _3949_nidxs,_3986_i )];
                  _ptr__3979_rf64[safe_add( _3972_rcof,_3982_nzi )] = 0.0;
                  _ptr__3980_ri32[safe_add( _3976_rcode,_3981_codei )] = 2;
                  _ptr__3979_rf64[safe_add( _3977_rcconst,_3981_codei )] = _ptr__3940_wf64[safe_add( _3950_cof,_3986_i )];
                  ++ _3981_codei;
                  if ((_3946_ncodeatom > (int)0))
                  {
                    {
                      int32_t _10826_ = _ptr__3938_wi32[safe_add( _3952_codeptr,_3986_i )];
                      int32_t _10827_ = _ptr__3938_wi32[safe_add( safe_add( _3952_codeptr,_3986_i ),(int)1 )];
                      for (int32_t _3987_k = _10826_; _3987_k < _10827_; ++_3987_k)
                      {
                        {
                          _ptr__3980_ri32[safe_add( _3976_rcode,_3981_codei )] = _ptr__3938_wi32[safe_add( _3953_code,_3987_k )];
                          _ptr__3979_rf64[safe_add( _3977_rcconst,_3981_codei )] = _ptr__3940_wf64[safe_add( _3951_cconst,_3987_k )];
                          ++ _3981_codei;
                        }
                      }
                      _ptr__3980_ri32[safe_add( _3976_rcode,_3981_codei )] = 3;
                      ++ _3981_codei;
                    }
                  }
                  {}
                  _ptr__3980_ri32[safe_add( _3976_rcode,_3981_codei )] = 1;
                  _ptr__3979_rf64[safe_add( _3977_rcconst,_3981_codei )] = _ptr__3957_xi32[safe_add( _3956_pidxs,_3985_pi )];
                  ++ _3981_codei;
                  _ptr__3980_ri32[safe_add( _3976_rcode,_3981_codei )] = 5;
                  ++ _3981_codei;
                  _ptr__3980_ri32[safe_add( safe_add( _3975_rcodeptr,_3982_nzi ),(int)1 )] = _3981_codei;
                  ++ _3982_nzi;
                }
              }
              ++ _3984_ei;
              ++ _3985_pi;
            }
          }
        }
      }
      if ((_3983_elmi != _3960_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_3982_nzi != _3959_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_3981_codei != _3961_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _3988_codei = (int)0;
      int32_t _3989_nzi = (int)0;
      int32_t _10828_ = (int)0;
      int32_t _10829_ = _3954_pnnz;
      for (int32_t _3990_pi = _10828_; _3990_pi < _10829_; ++_3990_pi)
      {
        {
          int32_t _3991_elmi = _3990_pi;
          int64_t _3992_ei = _ptr__3958_xi64[safe_add( _3955_psp,_3990_pi )];
          int32_t _10830_ = _ptr__3938_wi32[safe_add( _3945_ptr,_3992_ei )];
          int32_t _10831_ = _ptr__3938_wi32[safe_add( safe_add( _3945_ptr,_3992_ei ),(int)1 )];
          for (int32_t _3993_i = _10830_; _3993_i < _10831_; ++_3993_i)
          {
            {
              _ptr__3978_ri64[safe_add( _3971_rnidxs,_3989_nzi )] = _ptr__3939_wi64[safe_add( _3949_nidxs,_3993_i )];
              _ptr__3979_rf64[safe_add( _3972_rcof,_3989_nzi )] = 0.0;
              _ptr__3980_ri32[safe_add( _3976_rcode,_3988_codei )] = 2;
              _ptr__3979_rf64[safe_add( _3977_rcconst,_3988_codei )] = _ptr__3940_wf64[safe_add( _3950_cof,_3993_i )];
              ++ _3988_codei;
              if ((_3946_ncodeatom > (int)0))
              {
                {
                  int32_t _10832_ = _ptr__3938_wi32[safe_add( _3952_codeptr,_3993_i )];
                  int32_t _10833_ = _ptr__3938_wi32[safe_add( safe_add( _3952_codeptr,_3993_i ),(int)1 )];
                  for (int32_t _3994_k = _10832_; _3994_k < _10833_; ++_3994_k)
                  {
                    {
                      _ptr__3980_ri32[safe_add( _3976_rcode,_3988_codei )] = _ptr__3938_wi32[safe_add( _3953_code,_3994_k )];
                      _ptr__3979_rf64[safe_add( _3977_rcconst,_3988_codei )] = _ptr__3940_wf64[safe_add( _3951_cconst,_3994_k )];
                      ++ _3988_codei;
                    }
                  }
                  _ptr__3980_ri32[safe_add( _3976_rcode,_3988_codei )] = 3;
                  ++ _3988_codei;
                }
              }
              {}
              _ptr__3980_ri32[safe_add( _3976_rcode,_3988_codei )] = 1;
              _ptr__3979_rf64[safe_add( _3977_rcconst,_3988_codei )] = _ptr__3957_xi32[safe_add( _3956_pidxs,_3990_pi )];
              ++ _3988_codei;
              _ptr__3980_ri32[safe_add( _3976_rcode,_3988_codei )] = 5;
              ++ _3988_codei;
              _ptr__3980_ri32[safe_add( safe_add( _3975_rcodeptr,_3989_nzi ),(int)1 )] = _3988_codei;
              ++ _3989_nzi;
            }
          }
        }
      }
      if ((_3989_nzi != _3959_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nzi"));
        }
      }
      {}
      if ((_3988_codei != _3961_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
        }
      }
      {}
    }
  }
  _3937_xs->clear();
}
// End mosek.fusion.ExprDotParam.eval

// Begin mosek.fusion.ExprDotParam.toString
// Method mosek.fusion.ExprDotParam.toString @ src/fusion/Parameter.monty:1561:6-150
std::string mosek::fusion::ExprDotParam :: toString() { return mosek::fusion::p_ExprDotParam::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprDotParam::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDotParam("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprDotParam.toString

void mosek::fusion::p_ExprDotParam::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprDotParam::destroy() { mosek::fusion::p_ExprDotParam::_get_impl(this)->destroy(); }
// } class ExprDotParam
// class ExprMulParamElem { // @ src/fusion/Parameter.monty:1314:4-1540:5
mosek::fusion::ExprMulParamElem::ExprMulParamElem(mosek::fusion::p_ExprMulParamElem *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamElem()" << this << std::endl; */ }
mosek::fusion::ExprMulParamElem::~ExprMulParamElem() {  /* std::cout << "~ExprMulParamElem()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamElem::p_ExprMulParamElem
  (::mosek::fusion::ExprMulParamElem * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamElem.ctor @ src/fusion/Parameter.monty:1318:6-1328:7
mosek::fusion::ExprMulParamElem::t mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3995_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3996_e)
{ return new mosek::fusion::ExprMulParamElem(_3995_p,_3996_e); }
mosek::fusion::ExprMulParamElem::ExprMulParamElem
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3995_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3996_e) : 
   ExprMulParamElem(new mosek::fusion::p_ExprMulParamElem(this))
{ mosek::fusion::p_ExprMulParamElem::_get_impl(this)->_initialize(_3995_p,_3996_e); }
void mosek::fusion::p_ExprMulParamElem::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3995_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3996_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_3996_e->getShape());
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->p = _3995_p;
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->e = _3996_e;
    if ((_3995_p->getND() != _3996_e->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int32_t _10834_ = (int)0;
    int32_t _10835_ = _3995_p->getND();
    for (int32_t _3997_i = _10834_; _3997_i < _10835_; ++_3997_i)
    {
      {
        if ((_3995_p->getDim(_3997_i) != _3996_e->getDim(_3997_i)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprMulParamElem.ctor

// Begin mosek.fusion.ExprMulParamElem.eval
// Method mosek.fusion.ExprMulParamElem.eval @ src/fusion/Parameter.monty:1332:6-1539:7
void mosek::fusion::ExprMulParamElem :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3998_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3999_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4000_xs) { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->eval(_3998_rs,_3999_ws,_4000_xs); }
void mosek::fusion::p_ExprMulParamElem::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3998_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3999_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4000_xs)
{
  e->eval(_3999_ws,_3998_rs,_4000_xs);
  _3999_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4001_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4001_wi32(_4001_wi32 ? _4001_wi32->raw() : nullptr,_4001_wi32 ? _4001_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4002_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4002_wi64(_4002_wi64 ? _4002_wi64->raw() : nullptr,_4002_wi64 ? _4002_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4003_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->f64;
  _checked_ptr_1<double> _ptr__4003_wf64(_4003_wf64 ? _4003_wf64->raw() : nullptr,_4003_wf64 ? _4003_wf64->size(0) : 0);
  int32_t _4004_nd = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->nd;
  int32_t _4005_nelem = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->nelem;
  int32_t _4006_nnz = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->nnz;
  bool _4007_hassp = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->hassp;
  int32_t _4008_ptr = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->ptr_base;
  int32_t _4009_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->ncodeatom;
  int32_t _4010_shape = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->shape_base;
  int32_t _4011_sp = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->sp_base;
  int32_t _4012_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->nidxs_base;
  int32_t _4013_cof = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->cof_base;
  int32_t _4014_cconst = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->cconst_base;
  int32_t _4015_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->codeptr_base;
  int32_t _4016_code = mosek::fusion::p_WorkStack::_get_impl(_3999_ws)->code_base;
  int32_t _4017_pnnz = p->getNumNonzero();
  int32_t _4018_psp = _4000_xs->alloci64(_4017_pnnz);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_4000_xs)->i64,_4018_psp);
  int32_t _4019_pidxs = _4000_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4020_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4000_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4020_xi32(_4020_xi32 ? _4020_xi32->raw() : nullptr,_4020_xi32 ? _4020_xi32->size(0) : 0);
  p->getAllIndexes(_4020_xi32,_4019_pidxs);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4021_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4000_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__4021_xi64(_4021_xi64 ? _4021_xi64->raw() : nullptr,_4021_xi64 ? _4021_xi64->size(0) : 0);
  int32_t _4022_rnd = _4004_nd;
  int32_t _4023_rnnz = (int)0;
  int32_t _4024_rnelem = (int)0;
  int32_t _4025_rncodeatom = (int)0;
  if (_4007_hassp)
  {
    {
      int32_t _4026_ei = (int)0;
      int32_t _4027_pi = (int)0;
      while ( ((_4026_ei < _4005_nelem) && (_4027_pi < _4017_pnnz)) )
      {
        {
          if ((_ptr__4002_wi64[safe_add( _4011_sp,_4026_ei )] < _ptr__4021_xi64[safe_add( _4018_psp,_4027_pi )]))
          {
            {
              ++ _4026_ei;
            }
          }
          else if((_ptr__4002_wi64[safe_add( _4011_sp,_4026_ei )] > _ptr__4021_xi64[safe_add( _4018_psp,_4027_pi )]))
          {
            {
              ++ _4027_pi;
            }
          }
          else
          {
            {
              int32_t _4028_n = (_ptr__4001_wi32[safe_add( safe_add( _4008_ptr,_4026_ei ),(int)1 )] - _ptr__4001_wi32[safe_add( _4008_ptr,_4026_ei )]);
              _4023_rnnz += _4028_n;
              int32_t _10836_;
              bool _10837_ = (_4009_ncodeatom > (int)0);
              if (_10837_)
              {
                _10836_ = safe_add( (_ptr__4001_wi32[safe_add( _4015_codeptr,_ptr__4001_wi32[safe_add( safe_add( _4008_ptr,_4026_ei ),(int)1 )] )] - _ptr__4001_wi32[safe_add( _4015_codeptr,_ptr__4001_wi32[safe_add( _4008_ptr,_4026_ei )] )]),safe_mul( (int)4,_4028_n ) );
              }
              else
              {
                _10836_ = safe_mul( (int)3,_4028_n );
              }
              _4025_rncodeatom += _10836_;
              _4024_rnelem += (int)1;
              ++ _4026_ei;
              ++ _4027_pi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _4024_rnelem = _4017_pnnz;
      int32_t _10838_ = (int)0;
      int32_t _10839_ = _4017_pnnz;
      for (int32_t _4029_i = _10838_; _4029_i < _10839_; ++_4029_i)
      {
        {
          _4023_rnnz += (_ptr__4001_wi32[safe_add( safe_add( _4008_ptr,_ptr__4021_xi64[safe_add( _4018_psp,_4029_i )] ),(int)1 )] - _ptr__4001_wi32[safe_add( _4008_ptr,_ptr__4021_xi64[safe_add( _4018_psp,_4029_i )] )]);
        }
      }
      if ((_4009_ncodeatom > (int)0))
      {
        {
          int32_t _10840_ = (int)0;
          int32_t _10841_ = _4017_pnnz;
          for (int32_t _4030_i = _10840_; _4030_i < _10841_; ++_4030_i)
          {
            {
              _4025_rncodeatom += safe_add( (_ptr__4001_wi32[safe_add( _4015_codeptr,_ptr__4001_wi32[safe_add( safe_add( _4008_ptr,_ptr__4021_xi64[safe_add( _4018_psp,_4030_i )] ),(int)1 )] )] - _ptr__4001_wi32[safe_add( _4015_codeptr,_ptr__4001_wi32[safe_add( _4008_ptr,_ptr__4021_xi64[safe_add( _4018_psp,_4030_i )] )] )]),safe_mul( (int)4,(_ptr__4001_wi32[safe_add( safe_add( _4008_ptr,_ptr__4021_xi64[safe_add( _4018_psp,_4030_i )] ),(int)1 )] - _ptr__4001_wi32[safe_add( _4008_ptr,_ptr__4021_xi64[safe_add( _4018_psp,_4030_i )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int32_t _10842_ = (int)0;
          int32_t _10843_ = _4017_pnnz;
          for (int32_t _4031_i = _10842_; _4031_i < _10843_; ++_4031_i)
          {
            {
              _4025_rncodeatom += safe_mul( (int)3,(_ptr__4001_wi32[safe_add( safe_add( _4008_ptr,_ptr__4021_xi64[safe_add( _4018_psp,_4031_i )] ),(int)1 )] - _ptr__4001_wi32[safe_add( _4008_ptr,_ptr__4021_xi64[safe_add( _4018_psp,_4031_i )] )]) );
            }
          }
        }
      }
    }
  }
  int64_t _4032_rsz = (int)1;
  int32_t _10844_ = (int)0;
  int32_t _10845_ = _4004_nd;
  for (int32_t _4033_i = _10844_; _4033_i < _10845_; ++_4033_i)
  {
    {
      _4032_rsz *= _ptr__4001_wi32[safe_add( _4010_shape,_4033_i )];
    }
  }
  bool _4034_rhassp = (_4024_rnelem < _4032_rsz);
  _3998_rs->alloc_expr(_4022_rnd,_4024_rnelem,_4023_rnnz,_4034_rhassp,_4025_rncodeatom);
  int32_t _4035_rptr = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->ptr_base;
  int32_t _4036_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->nidxs_base;
  int32_t _10846_;
  bool _10847_ = _4034_rhassp;
  if (_10847_)
  {
    _10846_ = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->sp_base;
  }
  else
  {
    _10846_ = _3998_rs->alloci64(_4024_rnelem);
  }
  int32_t _4037_rsp = _10846_;
  int32_t _4038_rcof = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->cof_base;
  bool _4039_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->hassp;
  int32_t _4040_rshape = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->shape_base;
  int32_t _4041_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->codeptr_base;
  int32_t _4042_rcode = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->code_base;
  int32_t _4043_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4044_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4044_ri64(_4044_ri64 ? _4044_ri64->raw() : nullptr,_4044_ri64 ? _4044_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4045_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->f64;
  _checked_ptr_1<double> _ptr__4045_rf64(_4045_rf64 ? _4045_rf64->raw() : nullptr,_4045_rf64 ? _4045_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4046_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3998_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4046_ri32(_4046_ri32 ? _4046_ri32->raw() : nullptr,_4046_ri32 ? _4046_ri32->size(0) : 0);
  int32_t _10848_ = (int)0;
  int32_t _10849_ = _4004_nd;
  for (int32_t _4047_i = _10848_; _4047_i < _10849_; ++_4047_i)
  {
    {
      _ptr__4046_ri32[safe_add( _4040_rshape,_4047_i )] = _ptr__4001_wi32[safe_add( _4010_shape,_4047_i )];
    }
  }
  _ptr__4046_ri32[_4035_rptr] = (int)0;
  if ((_4025_rncodeatom > (int)0))
  {
    {
      _ptr__4046_ri32[_4041_rcodeptr] = (int)0;
    }
  }
  {}
  if (_4007_hassp)
  {
    {
      int32_t _4048_codei = (int)0;
      int32_t _4049_nzi = (int)0;
      int32_t _4050_elmi = (int)0;
      int32_t _4051_ei = (int)0;
      int32_t _4052_pi = (int)0;
      while ( ((_4051_ei < _4005_nelem) && (_4052_pi < _4017_pnnz)) )
      {
        {
          if ((_ptr__4002_wi64[safe_add( _4011_sp,_4051_ei )] < _ptr__4021_xi64[safe_add( _4018_psp,_4052_pi )]))
          {
            {
              ++ _4051_ei;
            }
          }
          else if((_ptr__4002_wi64[safe_add( _4011_sp,_4051_ei )] > _ptr__4021_xi64[safe_add( _4018_psp,_4052_pi )]))
          {
            {
              ++ _4052_pi;
            }
          }
          else
          {
            {
              int32_t _10850_ = _ptr__4001_wi32[safe_add( _4008_ptr,_4051_ei )];
              int32_t _10851_ = _ptr__4001_wi32[safe_add( safe_add( _4008_ptr,_4051_ei ),(int)1 )];
              for (int32_t _4053_i = _10850_; _4053_i < _10851_; ++_4053_i)
              {
                {
                  _ptr__4044_ri64[safe_add( _4036_rnidxs,_4049_nzi )] = _ptr__4002_wi64[safe_add( _4012_nidxs,_4053_i )];
                  _ptr__4045_rf64[safe_add( _4038_rcof,_4049_nzi )] = 0.0;
                  _ptr__4046_ri32[safe_add( _4042_rcode,_4048_codei )] = 2;
                  _ptr__4045_rf64[safe_add( _4043_rcconst,_4048_codei )] = _ptr__4003_wf64[safe_add( _4013_cof,_4053_i )];
                  ++ _4048_codei;
                  if ((_4009_ncodeatom > (int)0))
                  {
                    {
                      int32_t _10852_ = _ptr__4001_wi32[safe_add( _4015_codeptr,_4053_i )];
                      int32_t _10853_ = _ptr__4001_wi32[safe_add( safe_add( _4015_codeptr,_4053_i ),(int)1 )];
                      for (int32_t _4054_k = _10852_; _4054_k < _10853_; ++_4054_k)
                      {
                        {
                          _ptr__4046_ri32[safe_add( _4042_rcode,_4048_codei )] = _ptr__4001_wi32[safe_add( _4016_code,_4054_k )];
                          _ptr__4045_rf64[safe_add( _4043_rcconst,_4048_codei )] = _ptr__4003_wf64[safe_add( _4014_cconst,_4054_k )];
                          ++ _4048_codei;
                        }
                      }
                      _ptr__4046_ri32[safe_add( _4042_rcode,_4048_codei )] = 3;
                      ++ _4048_codei;
                    }
                  }
                  {}
                  _ptr__4046_ri32[safe_add( _4042_rcode,_4048_codei )] = 1;
                  _ptr__4045_rf64[safe_add( _4043_rcconst,_4048_codei )] = _ptr__4020_xi32[safe_add( _4019_pidxs,_4052_pi )];
                  ++ _4048_codei;
                  _ptr__4046_ri32[safe_add( _4042_rcode,_4048_codei )] = 5;
                  ++ _4048_codei;
                  _ptr__4046_ri32[safe_add( safe_add( _4041_rcodeptr,_4049_nzi ),(int)1 )] = _4048_codei;
                  ++ _4049_nzi;
                }
              }
              _ptr__4044_ri64[safe_add( _4037_rsp,_4050_elmi )] = _ptr__4002_wi64[safe_add( _4011_sp,_4051_ei )];
              _ptr__4046_ri32[safe_add( safe_add( _4035_rptr,_4050_elmi ),(int)1 )] = _4049_nzi;
              ++ _4050_elmi;
              ++ _4051_ei;
              ++ _4052_pi;
            }
          }
        }
      }
      if ((_4050_elmi != _4024_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_4049_nzi != _4023_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_4048_codei != _4025_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _4055_codei = (int)0;
      int32_t _4056_nzi = (int)0;
      int32_t _10854_ = (int)0;
      int32_t _10855_ = _4017_pnnz;
      for (int32_t _4057_pi = _10854_; _4057_pi < _10855_; ++_4057_pi)
      {
        {
          int32_t _4058_elmi = _4057_pi;
          int64_t _4059_ei = _ptr__4021_xi64[safe_add( _4018_psp,_4057_pi )];
          int32_t _10856_ = _ptr__4001_wi32[safe_add( _4008_ptr,_4059_ei )];
          int32_t _10857_ = _ptr__4001_wi32[safe_add( safe_add( _4008_ptr,_4059_ei ),(int)1 )];
          for (int32_t _4060_i = _10856_; _4060_i < _10857_; ++_4060_i)
          {
            {
              _ptr__4044_ri64[safe_add( _4036_rnidxs,_4056_nzi )] = _ptr__4002_wi64[safe_add( _4012_nidxs,_4060_i )];
              _ptr__4045_rf64[safe_add( _4038_rcof,_4056_nzi )] = 0.0;
              _ptr__4046_ri32[safe_add( _4042_rcode,_4055_codei )] = 2;
              _ptr__4045_rf64[safe_add( _4043_rcconst,_4055_codei )] = _ptr__4003_wf64[safe_add( _4013_cof,_4060_i )];
              ++ _4055_codei;
              if ((_4009_ncodeatom > (int)0))
              {
                {
                  int32_t _10858_ = _ptr__4001_wi32[safe_add( _4015_codeptr,_4060_i )];
                  int32_t _10859_ = _ptr__4001_wi32[safe_add( safe_add( _4015_codeptr,_4060_i ),(int)1 )];
                  for (int32_t _4061_k = _10858_; _4061_k < _10859_; ++_4061_k)
                  {
                    {
                      _ptr__4046_ri32[safe_add( _4042_rcode,_4055_codei )] = _ptr__4001_wi32[safe_add( _4016_code,_4061_k )];
                      _ptr__4045_rf64[safe_add( _4043_rcconst,_4055_codei )] = _ptr__4003_wf64[safe_add( _4014_cconst,_4061_k )];
                      ++ _4055_codei;
                    }
                  }
                  _ptr__4046_ri32[safe_add( _4042_rcode,_4055_codei )] = 3;
                  ++ _4055_codei;
                }
              }
              {}
              _ptr__4046_ri32[safe_add( _4042_rcode,_4055_codei )] = 1;
              _ptr__4045_rf64[safe_add( _4043_rcconst,_4055_codei )] = _ptr__4020_xi32[safe_add( _4019_pidxs,_4057_pi )];
              ++ _4055_codei;
              _ptr__4046_ri32[safe_add( _4042_rcode,_4055_codei )] = 5;
              ++ _4055_codei;
              _ptr__4046_ri32[safe_add( safe_add( _4041_rcodeptr,_4056_nzi ),(int)1 )] = _4055_codei;
              ++ _4056_nzi;
            }
          }
          _ptr__4044_ri64[safe_add( _4037_rsp,_4058_elmi )] = _4059_ei;
          _ptr__4046_ri32[safe_add( safe_add( _4035_rptr,_4058_elmi ),(int)1 )] = _4056_nzi;
        }
      }
      if ((_4025_rncodeatom != _4055_codei))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Invalid code list result"));
        }
      }
      {}
    }
  }
  if ((!_4039_rhassp))
  {
    {
      _3998_rs->popi64(_4024_rnelem);
    }
  }
  {}
  _4000_xs->clear();
}
// End mosek.fusion.ExprMulParamElem.eval

// Begin mosek.fusion.ExprMulParamElem.toString
// Method mosek.fusion.ExprMulParamElem.toString @ src/fusion/Parameter.monty:1330:6-154
std::string mosek::fusion::ExprMulParamElem :: toString() { return mosek::fusion::p_ExprMulParamElem::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamElem::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamElem("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamElem.toString

void mosek::fusion::p_ExprMulParamElem::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamElem::destroy() { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->destroy(); }
// } class ExprMulParamElem
// class ExprMulParamRight { // @ src/fusion/Parameter.monty:932:4-1310:5
mosek::fusion::ExprMulParamRight::ExprMulParamRight(mosek::fusion::p_ExprMulParamRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamRight()" << this << std::endl; */ }
mosek::fusion::ExprMulParamRight::~ExprMulParamRight() {  /* std::cout << "~ExprMulParamRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamRight::p_ExprMulParamRight
  (::mosek::fusion::ExprMulParamRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamRight.ctor @ src/fusion/Parameter.monty:936:6-945:7
mosek::fusion::ExprMulParamRight::t mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _4062_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _4063_p)
{ return new mosek::fusion::ExprMulParamRight(_4062_e,_4063_p); }
mosek::fusion::ExprMulParamRight::ExprMulParamRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _4062_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _4063_p) : 
   ExprMulParamRight(new mosek::fusion::p_ExprMulParamRight(this))
{ mosek::fusion::p_ExprMulParamRight::_get_impl(this)->_initialize(_4062_e,_4063_p); }
void mosek::fusion::p_ExprMulParamRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4062_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _4063_p)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_4062_e->getDim((int)0)),(int32_t)(_4063_p->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->p = _4063_p;
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->e = _4062_e;
    if (((_4063_p->getND() != (int)2) || (_4062_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_4063_p->getDim((int)0) != _4062_e->getDim((int)1)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamRight.ctor

// Begin mosek.fusion.ExprMulParamRight.eval
// Method mosek.fusion.ExprMulParamRight.eval @ src/fusion/Parameter.monty:949:6-1309:7
void mosek::fusion::ExprMulParamRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4064_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4065_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4066_xs) { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->eval(_4064_rs,_4065_ws,_4066_xs); }
void mosek::fusion::p_ExprMulParamRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4064_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4065_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4066_xs)
{
  e->eval(_4065_ws,_4064_rs,_4066_xs);
  _4065_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4067_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4067_wi32(_4067_wi32 ? _4067_wi32->raw() : nullptr,_4067_wi32 ? _4067_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4068_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4068_wi64(_4068_wi64 ? _4068_wi64->raw() : nullptr,_4068_wi64 ? _4068_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4069_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->f64;
  _checked_ptr_1<double> _ptr__4069_wf64(_4069_wf64 ? _4069_wf64->raw() : nullptr,_4069_wf64 ? _4069_wf64->size(0) : 0);
  int32_t _4070_nd = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->nd;
  int32_t _4071_nelem = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->nelem;
  int32_t _4072_nnz = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->nnz;
  bool _4073_hassp = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->hassp;
  int32_t _4074_ptr = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->ptr_base;
  int32_t _4075_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->ncodeatom;
  int32_t _4076_shape = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->shape_base;
  int32_t _4077_sp = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->sp_base;
  int32_t _4078_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->nidxs_base;
  int32_t _4079_cof = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->cof_base;
  int32_t _4080_cconst = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->cconst_base;
  int32_t _4081_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->codeptr_base;
  int32_t _4082_code = mosek::fusion::p_WorkStack::_get_impl(_4065_ws)->code_base;
  if (((_4070_nd != (int)2) || (p->getDim((int)0) != _ptr__4067_wi32[safe_add( _4076_shape,(int)1 )])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int32_t _4083_edim0 = _ptr__4067_wi32[_4076_shape];
  int32_t _4084_edim1 = _ptr__4067_wi32[safe_add( _4076_shape,(int)1 )];
  int32_t _4085_pdim0 = p->getDim((int)0);
  int32_t _4086_pdim1 = p->getDim((int)1);
  int32_t _4087_pnnz = p->getNumNonzero();
  int32_t _4088_pidxs = _4066_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4089_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4066_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4089_xi32(_4089_xi32 ? _4089_xi32->raw() : nullptr,_4089_xi32 ? _4089_xi32->size(0) : 0);
  p->getAllIndexes(_4089_xi32,_4088_pidxs);
  int32_t _4090_pperm = _4066_xs->alloci32(_4087_pnnz);
  int32_t _4091_psp = _4066_xs->alloci64(_4087_pnnz);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_4066_xs)->i64,_4091_psp);
  {
    int32_t _4092_pptr = _4066_xs->alloci32(safe_add( _4086_pdim1,(int)1 ));
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4093_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4066_xs)->i32;
    _checked_ptr_1<int32_t> _ptr__4093_xi32(_4093_xi32 ? _4093_xi32->raw() : nullptr,_4093_xi32 ? _4093_xi32->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4094_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4066_xs)->i64;
    _checked_ptr_1<int64_t> _ptr__4094_xi64(_4094_xi64 ? _4094_xi64->raw() : nullptr,_4094_xi64 ? _4094_xi64->size(0) : 0);
    int32_t _10860_ = (int)0;
    int32_t _10861_ = safe_add( _4086_pdim1,(int)1 );
    for (int32_t _4095_i = _10860_; _4095_i < _10861_; ++_4095_i)
    {
      {
        _ptr__4093_xi32[safe_add( _4092_pptr,_4095_i )] = (int)0;
      }
    }
    int32_t _10862_ = (int)0;
    int32_t _10863_ = _4087_pnnz;
    for (int32_t _4096_i = _10862_; _4096_i < _10863_; ++_4096_i)
    {
      {
        ++ _ptr__4093_xi32[safe_add( safe_add( _4092_pptr,(_ptr__4094_xi64[safe_add( _4091_psp,_4096_i )] % _4086_pdim1) ),(int)1 )];
      }
    }
    int32_t _10864_ = (int)0;
    int32_t _10865_ = _4086_pdim1;
    for (int32_t _4097_i = _10864_; _4097_i < _10865_; ++_4097_i)
    {
      {
        _ptr__4093_xi32[safe_add( safe_add( _4092_pptr,_4097_i ),(int)1 )] += _ptr__4093_xi32[safe_add( _4092_pptr,_4097_i )];
      }
    }
    int32_t _10866_ = (int)0;
    int32_t _10867_ = _4087_pnnz;
    for (int32_t _4098_i = _10866_; _4098_i < _10867_; ++_4098_i)
    {
      {
        _ptr__4093_xi32[safe_add( _4090_pperm,_ptr__4093_xi32[safe_add( _4092_pptr,(_ptr__4094_xi64[safe_add( _4091_psp,_4098_i )] % _4086_pdim1) )] )] = _4098_i;
        ++ _ptr__4093_xi32[safe_add( _4092_pptr,(_ptr__4094_xi64[safe_add( _4091_psp,_4098_i )] % _4086_pdim1) )];
      }
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4099_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4066_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4099_xi32(_4099_xi32 ? _4099_xi32->raw() : nullptr,_4099_xi32 ? _4099_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4100_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4066_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__4100_xi64(_4100_xi64 ? _4100_xi64->raw() : nullptr,_4100_xi64 ? _4100_xi64->size(0) : 0);
  int32_t _4101_rncodeatom = (int)0;
  int32_t _4102_rnelem = (int)0;
  int32_t _4103_rnnz = (int)0;
  if (((!p->isSparse()) && (!_4073_hassp)))
  {
    {
      _4103_rnnz = safe_mul( _4072_nnz,_4086_pdim1 );
      _4102_rnelem = safe_mul( _4083_edim0,_4086_pdim1 );
      int32_t _10868_;
      bool _10869_ = (_4075_ncodeatom > (int)0);
      if (_10869_)
      {
        _10868_ = safe_mul( safe_add( _4075_ncodeatom,safe_mul( _4072_nnz,(int)4 ) ),_4086_pdim1 );
      }
      else
      {
        _10868_ = safe_mul( safe_mul( _4072_nnz,_4086_pdim1 ),(int)3 );
      }
      _4101_rncodeatom = _10868_;
    }
  }
  else if((!_4073_hassp))
  {
    {
      int32_t _4104_i1 = (int)0;
      while ( (_4104_i1 < _4087_pnnz) )
      {
        {
          int64_t _4105_psubj = (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4104_i1 )] )] % _4086_pdim1);
          int32_t _4106_b1 = _4104_i1;
          while ( ((_4104_i1 < _4087_pnnz) && ((_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4104_i1 )] )] % _4086_pdim1) == _4105_psubj)) )
          {
            {
              int64_t _4107_psubi = (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4104_i1 )] )] / _4086_pdim1);
              int32_t _10870_ = (int)0;
              int32_t _10871_ = _4083_edim0;
              for (int32_t _4108_i0 = _10870_; _4108_i0 < _10871_; ++_4108_i0)
              {
                {
                  int64_t _4109_eidx = safe_add( safe_mul( _4108_i0,_4084_edim1 ),_4107_psubi );
                  int32_t _4110_n = (_ptr__4067_wi32[safe_add( safe_add( _4074_ptr,_4109_eidx ),(int)1 )] - _ptr__4067_wi32[safe_add( _4074_ptr,_4109_eidx )]);
                  _4103_rnnz += _4110_n;
                  int32_t _10872_;
                  bool _10873_ = (_4075_ncodeatom > (int)0);
                  if (_10873_)
                  {
                    _10872_ = safe_add( (_ptr__4067_wi32[safe_add( _4081_codeptr,_ptr__4067_wi32[safe_add( safe_add( _4074_ptr,_4109_eidx ),(int)1 )] )] - _ptr__4067_wi32[safe_add( _4081_codeptr,_ptr__4067_wi32[safe_add( _4074_ptr,_4109_eidx )] )]),safe_mul( _4110_n,(int)4 ) );
                  }
                  else
                  {
                    _10872_ = safe_mul( _4110_n,(int)3 );
                  }
                  _4101_rncodeatom += _10872_;
                }
              }
              ++ _4104_i1;
            }
          }
          _4102_rnelem += _4083_edim0;
        }
      }
    }
  }
  else
  {
    {
      int32_t _4111_i0 = (int)0;
      while ( (_4111_i0 < _4071_nelem) )
      {
        {
          int64_t _4112_erow = (_ptr__4068_wi64[safe_add( _4077_sp,_4111_i0 )] / _4084_edim1);
          int32_t _4113_b0 = _4111_i0;
          int64_t _4114_rowend = safe_mul( safe_add( _4112_erow,(int)1 ),_4084_edim1 );
          while ( ((_4111_i0 < _4071_nelem) && (_ptr__4068_wi64[safe_add( _4077_sp,_4111_i0 )] < _4114_rowend)) )
          {
            {
              ++ _4111_i0;
            }
          }
          int32_t _4115_i1 = (int)0;
          while ( (_4115_i1 < _4087_pnnz) )
          {
            {
              int64_t _4116_pcol = (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4115_i1 )] )] % _4086_pdim1);
              int32_t _4117_b1 = _4115_i1;
              while ( ((_4115_i1 < _4087_pnnz) && (_4116_pcol == (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4115_i1 )] )] % _4086_pdim1))) )
              {
                {
                  ++ _4115_i1;
                }
              }
              int32_t _4118_nentryelm = (int)0;
              int32_t _4119_ii1 = _4117_b1;
              int32_t _4120_ii0 = _4113_b0;
              while ( ((_4120_ii0 < _4111_i0) && (_4119_ii1 < _4115_i1)) )
              {
                {
                  int64_t _4121_ecol = (_ptr__4068_wi64[safe_add( _4077_sp,_4120_ii0 )] % _4084_edim1);
                  int64_t _4122_prow = (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4119_ii1 )] )] / _4086_pdim1);
                  if ((_4121_ecol < _4122_prow))
                  {
                    {
                      ++ _4120_ii0;
                    }
                  }
                  else if((_4121_ecol > _4122_prow))
                  {
                    {
                      ++ _4119_ii1;
                    }
                  }
                  else
                  {
                    {
                      int32_t _4123_n = (_ptr__4067_wi32[safe_add( safe_add( _4074_ptr,_4120_ii0 ),(int)1 )] - _ptr__4067_wi32[safe_add( _4074_ptr,_4120_ii0 )]);
                      _4103_rnnz += _4123_n;
                      int32_t _10874_;
                      bool _10875_ = (_4075_ncodeatom > (int)0);
                      if (_10875_)
                      {
                        _10874_ = safe_add( (_ptr__4067_wi32[safe_add( _4081_codeptr,_ptr__4067_wi32[safe_add( safe_add( _4074_ptr,_4120_ii0 ),(int)1 )] )] - _ptr__4067_wi32[safe_add( _4081_codeptr,_ptr__4067_wi32[safe_add( _4074_ptr,_4120_ii0 )] )]),safe_mul( _4123_n,(int)4 ) );
                      }
                      else
                      {
                        _10874_ = safe_mul( _4123_n,(int)3 );
                      }
                      _4101_rncodeatom += _10874_;
                      ++ _4120_ii0;
                      ++ _4119_ii1;
                      ++ _4118_nentryelm;
                    }
                  }
                }
              }
              if ((_4118_nentryelm > (int)0))
              {
                {
                  ++ _4102_rnelem;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  int32_t _4124_rnd = (int)2;
  bool _4125_rhassp = (_4102_rnelem < safe_mul( _4086_pdim1,_4083_edim0 ));
  _4064_rs->alloc_expr(_4124_rnd,_4102_rnelem,_4103_rnnz,_4125_rhassp,_4101_rncodeatom);
  int32_t _4126_rptr = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->ptr_base;
  int32_t _4127_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->nidxs_base;
  int32_t _10876_;
  bool _10877_ = _4125_rhassp;
  if (_10877_)
  {
    _10876_ = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->sp_base;
  }
  else
  {
    _10876_ = _4064_rs->alloci64(_4102_rnelem);
  }
  int32_t _4128_rsp = _10876_;
  int32_t _4129_rcof = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->cof_base;
  bool _4130_rhassp = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->hassp;
  int32_t _4131_rshape = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->shape_base;
  int32_t _4132_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->codeptr_base;
  int32_t _4133_rcode = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->code_base;
  int32_t _4134_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4135_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4135_ri64(_4135_ri64 ? _4135_ri64->raw() : nullptr,_4135_ri64 ? _4135_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4136_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->f64;
  _checked_ptr_1<double> _ptr__4136_rf64(_4136_rf64 ? _4136_rf64->raw() : nullptr,_4136_rf64 ? _4136_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4137_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4064_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4137_ri32(_4137_ri32 ? _4137_ri32->raw() : nullptr,_4137_ri32 ? _4137_ri32->size(0) : 0);
  _ptr__4137_ri32[_4126_rptr] = (int)0;
  if ((_4101_rncodeatom > (int)0))
  {
    {
      _ptr__4137_ri32[_4132_rcodeptr] = (int)0;
    }
  }
  {}
  _ptr__4137_ri32[_4131_rshape] = _4083_edim0;
  _ptr__4137_ri32[safe_add( _4131_rshape,(int)1 )] = _4086_pdim1;
  int32_t _4138_codei = (int)0;
  int32_t _4139_elmi = (int)0;
  int32_t _4140_nzi = (int)0;
  if ((!_4073_hassp))
  {
    {
      int32_t _10878_ = (int)0;
      int32_t _10879_ = _4083_edim0;
      for (int32_t _4141_i = _10878_; _4141_i < _10879_; ++_4141_i)
      {
        {
          int32_t _4142_i1 = (int)0;
          while ( (_4142_i1 < _4087_pnnz) )
          {
            {
              int32_t _4143_b1 = _4142_i1;
              int64_t _4144_psubj = (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4142_i1 )] )] % _4086_pdim1);
              while ( ((_4142_i1 < _4087_pnnz) && (_4144_psubj == (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4142_i1 )] )] % _4086_pdim1))) )
              {
                {
                  ++ _4142_i1;
                }
              }
              int32_t _4145_ii1 = _4143_b1;
              while ( (_4145_ii1 < _4142_i1) )
              {
                {
                  int64_t _4146_psubi = (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4145_ii1 )] )] / _4086_pdim1);
                  int64_t _4147_eidx = safe_add( safe_mul( _4141_i,_4084_edim1 ),_4146_psubi );
                  int32_t _4148_pidx = _ptr__4099_xi32[safe_add( _4088_pidxs,_ptr__4099_xi32[safe_add( _4090_pperm,_4145_ii1 )] )];
                  int32_t _10880_ = _ptr__4067_wi32[safe_add( _4074_ptr,_4147_eidx )];
                  int32_t _10881_ = _ptr__4067_wi32[safe_add( safe_add( _4074_ptr,_4147_eidx ),(int)1 )];
                  for (int32_t _4149_k = _10880_; _4149_k < _10881_; ++_4149_k)
                  {
                    {
                      _ptr__4135_ri64[safe_add( _4127_rnidxs,_4140_nzi )] = _ptr__4068_wi64[safe_add( _4078_nidxs,_4149_k )];
                      _ptr__4136_rf64[safe_add( _4129_rcof,_4140_nzi )] = (int)0;
                      _ptr__4137_ri32[safe_add( _4133_rcode,_4138_codei )] = 2;
                      _ptr__4136_rf64[safe_add( _4134_rcconst,_4138_codei )] = _ptr__4069_wf64[safe_add( _4079_cof,_4149_k )];
                      ++ _4138_codei;
                      if ((_4075_ncodeatom > (int)0))
                      {
                        {
                          int32_t _10882_ = _ptr__4067_wi32[safe_add( _4081_codeptr,_4149_k )];
                          int32_t _10883_ = _ptr__4067_wi32[safe_add( safe_add( _4081_codeptr,_4149_k ),(int)1 )];
                          for (int32_t _4150_l = _10882_; _4150_l < _10883_; ++_4150_l)
                          {
                            {
                              _ptr__4137_ri32[safe_add( _4133_rcode,_4138_codei )] = _ptr__4067_wi32[safe_add( _4082_code,_4150_l )];
                              _ptr__4136_rf64[safe_add( _4134_rcconst,_4138_codei )] = _ptr__4069_wf64[safe_add( _4080_cconst,_4150_l )];
                              ++ _4138_codei;
                            }
                          }
                          _ptr__4137_ri32[safe_add( _4133_rcode,_4138_codei )] = 3;
                          ++ _4138_codei;
                        }
                      }
                      {}
                      _ptr__4137_ri32[safe_add( _4133_rcode,_4138_codei )] = 1;
                      _ptr__4136_rf64[safe_add( _4134_rcconst,_4138_codei )] = _4148_pidx;
                      ++ _4138_codei;
                      _ptr__4137_ri32[safe_add( _4133_rcode,_4138_codei )] = 5;
                      ++ _4138_codei;
                      _ptr__4137_ri32[safe_add( safe_add( _4132_rcodeptr,_4140_nzi ),(int)1 )] = _4138_codei;
                      ++ _4140_nzi;
                    }
                  }
                  ++ _4145_ii1;
                }
              }
              _ptr__4137_ri32[safe_add( safe_add( _4126_rptr,_4139_elmi ),(int)1 )] = _4140_nzi;
              _ptr__4135_ri64[safe_add( _4128_rsp,_4139_elmi )] = safe_add( safe_mul( _4141_i,_4086_pdim1 ),_4144_psubj );
              ++ _4139_elmi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _4151_i0 = (int)0;
      while ( (_4151_i0 < _4071_nelem) )
      {
        {
          int64_t _4152_erow = (_ptr__4068_wi64[safe_add( _4077_sp,_4151_i0 )] / _4084_edim1);
          int32_t _4153_b0 = _4151_i0;
          int64_t _4154_rowend = safe_mul( safe_add( _4152_erow,(int)1 ),_4084_edim1 );
          while ( ((_4151_i0 < _4071_nelem) && (_ptr__4068_wi64[safe_add( _4077_sp,_4151_i0 )] < _4154_rowend)) )
          {
            {
              ++ _4151_i0;
            }
          }
          int32_t _4155_i1 = (int)0;
          while ( (_4155_i1 < _4087_pnnz) )
          {
            {
              int64_t _4156_pcol = (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4155_i1 )] )] % _4086_pdim1);
              int32_t _4157_b1 = _4155_i1;
              while ( ((_4155_i1 < _4087_pnnz) && (_4156_pcol == (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4155_i1 )] )] % _4086_pdim1))) )
              {
                {
                  ++ _4155_i1;
                }
              }
              int32_t _4158_nentryelm = (int)0;
              int32_t _4159_ii1 = _4157_b1;
              int32_t _4160_ii0 = _4153_b0;
              while ( ((_4160_ii0 < _4151_i0) && (_4159_ii1 < _4155_i1)) )
              {
                {
                  int64_t _4161_ecol = (_ptr__4068_wi64[safe_add( _4077_sp,_4160_ii0 )] % _4084_edim1);
                  int64_t _4162_prow = (_ptr__4100_xi64[safe_add( _4091_psp,_ptr__4099_xi32[safe_add( _4090_pperm,_4159_ii1 )] )] / _4086_pdim1);
                  if ((_4161_ecol < _4162_prow))
                  {
                    {
                      ++ _4160_ii0;
                    }
                  }
                  else if((_4161_ecol > _4162_prow))
                  {
                    {
                      ++ _4159_ii1;
                    }
                  }
                  else
                  {
                    {
                      int32_t _4163_pidx = _ptr__4099_xi32[safe_add( _4088_pidxs,_ptr__4099_xi32[safe_add( _4090_pperm,_4159_ii1 )] )];
                      int32_t _10884_ = _ptr__4067_wi32[safe_add( _4074_ptr,_4160_ii0 )];
                      int32_t _10885_ = _ptr__4067_wi32[safe_add( safe_add( _4074_ptr,_4160_ii0 ),(int)1 )];
                      for (int32_t _4164_k = _10884_; _4164_k < _10885_; ++_4164_k)
                      {
                        {
                          _ptr__4135_ri64[safe_add( _4127_rnidxs,_4140_nzi )] = _ptr__4068_wi64[safe_add( _4078_nidxs,_4164_k )];
                          _ptr__4136_rf64[safe_add( _4129_rcof,_4140_nzi )] = (int)0;
                          _ptr__4137_ri32[safe_add( _4133_rcode,_4138_codei )] = 2;
                          _ptr__4136_rf64[safe_add( _4134_rcconst,_4138_codei )] = _ptr__4069_wf64[safe_add( _4079_cof,_4164_k )];
                          ++ _4138_codei;
                          if ((_4075_ncodeatom > (int)0))
                          {
                            {
                              int32_t _10886_ = _ptr__4067_wi32[safe_add( _4081_codeptr,_4164_k )];
                              int32_t _10887_ = _ptr__4067_wi32[safe_add( safe_add( _4081_codeptr,_4164_k ),(int)1 )];
                              for (int32_t _4165_l = _10886_; _4165_l < _10887_; ++_4165_l)
                              {
                                {
                                  _ptr__4137_ri32[safe_add( _4133_rcode,_4138_codei )] = _ptr__4067_wi32[safe_add( _4082_code,_4165_l )];
                                  _ptr__4136_rf64[safe_add( _4134_rcconst,_4138_codei )] = _ptr__4069_wf64[safe_add( _4080_cconst,_4165_l )];
                                  ++ _4138_codei;
                                }
                              }
                              _ptr__4137_ri32[safe_add( _4133_rcode,_4138_codei )] = 3;
                              ++ _4138_codei;
                            }
                          }
                          {}
                          _ptr__4137_ri32[safe_add( _4133_rcode,_4138_codei )] = 1;
                          _ptr__4136_rf64[safe_add( _4134_rcconst,_4138_codei )] = _4163_pidx;
                          ++ _4138_codei;
                          _ptr__4137_ri32[safe_add( _4133_rcode,_4138_codei )] = 5;
                          ++ _4138_codei;
                          _ptr__4137_ri32[safe_add( safe_add( _4132_rcodeptr,_4140_nzi ),(int)1 )] = _4138_codei;
                          ++ _4140_nzi;
                        }
                      }
                      ++ _4160_ii0;
                      ++ _4159_ii1;
                      ++ _4158_nentryelm;
                    }
                  }
                }
              }
              if ((_4158_nentryelm > (int)0))
              {
                {
                  _ptr__4137_ri32[safe_add( safe_add( _4126_rptr,_4139_elmi ),(int)1 )] = _4140_nzi;
                  _ptr__4135_ri64[safe_add( _4128_rsp,_4139_elmi )] = safe_add( safe_mul( _4152_erow,_4086_pdim1 ),_4156_pcol );
                  ++ _4139_elmi;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if ((!_4130_rhassp))
  {
    {
      _4064_rs->popi64(_4102_rnelem);
    }
  }
  {}
  if ((_4139_elmi != _4102_rnelem))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken elmi"));
    }
  }
  {}
  if ((_4140_nzi != _4103_rnnz))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken nzi"));
    }
  }
  {}
  if ((_4138_codei != _4101_rncodeatom))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken codei"));
    }
  }
  {}
  _4066_xs->clear();
}
// End mosek.fusion.ExprMulParamRight.eval

// Begin mosek.fusion.ExprMulParamRight.toString
// Method mosek.fusion.ExprMulParamRight.toString @ src/fusion/Parameter.monty:947:6-155
std::string mosek::fusion::ExprMulParamRight :: toString() { return mosek::fusion::p_ExprMulParamRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamRight.toString

void mosek::fusion::p_ExprMulParamRight::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamRight::destroy() { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->destroy(); }
// } class ExprMulParamRight
// class ExprMulParamLeft { // @ src/fusion/Parameter.monty:437:4-927:5
mosek::fusion::ExprMulParamLeft::ExprMulParamLeft(mosek::fusion::p_ExprMulParamLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulParamLeft::~ExprMulParamLeft() {  /* std::cout << "~ExprMulParamLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamLeft::p_ExprMulParamLeft
  (::mosek::fusion::ExprMulParamLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamLeft.ctor @ src/fusion/Parameter.monty:441:6-450:7
mosek::fusion::ExprMulParamLeft::t mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _4166_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4167_e)
{ return new mosek::fusion::ExprMulParamLeft(_4166_p,_4167_e); }
mosek::fusion::ExprMulParamLeft::ExprMulParamLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _4166_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4167_e) : 
   ExprMulParamLeft(new mosek::fusion::p_ExprMulParamLeft(this))
{ mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->_initialize(_4166_p,_4167_e); }
void mosek::fusion::p_ExprMulParamLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _4166_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4167_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_4166_p->getDim((int)0)),(int32_t)(_4167_e->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->p = _4166_p;
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->e = _4167_e;
    if (((_4166_p->getND() != (int)2) || (_4167_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_4166_p->getDim((int)1) != _4167_e->getDim((int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamLeft.ctor

// Begin mosek.fusion.ExprMulParamLeft.eval
// Method mosek.fusion.ExprMulParamLeft.eval @ src/fusion/Parameter.monty:454:6-926:7
void mosek::fusion::ExprMulParamLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4168_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4169_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4170_xs) { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->eval(_4168_rs,_4169_ws,_4170_xs); }
void mosek::fusion::p_ExprMulParamLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4168_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4169_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4170_xs)
{
  e->eval(_4169_ws,_4168_rs,_4170_xs);
  _4169_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4171_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4171_wi32(_4171_wi32 ? _4171_wi32->raw() : nullptr,_4171_wi32 ? _4171_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4172_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4172_wi64(_4172_wi64 ? _4172_wi64->raw() : nullptr,_4172_wi64 ? _4172_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4173_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->f64;
  _checked_ptr_1<double> _ptr__4173_wf64(_4173_wf64 ? _4173_wf64->raw() : nullptr,_4173_wf64 ? _4173_wf64->size(0) : 0);
  int32_t _4174_nd = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->nd;
  int32_t _4175_nelem = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->nelem;
  int32_t _4176_nnz = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->nnz;
  bool _4177_hassp = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->hassp;
  int32_t _4178_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->ncodeatom;
  int32_t _4179_ptr = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->ptr_base;
  int32_t _4180_code = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->code_base;
  int32_t _4181_cconst = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->cconst_base;
  int32_t _4182_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->codeptr_base;
  int32_t _4183_shape = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->shape_base;
  int32_t _4184_sp = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->sp_base;
  int32_t _4185_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->nidxs_base;
  int32_t _4186_cof = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->cof_base;
  int32_t _4187_consts = mosek::fusion::p_WorkStack::_get_impl(_4169_ws)->cconst_base;
  if (((_4174_nd != (int)2) || (_ptr__4171_wi32[_4183_shape] != p->getDim((int)1))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int32_t _4188_pdim0 = p->getDim((int)0);
  int32_t _4189_pdim1 = p->getDim((int)1);
  int32_t _4190_edim0 = _ptr__4171_wi32[_4183_shape];
  int32_t _4191_edim1 = _ptr__4171_wi32[safe_add( _4183_shape,(int)1 )];
  int32_t _4192_pnnz = p->getNumNonzero();
  int32_t _4193_pidxs = _4170_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4194_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4170_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4194_xi32(_4194_xi32 ? _4194_xi32->raw() : nullptr,_4194_xi32 ? _4194_xi32->size(0) : 0);
  p->getAllIndexes(_4194_xi32,_4193_pidxs);
  if (((!_4177_hassp) && (!p->isSparse())))
  {
    {
      int32_t _4195_rnd = (int)2;
      int32_t _4196_rnelem = safe_mul( _4191_edim1,p->getDim((int)0) );
      int32_t _4197_rnnz = safe_mul( _4176_nnz,p->getDim((int)0) );
      int32_t _10888_;
      bool _10889_ = (_4178_ncodeatom > (int)0);
      if (_10889_)
      {
        _10888_ = safe_add( safe_mul( p->getDim((int)0),_4178_ncodeatom ),safe_mul( (int)4,_4197_rnnz ) );
      }
      else
      {
        _10888_ = safe_mul( (int)3,_4197_rnnz );
      }
      int32_t _4198_rncodeatom = _10888_;
      bool _4199_rhassp = false;
      _4168_rs->alloc_expr(_4195_rnd,_4196_rnelem,_4197_rnnz,_4199_rhassp,_4198_rncodeatom);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4200_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4200_ri64(_4200_ri64 ? _4200_ri64->raw() : nullptr,_4200_ri64 ? _4200_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4201_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->f64;
      _checked_ptr_1<double> _ptr__4201_rf64(_4201_rf64 ? _4201_rf64->raw() : nullptr,_4201_rf64 ? _4201_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4202_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4202_ri32(_4202_ri32 ? _4202_ri32->raw() : nullptr,_4202_ri32 ? _4202_ri32->size(0) : 0);
      int32_t _4203_rptr = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->ptr_base;
      int32_t _4204_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->nidxs_base;
      int32_t _4205_rcof = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->cof_base;
      int32_t _4206_rcode = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->code_base;
      int32_t _4207_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->codeptr_base;
      int32_t _4208_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->cconst_base;
      bool _4209_rhassp = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->hassp;
      int32_t _4210_rshape = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->shape_base;
      _ptr__4202_ri32[_4210_rshape] = _4188_pdim0;
      _ptr__4202_ri32[safe_add( _4210_rshape,(int)1 )] = _4191_edim1;
      {
        _ptr__4202_ri32[_4203_rptr] = (int)0;
        _ptr__4202_ri32[_4207_rcodeptr] = (int)0;
        int32_t _4211_nzi = (int)0;
        int32_t _4212_elmi = (int)0;
        int32_t _4213_codei = (int)0;
        int32_t _10890_ = (int)0;
        int32_t _10891_ = p->getDim((int)0);
        for (int32_t _4214_i = _10890_; _4214_i < _10891_; ++_4214_i)
        {
          {
            int32_t _10892_ = (int)0;
            int32_t _10893_ = e->getDim((int)1);
            for (int32_t _4215_j = _10892_; _4215_j < _10893_; ++_4215_j)
            {
              {
                int32_t _10894_ = (int)0;
                int32_t _10895_ = p->getDim((int)1);
                for (int32_t _4216_k = _10894_; _4216_k < _10895_; ++_4216_k)
                {
                  {
                    int32_t _10896_ = _ptr__4171_wi32[safe_add( safe_add( _4179_ptr,safe_mul( _4216_k,_4191_edim1 ) ),_4215_j )];
                    int32_t _10897_ = _ptr__4171_wi32[safe_add( safe_add( safe_add( _4179_ptr,safe_mul( _4216_k,_4191_edim1 ) ),_4215_j ),(int)1 )];
                    for (int32_t _4217_l = _10896_; _4217_l < _10897_; ++_4217_l)
                    {
                      {
                        _ptr__4200_ri64[safe_add( _4204_rnidxs,_4211_nzi )] = _ptr__4172_wi64[safe_add( _4185_nidxs,_4217_l )];
                        _ptr__4201_rf64[safe_add( _4205_rcof,_4211_nzi )] = 0.0;
                        _ptr__4202_ri32[safe_add( _4206_rcode,_4213_codei )] = 2;
                        _ptr__4201_rf64[safe_add( _4208_rcconst,_4213_codei )] = _ptr__4173_wf64[safe_add( _4186_cof,_4217_l )];
                        ++ _4213_codei;
                        if ((_4178_ncodeatom > (int)0))
                        {
                          {
                            int32_t _10898_ = _ptr__4171_wi32[safe_add( _4182_codeptr,_4217_l )];
                            int32_t _10899_ = _ptr__4171_wi32[safe_add( safe_add( _4182_codeptr,_4217_l ),(int)1 )];
                            for (int32_t _4218_m = _10898_; _4218_m < _10899_; ++_4218_m)
                            {
                              {
                                _ptr__4202_ri32[safe_add( _4206_rcode,_4213_codei )] = _ptr__4171_wi32[safe_add( _4180_code,_4218_m )];
                                _ptr__4201_rf64[safe_add( _4208_rcconst,_4213_codei )] = _ptr__4173_wf64[safe_add( _4181_cconst,_4218_m )];
                                ++ _4213_codei;
                              }
                            }
                            _ptr__4202_ri32[safe_add( _4206_rcode,_4213_codei )] = 3;
                            ++ _4213_codei;
                          }
                        }
                        {}
                        _ptr__4202_ri32[safe_add( _4206_rcode,_4213_codei )] = 1;
                        _ptr__4201_rf64[safe_add( _4208_rcconst,_4213_codei )] = _ptr__4194_xi32[safe_add( safe_add( _4193_pidxs,safe_mul( _4214_i,_4189_pdim1 ) ),_4216_k )];
                        ++ _4213_codei;
                        _ptr__4202_ri32[safe_add( _4206_rcode,_4213_codei )] = 5;
                        ++ _4213_codei;
                        _ptr__4202_ri32[safe_add( safe_add( _4207_rcodeptr,_4211_nzi ),(int)1 )] = _4213_codei;
                        ++ _4211_nzi;
                      }
                    }
                  }
                }
                _ptr__4202_ri32[safe_add( safe_add( _4203_rptr,_4212_elmi ),(int)1 )] = _4211_nzi;
                ++ _4212_elmi;
              }
            }
          }
        }
        if ((_4213_codei != _4198_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_4211_nzi != _4197_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4212_elmi != _4196_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        int32_t _10900_ = (int)0;
        int32_t _10901_ = _4196_rnelem;
        for (int32_t _4219_i = _10900_; _4219_i < _10901_; ++_4219_i)
        {
          {
            if ((_ptr__4202_ri32[safe_add( _4203_rptr,_4219_i )] > _ptr__4202_ri32[safe_add( safe_add( _4203_rptr,_4219_i ),(int)1 )]))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr indexes"));
              }
            }
            {}
          }
        }
      }
    }
  }
  else if((!_4177_hassp))
  {
    {
      int32_t _4220_numpnz = _4175_nelem;
      int32_t _4221_pnelem = _4192_pnnz;
      int32_t _4222_xpsp = _4170_xs->alloci64(_4221_pnelem);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4223_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4170_xs)->i64;
      _checked_ptr_1<int64_t> _ptr__4223_xi64(_4223_xi64 ? _4223_xi64->raw() : nullptr,_4223_xi64 ? _4223_xi64->size(0) : 0);
      p->getSp(_4223_xi64,_4222_xpsp);
      int32_t _4224_rnelem = (int)0;
      int32_t _4225_rnnz = (int)0;
      int32_t _4226_rncodeatom = (int)0;
      {
        int32_t _4227_i0 = (int)0;
        while ( (_4227_i0 < _4192_pnnz) )
        {
          {
            int32_t _4228_ii = (int32_t)(_ptr__4223_xi64[safe_add( _4222_xpsp,_4227_i0 )] / _4189_pdim1);
            int32_t _4229_prowb = _4227_i0;
            ++ _4227_i0;
            while ( ((_4227_i0 < _4192_pnnz) && (_ptr__4223_xi64[safe_add( _4222_xpsp,_4227_i0 )] < safe_mul( safe_add( _4228_ii,(int)1 ),_4189_pdim1 ))) )
            {
              {
                ++ _4227_i0;
              }
            }
            int32_t _4230_prowe = _4227_i0;
            int32_t _10902_ = (int)0;
            int32_t _10903_ = _4191_edim1;
            for (int32_t _4231_jj = _10902_; _4231_jj < _10903_; ++_4231_jj)
            {
              {
                int32_t _10904_ = _4229_prowb;
                int32_t _10905_ = _4230_prowe;
                for (int32_t _4232_i = _10904_; _4232_i < _10905_; ++_4232_i)
                {
                  {
                    int64_t _4233_eidx = safe_add( safe_mul( (_ptr__4223_xi64[safe_add( _4222_xpsp,_4232_i )] % _4189_pdim1),_4191_edim1 ),_4231_jj );
                    int32_t _4234_n = (_ptr__4171_wi32[safe_add( safe_add( _4179_ptr,_4233_eidx ),(int)1 )] - _ptr__4171_wi32[safe_add( _4179_ptr,_4233_eidx )]);
                    _4225_rnnz += _4234_n;
                    if ((_4178_ncodeatom > (int)0))
                    {
                      {
                        _4226_rncodeatom += safe_add( (_ptr__4171_wi32[safe_add( _4182_codeptr,_ptr__4171_wi32[safe_add( safe_add( _4179_ptr,_4233_eidx ),(int)1 )] )] - _ptr__4171_wi32[safe_add( _4182_codeptr,_ptr__4171_wi32[safe_add( _4179_ptr,_4233_eidx )] )]),safe_mul( (int)4,_4234_n ) );
                      }
                    }
                    else
                    {
                      {
                        _4226_rncodeatom += safe_mul( (int)3,_4234_n );
                      }
                    }
                  }
                }
                ++ _4224_rnelem;
              }
            }
          }
        }
      }
      bool _4235_rhassp = (_4224_rnelem < safe_mul( _4188_pdim0,_4191_edim1 ));
      int32_t _4236_rnd = (int)2;
      _4168_rs->alloc_expr(_4236_rnd,_4224_rnelem,_4225_rnnz,_4235_rhassp,_4226_rncodeatom);
      int32_t _4237_rptr = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->ptr_base;
      int32_t _4238_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->nidxs_base;
      int32_t _10906_;
      bool _10907_ = _4235_rhassp;
      if (_10907_)
      {
        _10906_ = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->sp_base;
      }
      else
      {
        _10906_ = _4168_rs->alloci64(_4224_rnelem);
      }
      int32_t _4239_rsp = _10906_;
      int32_t _4240_rcof = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->cof_base;
      bool _4241_rhassp = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->hassp;
      int32_t _4242_rshape = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->shape_base;
      int32_t _4243_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->codeptr_base;
      int32_t _4244_rcode = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->code_base;
      int32_t _4245_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4246_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4246_ri64(_4246_ri64 ? _4246_ri64->raw() : nullptr,_4246_ri64 ? _4246_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4247_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->f64;
      _checked_ptr_1<double> _ptr__4247_rf64(_4247_rf64 ? _4247_rf64->raw() : nullptr,_4247_rf64 ? _4247_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4248_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4248_ri32(_4248_ri32 ? _4248_ri32->raw() : nullptr,_4248_ri32 ? _4248_ri32->size(0) : 0);
      _ptr__4248_ri32[_4242_rshape] = _4188_pdim0;
      _ptr__4248_ri32[safe_add( _4242_rshape,(int)1 )] = _4191_edim1;
      {
        int32_t _4249_nzi = (int)0;
        int32_t _4250_elmi = (int)0;
        int32_t _4251_codei = (int)0;
        if ((_4226_rncodeatom > (int)0))
        {
          {
            _ptr__4248_ri32[_4243_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__4248_ri32[_4237_rptr] = (int)0;
        int32_t _10908_ = (int)0;
        int32_t _10909_ = _4225_rnnz;
        for (int32_t _4252_i = _10908_; _4252_i < _10909_; ++_4252_i)
        {
          {
            _ptr__4247_rf64[safe_add( _4240_rcof,_4252_i )] = 0.0;
          }
        }
        int32_t _4253_i0 = (int)0;
        while ( (_4253_i0 < _4192_pnnz) )
        {
          {
            int32_t _4254_ii = (int32_t)(_ptr__4223_xi64[safe_add( _4222_xpsp,_4253_i0 )] / _4189_pdim1);
            int32_t _4255_prowb = _4253_i0;
            ++ _4253_i0;
            while ( ((_4253_i0 < _4192_pnnz) && (_ptr__4223_xi64[safe_add( _4222_xpsp,_4253_i0 )] < safe_mul( safe_add( _4254_ii,(int)1 ),_4189_pdim1 ))) )
            {
              {
                ++ _4253_i0;
              }
            }
            int32_t _4256_prowe = _4253_i0;
            int32_t _10910_ = (int)0;
            int32_t _10911_ = _4191_edim1;
            for (int32_t _4257_jj = _10910_; _4257_jj < _10911_; ++_4257_jj)
            {
              {
                int32_t _10912_ = _4255_prowb;
                int32_t _10913_ = _4256_prowe;
                for (int32_t _4258_i = _10912_; _4258_i < _10913_; ++_4258_i)
                {
                  {
                    int64_t _4259_eidx = safe_add( safe_mul( (_ptr__4223_xi64[safe_add( _4222_xpsp,_4258_i )] % _4189_pdim1),_4191_edim1 ),_4257_jj );
                    int32_t _10914_ = _ptr__4171_wi32[safe_add( _4179_ptr,_4259_eidx )];
                    int32_t _10915_ = _ptr__4171_wi32[safe_add( safe_add( _4179_ptr,_4259_eidx ),(int)1 )];
                    for (int32_t _4260_k = _10914_; _4260_k < _10915_; ++_4260_k)
                    {
                      {
                        _ptr__4246_ri64[safe_add( _4238_rnidxs,_4249_nzi )] = _ptr__4172_wi64[safe_add( _4185_nidxs,_4260_k )];
                        _ptr__4248_ri32[safe_add( _4244_rcode,_4251_codei )] = 2;
                        _ptr__4247_rf64[safe_add( _4245_rcconst,_4251_codei )] = _ptr__4173_wf64[safe_add( _4186_cof,_4260_k )];
                        ++ _4251_codei;
                        if ((_4178_ncodeatom > (int)0))
                        {
                          {
                            int32_t _10916_ = _ptr__4171_wi32[safe_add( _4182_codeptr,_4260_k )];
                            int32_t _10917_ = _ptr__4171_wi32[safe_add( safe_add( _4182_codeptr,_4260_k ),(int)1 )];
                            for (int32_t _4261_l = _10916_; _4261_l < _10917_; ++_4261_l)
                            {
                              {
                                _ptr__4248_ri32[safe_add( _4244_rcode,_4251_codei )] = _ptr__4171_wi32[safe_add( _4180_code,_4261_l )];
                                _ptr__4247_rf64[safe_add( _4245_rcconst,_4251_codei )] = _ptr__4173_wf64[safe_add( _4181_cconst,_4261_l )];
                                ++ _4251_codei;
                              }
                            }
                            _ptr__4248_ri32[safe_add( _4244_rcode,_4251_codei )] = 3;
                            ++ _4251_codei;
                          }
                        }
                        {}
                        _ptr__4248_ri32[safe_add( _4244_rcode,_4251_codei )] = 1;
                        _ptr__4247_rf64[safe_add( _4245_rcconst,_4251_codei )] = _ptr__4194_xi32[safe_add( _4193_pidxs,_4258_i )];
                        ++ _4251_codei;
                        _ptr__4248_ri32[safe_add( _4244_rcode,_4251_codei )] = 5;
                        ++ _4251_codei;
                        _ptr__4248_ri32[safe_add( safe_add( _4243_rcodeptr,_4249_nzi ),(int)1 )] = _4251_codei;
                        ++ _4249_nzi;
                      }
                    }
                  }
                }
                _ptr__4248_ri32[safe_add( safe_add( _4237_rptr,_4250_elmi ),(int)1 )] = _4249_nzi;
                _ptr__4246_ri64[safe_add( _4239_rsp,_4250_elmi )] = safe_add( safe_mul( (int64_t)_4254_ii,_4191_edim1 ),_4257_jj );
                ++ _4250_elmi;
              }
            }
          }
        }
        if ((_4251_codei != _4226_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect code list"));
          }
        }
        {}
        if ((_4249_nzi != _4225_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4250_elmi != _4224_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__4248_ri32[safe_add( _4237_rptr,_4224_rnelem )] != _4225_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_4241_rhassp))
      {
        {
          _4168_rs->popi64(_4224_rnelem);
        }
      }
      {}
      _4170_xs->clear();
    }
  }
  else
  {
    {
      int32_t _4262_numpnz = _4175_nelem;
      int32_t _4263_xperm = _4170_xs->alloci32(_4262_numpnz);
      int32_t _4264_pnelem = p->getNumNonzero();
      int32_t _4265_xpsp = _4170_xs->alloci64(_4264_pnelem);
      int32_t _4266_xptr = _4170_xs->alloci32(safe_add( _ptr__4171_wi32[safe_add( _4183_shape,(int)1 )],(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4267_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4170_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4267_xi32(_4267_xi32 ? _4267_xi32->raw() : nullptr,_4267_xi32 ? _4267_xi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4268_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4170_xs)->i64;
      _checked_ptr_1<int64_t> _ptr__4268_xi64(_4268_xi64 ? _4268_xi64->raw() : nullptr,_4268_xi64 ? _4268_xi64->size(0) : 0);
      p->getSp(_4268_xi64,_4265_xpsp);
      {
        int32_t _4269_d1 = _ptr__4171_wi32[safe_add( _4183_shape,(int)1 )];
        int32_t _10918_ = (int)0;
        int32_t _10919_ = safe_add( _ptr__4171_wi32[safe_add( _4183_shape,(int)1 )],(int)1 );
        for (int32_t _4270_i = _10918_; _4270_i < _10919_; ++_4270_i)
        {
          {
            _ptr__4267_xi32[safe_add( _4266_xptr,_4270_i )] = (int)0;
          }
        }
        int32_t _10920_ = (int)0;
        int32_t _10921_ = _4175_nelem;
        for (int32_t _4271_i = _10920_; _4271_i < _10921_; ++_4271_i)
        {
          {
            ++ _ptr__4267_xi32[safe_add( safe_add( _4266_xptr,(_ptr__4172_wi64[safe_add( _4184_sp,_4271_i )] % _4269_d1) ),(int)1 )];
          }
        }
        int32_t _10922_ = (int)0;
        int32_t _10923_ = _4269_d1;
        for (int32_t _4272_i = _10922_; _4272_i < _10923_; ++_4272_i)
        {
          {
            _ptr__4267_xi32[safe_add( safe_add( _4266_xptr,_4272_i ),(int)1 )] += _ptr__4267_xi32[safe_add( _4266_xptr,_4272_i )];
          }
        }
        int32_t _10924_ = (int)0;
        int32_t _10925_ = _4175_nelem;
        for (int32_t _4273_i = _10924_; _4273_i < _10925_; ++_4273_i)
        {
          {
            _ptr__4267_xi32[safe_add( _4263_xperm,_ptr__4267_xi32[safe_add( _4266_xptr,(_ptr__4172_wi64[safe_add( _4184_sp,_4273_i )] % _4269_d1) )] )] = _4273_i;
            ++ _ptr__4267_xi32[safe_add( _4266_xptr,(_ptr__4172_wi64[safe_add( _4184_sp,_4273_i )] % _4269_d1) )];
          }
        }
      }
      int32_t _4274_rnelem = (int)0;
      int32_t _4275_rnnz = (int)0;
      int32_t _4276_rncodeatom = (int)0;
      int32_t _4277_edim1 = _ptr__4171_wi32[safe_add( _4183_shape,(int)1 )];
      int32_t _4278_edim0 = _ptr__4171_wi32[_4183_shape];
      int32_t _4279_pdim1 = p->getDim((int)1);
      int32_t _4280_pdim0 = p->getDim((int)0);
      {
        int32_t _4281_prowp = (int)0;
        while ( (_4281_prowp < _4264_pnelem) )
        {
          {
            int32_t _4282_prowb = _4281_prowp;
            int64_t _4283_ri = (_ptr__4268_xi64[safe_add( _4265_xpsp,_4281_prowp )] / _4279_pdim1);
            while ( ((_4281_prowp < _4264_pnelem) && (_ptr__4268_xi64[safe_add( _4265_xpsp,_4281_prowp )] < safe_mul( safe_add( _4283_ri,(int)1 ),_4279_pdim1 ))) )
            {
              {
                ++ _4281_prowp;
              }
            }
            int32_t _4284_ecolp = (int)0;
            while ( (_4284_ecolp < _4175_nelem) )
            {
              {
                int32_t _4285_ecolb = _4284_ecolp;
                int64_t _4286_rj = (_ptr__4172_wi64[safe_add( _4184_sp,_ptr__4267_xi32[safe_add( _4263_xperm,_4284_ecolp )] )] % _4277_edim1);
                ++ _4284_ecolp;
                while ( ((_4284_ecolp < _4175_nelem) && ((_ptr__4172_wi64[safe_add( _4184_sp,_ptr__4267_xi32[safe_add( _4263_xperm,_4284_ecolp )] )] % _4277_edim1) == _4286_rj)) )
                {
                  {
                    ++ _4284_ecolp;
                  }
                }
                int32_t _4287_ep = _4285_ecolb;
                int32_t _4288_pp = _4282_prowb;
                bool _4289_exist = false;
                int32_t _4290_rownnz = (int)0;
                while ( ((_4288_pp < _4281_prowp) && (_4287_ep < _4284_ecolp)) )
                {
                  {
                    int32_t _4291_eidx = _ptr__4267_xi32[safe_add( _4263_xperm,_4287_ep )];
                    if (((_ptr__4268_xi64[safe_add( _4265_xpsp,_4288_pp )] % _4279_pdim1) < (_ptr__4172_wi64[safe_add( _4184_sp,_4291_eidx )] / _4277_edim1)))
                    {
                      {
                        ++ _4288_pp;
                      }
                    }
                    else if(((_ptr__4268_xi64[safe_add( _4265_xpsp,_4288_pp )] % _4279_pdim1) > (_ptr__4172_wi64[safe_add( _4184_sp,_4291_eidx )] / _4277_edim1)))
                    {
                      {
                        ++ _4287_ep;
                      }
                    }
                    else
                    {
                      {
                        int32_t _4292_n = (_ptr__4171_wi32[safe_add( safe_add( _4179_ptr,_4291_eidx ),(int)1 )] - _ptr__4171_wi32[safe_add( _4179_ptr,_4291_eidx )]);
                        _4275_rnnz += _4292_n;
                        int32_t _10926_;
                        bool _10927_ = (_4178_ncodeatom > (int)0);
                        if (_10927_)
                        {
                          _10926_ = safe_add( (_ptr__4171_wi32[safe_add( _4182_codeptr,_ptr__4171_wi32[safe_add( safe_add( _4179_ptr,_4291_eidx ),(int)1 )] )] - _ptr__4171_wi32[safe_add( _4182_codeptr,_ptr__4171_wi32[safe_add( _4179_ptr,_4291_eidx )] )]),safe_mul( (int)4,_4292_n ) );
                        }
                        else
                        {
                          _10926_ = safe_mul( (int)3,_4292_n );
                        }
                        _4276_rncodeatom += _10926_;
                        ++ _4287_ep;
                        ++ _4288_pp;
                        ++ _4290_rownnz;
                      }
                    }
                  }
                }
                if ((_4290_rownnz > (int)0))
                {
                  {
                    ++ _4274_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int32_t _4293_rnd = (int)2;
      bool _4294_rhassp = (_4274_rnelem < safe_mul( _4280_pdim0,_4277_edim1 ));
      _4168_rs->alloc_expr(_4293_rnd,_4274_rnelem,_4275_rnnz,_4294_rhassp,_4276_rncodeatom);
      int32_t _4295_rptr = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->ptr_base;
      int32_t _4296_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->nidxs_base;
      int32_t _10928_;
      bool _10929_ = _4294_rhassp;
      if (_10929_)
      {
        _10928_ = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->sp_base;
      }
      else
      {
        _10928_ = _4168_rs->alloci64(_4274_rnelem);
      }
      int32_t _4297_rsp = _10928_;
      int32_t _4298_rcof = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->cof_base;
      int32_t _4299_rshape = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->shape_base;
      int32_t _4300_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->codeptr_base;
      int32_t _4301_rcode = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->code_base;
      int32_t _4302_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4303_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4303_ri64(_4303_ri64 ? _4303_ri64->raw() : nullptr,_4303_ri64 ? _4303_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4304_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->f64;
      _checked_ptr_1<double> _ptr__4304_rf64(_4304_rf64 ? _4304_rf64->raw() : nullptr,_4304_rf64 ? _4304_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4305_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4168_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4305_ri32(_4305_ri32 ? _4305_ri32->raw() : nullptr,_4305_ri32 ? _4305_ri32->size(0) : 0);
      int32_t _10930_ = (int)0;
      int32_t _10931_ = safe_add( _4274_rnelem,(int)1 );
      for (int32_t _4306_i = _10930_; _4306_i < _10931_; ++_4306_i)
      {
        {
          _ptr__4305_ri32[safe_add( _4295_rptr,_4306_i )] = (-(int)9999);
        }
      }
      {
        _ptr__4305_ri32[_4295_rptr] = (int)0;
        if ((_4276_rncodeatom > (int)0))
        {
          {
            _ptr__4305_ri32[_4300_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__4305_ri32[_4299_rshape] = _4280_pdim0;
        _ptr__4305_ri32[safe_add( _4299_rshape,(int)1 )] = _4277_edim1;
        int32_t _4307_nzi = (int)0;
        int32_t _4308_elmi = (int)0;
        int32_t _4309_codei = (int)0;
        int32_t _10932_ = (int)0;
        int32_t _10933_ = _4275_rnnz;
        for (int32_t _4310_i = _10932_; _4310_i < _10933_; ++_4310_i)
        {
          {
            _ptr__4304_rf64[safe_add( _4298_rcof,_4310_i )] = 0.0;
          }
        }
        int32_t _4311_prowp = (int)0;
        while ( (_4311_prowp < _4264_pnelem) )
        {
          {
            int32_t _4312_prowb = _4311_prowp;
            int64_t _4313_ri = (_ptr__4268_xi64[safe_add( _4265_xpsp,_4311_prowp )] / _4279_pdim1);
            while ( ((_4311_prowp < _4264_pnelem) && (_ptr__4268_xi64[safe_add( _4265_xpsp,_4311_prowp )] < safe_mul( safe_add( _4313_ri,(int)1 ),_4279_pdim1 ))) )
            {
              {
                ++ _4311_prowp;
              }
            }
            int32_t _4314_ecolp = (int)0;
            while ( (_4314_ecolp < _4175_nelem) )
            {
              {
                int32_t _4315_ecolb = _4314_ecolp;
                int64_t _4316_rj = (_ptr__4172_wi64[safe_add( _4184_sp,_ptr__4267_xi32[safe_add( _4263_xperm,_4314_ecolp )] )] % _4277_edim1);
                ++ _4314_ecolp;
                while ( ((_4314_ecolp < _4175_nelem) && ((_ptr__4172_wi64[safe_add( _4184_sp,_ptr__4267_xi32[safe_add( _4263_xperm,_4314_ecolp )] )] % _4277_edim1) == _4316_rj)) )
                {
                  {
                    ++ _4314_ecolp;
                  }
                }
                int32_t _4317_ep = _4315_ecolb;
                int32_t _4318_pp = _4312_prowb;
                int32_t _4319_nsumelm = (int)0;
                while ( ((_4318_pp < _4311_prowp) && (_4317_ep < _4314_ecolp)) )
                {
                  {
                    int32_t _4320_eidx = _ptr__4267_xi32[safe_add( _4263_xperm,_4317_ep )];
                    if (((_ptr__4268_xi64[safe_add( _4265_xpsp,_4318_pp )] % _4279_pdim1) < (_ptr__4172_wi64[safe_add( _4184_sp,_4320_eidx )] / _4277_edim1)))
                    {
                      {
                        ++ _4318_pp;
                      }
                    }
                    else if(((_ptr__4268_xi64[safe_add( _4265_xpsp,_4318_pp )] % _4279_pdim1) > (_ptr__4172_wi64[safe_add( _4184_sp,_4320_eidx )] / _4277_edim1)))
                    {
                      {
                        ++ _4317_ep;
                      }
                    }
                    else
                    {
                      {
                        int32_t _10934_ = _ptr__4171_wi32[safe_add( _4179_ptr,_4320_eidx )];
                        int32_t _10935_ = _ptr__4171_wi32[safe_add( safe_add( _4179_ptr,_4320_eidx ),(int)1 )];
                        for (int32_t _4321_i = _10934_; _4321_i < _10935_; ++_4321_i)
                        {
                          {
                            _ptr__4303_ri64[safe_add( _4296_rnidxs,_4307_nzi )] = _ptr__4172_wi64[safe_add( _4185_nidxs,_4321_i )];
                            _ptr__4305_ri32[safe_add( _4301_rcode,_4309_codei )] = 2;
                            _ptr__4304_rf64[safe_add( _4302_rcconst,_4309_codei )] = _ptr__4173_wf64[safe_add( _4186_cof,_4321_i )];
                            ++ _4309_codei;
                            if ((_4178_ncodeatom > (int)0))
                            {
                              {
                                int32_t _10936_ = _ptr__4171_wi32[safe_add( _4182_codeptr,_4321_i )];
                                int32_t _10937_ = _ptr__4171_wi32[safe_add( safe_add( _4182_codeptr,_4321_i ),(int)1 )];
                                for (int32_t _4322_k = _10936_; _4322_k < _10937_; ++_4322_k)
                                {
                                  {
                                    _ptr__4305_ri32[safe_add( _4301_rcode,_4309_codei )] = _ptr__4171_wi32[safe_add( _4180_code,_4322_k )];
                                    _ptr__4304_rf64[safe_add( _4302_rcconst,_4309_codei )] = _ptr__4173_wf64[safe_add( _4181_cconst,_4322_k )];
                                    ++ _4309_codei;
                                  }
                                }
                                _ptr__4305_ri32[safe_add( _4301_rcode,_4309_codei )] = 3;
                                ++ _4309_codei;
                              }
                            }
                            {}
                            _ptr__4305_ri32[safe_add( _4301_rcode,_4309_codei )] = 1;
                            _ptr__4304_rf64[safe_add( _4302_rcconst,_4309_codei )] = _ptr__4267_xi32[safe_add( _4193_pidxs,_4318_pp )];
                            ++ _4309_codei;
                            _ptr__4305_ri32[safe_add( _4301_rcode,_4309_codei )] = 5;
                            ++ _4309_codei;
                            _ptr__4305_ri32[safe_add( safe_add( _4300_rcodeptr,_4307_nzi ),(int)1 )] = _4309_codei;
                            ++ _4307_nzi;
                          }
                        }
                        ++ _4319_nsumelm;
                        ++ _4318_pp;
                        ++ _4317_ep;
                      }
                    }
                  }
                }
                if ((_4319_nsumelm > (int)0))
                {
                  {
                    _ptr__4303_ri64[safe_add( _4297_rsp,_4308_elmi )] = safe_add( safe_mul( _4313_ri,_4277_edim1 ),_4316_rj );
                    _ptr__4305_ri32[safe_add( safe_add( _4295_rptr,_4308_elmi ),(int)1 )] = _4307_nzi;
                    ++ _4308_elmi;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_4309_codei != _4276_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_4307_nzi != _4275_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4308_elmi != _4274_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__4305_ri32[safe_add( _4295_rptr,_4308_elmi )] != _4275_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_4294_rhassp))
      {
        {
          _4168_rs->popi64(_4274_rnelem);
        }
      }
      {}
    }
  }
  _4170_xs->clear();
}
// End mosek.fusion.ExprMulParamLeft.eval

// Begin mosek.fusion.ExprMulParamLeft.toString
// Method mosek.fusion.ExprMulParamLeft.toString @ src/fusion/Parameter.monty:452:6-154
std::string mosek::fusion::ExprMulParamLeft :: toString() { return mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamLeft.toString

void mosek::fusion::p_ExprMulParamLeft::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamLeft::destroy() { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->destroy(); }
// } class ExprMulParamLeft
// class ParameterImpl { // @ src/fusion/Parameter.monty:105:4-418:5
mosek::fusion::ParameterImpl::ParameterImpl(mosek::fusion::p_ParameterImpl *_impl) : _impl(_impl) { /*std::cout << "ParameterImpl() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ParameterImpl::~ParameterImpl() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ParameterImpl::p_ParameterImpl
  (::mosek::fusion::ParameterImpl * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.ParameterImpl.ctor @ src/fusion/Parameter.monty:123:6-129:7
mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4323_other,
    monty::rc_ptr< ::mosek::fusion::Model > _4324_model)
{ return new mosek::fusion::ParameterImpl(_4323_other,_4324_model); }
mosek::fusion::ParameterImpl::ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4323_other,
    monty::rc_ptr< ::mosek::fusion::Model > _4324_model) : 
   ParameterImpl(new mosek::fusion::p_ParameterImpl(this))
{ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4323_other,_4324_model); }
void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4323_other,
    monty::rc_ptr< ::mosek::fusion::Model > _4324_model)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4324_model;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = mosek::fusion::p_ParameterImpl::_get_impl(_4323_other)->shape;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = mosek::fusion::p_ParameterImpl::_get_impl(_4323_other)->sp;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = mosek::fusion::p_ParameterImpl::_get_impl(_4323_other)->size;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = mosek::fusion::p_ParameterImpl::_get_impl(_4323_other)->nidxs;
  }
}
// mosek.fusion.ParameterImpl.ctor

// mosek.fusion.ParameterImpl.ctor @ src/fusion/Parameter.monty:112:6-121:7
mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::Model > _4325_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4326_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4327_sp,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4328_nidxs)
{ return new mosek::fusion::ParameterImpl(_4325_model,_4326_shape,_4327_sp,_4328_nidxs); }
mosek::fusion::ParameterImpl::ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::Model > _4325_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4326_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4327_sp,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4328_nidxs) : 
   ParameterImpl(new mosek::fusion::p_ParameterImpl(this))
{ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4325_model,_4326_shape,_4327_sp,_4328_nidxs); }
void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _4325_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4326_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4327_sp,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4328_nidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4326_shape(_4326_shape ? _4326_shape->raw() : nullptr, _4326_shape ? _4326_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__4327_sp(_4327_sp ? _4327_sp->raw() : nullptr, _4327_sp ? _4327_sp->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__4328_nidxs(_4328_nidxs ? _4328_nidxs->raw() : nullptr, _4328_nidxs ? _4328_nidxs->size(0) : 0);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4325_model;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = ::mosek::fusion::Utils::Tools::arraycopy(_4326_shape);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = _4327_sp;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = ::mosek::fusion::p_Set::size(_4326_shape);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = ::mosek::fusion::Utils::Tools::arraycopy(_4328_nidxs);
  }
}
// mosek.fusion.ParameterImpl.ctor

// Begin mosek.fusion.ParameterImpl.clone
// Method mosek.fusion.ParameterImpl.clone @ src/fusion/Parameter.monty:415:6-417:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4329_m) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__clone(_4329_m); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::clone(monty::rc_ptr< ::mosek::fusion::Model > _4329_m) { return __mosek_2fusion_2ParameterImpl__clone(_4329_m); }
/* override: mosek.fusion.Parameter.clone*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__clone(monty::rc_ptr< ::mosek::fusion::Model > _4329_m) { return __mosek_2fusion_2ParameterImpl__clone(_4329_m); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4329_m)
{
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::ParameterImpl::t(_pubthis),_4329_m)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.ParameterImpl.clone

// Begin mosek.fusion.ParameterImpl.toString
// Method mosek.fusion.ParameterImpl.toString @ src/fusion/Parameter.monty:400:6-412:7
std::string mosek::fusion::ParameterImpl :: toString() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ParameterImpl::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4330_r = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Parameter(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _4330_r->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int32_t _10938_ = (int)1;
      int32_t _10939_ = (int)((shape)->size(0));
      for (int32_t _4331_i = _10938_; _4331_i < _10939_; ++_4331_i)
      {
        {
          _4330_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_4331_i)));
        }
      }
    }
  }
  {}
  _4330_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sp.get()))
  {
    {
      _4330_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _4330_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4330_r->toString();
}
// End mosek.fusion.ParameterImpl.toString

// Begin mosek.fusion.ParameterImpl.pick
// Method mosek.fusion.ParameterImpl.pick @ src/fusion/Parameter.monty:395:6-397:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4332_indexrows) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4332_indexrows); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4332_indexrows) { return __mosek_2fusion_2ParameterImpl__pick(_4332_indexrows); }
/* override: mosek.fusion.Expression.pick*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4332_indexrows) { return __mosek_2fusion_2ParameterImpl__pick(_4332_indexrows); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4332_indexrows)
{
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
// End mosek.fusion.ParameterImpl.pick

// Begin mosek.fusion.ParameterImpl.pick
// Method mosek.fusion.ParameterImpl.pick @ src/fusion/Parameter.monty:391:6-393:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4333_indexes) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4333_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4333_indexes) { return __mosek_2fusion_2ParameterImpl__pick(_4333_indexes); }
/* override: mosek.fusion.Expression.pick*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4333_indexes) { return __mosek_2fusion_2ParameterImpl__pick(_4333_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4333_indexes)
{
  _checked_ptr_1<int32_t> _ptr__4333_indexes(_4333_indexes ? _4333_indexes->raw() : nullptr, _4333_indexes ? _4333_indexes->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
// End mosek.fusion.ParameterImpl.pick

// Begin mosek.fusion.ParameterImpl.index
// Method mosek.fusion.ParameterImpl.index @ src/fusion/Parameter.monty:363:6-389:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4334_indexes) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4334_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4334_indexes) { return __mosek_2fusion_2ParameterImpl__index(_4334_indexes); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4334_indexes) { return __mosek_2fusion_2ParameterImpl__index(_4334_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4334_indexes)
{
  _checked_ptr_1<int32_t> _ptr__4334_indexes(_4334_indexes ? _4334_indexes->raw() : nullptr, _4334_indexes ? _4334_indexes->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)((_4334_indexes)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else
  {
    {
      int32_t _10940_ = (int)0;
      int32_t _10941_ = (int)((_4334_indexes)->size(0));
      for (int32_t _4335_i = _10940_; _4335_i < _10941_; ++_4335_i)
      {
        {
          if (((_ptr__4334_indexes[_4335_i] < (int)0) || (_ptr__4334_indexes[_4335_i] >= ((*shape)(_4335_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
            }
          }
          {}
        }
      }
    }
  }
  if ((NULL == sp.get()))
  {
    {
      int32_t _4336_nd = (int)((_4334_indexes)->size(0));
      int64_t _4337_ix = _ptr__4334_indexes[(_4336_nd - (int)1)];
      int32_t _10942_ = (int)1;
      int32_t _10943_ = _4336_nd;
      for (int32_t _4338_i = _10942_; _4338_i < _10943_; ++_4338_i)
      {
        {
          _4337_ix = safe_add( safe_mul( _4337_ix,((*shape)((_4336_nd - _4338_i))) ),_ptr__4334_indexes[((_4336_nd - _4338_i) - (int)1)] );
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4337_ix)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int32_t _4339_nd = (int)((_4334_indexes)->size(0));
      int64_t _4340_ix = _ptr__4334_indexes[(_4339_nd - (int)1)];
      int32_t _10944_ = (int)1;
      int32_t _10945_ = _4339_nd;
      for (int32_t _4341_i = _10944_; _4341_i < _10945_; ++_4341_i)
      {
        {
          _4340_ix = safe_add( safe_mul( _4340_ix,((*shape)((_4339_nd - _4341_i))) ),_ptr__4334_indexes[((_4339_nd - _4341_i) - (int)1)] );
        }
      }
      int32_t _4342_j = (int)0;
      while ( ((_4342_j < (int)((sp)->size(0))) && (((*sp)(_4342_j)) < _4340_ix)) )
      {
        {
          ++ _4342_j;
        }
      }
      if (((_4342_j < (int)((sp)->size(0))) && (((*sp)(_4342_j)) == _4340_ix)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4342_j)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.index

// Begin mosek.fusion.ParameterImpl.index
// Method mosek.fusion.ParameterImpl.index @ src/fusion/Parameter.monty:345:6-361:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(int32_t _4343_i) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4343_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(int32_t _4343_i) { return __mosek_2fusion_2ParameterImpl__index(_4343_i); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(int32_t _4343_i) { return __mosek_2fusion_2ParameterImpl__index(_4343_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(int32_t _4343_i)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else if(((_4343_i < (int)0) || (_4343_i >= ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4343_i)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int32_t _4344_j = (int)0;
      while ( ((_4344_j < (int)((sp)->size(0))) && (((*sp)(_4344_j)) < _4343_i)) )
      {
        {
          ++ _4344_j;
        }
      }
      if (((_4344_j < (int)((sp)->size(0))) && (((*sp)(_4344_j)) == _4343_i)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4344_j)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.index

// Begin mosek.fusion.ParameterImpl.eval
// Method mosek.fusion.ParameterImpl.eval @ src/fusion/Parameter.monty:304:6-342:7
void mosek::fusion::ParameterImpl :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4345_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4346_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4347_xs) { mosek::fusion::p_ParameterImpl::_get_impl(this)->eval(_4345_rs,_4346_ws,_4347_xs); }
void mosek::fusion::p_ParameterImpl::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4345_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4346_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4347_xs)
{
  int32_t _4348_nd = (int)((shape)->size(0));
  int32_t _4349_nelem = (int)((nidxs)->size(0));
  bool _4350_hassp = (NULL != sp.get());
  _4345_rs->alloc_expr(_4348_nd,_4349_nelem,(int)((nidxs)->size(0)),_4350_hassp,(int)((nidxs)->size(0)));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4351_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4351_ri32(_4351_ri32 ? _4351_ri32->raw() : nullptr,_4351_ri32 ? _4351_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4352_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4352_ri64(_4352_ri64 ? _4352_ri64->raw() : nullptr,_4352_ri64 ? _4352_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4353_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->f64;
  _checked_ptr_1<double> _ptr__4353_rf64(_4353_rf64 ? _4353_rf64->raw() : nullptr,_4353_rf64 ? _4353_rf64->size(0) : 0);
  int32_t _4354_rptr = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->ptr_base;
  int32_t _4355_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->nidxs_base;
  int32_t _4356_rcof = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->cof_base;
  int32_t _4357_rshape = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->shape_base;
  int32_t _4358_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->codeptr_base;
  int32_t _4359_rcode = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->code_base;
  int32_t _4360_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->cconst_base;
  int32_t _4361_rsp = mosek::fusion::p_WorkStack::_get_impl(_4345_rs)->sp_base;
  {
    _ptr__4351_ri32[_4354_rptr] = (int)0;
    int32_t _10946_ = (int)0;
    int32_t _10947_ = _4348_nd;
    for (int32_t _4362_i = _10946_; _4362_i < _10947_; ++_4362_i)
    {
      {
        _ptr__4351_ri32[safe_add( _4357_rshape,_4362_i )] = ((*shape)(_4362_i));
      }
    }
    int32_t _10948_ = (int)0;
    int32_t _10949_ = _4349_nelem;
    for (int32_t _4363_i = _10948_; _4363_i < _10949_; ++_4363_i)
    {
      {
        _ptr__4352_ri64[safe_add( _4355_rnidxs,_4363_i )] = (int)0;
      }
    }
    int32_t _10950_ = (int)0;
    int32_t _10951_ = _4349_nelem;
    for (int32_t _4364_i = _10950_; _4364_i < _10951_; ++_4364_i)
    {
      {
        _ptr__4353_rf64[safe_add( _4356_rcof,_4364_i )] = 0.0;
      }
    }
    int32_t _10952_ = (int)0;
    int32_t _10953_ = safe_add( _4349_nelem,(int)1 );
    for (int32_t _4365_i = _10952_; _4365_i < _10953_; ++_4365_i)
    {
      {
        _ptr__4351_ri32[safe_add( _4354_rptr,_4365_i )] = _4365_i;
      }
    }
    if ((_4349_nelem > (int)0))
    {
      {
        int32_t _10954_ = (int)0;
        int32_t _10955_ = safe_add( _4349_nelem,(int)1 );
        for (int32_t _4366_i = _10954_; _4366_i < _10955_; ++_4366_i)
        {
          {
            _ptr__4351_ri32[safe_add( _4358_rcodeptr,_4366_i )] = _4366_i;
          }
        }
      }
    }
    {}
    if (_4350_hassp)
    {
      {
        int32_t _10956_ = (int)0;
        int32_t _10957_ = _4349_nelem;
        for (int32_t _4367_i = _10956_; _4367_i < _10957_; ++_4367_i)
        {
          {
            _ptr__4352_ri64[safe_add( _4361_rsp,_4367_i )] = ((*sp)(_4367_i));
          }
        }
      }
    }
    {}
    int32_t _10958_ = (int)0;
    int32_t _10959_ = _4349_nelem;
    for (int32_t _4368_i = _10958_; _4368_i < _10959_; ++_4368_i)
    {
      {
        _ptr__4351_ri32[safe_add( _4359_rcode,_4368_i )] = (int)1;
        _ptr__4353_rf64[safe_add( _4360_rcconst,_4368_i )] = ((*nidxs)(_4368_i));
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.eval

// Begin mosek.fusion.ParameterImpl.getSp
// Method mosek.fusion.ParameterImpl.getSp @ src/fusion/Parameter.monty:294:6-301:7
void mosek::fusion::ParameterImpl :: getSp(std::shared_ptr< monty::ndarray< int64_t,1 > > _4369_dest,int32_t _4370_offset) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getSp(_4369_dest,_4370_offset); }
void mosek::fusion::p_ParameterImpl::getSp(std::shared_ptr< monty::ndarray< int64_t,1 > > _4369_dest,int32_t _4370_offset)
{
  _checked_ptr_1<int64_t> _ptr__4369_dest(_4369_dest ? _4369_dest->raw() : nullptr, _4369_dest ? _4369_dest->size(0) : 0);
  if ((NULL != sp.get()))
  {
    {
      int32_t _10960_ = (int)0;
      int32_t _10961_ = (int)((sp)->size(0));
      for (int32_t _4371_i = _10960_; _4371_i < _10961_; ++_4371_i)
      {
        {
          _ptr__4369_dest[safe_add( _4371_i,_4370_offset )] = ((*sp)(_4371_i));
        }
      }
    }
  }
  else
  {
    {
      int32_t _10962_ = (int)0;
      int32_t _10963_ = (int)((nidxs)->size(0));
      for (int32_t _4372_i = _10962_; _4372_i < _10963_; ++_4372_i)
      {
        {
          _ptr__4369_dest[safe_add( _4372_i,_4370_offset )] = _4372_i;
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.getSp

// Begin mosek.fusion.ParameterImpl.isSparse
// Method mosek.fusion.ParameterImpl.isSparse @ src/fusion/Parameter.monty:292:6-58
bool mosek::fusion::ParameterImpl :: isSparse() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->isSparse(); }
bool mosek::fusion::p_ParameterImpl::isSparse()
{
  return (NULL != sp.get());
}
// End mosek.fusion.ParameterImpl.isSparse

// Begin mosek.fusion.ParameterImpl.slice
// Method mosek.fusion.ParameterImpl.slice @ src/fusion/Parameter.monty:234:6-290:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4373_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4374_astop) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4373_astart,_4374_astop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4373_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4374_astop) { return __mosek_2fusion_2ParameterImpl__slice(_4373_astart,_4374_astop); }
/* override: mosek.fusion.Parameter.slice*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4373_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4374_astop) { return __mosek_2fusion_2ParameterImpl__slice(_4373_astart,_4374_astop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4373_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4374_astop)
{
  _checked_ptr_1<int32_t> _ptr__4373_astart(_4373_astart ? _4373_astart->raw() : nullptr, _4373_astart ? _4373_astart->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4374_astop(_4374_astop ? _4374_astop->raw() : nullptr, _4374_astop ? _4374_astop->size(0) : 0);
  if ((((int)((_4373_astart)->size(0)) != (int)((_4374_astop)->size(0))) || ((int)((_4373_astart)->size(0)) != (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  int32_t _4375_nd = (int)((_4373_astart)->size(0));
  int32_t _10964_ = (int)0;
  int32_t _10965_ = _4375_nd;
  for (int32_t _4376_i = _10964_; _4376_i < _10965_; ++_4376_i)
  {
    {
      if (((_ptr__4373_astart[_4376_i] < (int)0) || ((_ptr__4373_astart[_4376_i] >= _ptr__4374_astop[_4376_i]) || (_ptr__4374_astop[_4376_i] > ((*shape)(_4376_i))))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4377_stride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4375_nd)));
  _checked_ptr_1<int64_t> _ptr__4377_stride(_4377_stride ? _4377_stride->raw() : nullptr,_4377_stride ? _4377_stride->size(0) : 0);
  _ptr__4377_stride[(_4375_nd - (int)1)] = (int)1;
  int32_t _10966_ = (int)1;
  int32_t _10967_ = _4375_nd;
  for (int32_t _4378_i = _10966_; _4378_i < _10967_; ++_4378_i)
  {
    {
      _ptr__4377_stride[((_4375_nd - _4378_i) - (int)1)] = safe_mul( _ptr__4377_stride[(_4375_nd - _4378_i)],((*shape)(_4378_i)) );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4379_index = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4375_nd)));
  _checked_ptr_1<int32_t> _ptr__4379_index(_4379_index ? _4379_index->raw() : nullptr,_4379_index ? _4379_index->size(0) : 0);
  std::vector<int32_t> _10968_;
  for (int32_t _4381_i = (int)0, _10969_ = _4375_nd; _4381_i < _10969_ ; ++_4381_i)
  {
    _10968_.push_back((_ptr__4374_astop[_4381_i] - _ptr__4373_astart[_4381_i]));
  }
  auto _10970_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10968_.size()),_10968_.begin(),_10968_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4380_rshape = _10970_;
  _checked_ptr_1<int32_t> _ptr__4380_rshape(_4380_rshape ? _4380_rshape->raw() : nullptr,_4380_rshape ? _4380_rshape->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      int32_t _4382_count = (int)1;
      int32_t _10971_ = (int)0;
      int32_t _10972_ = _4375_nd;
      for (int32_t _4383_i = _10971_; _4383_i < _10972_; ++_4383_i)
      {
        {
          _4382_count *= _ptr__4380_rshape[_4383_i];
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4384_rnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4382_count)));
      _checked_ptr_1<int32_t> _ptr__4384_rnidxs(_4384_rnidxs ? _4384_rnidxs->raw() : nullptr,_4384_rnidxs ? _4384_rnidxs->size(0) : 0);
      int32_t _4385_k = (int)0;
      int32_t _10973_ = (int)0;
      int32_t _10974_ = (int)((nidxs)->size(0));
      for (int32_t _4386_i = _10973_; _4386_i < _10974_; ++_4386_i)
      {
        {
          int32_t _10975_ = (int)0;
          int32_t _10976_ = _4375_nd;
          for (int32_t _4387_j = _10975_; _4387_j < _10976_; ++_4387_j)
          {
            {
              _ptr__4379_index[_4387_j] = (int32_t)((_4386_i / _ptr__4377_stride[_4387_j]) % ((*shape)(_4387_j)));
            }
          }
          bool _4388_inslice = true;
          int32_t _10977_ = (int)0;
          int32_t _10978_ = _4375_nd;
          for (int32_t _4389_j = _10977_; _4389_j < _10978_; ++_4389_j)
          {
            {
              _4388_inslice = (_4388_inslice && ((_ptr__4373_astart[_4389_j] <= _ptr__4379_index[_4389_j]) && (_ptr__4379_index[_4389_j] < _ptr__4374_astop[_4389_j])));
            }
          }
          if (_4388_inslice)
          {
            {
              _ptr__4384_rnidxs[_4385_k] = ((*nidxs)(_4386_i));
              ++ _4385_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4380_rshape,nullptr,_4384_rnidxs)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int32_t _4390_count = (int)0;
      int32_t _10979_ = (int)0;
      int32_t _10980_ = (int)((nidxs)->size(0));
      for (int32_t _4391_i = _10979_; _4391_i < _10980_; ++_4391_i)
      {
        {
          int32_t _10981_ = (int)0;
          int32_t _10982_ = _4375_nd;
          for (int32_t _4392_j = _10981_; _4392_j < _10982_; ++_4392_j)
          {
            {
              _ptr__4379_index[_4392_j] = (int32_t)((((*sp)(_4391_i)) / _ptr__4377_stride[_4392_j]) % ((*shape)(_4392_j)));
            }
          }
          bool _4393_inslice = true;
          int32_t _10983_ = (int)0;
          int32_t _10984_ = _4375_nd;
          for (int32_t _4394_j = _10983_; _4394_j < _10984_; ++_4394_j)
          {
            {
              _4393_inslice = (_4393_inslice && ((_ptr__4373_astart[_4394_j] <= _ptr__4379_index[_4394_j]) && (_ptr__4379_index[_4394_j] < _ptr__4374_astop[_4394_j])));
            }
          }
          if (_4393_inslice)
          {
            {
              ++ _4390_count;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4395_rnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4390_count)));
      _checked_ptr_1<int32_t> _ptr__4395_rnidxs(_4395_rnidxs ? _4395_rnidxs->raw() : nullptr,_4395_rnidxs ? _4395_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4396_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4390_count)));
      _checked_ptr_1<int64_t> _ptr__4396_rsp(_4396_rsp ? _4396_rsp->raw() : nullptr,_4396_rsp ? _4396_rsp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4397_rstride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4375_nd)));
      _checked_ptr_1<int64_t> _ptr__4397_rstride(_4397_rstride ? _4397_rstride->raw() : nullptr,_4397_rstride ? _4397_rstride->size(0) : 0);
      _ptr__4397_rstride[(_4375_nd - (int)1)] = (int)1;
      int32_t _10985_ = (int)1;
      int32_t _10986_ = _4375_nd;
      for (int32_t _4398_i = _10985_; _4398_i < _10986_; ++_4398_i)
      {
        {
          _ptr__4397_rstride[((_4375_nd - _4398_i) - (int)1)] = safe_mul( _ptr__4397_rstride[(_4375_nd - _4398_i)],_ptr__4380_rshape[_4398_i] );
        }
      }
      int32_t _4399_k = (int)0;
      int32_t _10987_ = (int)0;
      int32_t _10988_ = (int)((nidxs)->size(0));
      for (int32_t _4400_i = _10987_; _4400_i < _10988_; ++_4400_i)
      {
        {
          int32_t _10989_ = (int)0;
          int32_t _10990_ = _4375_nd;
          for (int32_t _4401_j = _10989_; _4401_j < _10990_; ++_4401_j)
          {
            {
              _ptr__4379_index[_4400_i] = (int32_t)((((*sp)(_4400_i)) / _ptr__4377_stride[_4401_j]) % ((*shape)(_4401_j)));
            }
          }
          bool _4402_inslice = true;
          int32_t _10991_ = (int)0;
          int32_t _10992_ = _4375_nd;
          for (int32_t _4403_j = _10991_; _4403_j < _10992_; ++_4403_j)
          {
            {
              _4402_inslice = (_4402_inslice && ((_ptr__4373_astart[_4403_j] <= _ptr__4379_index[_4403_j]) && (_ptr__4379_index[_4403_j] < _ptr__4374_astop[_4403_j])));
            }
          }
          if (_4402_inslice)
          {
            {
              int64_t _4404_ri = (int64_t)0;
              int32_t _10993_ = (int)0;
              int32_t _10994_ = _4375_nd;
              for (int32_t _4405_j = _10993_; _4405_j < _10994_; ++_4405_j)
              {
                {
                  _4404_ri += safe_mul( (_ptr__4379_index[_4405_j] - _ptr__4373_astart[_4405_j]),_ptr__4397_rstride[_4405_j] );
                }
              }
              _ptr__4396_rsp[_4399_k] = _4404_ri;
              _ptr__4395_rnidxs[_4399_k] = ((*nidxs)(_4400_i));
              ++ _4399_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4380_rshape,_4396_rsp,_4395_rnidxs)).as<::mosek::fusion::Parameter>();
    }
  }
}
// End mosek.fusion.ParameterImpl.slice

// Begin mosek.fusion.ParameterImpl.slice
// Method mosek.fusion.ParameterImpl.slice @ src/fusion/Parameter.monty:207:6-232:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(int32_t _4406_start,int32_t _4407_stop) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4406_start,_4407_stop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(int32_t _4406_start,int32_t _4407_stop) { return __mosek_2fusion_2ParameterImpl__slice(_4406_start,_4407_stop); }
/* override: mosek.fusion.Parameter.slice*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(int32_t _4406_start,int32_t _4407_stop) { return __mosek_2fusion_2ParameterImpl__slice(_4406_start,_4407_stop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(int32_t _4406_start,int32_t _4407_stop)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  if (((_4406_start < (int)0) || ((_4407_stop >= _4407_stop) || (_4407_stop > size))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::vector<int32_t> _10995_;
      for (int32_t _4408_i = _4406_start, _10996_ = _4407_stop; _4408_i < _10996_ ; ++_4408_i)
      {
        _10995_.push_back(((*nidxs)(_4408_i)));
      }
      auto _10997_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10995_.size()),_10995_.begin(),_10995_.end()));
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)((_4407_stop - _4406_start))}),nullptr,_10997_)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int32_t _4409_count = (int)0;
      int32_t _10998_ = (int)0;
      int32_t _10999_ = (int)((sp)->size(0));
      for (int32_t _4410_i = _10998_; _4410_i < _10999_; ++_4410_i)
      {
        {
          if (((_4406_start <= ((*sp)(_4410_i))) && (((*sp)(_4410_i)) < _4407_stop)))
          {
            {
              ++ _4409_count;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4411_rnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4409_count)));
      _checked_ptr_1<int32_t> _ptr__4411_rnidxs(_4411_rnidxs ? _4411_rnidxs->raw() : nullptr,_4411_rnidxs ? _4411_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4412_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4409_count)));
      _checked_ptr_1<int64_t> _ptr__4412_rsp(_4412_rsp ? _4412_rsp->raw() : nullptr,_4412_rsp ? _4412_rsp->size(0) : 0);
      int32_t _4413_k = (int)0;
      int32_t _11000_ = (int)0;
      int32_t _11001_ = (int)((sp)->size(0));
      for (int32_t _4414_i = _11000_; _4414_i < _11001_; ++_4414_i)
      {
        {
          if (((_4406_start <= ((*sp)(_4414_i))) && (((*sp)(_4414_i)) < _4407_stop)))
          {
            {
              _ptr__4411_rnidxs[_4413_k] = ((*nidxs)(_4414_i));
              _ptr__4412_rsp[_4413_k] = (((*sp)(_4413_k)) - _4406_start);
              ++ _4413_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)((_4407_stop - _4406_start))}),_4412_rsp,_4411_rnidxs)).as<::mosek::fusion::Parameter>();
    }
  }
}
// End mosek.fusion.ParameterImpl.slice

// Begin mosek.fusion.ParameterImpl.reshape
// Method mosek.fusion.ParameterImpl.reshape @ src/fusion/Parameter.monty:201:6-205:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4415_dims) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__reshape(_4415_dims); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4415_dims) { return __mosek_2fusion_2ParameterImpl__reshape(_4415_dims); }
/* override: mosek.fusion.Parameter.reshape*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4415_dims) { return __mosek_2fusion_2ParameterImpl__reshape(_4415_dims); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4415_dims)
{
  _checked_ptr_1<int32_t> _ptr__4415_dims(_4415_dims ? _4415_dims->raw() : nullptr, _4415_dims ? _4415_dims->size(0) : 0);
  if ((::mosek::fusion::p_Set::size(_4415_dims) != ::mosek::fusion::p_Set::size(shape)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incompatible shape for resize"));
    }
  }
  {}
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4415_dims,sp,nidxs)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.ParameterImpl.reshape

// Begin mosek.fusion.ParameterImpl.asExpr
// Method mosek.fusion.ParameterImpl.asExpr @ src/fusion/Parameter.monty:199:6-75
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__asExpr() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }
/* override: mosek.fusion.Parameter.asExpr*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__asExpr()
{
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter((::mosek::fusion::ParameterImpl::t(_pubthis)).as<::mosek::fusion::Parameter>())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.ParameterImpl.asExpr

// Begin mosek.fusion.ParameterImpl.getSize
// Method mosek.fusion.ParameterImpl.getSize @ src/fusion/Parameter.monty:197:6-69
int64_t mosek::fusion::ParameterImpl :: getSize() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getSize(); }
int64_t mosek::fusion::p_ParameterImpl::getSize()
{
  return ::mosek::fusion::p_Set::size(shape);
}
// End mosek.fusion.ParameterImpl.getSize

// Begin mosek.fusion.ParameterImpl.getNumNonzero
// Method mosek.fusion.ParameterImpl.getNumNonzero @ src/fusion/Parameter.monty:196:6-64
int32_t mosek::fusion::ParameterImpl :: getNumNonzero() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getNumNonzero(); }
int32_t mosek::fusion::p_ParameterImpl::getNumNonzero()
{
  return (int)((nidxs)->size(0));
}
// End mosek.fusion.ParameterImpl.getNumNonzero

// Begin mosek.fusion.ParameterImpl.getND
// Method mosek.fusion.ParameterImpl.getND @ src/fusion/Parameter.monty:195:6-64
int32_t mosek::fusion::ParameterImpl :: getND() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_ParameterImpl::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.ParameterImpl.getND

// Begin mosek.fusion.ParameterImpl.getShape
// Method mosek.fusion.ParameterImpl.getShape @ src/fusion/Parameter.monty:194:6-82
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::ParameterImpl :: getShape() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ParameterImpl::getShape()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
// End mosek.fusion.ParameterImpl.getShape

// Begin mosek.fusion.ParameterImpl.getDim
// Method mosek.fusion.ParameterImpl.getDim @ src/fusion/Parameter.monty:193:6-69
int32_t mosek::fusion::ParameterImpl :: getDim(int32_t _4416_i) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getDim(_4416_i); }
int32_t mosek::fusion::p_ParameterImpl::getDim(int32_t _4416_i)
{
  return ((*shape)(_4416_i));
}
// End mosek.fusion.ParameterImpl.getDim

// Begin mosek.fusion.ParameterImpl.getAllIndexes
// Method mosek.fusion.ParameterImpl.getAllIndexes @ src/fusion/Parameter.monty:188:6-191:7
void mosek::fusion::ParameterImpl :: getAllIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _4417_dst,int32_t _4418_ofs) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getAllIndexes(_4417_dst,_4418_ofs); }
void mosek::fusion::p_ParameterImpl::getAllIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _4417_dst,int32_t _4418_ofs)
{
  _checked_ptr_1<int32_t> _ptr__4417_dst(_4417_dst ? _4417_dst->raw() : nullptr, _4417_dst ? _4417_dst->size(0) : 0);
  int32_t _11002_ = (int)0;
  int32_t _11003_ = (int)((nidxs)->size(0));
  for (int32_t _4419_i = _11002_; _4419_i < _11003_; ++_4419_i)
  {
    {
      _ptr__4417_dst[safe_add( _4418_ofs,_4419_i )] = ((*nidxs)(_4419_i));
    }
  }
}
// End mosek.fusion.ParameterImpl.getAllIndexes

// Begin mosek.fusion.ParameterImpl.getIndex
// Method mosek.fusion.ParameterImpl.getIndex @ src/fusion/Parameter.monty:185:6-187:7
int32_t mosek::fusion::ParameterImpl :: getIndex(int32_t _4420_i) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getIndex(_4420_i); }
int32_t mosek::fusion::p_ParameterImpl::getIndex(int32_t _4420_i)
{
  return ((*nidxs)(_4420_i));
}
// End mosek.fusion.ParameterImpl.getIndex

// Begin mosek.fusion.ParameterImpl.getValue
// Method mosek.fusion.ParameterImpl.getValue @ src/fusion/Parameter.monty:180:6-182:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ParameterImpl :: getValue() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getValue(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_ParameterImpl::getValue()
{
  return mosek::fusion::p_Model::_get_impl(model.get())->getParameterValue(nidxs);
}
// End mosek.fusion.ParameterImpl.getValue

// Begin mosek.fusion.ParameterImpl.setValue
// Method mosek.fusion.ParameterImpl.setValue @ src/fusion/Parameter.monty:158:6-176:7
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,2 > > _4421_values2) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4421_values2); }
void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,2 > > _4421_values2)
{
  if (((_pubthis->getND() != (int)2) || (((int)((_4421_values2)->size(0)) != ((*shape)((int)0))) || ((int)((_4421_values2)->size(1)) != ((*shape)((int)1))))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching value shape"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _4422_vals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( ((*shape)((int)0)),((*shape)((int)1)) ))));
      _checked_ptr_1<double> _ptr__4422_vals(_4422_vals ? _4422_vals->raw() : nullptr,_4422_vals ? _4422_vals->size(0) : 0);
      int32_t _11004_ = (int)0;
      int32_t _11005_ = ((*shape)((int)0));
      for (int32_t _4423_i = _11004_; _4423_i < _11005_; ++_4423_i)
      {
        {
          int32_t _11006_ = (int)0;
          int32_t _11007_ = ((*shape)((int)1));
          for (int32_t _4424_j = _11006_; _4424_j < _11007_; ++_4424_j)
          {
            {
              _ptr__4422_vals[safe_add( safe_mul( _4423_i,((*shape)((int)1)) ),_4424_j )] = ((*_4421_values2)(_4423_i,_4424_j));
            }
          }
        }
      }
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4422_vals);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _4425_vals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((sp)->size(0)))));
      _checked_ptr_1<double> _ptr__4425_vals(_4425_vals ? _4425_vals->raw() : nullptr,_4425_vals ? _4425_vals->size(0) : 0);
      int32_t _11008_ = (int)0;
      int32_t _11009_ = (int)((sp)->size(0));
      for (int32_t _4426_i = _11008_; _4426_i < _11009_; ++_4426_i)
      {
        {
          _ptr__4425_vals[_4426_i] = ((*_4421_values2)((((*sp)(_4426_i)) / ((*shape)((int)1))),(((*sp)(_4426_i)) % ((*shape)((int)1)))));
        }
      }
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4425_vals);
    }
  }
}
// End mosek.fusion.ParameterImpl.setValue

// Begin mosek.fusion.ParameterImpl.setValue
// Method mosek.fusion.ParameterImpl.setValue @ src/fusion/Parameter.monty:139:6-156:7
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,1 > > _4427_values) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4427_values); }
void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,1 > > _4427_values)
{
  _checked_ptr_1<double> _ptr__4427_values(_4427_values ? _4427_values->raw() : nullptr, _4427_values ? _4427_values->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      if (((int)((_4427_values)->size(0)) != (int)((nidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4427_values);
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_4427_values)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _4428_cvals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nidxs)->size(0)))));
          _checked_ptr_1<double> _ptr__4428_cvals(_4428_cvals ? _4428_cvals->raw() : nullptr,_4428_cvals ? _4428_cvals->size(0) : 0);
          int32_t _11010_ = (int)0;
          int32_t _11011_ = (int)((nidxs)->size(0));
          for (int32_t _4429_i = _11010_; _4429_i < _11011_; ++_4429_i)
          {
            {
              _ptr__4428_cvals[_4429_i] = _ptr__4427_values[((*sp)(_4429_i))];
            }
          }
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4428_cvals);
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.setValue

// Begin mosek.fusion.ParameterImpl.setValue
// Method mosek.fusion.ParameterImpl.setValue @ src/fusion/Parameter.monty:132:6-137:7
void mosek::fusion::ParameterImpl :: setValue(double _4430_value) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4430_value); }
void mosek::fusion::p_ParameterImpl::setValue(double _4430_value)
{
  std::shared_ptr< monty::ndarray< double,1 > > _4431_vals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(size)));
  _checked_ptr_1<double> _ptr__4431_vals(_4431_vals ? _4431_vals->raw() : nullptr,_4431_vals ? _4431_vals->size(0) : 0);
  int32_t _11012_ = (int)0;
  int64_t _11013_ = size;
  for (int64_t _4432_i = _11012_; _4432_i < _11013_; ++_4432_i)
  {
    {
      _ptr__4431_vals[_4432_i] = _4430_value;
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4431_vals);
}
// End mosek.fusion.ParameterImpl.setValue

// Begin mosek.fusion.ParameterImpl.getModel
// Method mosek.fusion.ParameterImpl.getModel @ src/fusion/Parameter.monty:131:6-54
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__getModel() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }
/* override: mosek.fusion.Parameter.getModel*/
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__getModel()
{
  return model;
}
// End mosek.fusion.ParameterImpl.getModel

void mosek::fusion::p_ParameterImpl::destroy()
{
  nidxs.reset();
  sp.reset();
  shape.reset();
  model.reset();
}
void mosek::fusion::ParameterImpl::destroy() { mosek::fusion::p_ParameterImpl::_get_impl(this)->destroy(); }
// } class ParameterImpl
// class Parameter { // @ src/fusion/Parameter.monty:71:4-102:5
// Begin mosek.fusion.Parameter.clone
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::clone(monty::rc_ptr< ::mosek::fusion::Model > _4433_m) { return __mosek_2fusion_2Parameter__clone(_4433_m); }
// End mosek.fusion.Parameter.clone

// Begin mosek.fusion.Parameter.getModel
monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Parameter::getModel() { return __mosek_2fusion_2Parameter__getModel(); }
// End mosek.fusion.Parameter.getModel

// Begin mosek.fusion.Parameter.getSize
// End mosek.fusion.Parameter.getSize

// Begin mosek.fusion.Parameter.getAllIndexes
// End mosek.fusion.Parameter.getAllIndexes

// Begin mosek.fusion.Parameter.getIndex
// End mosek.fusion.Parameter.getIndex

// Begin mosek.fusion.Parameter.getSp
// End mosek.fusion.Parameter.getSp

// Begin mosek.fusion.Parameter.getShape
// End mosek.fusion.Parameter.getShape

// Begin mosek.fusion.Parameter.getND
// End mosek.fusion.Parameter.getND

// Begin mosek.fusion.Parameter.getDim
// End mosek.fusion.Parameter.getDim

// Begin mosek.fusion.Parameter.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4440_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4441_astop) { return __mosek_2fusion_2Parameter__slice(_4440_astart,_4441_astop); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4440_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4441_astop) { return __mosek_2fusion_2Parameter__slice(_4440_astart,_4441_astop); }
// End mosek.fusion.Parameter.slice

// Begin mosek.fusion.Parameter.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(int32_t _4442_start,int32_t _4443_stop) { return __mosek_2fusion_2Parameter__slice(_4442_start,_4443_stop); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(int32_t _4442_start,int32_t _4443_stop) { return __mosek_2fusion_2Parameter__slice(_4442_start,_4443_stop); }
// End mosek.fusion.Parameter.slice

// Begin mosek.fusion.Parameter.isSparse
// End mosek.fusion.Parameter.isSparse

// Begin mosek.fusion.Parameter.reshape
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4444_dims) { return __mosek_2fusion_2Parameter__reshape(_4444_dims); }
// End mosek.fusion.Parameter.reshape

// Begin mosek.fusion.Parameter.getNumNonzero
// End mosek.fusion.Parameter.getNumNonzero

// Begin mosek.fusion.Parameter.asExpr
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::asExpr() { return __mosek_2fusion_2Parameter__asExpr(); }
// End mosek.fusion.Parameter.asExpr

// Begin mosek.fusion.Parameter.getValue
// End mosek.fusion.Parameter.getValue

// Begin mosek.fusion.Parameter.setValue
// End mosek.fusion.Parameter.setValue

// Begin mosek.fusion.Parameter.setValue
// End mosek.fusion.Parameter.setValue

// Begin mosek.fusion.Parameter.setValue
// End mosek.fusion.Parameter.setValue

// } class Parameter
// class ExprOptimizeCode { // @ src/fusion/ExprCompress.monty:514:4-1215:5
mosek::fusion::ExprOptimizeCode::ExprOptimizeCode(mosek::fusion::p_ExprOptimizeCode *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprOptimizeCode()" << this << std::endl; */ }
mosek::fusion::ExprOptimizeCode::~ExprOptimizeCode() {  /* std::cout << "~ExprOptimizeCode()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprOptimizeCode::p_ExprOptimizeCode
  (::mosek::fusion::ExprOptimizeCode * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprOptimizeCode.ctor @ src/fusion/ExprCompress.monty:516:6-519:7
mosek::fusion::ExprOptimizeCode::t mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode
  (monty::rc_ptr< ::mosek::fusion::Expression > _4448_expr)
{ return new mosek::fusion::ExprOptimizeCode(_4448_expr); }
mosek::fusion::ExprOptimizeCode::ExprOptimizeCode
  (monty::rc_ptr< ::mosek::fusion::Expression > _4448_expr) : 
   ExprOptimizeCode(new mosek::fusion::p_ExprOptimizeCode(this))
{ mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->_initialize(_4448_expr); }
void mosek::fusion::p_ExprOptimizeCode::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4448_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_4448_expr->getShape());
    mosek::fusion::p_ExprOptimizeCode::_get_impl(::mosek::fusion::ExprOptimizeCode::t(_pubthis))->expr = _4448_expr;
  }
}
// mosek.fusion.ExprOptimizeCode.ctor

// Begin mosek.fusion.ExprOptimizeCode.compress_code
// Method mosek.fusion.ExprOptimizeCode.compress_code @ src/fusion/ExprCompress.monty:772:6-1214:7
void mosek::fusion::p_ExprOptimizeCode::compress_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _4449_xs,int32_t _4450_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _4451_code,int32_t _4452_code_base,std::shared_ptr< monty::ndarray< int32_t,1 > > _4453_ptr,int32_t _4454_ptr_base,std::shared_ptr< monty::ndarray< double,1 > > _4455_fixterm,int32_t _4456_fixterm_base,std::shared_ptr< monty::ndarray< double,1 > > _4457_code_consts,int32_t _4458_code_consts_base,int32_t _4459_target_code_base,int32_t _4460_target_const_base,int32_t _4461_target_ptr_base)
{
  _checked_ptr_1<int32_t> _ptr__4451_code(_4451_code ? _4451_code->raw() : nullptr, _4451_code ? _4451_code->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4453_ptr(_4453_ptr ? _4453_ptr->raw() : nullptr, _4453_ptr ? _4453_ptr->size(0) : 0);
  _checked_ptr_1<double> _ptr__4455_fixterm(_4455_fixterm ? _4455_fixterm->raw() : nullptr, _4455_fixterm ? _4455_fixterm->size(0) : 0);
  _checked_ptr_1<double> _ptr__4457_code_consts(_4457_code_consts ? _4457_code_consts->raw() : nullptr, _4457_code_consts ? _4457_code_consts->size(0) : 0);
  int32_t _4462_ncodeatoms = _ptr__4453_ptr[safe_add( _4454_ptr_base,_4450_n )];
  int32_t _4463_stack = _4449_xs->alloci32(safe_add( _4462_ncodeatoms,(int)2 ));
  int32_t _4464_stackp = (int)0;
  int32_t _4465_chld = _4449_xs->alloci32(safe_add( _4462_ncodeatoms,(int)2 ));
  int32_t _4466_chld_ptr = _4449_xs->alloci32(safe_add( _4462_ncodeatoms,(int)3 ));
  int32_t _4467_tcconst = _4449_xs->allocf64(safe_add( _4462_ncodeatoms,(int)2 ));
  int32_t _4468_tcode = _4449_xs->alloci32(safe_add( _4462_ncodeatoms,(int)2 ));
  int32_t _4469_tcodep = (int)0;
  int32_t _4470_error_at = (-(int)1);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4471_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4449_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4471_xi32(_4471_xi32 ? _4471_xi32->raw() : nullptr,_4471_xi32 ? _4471_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4472_xf64 = mosek::fusion::p_WorkStack::_get_impl(_4449_xs)->f64;
  _checked_ptr_1<double> _ptr__4472_xf64(_4472_xf64 ? _4472_xf64->raw() : nullptr,_4472_xf64 ? _4472_xf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4473_target_code = _4471_xi32;
  _checked_ptr_1<int32_t> _ptr__4473_target_code(_4473_target_code ? _4473_target_code->raw() : nullptr,_4473_target_code ? _4473_target_code->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4474_target_const = _4472_xf64;
  _checked_ptr_1<double> _ptr__4474_target_const(_4474_target_const ? _4474_target_const->raw() : nullptr,_4474_target_const ? _4474_target_const->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4475_target_ptr = _4471_xi32;
  _checked_ptr_1<int32_t> _ptr__4475_target_ptr(_4475_target_ptr ? _4475_target_ptr->raw() : nullptr,_4475_target_ptr ? _4475_target_ptr->size(0) : 0);
  int32_t _4476_xpi32 = mosek::fusion::p_WorkStack::_get_impl(_4449_xs)->pi32;
  int32_t _4477_xpi64 = mosek::fusion::p_WorkStack::_get_impl(_4449_xs)->pi64;
  int32_t _4478_xpf64 = mosek::fusion::p_WorkStack::_get_impl(_4449_xs)->pf64;
  _ptr__4475_target_ptr[_4461_target_ptr_base] = (int)0;
  int32_t _4479_codei = (int)0;
  int32_t _11014_ = (int)0;
  int32_t _11015_ = _4450_n;
  for (int32_t _4480_i = _11014_; _4480_i < _11015_; ++_4480_i)
  {
    {
      int32_t _4481_e = _ptr__4453_ptr[safe_add( safe_add( _4454_ptr_base,_4480_i ),(int)1 )];
      int32_t _4482_b = _ptr__4453_ptr[safe_add( _4454_ptr_base,_4480_i )];
      if ((_4470_error_at < (int)0))
      {
        {
          _4464_stackp = (int)0;
          _4469_tcodep = (int)0;
          _ptr__4471_xi32[_4466_chld_ptr] = (int)0;
          int32_t _11016_ = (int)0;
          int32_t _11017_ = (_4481_e - _4482_b);
          for (int32_t _4483_j = _11016_; _4483_j < _11017_; ++_4483_j)
          {
            {
              _ptr__4473_target_code[safe_add( _4468_tcode,_4483_j )] = (-(int)9999);
            }
          }
          int32_t _11018_ = _4482_b;
          int32_t _11019_ = _4481_e;
          for (int32_t _4484_j = _11018_; _4484_j < _11019_; ++_4484_j)
          {
            {
              int32_t _4485_opcode = _ptr__4451_code[safe_add( _4452_code_base,_4484_j )];
              double _4486_oparg = _ptr__4457_code_consts[safe_add( _4458_code_consts_base,_4484_j )];
              if ((_4485_opcode == 0))
              {
                {
                }
              }
              else if((_4485_opcode == 2))
              {
                {
                  _ptr__4473_target_code[safe_add( _4468_tcode,_4469_tcodep )] = 2;
                  _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = _4486_oparg;
                  _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                  _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                  ++ _4464_stackp;
                  ++ _4469_tcodep;
                }
              }
              else if((_4485_opcode == 1))
              {
                {
                  _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = _4485_opcode;
                  _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = _4486_oparg;
                  _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                  _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                  ++ _4464_stackp;
                  ++ _4469_tcodep;
                }
              }
              else if((_4485_opcode == 3))
              {
                {
                  if ((_4464_stackp >= (int)2))
                  {
                    {
                      int32_t _4487_i1 = _ptr__4471_xi32[(safe_add( _4463_stack,_4464_stackp ) - (int)1)];
                      -- _4464_stackp;
                      int32_t _4488_i0 = _ptr__4471_xi32[(safe_add( _4463_stack,_4464_stackp ) - (int)1)];
                      -- _4464_stackp;
                      if (((_ptr__4471_xi32[safe_add( _4468_tcode,_4488_i0 )] == 2) && (_ptr__4471_xi32[safe_add( _4468_tcode,_4487_i1 )] == 2)))
                      {
                        {
                          _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 2;
                          _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = (_ptr__4472_xf64[safe_add( _4467_tcconst,_4488_i0 )] + _ptr__4472_xf64[safe_add( _4467_tcconst,_4487_i1 )]);
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                      else if(((_ptr__4471_xi32[safe_add( _4468_tcode,_4488_i0 )] == 2) && ((_ptr__4472_xf64[safe_add( _4467_tcconst,_4488_i0 )] <= 0.0) && (_ptr__4472_xf64[safe_add( _4467_tcconst,_4488_i0 )] >= 0.0))))
                      {
                        {
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                          _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = 0.0;
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4487_i1;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                      else if(((_ptr__4471_xi32[safe_add( _4468_tcode,_4487_i1 )] == 2) && ((_ptr__4472_xf64[safe_add( _4467_tcconst,_4487_i1 )] <= 0.0) && (_ptr__4472_xf64[safe_add( _4467_tcconst,_4487_i1 )] >= 0.0))))
                      {
                        {
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4488_i0;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = safe_add( _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )],(int)2 );
                          _ptr__4471_xi32[safe_add( _4465_chld,_ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )] )] = _4488_i0;
                          _ptr__4471_xi32[safe_add( safe_add( _4465_chld,_ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )] ),(int)1 )] = _4487_i1;
                          _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = _4485_opcode;
                          _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = _4486_oparg;
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4470_error_at = _4484_j;
                    }
                  }
                }
              }
              else if((_4485_opcode == 5))
              {
                {
                  if ((_4464_stackp >= (int)2))
                  {
                    {
                      int32_t _4489_i1 = _ptr__4471_xi32[(safe_add( _4463_stack,_4464_stackp ) - (int)1)];
                      -- _4464_stackp;
                      int32_t _4490_i0 = _ptr__4471_xi32[(safe_add( _4463_stack,_4464_stackp ) - (int)1)];
                      -- _4464_stackp;
                      if (((_ptr__4471_xi32[safe_add( _4468_tcode,_4490_i0 )] == 2) && (_ptr__4471_xi32[safe_add( _4468_tcode,_4489_i1 )] == 2)))
                      {
                        {
                          _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 2;
                          _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = (_ptr__4472_xf64[safe_add( _4467_tcconst,_4490_i0 )] * _ptr__4472_xf64[safe_add( _4467_tcconst,_4489_i1 )]);
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                      else if(((_ptr__4471_xi32[safe_add( _4468_tcode,_4490_i0 )] == 2) && ((_ptr__4472_xf64[safe_add( _4467_tcconst,_4490_i0 )] <= 0.0) && (_ptr__4472_xf64[safe_add( _4467_tcconst,_4490_i0 )] >= 0.0))))
                      {
                        {
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                          _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 2;
                          _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = 0.0;
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                      else if(((_ptr__4471_xi32[safe_add( _4468_tcode,_4489_i1 )] == 2) && ((_ptr__4472_xf64[safe_add( _4467_tcconst,_4489_i1 )] <= 0.0) && (_ptr__4472_xf64[safe_add( _4467_tcconst,_4489_i1 )] >= 0.0))))
                      {
                        {
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                          _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 2;
                          _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = 0.0;
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                      else if(((_ptr__4471_xi32[safe_add( _4468_tcode,_4489_i1 )] == 2) && ((_ptr__4472_xf64[safe_add( _4467_tcconst,_4489_i1 )] <= 1.0) && (_ptr__4472_xf64[safe_add( _4467_tcconst,_4489_i1 )] >= 1.0))))
                      {
                        {
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = safe_add( _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )],(int)1 );
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4490_i0;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                      else if(((_ptr__4471_xi32[safe_add( _4468_tcode,_4490_i0 )] == 2) && ((_ptr__4472_xf64[safe_add( _4467_tcconst,_4490_i0 )] <= 1.0) && (_ptr__4472_xf64[safe_add( _4467_tcconst,_4490_i0 )] >= 1.0))))
                      {
                        {
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = safe_add( _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )],(int)1 );
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4489_i1;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = safe_add( _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )],(int)2 );
                          _ptr__4471_xi32[safe_add( _4465_chld,_ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )] )] = _4490_i0;
                          _ptr__4471_xi32[safe_add( safe_add( _4465_chld,_ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )] ),(int)1 )] = _4489_i1;
                          _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 5;
                          _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = _4486_oparg;
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4470_error_at = _4484_j;
                    }
                  }
                }
              }
              else if((_4485_opcode == 4))
              {
                {
                  if ((_4464_stackp >= (int)1))
                  {
                    {
                      int32_t _4491_i0 = _ptr__4471_xi32[(safe_add( _4463_stack,_4464_stackp ) - (int)1)];
                      -- _4464_stackp;
                      if ((_ptr__4471_xi32[safe_add( _4468_tcode,_4491_i0 )] == 2))
                      {
                        {
                          _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 2;
                          _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = (-_ptr__4472_xf64[safe_add( _4467_tcconst,_4491_i0 )]);
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = _ptr__4451_code[safe_add( _4452_code_base,_4484_j )];
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = safe_add( _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )],(int)1 );
                          _ptr__4471_xi32[safe_add( _4465_chld,_ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )] )] = _4491_i0;
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4470_error_at = _4484_j;
                    }
                  }
                }
              }
              else if((_4485_opcode == 6))
              {
                {
                  if ((_4464_stackp >= (int)1))
                  {
                    {
                      int32_t _4492_i0 = _ptr__4471_xi32[(safe_add( _4463_stack,_4464_stackp ) - (int)1)];
                      -- _4464_stackp;
                      if ((_ptr__4471_xi32[safe_add( _4468_tcode,_4492_i0 )] == 2))
                      {
                        {
                          _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 2;
                          _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = (1.0 / _ptr__4472_xf64[safe_add( _4467_tcconst,_4492_i0 )]);
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = _ptr__4451_code[safe_add( _4452_code_base,_4484_j )];
                          _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = safe_add( _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )],(int)1 );
                          _ptr__4471_xi32[safe_add( _4465_chld,_ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )] )] = _4492_i0;
                          _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                          ++ _4464_stackp;
                          ++ _4469_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4470_error_at = _4484_j;
                    }
                  }
                }
              }
              else if((_4485_opcode == 8))
              {
                {
                  int32_t _4493_num = (int32_t)_4486_oparg;
                  if ((_4493_num < (int)0))
                  {
                    {
                      _4470_error_at = _4484_j;
                    }
                  }
                  else if((_4493_num > _4464_stackp))
                  {
                    {
                      _4470_error_at = _4484_j;
                    }
                  }
                  else if((_4493_num == (int)0))
                  {
                    {
                      _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 2;
                      _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = 0.0;
                      _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                      _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                      ++ _4464_stackp;
                      ++ _4469_tcodep;
                    }
                  }
                  else if((_4493_num == (int)1))
                  {
                    {
                      _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = (int)0;
                      _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                      _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                      ++ _4464_stackp;
                      ++ _4469_tcodep;
                    }
                  }
                  else
                  {
                    {
                      std::vector<int32_t> _11020_;
                      for (int32_t _4495_j = (int)0, _11021_ = _4493_num; _4495_j < _11021_ ; ++_4495_j)
                      {
                        _11020_.push_back(_ptr__4471_xi32[((safe_add( _4463_stack,_4464_stackp ) - (int)1) - _4495_j)]);
                      }
                      auto _11022_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11020_.size()),_11020_.begin(),_11020_.end()));
                      std::shared_ptr< monty::ndarray< int32_t,1 > > _4494_ii = _11022_;
                      _checked_ptr_1<int32_t> _ptr__4494_ii(_4494_ii ? _4494_ii->raw() : nullptr,_4494_ii ? _4494_ii->size(0) : 0);
                      _4464_stackp -= _4493_num;
                      {
                        int32_t _4496_i1 = (_4493_num - (int)1);
                        int32_t _4497_i0 = (int)0;
                        while ( (_4497_i0 < _4496_i1) )
                        {
                          {
                            while ( ((_4497_i0 < _4496_i1) && (_ptr__4471_xi32[safe_add( _4468_tcode,_ptr__4494_ii[_4497_i0] )] == 2)) )
                            {
                              {
                                ++ _4497_i0;
                              }
                            }
                            while ( ((_4497_i0 < _4496_i1) && (_ptr__4471_xi32[safe_add( _4468_tcode,_ptr__4494_ii[_4496_i1] )] != 2)) )
                            {
                              {
                                -- _4496_i1;
                              }
                            }
                            if ((_4497_i0 < _4496_i1))
                            {
                              {
                                int32_t _4498_t = _ptr__4494_ii[_4497_i0];
                                _ptr__4494_ii[_4497_i0] = _ptr__4494_ii[_4496_i1];
                                _ptr__4494_ii[_4496_i1] = _4498_t;
                                ++ _4497_i0;
                                -- _4496_i1;
                              }
                            }
                            {}
                          }
                        }
                        double _4499_val = 0.0;
                        int32_t _4500_numconstelm = (int)0;
                        while ( ((_4500_numconstelm < _4493_num) && (_ptr__4471_xi32[safe_add( _4468_tcode,_ptr__4494_ii[_4500_numconstelm] )] == 2)) )
                        {
                          {
                            _4499_val += _ptr__4472_xf64[safe_add( _4467_tcconst,_ptr__4494_ii[_4500_numconstelm] )];
                            ++ _4500_numconstelm;
                          }
                        }
                        int32_t _11023_;
                        bool _11024_ = (_4500_numconstelm > (int)0);
                        if (_11024_)
                        {
                          _11023_ = safe_add( (_4493_num - _4500_numconstelm),(int)1 );
                        }
                        else
                        {
                          _11023_ = _4493_num;
                        }
                        int32_t _4501_numsumelm = _11023_;
                        int32_t _4502_p = (int)0;
                        if ((_4500_numconstelm < (int)2))
                        {
                          {
                            int32_t _11025_ = (int)0;
                            int32_t _11026_ = _4493_num;
                            for (int32_t _4503_j = _11025_; _4503_j < _11026_; ++_4503_j)
                            {
                              {
                                _ptr__4471_xi32[safe_add( safe_add( _4465_chld,_ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )] ),_4503_j )] = _ptr__4494_ii[_4503_j];
                              }
                            }
                            _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = safe_add( _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )],_4493_num );
                            _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 8;
                            _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = _4493_num;
                            _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                            ++ _4464_stackp;
                            ++ _4469_tcodep;
                          }
                        }
                        else
                        {
                          {
                            _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 2;
                            _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = _4499_val;
                            _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )];
                            ++ _4469_tcodep;
                            if ((_4500_numconstelm == _4493_num))
                            {
                              {
                                _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = (_4469_tcodep - (int)1);
                                ++ _4464_stackp;
                              }
                            }
                            else
                            {
                              {
                                _ptr__4471_xi32[safe_add( _4465_chld,_ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )] )] = (_4469_tcodep - (int)1);
                                int32_t _11027_ = _4500_numconstelm;
                                int32_t _11028_ = _4493_num;
                                for (int32_t _4504_j = _11027_; _4504_j < _11028_; ++_4504_j)
                                {
                                  {
                                    _ptr__4471_xi32[safe_add( (safe_add( safe_add( _4465_chld,_ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )] ),_4504_j ) - _4500_numconstelm),(int)1 )] = _ptr__4494_ii[_4504_j];
                                  }
                                }
                                _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4469_tcodep ),(int)1 )] = safe_add( _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4469_tcodep )],_4501_numsumelm );
                                _ptr__4471_xi32[safe_add( _4468_tcode,_4469_tcodep )] = 8;
                                _ptr__4472_xf64[safe_add( _4467_tcconst,_4469_tcodep )] = _4501_numsumelm;
                                _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _4469_tcodep;
                                ++ _4464_stackp;
                                ++ _4469_tcodep;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                {
                  _4470_error_at = _4484_j;
                }
              }
            }
          }
        }
      }
      {}
      if (((_4470_error_at < (int)0) && (_4464_stackp != (int)1)))
      {
        {
          _4470_error_at = _4469_tcodep;
        }
      }
      {}
      if ((_4470_error_at < (int)0))
      {
        {
          int32_t _4505_p0 = _4479_codei;
          int32_t _4506_p = _4505_p0;
          if ((_ptr__4471_xi32[safe_add( _4468_tcode,_ptr__4471_xi32[(safe_add( _4463_stack,_4464_stackp ) - (int)1)] )] == 2))
          {
            {
              _ptr__4455_fixterm[safe_add( _4456_fixterm_base,_4480_i )] += _ptr__4472_xf64[safe_add( _4467_tcconst,_ptr__4471_xi32[(safe_add( _4463_stack,_4464_stackp ) - (int)1)] )];
              _ptr__4473_target_code[safe_add( _4459_target_code_base,_4506_p )] = 10;
              _ptr__4474_target_const[safe_add( _4460_target_const_base,_4506_p )] = 0.0;
              ++ _4506_p;
            }
          }
          else
          {
            {
              if (((_ptr__4455_fixterm[safe_add( _4456_fixterm_base,_4480_i )] < (int)0) || ((int)0 < _ptr__4455_fixterm[safe_add( _4456_fixterm_base,_4480_i )])))
              {
                {
                  _ptr__4473_target_code[safe_add( _4459_target_code_base,_4506_p )] = 3;
                  ++ _4506_p;
                  _ptr__4473_target_code[safe_add( _4459_target_code_base,_4506_p )] = 2;
                  _ptr__4474_target_const[safe_add( _4460_target_const_base,_4506_p )] = _ptr__4455_fixterm[safe_add( _4456_fixterm_base,_4480_i )];
                  ++ _4506_p;
                  _ptr__4455_fixterm[safe_add( _4456_fixterm_base,_4480_i )] = (int)0;
                }
              }
              {}
              while ( (_4464_stackp > (int)0) )
              {
                {
                  int32_t _4507_k = _ptr__4471_xi32[(safe_add( _4463_stack,_4464_stackp ) - (int)1)];
                  -- _4464_stackp;
                  int32_t _4508_op = _ptr__4471_xi32[safe_add( _4468_tcode,_4507_k )];
                  double _4509_arg = _ptr__4472_xf64[safe_add( _4467_tcconst,_4507_k )];
                  _ptr__4473_target_code[safe_add( _4459_target_code_base,_4506_p )] = _4508_op;
                  _ptr__4474_target_const[safe_add( _4460_target_const_base,_4506_p )] = _4509_arg;
                  ++ _4506_p;
                  int32_t _11029_ = _ptr__4471_xi32[safe_add( _4466_chld_ptr,_4507_k )];
                  int32_t _11030_ = _ptr__4471_xi32[safe_add( safe_add( _4466_chld_ptr,_4507_k ),(int)1 )];
                  for (int32_t _4510_l = _11029_; _4510_l < _11030_; ++_4510_l)
                  {
                    {
                      _ptr__4471_xi32[safe_add( _4463_stack,_4464_stackp )] = _ptr__4471_xi32[safe_add( _4465_chld,_4510_l )];
                      ++ _4464_stackp;
                    }
                  }
                }
              }
              int32_t _4511_p1 = _4506_p;
              -- _4511_p1;
              while ( (_4505_p0 < _4511_p1) )
              {
                {
                  int32_t _4512_ta = _ptr__4473_target_code[safe_add( _4459_target_code_base,_4505_p0 )];
                  double _4513_v = _ptr__4474_target_const[safe_add( _4460_target_const_base,_4505_p0 )];
                  _ptr__4473_target_code[safe_add( _4459_target_code_base,_4505_p0 )] = _ptr__4473_target_code[safe_add( _4459_target_code_base,_4511_p1 )];
                  _ptr__4474_target_const[safe_add( _4460_target_const_base,_4505_p0 )] = _ptr__4474_target_const[safe_add( _4460_target_const_base,_4511_p1 )];
                  _ptr__4473_target_code[safe_add( _4459_target_code_base,_4511_p1 )] = _4512_ta;
                  _ptr__4474_target_const[safe_add( _4460_target_const_base,_4511_p1 )] = _4513_v;
                  ++ _4505_p0;
                  -- _4511_p1;
                }
              }
            }
          }
          _ptr__4475_target_ptr[safe_add( safe_add( _4461_target_ptr_base,_4480_i ),(int)1 )] = _4506_p;
          _4479_codei = _4506_p;
        }
      }
      {}
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_4449_xs)->pi32 = _4476_xpi32;
  mosek::fusion::p_WorkStack::_get_impl(_4449_xs)->pi64 = _4477_xpi64;
  mosek::fusion::p_WorkStack::_get_impl(_4449_xs)->pf64 = _4478_xpf64;
  if ((_4470_error_at >= (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid parameterization code list"));
    }
  }
  {}
}
// End mosek.fusion.ExprOptimizeCode.compress_code

// Begin mosek.fusion.ExprOptimizeCode.eval
// Method mosek.fusion.ExprOptimizeCode.eval @ src/fusion/ExprCompress.monty:525:6-755:7
void mosek::fusion::ExprOptimizeCode :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4514_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4515_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4516_xs) { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->eval(_4514_rs,_4515_ws,_4516_xs); }
void mosek::fusion::p_ExprOptimizeCode::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4514_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4515_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4516_xs)
{
  expr->eval(_4515_ws,_4514_rs,_4516_xs);
  _4515_ws->peek_expr();
  _4515_ws->pop_expr();
  int32_t _4517_nd = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->nd;
  int32_t _4518_shape = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->shape_base;
  int32_t _4519_nelem = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->nelem;
  int32_t _4520_nnz = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->nnz;
  bool _4521_hassp = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->hassp;
  int32_t _4522_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->ncodeatom;
  int32_t _4523_ptr = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->ptr_base;
  int32_t _4524_sp = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->sp_base;
  int32_t _4525_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->nidxs_base;
  int32_t _4526_cof = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->cof_base;
  int32_t _4527_code = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->code_base;
  int32_t _4528_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->codeptr_base;
  int32_t _4529_cconst = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4530_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4530_wi32(_4530_wi32 ? _4530_wi32->raw() : nullptr,_4530_wi32 ? _4530_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4531_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4531_wi64(_4531_wi64 ? _4531_wi64->raw() : nullptr,_4531_wi64 ? _4531_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4532_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4515_ws)->f64;
  _checked_ptr_1<double> _ptr__4532_wf64(_4532_wf64 ? _4532_wf64->raw() : nullptr,_4532_wf64 ? _4532_wf64->size(0) : 0);
  if ((_4522_ncodeatom == (int)0))
  {
    {
      _4514_rs->alloc_expr(_4517_nd,_4519_nelem,_4520_nnz,_4521_hassp,(int)0);
      int32_t _4533_rptr = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->ptr_base;
      int32_t _4534_rsp = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->sp_base;
      int32_t _4535_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->nidxs_base;
      int32_t _4536_rcof = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->cof_base;
      int32_t _4537_rshape = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->shape_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4538_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4538_ri32(_4538_ri32 ? _4538_ri32->raw() : nullptr,_4538_ri32 ? _4538_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4539_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4539_ri64(_4539_ri64 ? _4539_ri64->raw() : nullptr,_4539_ri64 ? _4539_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4540_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->f64;
      _checked_ptr_1<double> _ptr__4540_rf64(_4540_rf64 ? _4540_rf64->raw() : nullptr,_4540_rf64 ? _4540_rf64->size(0) : 0);
      int32_t _11031_ = (int)0;
      int32_t _11032_ = safe_add( _4519_nelem,(int)1 );
      for (int32_t _4541_i = _11031_; _4541_i < _11032_; ++_4541_i)
      {
        {
          _ptr__4538_ri32[safe_add( _4533_rptr,_4541_i )] = _ptr__4530_wi32[safe_add( _4523_ptr,_4541_i )];
        }
      }
      int32_t _11033_ = (int)0;
      int32_t _11034_ = _4517_nd;
      for (int32_t _4542_i = _11033_; _4542_i < _11034_; ++_4542_i)
      {
        {
          _ptr__4538_ri32[safe_add( _4537_rshape,_4542_i )] = _ptr__4530_wi32[safe_add( _4518_shape,_4542_i )];
        }
      }
      int32_t _11035_ = (int)0;
      int32_t _11036_ = _4520_nnz;
      for (int32_t _4543_i = _11035_; _4543_i < _11036_; ++_4543_i)
      {
        {
          _ptr__4539_ri64[safe_add( _4535_rnidxs,_4543_i )] = _ptr__4531_wi64[safe_add( _4525_nidxs,_4543_i )];
        }
      }
      int32_t _11037_ = (int)0;
      int32_t _11038_ = _4520_nnz;
      for (int32_t _4544_i = _11037_; _4544_i < _11038_; ++_4544_i)
      {
        {
          _ptr__4540_rf64[safe_add( _4536_rcof,_4544_i )] = _ptr__4532_wf64[safe_add( _4526_cof,_4544_i )];
        }
      }
      if (_4521_hassp)
      {
        {
          int32_t _11039_ = (int)0;
          int32_t _11040_ = _4519_nelem;
          for (int32_t _4545_i = _11039_; _4545_i < _11040_; ++_4545_i)
          {
            {
              _ptr__4539_ri64[safe_add( _4534_rsp,_4545_i )] = _ptr__4531_wi64[safe_add( _4524_sp,_4545_i )];
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _4546_xcode = _4516_xs->alloci32(safe_add( _4522_ncodeatom,safe_mul( _4520_nnz,(int)2 ) ));
      int32_t _4547_xcodeptr = _4516_xs->alloci32(safe_add( _4520_nnz,(int)1 ));
      int32_t _4548_xcconst = _4516_xs->allocf64(safe_add( _4522_ncodeatom,safe_mul( _4520_nnz,(int)2 ) ));
      ::mosek::fusion::p_ExprOptimizeCode::compress_code(_4516_xs,_4520_nnz,_4530_wi32,_4527_code,_4530_wi32,_4528_codeptr,_4532_wf64,_4526_cof,_4532_wf64,_4529_cconst,_4546_xcode,_4548_xcconst,_4547_xcodeptr);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4549_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4516_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4549_xi32(_4549_xi32 ? _4549_xi32->raw() : nullptr,_4549_xi32 ? _4549_xi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4550_xf64 = mosek::fusion::p_WorkStack::_get_impl(_4516_xs)->f64;
      _checked_ptr_1<double> _ptr__4550_xf64(_4550_xf64 ? _4550_xf64->raw() : nullptr,_4550_xf64 ? _4550_xf64->size(0) : 0);
      int32_t _4551_rncodeatom = (int)0;
      int32_t _4552_rnnz = (int)0;
      int32_t _4553_rnelem = (int)0;
      int32_t _11041_ = (int)0;
      int32_t _11042_ = _4519_nelem;
      for (int32_t _4554_i = _11041_; _4554_i < _11042_; ++_4554_i)
      {
        {
          int32_t _4555_elmnz = (int)0;
          int32_t _11043_ = _ptr__4530_wi32[safe_add( _4523_ptr,_4554_i )];
          int32_t _11044_ = _ptr__4530_wi32[safe_add( safe_add( _4523_ptr,_4554_i ),(int)1 )];
          for (int32_t _4556_j = _11043_; _4556_j < _11044_; ++_4556_j)
          {
            {
              if (((_ptr__4532_wf64[safe_add( _4526_cof,_4556_j )] < (int)0) || ((int)0 < _ptr__4532_wf64[safe_add( _4526_cof,_4556_j )])))
              {
                {
                  ++ _4552_rnnz;
                  ++ _4555_elmnz;
                  ++ _4551_rncodeatom;
                }
              }
              else
              {
                {
                  if (((_ptr__4549_xi32[safe_add( safe_add( _4547_xcodeptr,_4556_j ),(int)1 )] - _ptr__4549_xi32[safe_add( _4547_xcodeptr,_4556_j )]) > (int)1))
                  {
                    {
                      ++ _4552_rnnz;
                      ++ _4555_elmnz;
                      _4551_rncodeatom += (_ptr__4549_xi32[safe_add( safe_add( _4547_xcodeptr,_4556_j ),(int)1 )] - _ptr__4549_xi32[safe_add( _4547_xcodeptr,_4556_j )]);
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__4549_xi32[safe_add( _4546_xcode,_ptr__4549_xi32[safe_add( _4547_xcodeptr,_4556_j )] )] != 10))
                      {
                        {
                          ++ _4552_rnnz;
                          ++ _4555_elmnz;
                          ++ _4551_rncodeatom;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          if ((_4555_elmnz > (int)0))
          {
            {
              ++ _4553_rnelem;
            }
          }
          {}
        }
      }
      bool _4557_rhassp = false;
      {
        int64_t _4558_sz = (int64_t)1;
        int32_t _11045_ = (int)0;
        int32_t _11046_ = _4517_nd;
        for (int32_t _4559_i = _11045_; _4559_i < _11046_; ++_4559_i)
        {
          {
            _4558_sz *= _ptr__4530_wi32[safe_add( _4518_shape,_4559_i )];
          }
        }
        _4557_rhassp = (_4558_sz > _4553_rnelem);
      }
      _4514_rs->alloc_expr(_4517_nd,_4553_rnelem,_4552_rnnz,_4557_rhassp,_4551_rncodeatom);
      int32_t _4560_rptr = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->ptr_base;
      int32_t _4561_rsp = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->sp_base;
      int32_t _4562_rshape = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->shape_base;
      int32_t _4563_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->nidxs_base;
      int32_t _4564_rcof = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->cof_base;
      int32_t _4565_rcode = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->code_base;
      int32_t _4566_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->codeptr_base;
      int32_t _4567_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4568_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4568_ri32(_4568_ri32 ? _4568_ri32->raw() : nullptr,_4568_ri32 ? _4568_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4569_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4569_ri64(_4569_ri64 ? _4569_ri64->raw() : nullptr,_4569_ri64 ? _4569_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4570_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4514_rs)->f64;
      _checked_ptr_1<double> _ptr__4570_rf64(_4570_rf64 ? _4570_rf64->raw() : nullptr,_4570_rf64 ? _4570_rf64->size(0) : 0);
      int32_t _11047_ = (int)0;
      int32_t _11048_ = _4517_nd;
      for (int32_t _4571_i = _11047_; _4571_i < _11048_; ++_4571_i)
      {
        {
          _ptr__4568_ri32[safe_add( _4562_rshape,_4571_i )] = _ptr__4530_wi32[safe_add( _4518_shape,_4571_i )];
        }
      }
      if ((_4551_rncodeatom == (int)0))
      {
        {
          int32_t _11049_ = (int)0;
          int32_t _11050_ = _4520_nnz;
          for (int32_t _4572_i = _11049_; _4572_i < _11050_; ++_4572_i)
          {
            {
              _ptr__4569_ri64[safe_add( _4563_rnidxs,_4572_i )] = _ptr__4531_wi64[safe_add( _4525_nidxs,_4572_i )];
            }
          }
          int32_t _11051_ = (int)0;
          int32_t _11052_ = _4520_nnz;
          for (int32_t _4573_i = _11051_; _4573_i < _11052_; ++_4573_i)
          {
            {
              _ptr__4570_rf64[safe_add( _4564_rcof,_4573_i )] = _ptr__4532_wf64[safe_add( _4526_cof,_4573_i )];
            }
          }
          int32_t _11053_ = (int)0;
          int32_t _11054_ = safe_add( _4519_nelem,(int)1 );
          for (int32_t _4574_i = _11053_; _4574_i < _11054_; ++_4574_i)
          {
            {
              _ptr__4568_ri32[safe_add( _4560_rptr,_4574_i )] = _ptr__4568_ri32[safe_add( _4523_ptr,_4574_i )];
            }
          }
          if (_4521_hassp)
          {
            {
              int32_t _11055_ = (int)0;
              int32_t _11056_ = _4519_nelem;
              for (int32_t _4575_i = _11055_; _4575_i < _11056_; ++_4575_i)
              {
                {
                  _ptr__4569_ri64[safe_add( _4561_rsp,_4575_i )] = _ptr__4569_ri64[safe_add( _4524_sp,_4575_i )];
                }
              }
            }
          }
          {}
        }
      }
      else
      {
        {
          int32_t _4576_codei = (int)0;
          int32_t _4577_elmi = (int)0;
          int32_t _4578_nzi = (int)0;
          _ptr__4568_ri32[_4560_rptr] = (int)0;
          if ((_4551_rncodeatom > (int)0))
          {
            {
              _ptr__4568_ri32[_4566_rcodeptr] = (int)0;
            }
          }
          {}
          int32_t _11057_ = (int)0;
          int32_t _11058_ = _4519_nelem;
          for (int32_t _4579_i = _11057_; _4579_i < _11058_; ++_4579_i)
          {
            {
              int32_t _4580_elmnz = (int)0;
              int32_t _11059_ = _ptr__4530_wi32[safe_add( _4523_ptr,_4579_i )];
              int32_t _11060_ = _ptr__4530_wi32[safe_add( safe_add( _4523_ptr,_4579_i ),(int)1 )];
              for (int32_t _4581_j = _11059_; _4581_j < _11060_; ++_4581_j)
              {
                {
                  if (((_ptr__4532_wf64[safe_add( _4526_cof,_4581_j )] < (int)0) || ((int)0 < _ptr__4532_wf64[safe_add( _4526_cof,_4581_j )])))
                  {
                    {
                      _ptr__4569_ri64[safe_add( _4563_rnidxs,_4578_nzi )] = _ptr__4531_wi64[safe_add( _4525_nidxs,_4581_j )];
                      _ptr__4570_rf64[safe_add( _4564_rcof,_4578_nzi )] = _ptr__4532_wf64[safe_add( _4526_cof,_4581_j )];
                      _ptr__4568_ri32[safe_add( _4565_rcode,_4576_codei )] = _ptr__4549_xi32[safe_add( _4546_xcode,_ptr__4549_xi32[safe_add( _4547_xcodeptr,_4581_j )] )];
                      _ptr__4570_rf64[safe_add( _4567_rcconst,_4576_codei )] = _ptr__4550_xf64[safe_add( _4548_xcconst,_ptr__4549_xi32[safe_add( _4547_xcodeptr,_4581_j )] )];
                      ++ _4576_codei;
                      _ptr__4568_ri32[safe_add( safe_add( _4566_rcodeptr,_4578_nzi ),(int)1 )] = _4576_codei;
                      ++ _4578_nzi;
                      ++ _4580_elmnz;
                    }
                  }
                  else
                  {
                    {
                      if ((((_ptr__4549_xi32[safe_add( safe_add( _4547_xcodeptr,_4581_j ),(int)1 )] - _ptr__4549_xi32[safe_add( _4547_xcodeptr,_4581_j )]) > (int)1) || (_ptr__4549_xi32[safe_add( _4546_xcode,_ptr__4549_xi32[safe_add( _4547_xcodeptr,_4581_j )] )] != 10)))
                      {
                        {
                          _ptr__4569_ri64[safe_add( _4563_rnidxs,_4578_nzi )] = _ptr__4531_wi64[safe_add( _4525_nidxs,_4581_j )];
                          _ptr__4570_rf64[safe_add( _4564_rcof,_4578_nzi )] = 0.0;
                          int32_t _11061_ = _ptr__4549_xi32[safe_add( _4547_xcodeptr,_4581_j )];
                          int32_t _11062_ = _ptr__4549_xi32[safe_add( safe_add( _4547_xcodeptr,_4581_j ),(int)1 )];
                          for (int32_t _4582_k = _11061_; _4582_k < _11062_; ++_4582_k)
                          {
                            {
                              _ptr__4568_ri32[safe_add( _4565_rcode,_4576_codei )] = _ptr__4549_xi32[safe_add( _4546_xcode,_4582_k )];
                              _ptr__4570_rf64[safe_add( _4567_rcconst,_4576_codei )] = _ptr__4550_xf64[safe_add( _4548_xcconst,_4582_k )];
                              ++ _4576_codei;
                            }
                          }
                          _ptr__4568_ri32[safe_add( safe_add( _4566_rcodeptr,_4578_nzi ),(int)1 )] = _4576_codei;
                          ++ _4578_nzi;
                          ++ _4580_elmnz;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              if ((_4580_elmnz > (int)0))
              {
                {
                  _ptr__4568_ri32[safe_add( safe_add( _4560_rptr,_4577_elmi ),(int)1 )] = _4578_nzi;
                  if (_4557_rhassp)
                  {
                    {
                      _ptr__4569_ri64[safe_add( _4561_rsp,_4577_elmi )] = _ptr__4531_wi64[safe_add( _4524_sp,_4579_i )];
                    }
                  }
                  {}
                  ++ _4577_elmi;
                }
              }
              {}
            }
          }
          if ((_4577_elmi != _4553_rnelem))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nelem"));
            }
          }
          {}
          if ((_4578_nzi != _4552_rnnz))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nnz"));
            }
          }
          {}
          if ((_4576_codei != _4551_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result num code atoms"));
            }
          }
          {}
          if ((_4551_rncodeatom > (int)0))
          {
            {
              if ((_ptr__4568_ri32[safe_add( _4566_rcodeptr,_4552_rnnz )] != _4551_rncodeatom))
              {
                {
                  throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
}
// End mosek.fusion.ExprOptimizeCode.eval

// Begin mosek.fusion.ExprOptimizeCode.toString
// Method mosek.fusion.ExprOptimizeCode.toString @ src/fusion/ExprCompress.monty:521:6-523:7
std::string mosek::fusion::ExprOptimizeCode :: toString() { return mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprOptimizeCode::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprOptimizeCode("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprOptimizeCode.toString

void mosek::fusion::p_ExprOptimizeCode::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprOptimizeCode::destroy() { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->destroy(); }
// } class ExprOptimizeCode
// class ExprCompress { // @ src/fusion/ExprCompress.monty:11:4-503:5
mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }
mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprCompress::p_ExprCompress
  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprCompress.ctor @ src/fusion/ExprCompress.monty:16:6-19:7
mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress
  (monty::rc_ptr< ::mosek::fusion::Expression > _4583_expr)
{ return new mosek::fusion::ExprCompress(_4583_expr); }
mosek::fusion::ExprCompress::ExprCompress
  (monty::rc_ptr< ::mosek::fusion::Expression > _4583_expr) : 
   ExprCompress(new mosek::fusion::p_ExprCompress(this))
{ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4583_expr); }
void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4583_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_4583_expr->getShape());
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4583_expr;
  }
}
// mosek.fusion.ExprCompress.ctor

// Begin mosek.fusion.ExprCompress.arg_sort
// Method mosek.fusion.ExprCompress.arg_sort @ src/fusion/ExprCompress.monty:371:6-502:7
void mosek::fusion::ExprCompress::arg_sort
  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4584_ws,
    monty::rc_ptr< ::mosek::fusion::WorkStack > _4585_xs,
    int32_t _4586_perm,
    int32_t _4587_nelem,
    int32_t _4588_nnz,
    int32_t _4589_ptr,
    int32_t _4590_nidxs) { mosek::fusion::p_ExprCompress::arg_sort(_4584_ws,_4585_xs,_4586_perm,_4587_nelem,_4588_nnz,_4589_ptr,_4590_nidxs); }
void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4584_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4585_xs,int32_t _4586_perm,int32_t _4587_nelem,int32_t _4588_nnz,int32_t _4589_ptr,int32_t _4590_nidxs)
{
  int32_t _4591_maxrow = (int)0;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4592_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4584_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4592_wi32(_4592_wi32 ? _4592_wi32->raw() : nullptr,_4592_wi32 ? _4592_wi32->size(0) : 0);
  int32_t _11063_ = (int)0;
  int32_t _11064_ = _4587_nelem;
  for (int32_t _4593_i = _11063_; _4593_i < _11064_; ++_4593_i)
  {
    {
      if (((_ptr__4592_wi32[safe_add( safe_add( _4589_ptr,_4593_i ),(int)1 )] - _ptr__4592_wi32[safe_add( _4589_ptr,_4593_i )]) > _4591_maxrow))
      {
        {
          _4591_maxrow = (_ptr__4592_wi32[safe_add( safe_add( _4589_ptr,_4593_i ),(int)1 )] - _ptr__4592_wi32[safe_add( _4589_ptr,_4593_i )]);
        }
      }
      {}
    }
  }
  int32_t _11065_;
  bool _11066_ = (_4591_maxrow > (int)2);
  if (_11066_)
  {
    _11065_ = _4585_xs->alloci32(safe_mul( _4591_maxrow,(int)2 ));
  }
  else
  {
    _11065_ = (int)99999;
  }
  int32_t _4594_workspace = _11065_;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4595_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4585_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4595_xi32(_4595_xi32 ? _4595_xi32->raw() : nullptr,_4595_xi32 ? _4595_xi32->size(0) : 0);
  _4592_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4584_ws)->i32;
  _ptr__4592_wi32.update(_4592_wi32 ? _4592_wi32->raw() : nullptr, _4592_wi32 ? _4592_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4596_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4584_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4596_wi64(_4596_wi64 ? _4596_wi64->raw() : nullptr,_4596_wi64 ? _4596_wi64->size(0) : 0);
  int32_t _11067_ = (int)0;
  int32_t _11068_ = _4587_nelem;
  for (int32_t _4597_i = _11067_; _4597_i < _11068_; ++_4597_i)
  {
    {
      int32_t _4598_p0 = _ptr__4592_wi32[safe_add( _4589_ptr,_4597_i )];
      int32_t _4599_p1 = _ptr__4592_wi32[safe_add( safe_add( _4589_ptr,_4597_i ),(int)1 )];
      int32_t _4600_n = (_4599_p1 - _4598_p0);
      if ((_4600_n == (int)0))
      {
        {
        }
      }
      else if((_4600_n == (int)1))
      {
        {
          _ptr__4595_xi32[safe_add( _4586_perm,_4598_p0 )] = _4598_p0;
        }
      }
      else if((_4600_n == (int)2))
      {
        {
          if ((_ptr__4596_wi64[safe_add( _4590_nidxs,_4598_p0 )] <= _ptr__4596_wi64[safe_add( safe_add( _4590_nidxs,_4598_p0 ),(int)1 )]))
          {
            {
              _ptr__4595_xi32[safe_add( _4586_perm,_4598_p0 )] = _4598_p0;
              _ptr__4595_xi32[safe_add( safe_add( _4586_perm,_4598_p0 ),(int)1 )] = safe_add( _4598_p0,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4595_xi32[safe_add( _4586_perm,_4598_p0 )] = safe_add( _4598_p0,(int)1 );
              _ptr__4595_xi32[safe_add( safe_add( _4586_perm,_4598_p0 ),(int)1 )] = _4598_p0;
            }
          }
        }
      }
      else
      {
        {
          int64_t _4601_vmin = _ptr__4596_wi64[safe_add( _4590_nidxs,_4598_p0 )];
          int64_t _4602_vmax = _ptr__4596_wi64[safe_add( _4590_nidxs,_4598_p0 )];
          bool _4603_sorted = false;
          int32_t _11069_ = safe_add( _4598_p0,(int)1 );
          int32_t _11070_ = _4599_p1;
          for (int32_t _4604_i = _11069_; _4604_i < _11070_; ++_4604_i)
          {
            {
              _4603_sorted = (_4603_sorted && (_ptr__4596_wi64[(safe_add( _4590_nidxs,_4604_i ) - (int)1)] <= _ptr__4596_wi64[safe_add( _4590_nidxs,_4604_i )]));
              if ((_4601_vmin > _ptr__4596_wi64[safe_add( _4590_nidxs,_4604_i )]))
              {
                {
                  _4601_vmin = _ptr__4596_wi64[safe_add( _4590_nidxs,_4604_i )];
                }
              }
              {}
              if ((_4602_vmax < _ptr__4596_wi64[safe_add( _4590_nidxs,_4604_i )]))
              {
                {
                  _4602_vmax = _ptr__4596_wi64[safe_add( _4590_nidxs,_4604_i )];
                }
              }
              {}
            }
          }
          if (_4603_sorted)
          {
            {
              int32_t _11071_ = _4598_p0;
              int32_t _11072_ = _4599_p1;
              for (int32_t _4605_i = _11071_; _4605_i < _11072_; ++_4605_i)
              {
                {
                  _ptr__4595_xi32[safe_add( _4586_perm,_4605_i )] = _4605_i;
                }
              }
            }
          }
          else if((safe_add( (_4602_vmax - _4601_vmin),(int)1 ) <= _4600_n))
          {
            {
              int64_t _4606_m = safe_add( (_4602_vmax - _4601_vmin),(int)1 );
              int32_t _11073_ = (int)0;
              int64_t _11074_ = safe_add( _4606_m,(int)1 );
              for (int64_t _4607_j = _11073_; _4607_j < _11074_; ++_4607_j)
              {
                {
                  _ptr__4595_xi32[safe_add( _4594_workspace,_4607_j )] = (int)0;
                }
              }
              int32_t _11075_ = _4598_p0;
              int32_t _11076_ = _4599_p1;
              for (int32_t _4608_j = _11075_; _4608_j < _11076_; ++_4608_j)
              {
                {
                  ++ _ptr__4595_xi32[safe_add( (safe_add( _4594_workspace,_ptr__4596_wi64[safe_add( _4590_nidxs,_4608_j )] ) - _4601_vmin),(int)1 )];
                }
              }
              int32_t _11077_ = (int)0;
              int64_t _11078_ = _4606_m;
              for (int64_t _4609_j = _11077_; _4609_j < _11078_; ++_4609_j)
              {
                {
                  _ptr__4595_xi32[safe_add( safe_add( _4594_workspace,_4609_j ),(int)1 )] += _ptr__4595_xi32[safe_add( _4594_workspace,_4609_j )];
                }
              }
              int32_t _11079_ = _4598_p0;
              int32_t _11080_ = _4599_p1;
              for (int32_t _4610_j = _11079_; _4610_j < _11080_; ++_4610_j)
              {
                {
                  _ptr__4595_xi32[safe_add( safe_add( _4586_perm,_4598_p0 ),_ptr__4595_xi32[(safe_add( _4594_workspace,_ptr__4596_wi64[safe_add( _4590_nidxs,_4610_j )] ) - _4601_vmin)] )] = _4610_j;
                  ++ _ptr__4595_xi32[(safe_add( _4594_workspace,_ptr__4596_wi64[safe_add( _4590_nidxs,_4610_j )] ) - _4601_vmin)];
                }
              }
            }
          }
          else
          {
            {
              int32_t _4611_blocksize = (int)1;
              int32_t _4612_perm1 = _4594_workspace;
              int32_t _4613_perm2 = safe_add( _4594_workspace,_4600_n );
              int32_t _11081_ = (int)0;
              int32_t _11082_ = _4600_n;
              for (int32_t _4614_j = _11081_; _4614_j < _11082_; ++_4614_j)
              {
                {
                  _ptr__4595_xi32[safe_add( _4612_perm1,_4614_j )] = _4614_j;
                }
              }
              while ( (_4611_blocksize < _4600_n) )
              {
                {
                  int32_t _4615_mergesize = safe_mul( _4611_blocksize,(int)2 );
                  int32_t _4616_nummerges = (_4600_n / _4615_mergesize);
                  if ((safe_add( safe_mul( _4616_nummerges,_4615_mergesize ),_4611_blocksize ) < _4600_n))
                  {
                    {
                      ++ _4616_nummerges;
                    }
                  }
                  {}
                  int32_t _4617_k = (int)0;
                  int32_t _11083_ = (int)0;
                  int32_t _11084_ = _4616_nummerges;
                  for (int32_t _4618_j = _11083_; _4618_j < _11084_; ++_4618_j)
                  {
                    {
                      int32_t _4619_a0 = safe_mul( _4618_j,_4615_mergesize );
                      int32_t _4620_a1 = safe_add( _4619_a0,_4611_blocksize );
                      int32_t _4621_b0 = _4620_a1;
                      int32_t _4622_b1 = safe_add( _4621_b0,_4611_blocksize );
                      if ((_4622_b1 > _4600_n))
                      {
                        {
                          _4622_b1 = _4600_n;
                        }
                      }
                      {}
                      while ( ((_4619_a0 < _4620_a1) && (_4621_b0 < _4622_b1)) )
                      {
                        {
                          if ((_ptr__4596_wi64[safe_add( safe_add( _4590_nidxs,_ptr__4595_xi32[safe_add( _4612_perm1,_4619_a0 )] ),_4598_p0 )] <= _ptr__4596_wi64[safe_add( safe_add( _4590_nidxs,_ptr__4595_xi32[safe_add( _4612_perm1,_4621_b0 )] ),_4598_p0 )]))
                          {
                            {
                              _ptr__4595_xi32[safe_add( _4613_perm2,_4617_k )] = _ptr__4595_xi32[safe_add( _4612_perm1,_4619_a0 )];
                              ++ _4617_k;
                              ++ _4619_a0;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4595_xi32[safe_add( _4613_perm2,_4617_k )] = _ptr__4595_xi32[safe_add( _4612_perm1,_4621_b0 )];
                              ++ _4617_k;
                              ++ _4621_b0;
                            }
                          }
                        }
                      }
                      while ( (_4619_a0 < _4620_a1) )
                      {
                        {
                          _ptr__4595_xi32[safe_add( _4613_perm2,_4617_k )] = _ptr__4595_xi32[safe_add( _4612_perm1,_4619_a0 )];
                          ++ _4617_k;
                          ++ _4619_a0;
                        }
                      }
                      while ( (_4621_b0 < _4622_b1) )
                      {
                        {
                          _ptr__4595_xi32[safe_add( _4613_perm2,_4617_k )] = _ptr__4595_xi32[safe_add( _4612_perm1,_4621_b0 )];
                          ++ _4617_k;
                          ++ _4621_b0;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4616_nummerges,_4615_mergesize ) < _4600_n))
                  {
                    {
                      int32_t _4623_b = safe_mul( _4616_nummerges,_4615_mergesize );
                      while ( (_4623_b < _4600_n) )
                      {
                        {
                          _ptr__4595_xi32[safe_add( _4613_perm2,_4617_k )] = _ptr__4595_xi32[safe_add( _4612_perm1,_4623_b )];
                          ++ _4623_b;
                          ++ _4617_k;
                        }
                      }
                    }
                  }
                  {}
                  int32_t _4624_tmp = _4612_perm1;
                  _4612_perm1 = _4613_perm2;
                  _4613_perm2 = _4624_tmp;
                  _4611_blocksize *= (int)2;
                }
              }
              int32_t _11085_ = (int)0;
              int32_t _11086_ = _4600_n;
              for (int32_t _4625_i = _11085_; _4625_i < _11086_; ++_4625_i)
              {
                {
                  _ptr__4595_xi32[safe_add( safe_add( _4586_perm,_4598_p0 ),_4625_i )] = safe_add( _ptr__4595_xi32[safe_add( _4612_perm1,_4625_i )],_4598_p0 );
                }
              }
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprCompress.arg_sort

// Begin mosek.fusion.ExprCompress.merge_sort
// Method mosek.fusion.ExprCompress.merge_sort @ src/fusion/ExprCompress.monty:310:6-369:7
void mosek::fusion::ExprCompress::merge_sort
  ( int32_t _4626_origperm1,
    int32_t _4627_origperm2,
    int32_t _4628_nelem,
    int32_t _4629_nnz,
    int32_t _4630_ptr_base,
    int32_t _4631_nidxs_base,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4632_wi32,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4633_wi64) { mosek::fusion::p_ExprCompress::merge_sort(_4626_origperm1,_4627_origperm2,_4628_nelem,_4629_nnz,_4630_ptr_base,_4631_nidxs_base,_4632_wi32,_4633_wi64); }
void mosek::fusion::p_ExprCompress::merge_sort(int32_t _4626_origperm1,int32_t _4627_origperm2,int32_t _4628_nelem,int32_t _4629_nnz,int32_t _4630_ptr_base,int32_t _4631_nidxs_base,std::shared_ptr< monty::ndarray< int32_t,1 > > _4632_wi32,std::shared_ptr< monty::ndarray< int64_t,1 > > _4633_wi64)
{
  _checked_ptr_1<int32_t> _ptr__4632_wi32(_4632_wi32 ? _4632_wi32->raw() : nullptr, _4632_wi32 ? _4632_wi32->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__4633_wi64(_4633_wi64 ? _4633_wi64->raw() : nullptr, _4633_wi64 ? _4633_wi64->size(0) : 0);
  int32_t _4634_perm1 = _4626_origperm1;
  int32_t _4635_perm2 = _4627_origperm2;
  int32_t _11087_ = (int)0;
  int32_t _11088_ = _4629_nnz;
  for (int32_t _4636_j = _11087_; _4636_j < _11088_; ++_4636_j)
  {
    {
      _ptr__4632_wi32[safe_add( _4634_perm1,_4636_j )] = _4636_j;
    }
  }
  int32_t _11089_ = (int)0;
  int32_t _11090_ = _4628_nelem;
  for (int32_t _4637_i = _11089_; _4637_i < _11090_; ++_4637_i)
  {
    {
      _4634_perm1 = _4626_origperm1;
      _4635_perm2 = _4627_origperm2;
      int32_t _4638_p1 = _ptr__4632_wi32[safe_add( safe_add( _4630_ptr_base,_4637_i ),(int)1 )];
      int32_t _4639_p0 = _ptr__4632_wi32[safe_add( _4630_ptr_base,_4637_i )];
      if ((safe_add( _4639_p0,(int)1 ) < _4638_p1))
      {
        {
          int32_t _4640_n = (_4638_p1 - _4639_p0);
          int32_t _4641_lg2n = (int)0;
          while ( (_4640_n > (int)1) )
          {
            {
              ++ _4641_lg2n;
              _4640_n /= (int)2;
            }
          }
          _4640_n = (_4638_p1 - _4639_p0);
          int32_t _4642_blocksz = (int)1;
          int32_t _11091_ = (int)0;
          int32_t _11092_ = safe_add( _4641_lg2n,(int)1 );
          for (int32_t _4643_k = _11091_; _4643_k < _11092_; ++_4643_k)
          {
            {
              int32_t _4644_numblocks = ((safe_add( _4640_n,_4642_blocksz ) - (int)1) / _4642_blocksz);
              int32_t _4645_nmerge = (_4644_numblocks / (int)2);
              int32_t _4646_kk = _4639_p0;
              int32_t _11093_ = (int)0;
              int32_t _11094_ = _4645_nmerge;
              for (int32_t _4647_ii_ = _11093_; _4647_ii_ < _11094_; ++_4647_ii_)
              {
                {
                  int32_t _4648_ii = safe_mul( safe_mul( _4647_ii_,_4642_blocksz ),(int)2 );
                  int32_t _11095_;
                  bool _11096_ = (safe_add( safe_add( _4639_p0,_4648_ii ),safe_mul( (int)2,_4642_blocksz ) ) < _4638_p1);
                  if (_11096_)
                  {
                    _11095_ = safe_add( safe_add( _4639_p0,_4648_ii ),safe_mul( (int)2,_4642_blocksz ) );
                  }
                  else
                  {
                    _11095_ = _4638_p1;
                  }
                  int32_t _4649_jj1e = _11095_;
                  int32_t _4650_jj1 = safe_add( safe_add( _4639_p0,_4648_ii ),_4642_blocksz );
                  int32_t _4651_jj0e = safe_add( safe_add( _4639_p0,_4648_ii ),_4642_blocksz );
                  int32_t _4652_jj0 = safe_add( _4639_p0,_4648_ii );
                  while ( ((_4652_jj0 < _4651_jj0e) && (_4650_jj1 < _4649_jj1e)) )
                  {
                    {
                      if ((_ptr__4633_wi64[safe_add( _4631_nidxs_base,_ptr__4632_wi32[safe_add( _4634_perm1,_4652_jj0 )] )] <= _ptr__4633_wi64[safe_add( _4631_nidxs_base,_ptr__4632_wi32[safe_add( _4634_perm1,_4650_jj1 )] )]))
                      {
                        {
                          _ptr__4632_wi32[safe_add( _4635_perm2,_4646_kk )] = _ptr__4632_wi32[safe_add( _4634_perm1,_4652_jj0 )];
                          ++ _4646_kk;
                          ++ _4652_jj0;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4632_wi32[safe_add( _4635_perm2,_4646_kk )] = _ptr__4632_wi32[safe_add( _4634_perm1,_4650_jj1 )];
                          ++ _4646_kk;
                          ++ _4650_jj1;
                        }
                      }
                    }
                  }
                  while ( (_4652_jj0 < _4651_jj0e) )
                  {
                    {
                      _ptr__4632_wi32[safe_add( _4635_perm2,_4646_kk )] = _ptr__4632_wi32[safe_add( _4634_perm1,_4652_jj0 )];
                      ++ _4646_kk;
                      ++ _4652_jj0;
                    }
                  }
                  while ( (_4650_jj1 < _4649_jj1e) )
                  {
                    {
                      _ptr__4632_wi32[safe_add( _4635_perm2,_4646_kk )] = _ptr__4632_wi32[safe_add( _4634_perm1,_4650_jj1 )];
                      ++ _4646_kk;
                      ++ _4650_jj1;
                    }
                  }
                }
              }
              int32_t _11097_ = _4646_kk;
              int32_t _11098_ = _4638_p1;
              for (int32_t _4653_ii = _11097_; _4653_ii < _11098_; ++_4653_ii)
              {
                {
                  _ptr__4632_wi32[safe_add( _4635_perm2,_4653_ii )] = _ptr__4632_wi32[safe_add( _4634_perm1,_4653_ii )];
                }
              }
              int32_t _4654_tmp = _4634_perm1;
              _4634_perm1 = _4635_perm2;
              _4635_perm2 = _4654_tmp;
              _4642_blocksz *= (int)2;
            }
          }
        }
      }
      {}
      int32_t _11099_ = _4639_p0;
      int32_t _11100_ = _4638_p1;
      for (int32_t _4655_i = _11099_; _4655_i < _11100_; ++_4655_i)
      {
        {
          _ptr__4632_wi32[safe_add( _4626_origperm1,_4655_i )] = _ptr__4632_wi32[safe_add( _4634_perm1,_4655_i )];
        }
      }
    }
  }
}
// End mosek.fusion.ExprCompress.merge_sort

// Begin mosek.fusion.ExprCompress.eval
// Method mosek.fusion.ExprCompress.eval @ src/fusion/ExprCompress.monty:21:6-306:7
void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4656_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4657_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4658_xs) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4656_rs,_4657_ws,_4658_xs); }
void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4656_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4657_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4658_xs)
{
  expr->eval(_4657_ws,_4656_rs,_4658_xs);
  _4657_ws->pop_expr();
  int32_t _4659_nd = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->nd;
  int32_t _4660_shape = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->shape_base;
  int32_t _4661_nelem = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->nelem;
  int32_t _4662_nnz = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->nnz;
  bool _4663_hassp = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->hassp;
  int32_t _4664_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->ncodeatom;
  int32_t _4665_ptr = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->ptr_base;
  int32_t _4666_sp = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->sp_base;
  int32_t _4667_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->nidxs_base;
  int32_t _4668_cof = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->cof_base;
  int32_t _4669_code = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->code_base;
  int32_t _4670_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->codeptr_base;
  int32_t _4671_cconst = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4672_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4672_wi32(_4672_wi32 ? _4672_wi32->raw() : nullptr,_4672_wi32 ? _4672_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4673_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4673_wi64(_4673_wi64 ? _4673_wi64->raw() : nullptr,_4673_wi64 ? _4673_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4674_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4657_ws)->f64;
  _checked_ptr_1<double> _ptr__4674_wf64(_4674_wf64 ? _4674_wf64->raw() : nullptr,_4674_wf64 ? _4674_wf64->size(0) : 0);
  bool _4675_iscompact = true;
  {
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4676_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4658_xs)->i32;
    _checked_ptr_1<int32_t> _ptr__4676_xi32(_4676_xi32 ? _4676_xi32->raw() : nullptr,_4676_xi32 ? _4676_xi32->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4677_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4658_xs)->i64;
    _checked_ptr_1<int64_t> _ptr__4677_xi64(_4677_xi64 ? _4677_xi64->raw() : nullptr,_4677_xi64 ? _4677_xi64->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _4678_xf64 = mosek::fusion::p_WorkStack::_get_impl(_4658_xs)->f64;
    _checked_ptr_1<double> _ptr__4678_xf64(_4678_xf64 ? _4678_xf64->raw() : nullptr,_4678_xf64 ? _4678_xf64->size(0) : 0);
    int32_t _11101_ = (int)0;
    int32_t _11102_ = _4661_nelem;
    for (int32_t _4679_i = _11101_; _4679_i < _11102_; ++_4679_i)
    {
      {
        int32_t _11103_ = _ptr__4672_wi32[safe_add( _4665_ptr,_4679_i )];
        int32_t _11104_ = (_ptr__4672_wi32[safe_add( safe_add( _4665_ptr,_4679_i ),(int)1 )] - (int)1);
        for (int32_t _4680_j = _11103_; _4680_j < _11104_; ++_4680_j)
        {
          {
            _4675_iscompact = (_4675_iscompact && (_ptr__4673_wi64[safe_add( _4667_nidxs,_4680_j )] < _ptr__4673_wi64[safe_add( safe_add( _4667_nidxs,_4680_j ),(int)1 )]));
          }
        }
      }
    }
    if (_4675_iscompact)
    {
      {
        if ((_4664_ncodeatom > (int)0))
        {
          {
            int32_t _11105_ = (int)0;
            int32_t _11106_ = _4662_nnz;
            for (int32_t _4681_j = _11105_; _4681_j < _11106_; ++_4681_j)
            {
              {
                _4675_iscompact = (_4675_iscompact && ((!((_ptr__4674_wf64[safe_add( _4668_cof,_4681_j )] >= 0.0) && (0.0 >= _ptr__4674_wf64[safe_add( _4668_cof,_4681_j )]))) || (((_ptr__4672_wi32[safe_add( safe_add( _4670_codeptr,_4681_j ),(int)1 )] - _ptr__4672_wi32[safe_add( _4670_codeptr,_4681_j )]) == (int)0) || (!(((_ptr__4672_wi32[safe_add( safe_add( _4670_codeptr,_4681_j ),(int)1 )] - _ptr__4672_wi32[safe_add( _4670_codeptr,_4681_j )]) == (int)1) && ((_ptr__4672_wi32[safe_add( _4669_code,_ptr__4672_wi32[safe_add( _4670_codeptr,_4681_j )] )] == 2) && (!((_ptr__4674_wf64[safe_add( _4671_cconst,_ptr__4672_wi32[safe_add( _4670_codeptr,_4681_j )] )] <= 0.0) && (_ptr__4674_wf64[safe_add( _4671_cconst,_ptr__4672_wi32[safe_add( _4670_codeptr,_4681_j )] )] >= 0.0)))))))));
              }
            }
          }
        }
        else
        {
          {
            int32_t _11107_ = (int)0;
            int32_t _11108_ = _4662_nnz;
            for (int32_t _4682_j = _11107_; _4682_j < _11108_; ++_4682_j)
            {
              {
                _4675_iscompact = (_4675_iscompact && (!((_ptr__4674_wf64[safe_add( _4668_cof,_4682_j )] <= 0.0) && (0.0 <= _ptr__4674_wf64[safe_add( _4668_cof,_4682_j )]))));
              }
            }
          }
        }
      }
    }
    {}
  }
  if (_4675_iscompact)
  {
    {
      _4656_rs->alloc_expr(_4659_nd,_4661_nelem,_4662_nnz,_4663_hassp,_4664_ncodeatom);
      int32_t _4683_rptr = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->ptr_base;
      int32_t _4684_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->nidxs_base;
      int32_t _4685_rsp = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->sp_base;
      int32_t _4686_rcof = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->cof_base;
      int32_t _4687_rshape = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->shape_base;
      int32_t _4688_rcode = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->code_base;
      int32_t _4689_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->codeptr_base;
      int32_t _4690_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4691_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4691_ri32(_4691_ri32 ? _4691_ri32->raw() : nullptr,_4691_ri32 ? _4691_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4692_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4692_ri64(_4692_ri64 ? _4692_ri64->raw() : nullptr,_4692_ri64 ? _4692_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4693_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->f64;
      _checked_ptr_1<double> _ptr__4693_rf64(_4693_rf64 ? _4693_rf64->raw() : nullptr,_4693_rf64 ? _4693_rf64->size(0) : 0);
      {
        int32_t _11109_ = (int)0;
        int32_t _11110_ = _4659_nd;
        for (int32_t _4694_i = _11109_; _4694_i < _11110_; ++_4694_i)
        {
          {
            _ptr__4691_ri32[safe_add( _4687_rshape,_4694_i )] = _ptr__4672_wi32[safe_add( _4660_shape,_4694_i )];
          }
        }
        int32_t _11111_ = (int)0;
        int32_t _11112_ = safe_add( _4661_nelem,(int)1 );
        for (int32_t _4695_i = _11111_; _4695_i < _11112_; ++_4695_i)
        {
          {
            _ptr__4691_ri32[safe_add( _4683_rptr,_4695_i )] = _ptr__4672_wi32[safe_add( _4665_ptr,_4695_i )];
          }
        }
        int32_t _11113_ = (int)0;
        int32_t _11114_ = _4662_nnz;
        for (int32_t _4696_i = _11113_; _4696_i < _11114_; ++_4696_i)
        {
          {
            _ptr__4692_ri64[safe_add( _4684_rnidxs,_4696_i )] = _ptr__4673_wi64[safe_add( _4667_nidxs,_4696_i )];
          }
        }
        int32_t _11115_ = (int)0;
        int32_t _11116_ = _4662_nnz;
        for (int32_t _4697_i = _11115_; _4697_i < _11116_; ++_4697_i)
        {
          {
            _ptr__4693_rf64[safe_add( _4686_rcof,_4697_i )] = _ptr__4674_wf64[safe_add( _4668_cof,_4697_i )];
          }
        }
        if (_4663_hassp)
        {
          {
            int32_t _11117_ = (int)0;
            int32_t _11118_ = _4661_nelem;
            for (int32_t _4698_i = _11117_; _4698_i < _11118_; ++_4698_i)
            {
              {
                _ptr__4692_ri64[safe_add( _4685_rsp,_4698_i )] = _ptr__4673_wi64[safe_add( _4666_sp,_4698_i )];
              }
            }
          }
        }
        {}
        if ((_4664_ncodeatom > (int)0))
        {
          {
            int32_t _11119_ = (int)0;
            int32_t _11120_ = _4664_ncodeatom;
            for (int32_t _4699_i = _11119_; _4699_i < _11120_; ++_4699_i)
            {
              {
                _ptr__4691_ri32[safe_add( _4688_rcode,_4699_i )] = _ptr__4672_wi32[safe_add( _4669_code,_4699_i )];
              }
            }
            int32_t _11121_ = (int)0;
            int32_t _11122_ = _4664_ncodeatom;
            for (int32_t _4700_i = _11121_; _4700_i < _11122_; ++_4700_i)
            {
              {
                _ptr__4693_rf64[safe_add( _4690_rcconst,_4700_i )] = _ptr__4674_wf64[safe_add( _4671_cconst,_4700_i )];
              }
            }
            int32_t _11123_ = (int)0;
            int32_t _11124_ = safe_add( _4662_nnz,(int)1 );
            for (int32_t _4701_i = _11123_; _4701_i < _11124_; ++_4701_i)
            {
              {
                _ptr__4691_ri32[safe_add( _4689_rcodeptr,_4701_i )] = _ptr__4672_wi32[safe_add( _4670_codeptr,_4701_i )];
              }
            }
          }
        }
        {}
      }
      if ((_4664_ncodeatom > (int)0))
      {
        {
          if ((_ptr__4691_ri32[safe_add( _4689_rcodeptr,_4662_nnz )] != _4664_ncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _4702_perm1 = _4658_xs->alloci32(_4662_nnz);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4657_ws,_4658_xs,_4702_perm1,_4661_nelem,_4662_nnz,_4665_ptr,_4667_nidxs);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4703_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4658_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4703_xi32(_4703_xi32 ? _4703_xi32->raw() : nullptr,_4703_xi32 ? _4703_xi32->size(0) : 0);
      int32_t _4704_rnnz = (int)0;
      int32_t _4705_rncodeatom = _4664_ncodeatom;
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _4706_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->i32;
        _checked_ptr_1<int32_t> _ptr__4706_ri32(_4706_ri32 ? _4706_ri32->raw() : nullptr,_4706_ri32 ? _4706_ri32->size(0) : 0);
        int32_t _11125_ = (int)0;
        int32_t _11126_ = _4661_nelem;
        for (int32_t _4707_i = _11125_; _4707_i < _11126_; ++_4707_i)
        {
          {
            int32_t _4708_pe = _ptr__4672_wi32[safe_add( safe_add( _4665_ptr,_4707_i ),(int)1 )];
            int32_t _4709_pb = _ptr__4672_wi32[safe_add( _4665_ptr,_4707_i )];
            if ((_4709_pb < _4708_pe))
            {
              {
                int32_t _4710_p = _4709_pb;
                while ( (_4710_p < _4708_pe) )
                {
                  {
                    double _4711_c = 0.0;
                    bool _4712_cnonzero = false;
                    int64_t _4713_varidx = _ptr__4673_wi64[safe_add( _4667_nidxs,_ptr__4703_xi32[safe_add( _4702_perm1,_4710_p )] )];
                    int32_t _4714_p0 = _4710_p;
                    while ( ((_4710_p < _4708_pe) && (_ptr__4673_wi64[safe_add( _4667_nidxs,_ptr__4703_xi32[safe_add( _4702_perm1,_4710_p )] )] == _4713_varidx)) )
                    {
                      {
                        double _4715_ci = _ptr__4674_wf64[safe_add( _4668_cof,_ptr__4703_xi32[safe_add( _4702_perm1,_4710_p )] )];
                        _4712_cnonzero = (_4712_cnonzero || (!((_4715_ci <= 0.0) && (_4715_ci >= 0.0))));
                        _4711_c += _4715_ci;
                        ++ _4710_p;
                      }
                    }
                    if ((_4712_cnonzero || (_4664_ncodeatom > (int)0)))
                    {
                      {
                        ++ _4704_rnnz;
                        if (((safe_add( _4714_p0,(int)1 ) < _4710_p) && (_4664_ncodeatom > (int)0)))
                        {
                          {
                            _4705_rncodeatom += (int)1;
                          }
                        }
                        {}
                      }
                    }
                    {}
                  }
                }
              }
            }
            {}
          }
        }
      }
      _4656_rs->alloc_expr(_4659_nd,_4661_nelem,_4704_rnnz,_4663_hassp,_4705_rncodeatom);
      int32_t _4716_rnidx = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->nidxs_base;
      int32_t _4717_rshape = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->shape_base;
      int32_t _4718_rsp = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->sp_base;
      int32_t _4719_rcof = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->cof_base;
      int32_t _4720_rptr = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->ptr_base;
      int32_t _4721_rcode = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->code_base;
      int32_t _4722_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->codeptr_base;
      int32_t _4723_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4724_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4724_ri32(_4724_ri32 ? _4724_ri32->raw() : nullptr,_4724_ri32 ? _4724_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4725_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4725_ri64(_4725_ri64 ? _4725_ri64->raw() : nullptr,_4725_ri64 ? _4725_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4726_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4656_rs)->f64;
      _checked_ptr_1<double> _ptr__4726_rf64(_4726_rf64 ? _4726_rf64->raw() : nullptr,_4726_rf64 ? _4726_rf64->size(0) : 0);
      {
        int32_t _11127_ = (int)0;
        int32_t _11128_ = _4659_nd;
        for (int32_t _4727_i = _11127_; _4727_i < _11128_; ++_4727_i)
        {
          {
            _ptr__4724_ri32[safe_add( _4717_rshape,_4727_i )] = _ptr__4672_wi32[safe_add( _4660_shape,_4727_i )];
          }
        }
        if (_4663_hassp)
        {
          {
            int32_t _11129_ = (int)0;
            int32_t _11130_ = _4661_nelem;
            for (int32_t _4728_i = _11129_; _4728_i < _11130_; ++_4728_i)
            {
              {
                _ptr__4725_ri64[safe_add( _4718_rsp,_4728_i )] = _ptr__4673_wi64[safe_add( _4666_sp,_4728_i )];
              }
            }
          }
        }
        {}
        int32_t _4729_nzi = (int)0;
        int32_t _4730_codei = (int)0;
        {
          _ptr__4724_ri32[_4720_rptr] = (int)0;
          if ((_4705_rncodeatom > (int)0))
          {
            {
              _ptr__4724_ri32[_4722_rcodeptr] = (int)0;
            }
          }
          {}
          int32_t _11131_ = (int)0;
          int32_t _11132_ = _4661_nelem;
          for (int32_t _4731_elmi = _11131_; _4731_elmi < _11132_; ++_4731_elmi)
          {
            {
              int32_t _4732_pe = _ptr__4672_wi32[safe_add( safe_add( _4665_ptr,_4731_elmi ),(int)1 )];
              int32_t _4733_pb = _ptr__4672_wi32[safe_add( _4665_ptr,_4731_elmi )];
              if ((_4733_pb < _4732_pe))
              {
                {
                  int32_t _4734_p = _4733_pb;
                  int32_t _4735_p0 = _4734_p;
                  while ( (_4734_p < _4732_pe) )
                  {
                    {
                      double _4736_c = 0.0;
                      bool _4737_cnonzero = false;
                      int32_t _4738_p0e = safe_add( _4734_p,(int)1 );
                      int32_t _4739_p0b = _4734_p;
                      int64_t _4740_varidx = _ptr__4673_wi64[safe_add( _4667_nidxs,_ptr__4703_xi32[safe_add( _4702_perm1,_4739_p0b )] )];
                      while ( ((_4738_p0e < _4732_pe) && (_ptr__4673_wi64[safe_add( _4667_nidxs,_ptr__4703_xi32[safe_add( _4702_perm1,_4738_p0e )] )] == _4740_varidx)) )
                      {
                        {
                          ++ _4738_p0e;
                        }
                      }
                      if ((_4664_ncodeatom > (int)0))
                      {
                        {
                          while ( (_4734_p < _4738_p0e) )
                          {
                            {
                              double _4741_ci = _ptr__4674_wf64[safe_add( _4668_cof,_ptr__4703_xi32[safe_add( _4702_perm1,_4734_p )] )];
                              _4737_cnonzero = (_4737_cnonzero || (!((_4741_ci <= 0.0) && (_4741_ci >= 0.0))));
                              _4736_c += _4741_ci;
                              int32_t _11133_ = _ptr__4672_wi32[safe_add( _4670_codeptr,_ptr__4703_xi32[safe_add( _4702_perm1,_4734_p )] )];
                              int32_t _11134_ = _ptr__4672_wi32[safe_add( safe_add( _4670_codeptr,_ptr__4703_xi32[safe_add( _4702_perm1,_4734_p )] ),(int)1 )];
                              for (int32_t _4742_l = _11133_; _4742_l < _11134_; ++_4742_l)
                              {
                                {
                                  _ptr__4724_ri32[safe_add( _4721_rcode,_4730_codei )] = _ptr__4672_wi32[safe_add( _4669_code,_4742_l )];
                                  _ptr__4726_rf64[safe_add( _4723_rcconst,_4730_codei )] = _ptr__4674_wf64[safe_add( _4671_cconst,_4742_l )];
                                  ++ _4730_codei;
                                }
                              }
                              ++ _4734_p;
                            }
                          }
                          if (((_4738_p0e - _4739_p0b) > (int)1))
                          {
                            {
                              _ptr__4724_ri32[safe_add( _4721_rcode,_4730_codei )] = 8;
                              _ptr__4726_rf64[safe_add( _4723_rcconst,_4730_codei )] = (_4738_p0e - _4739_p0b);
                              ++ _4730_codei;
                            }
                          }
                          {}
                          _ptr__4724_ri32[safe_add( safe_add( _4722_rcodeptr,_4729_nzi ),(int)1 )] = _4730_codei;
                          _ptr__4725_ri64[safe_add( _4716_rnidx,_4729_nzi )] = _4740_varidx;
                          _ptr__4726_rf64[safe_add( _4719_rcof,_4729_nzi )] = _4736_c;
                          ++ _4729_nzi;
                        }
                      }
                      else
                      {
                        {
                          while ( (_4734_p < _4738_p0e) )
                          {
                            {
                              double _4743_ci = _ptr__4674_wf64[safe_add( _4668_cof,_ptr__4703_xi32[safe_add( _4702_perm1,_4734_p )] )];
                              _4737_cnonzero = (_4737_cnonzero || (!((_4743_ci <= 0.0) && (_4743_ci >= 0.0))));
                              _4736_c += _4743_ci;
                              ++ _4734_p;
                            }
                          }
                          if (_4737_cnonzero)
                          {
                            {
                              _ptr__4725_ri64[safe_add( _4716_rnidx,_4729_nzi )] = _4740_varidx;
                              _ptr__4726_rf64[safe_add( _4719_rcof,_4729_nzi )] = _4736_c;
                              ++ _4729_nzi;
                            }
                          }
                          {}
                        }
                      }
                    }
                  }
                }
              }
              {}
              _ptr__4724_ri32[safe_add( safe_add( _4720_rptr,_4731_elmi ),(int)1 )] = _4729_nzi;
            }
          }
        }
        if ((_4705_rncodeatom != _4730_codei))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ncodeatom"));
          }
        }
        {}
        if ((_4729_nzi != _4704_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
          }
        }
        {}
        if ((_4704_rnnz != _ptr__4724_ri32[safe_add( _4720_rptr,_4661_nelem )]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
          }
        }
        {}
      }
      if ((_4705_rncodeatom > (int)0))
      {
        {
          if ((_ptr__4724_ri32[safe_add( _4722_rcodeptr,_4704_rnnz )] != _4705_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  _4658_xs->clear();
}
// End mosek.fusion.ExprCompress.eval

// Begin mosek.fusion.ExprCompress.toString
// Method mosek.fusion.ExprCompress.toString @ src/fusion/ExprCompress.monty:14:6-130
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprCompress::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprCompress.toString

void mosek::fusion::p_ExprCompress::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }
// } class ExprCompress
// class ExprConst { // @ src/fusion/ExprConst.monty:4:4-80:5
mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }
mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprConst::p_ExprConst
  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprConst.ctor @ src/fusion/ExprConst.monty:37:6-42:7
mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4744_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4745_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _4746_bfix)
{ return new mosek::fusion::ExprConst(_4744_shape,_4745_sparsity,_4746_bfix); }
mosek::fusion::ExprConst::ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4744_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4745_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _4746_bfix) : 
   ExprConst(new mosek::fusion::p_ExprConst(this))
{ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4744_shape,_4745_sparsity,_4746_bfix); }
void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4744_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4745_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _4746_bfix)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4744_shape(_4744_shape ? _4744_shape->raw() : nullptr, _4744_shape ? _4744_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__4745_sparsity(_4745_sparsity ? _4745_sparsity->raw() : nullptr, _4745_sparsity ? _4745_sparsity->size(0) : 0);
    _checked_ptr_1<double> _ptr__4746_bfix(_4746_bfix ? _4746_bfix->raw() : nullptr, _4746_bfix ? _4746_bfix->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4744_shape);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_4746_bfix);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _11135_;
    bool _11136_ = (NULL != _4745_sparsity.get());
    if (_11136_)
    {
      _11135_ = ::mosek::fusion::Utils::Tools::arraycopy(_4745_sparsity);
    }
    else
    {
      _11135_ = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _11135_;
    ::mosek::fusion::p_ExprConst::validate(_4744_shape,_4746_bfix,_4745_sparsity);
  }
}
// mosek.fusion.ExprConst.ctor

// mosek.fusion.ExprConst.ctor @ src/fusion/ExprConst.monty:28:6-35:7
mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4747_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4748_sparsity,
    double _4749_bfix)
{ return new mosek::fusion::ExprConst(_4747_shape,_4748_sparsity,_4749_bfix); }
mosek::fusion::ExprConst::ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4747_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4748_sparsity,
    double _4749_bfix) : 
   ExprConst(new mosek::fusion::p_ExprConst(this))
{ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4747_shape,_4748_sparsity,_4749_bfix); }
void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4747_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4748_sparsity,
    double _4749_bfix)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4747_shape(_4747_shape ? _4747_shape->raw() : nullptr, _4747_shape ? _4747_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__4748_sparsity(_4748_sparsity ? _4748_sparsity->raw() : nullptr, _4748_sparsity ? _4748_sparsity->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4747_shape);
    int64_t _11137_;
    bool _11138_ = (NULL == _4748_sparsity.get());
    if (_11138_)
    {
      _11137_ = ::mosek::fusion::p_Set::size(_4747_shape);
    }
    else
    {
      _11137_ = (int)((_4748_sparsity)->size(0));
    }
    int64_t _4750_n = _11137_;
    std::vector<double> _11139_;
    for (int64_t _4751_i = (int)0, _11140_ = _4750_n; _4751_i < _11140_ ; ++_4751_i)
    {
      _11139_.push_back(_4749_bfix);
    }
    auto _11141_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11139_.size()),_11139_.begin(),_11139_.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _11141_;
    std::shared_ptr< monty::ndarray< int64_t,1 > > _11142_;
    bool _11143_ = (NULL != _4748_sparsity.get());
    if (_11143_)
    {
      _11142_ = ::mosek::fusion::Utils::Tools::arraycopy(_4748_sparsity);
    }
    else
    {
      _11142_ = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _11142_;
    ::mosek::fusion::p_ExprConst::validate(_4747_shape,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_4748_sparsity);
  }
}
// mosek.fusion.ExprConst.ctor

// Begin mosek.fusion.ExprConst.eval
// Method mosek.fusion.ExprConst.eval @ src/fusion/ExprConst.monty:44:6-79:7
void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4752_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4753_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4754_xs) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_4752_rs,_4753_ws,_4754_xs); }
void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4752_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4753_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4754_xs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4755_shape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__4755_shape(_4755_shape ? _4755_shape->raw() : nullptr,_4755_shape ? _4755_shape->size(0) : 0);
  int32_t _4756_nd = (int)((_4755_shape)->size(0));
  int32_t _4757_nnz = (int)0;
  int32_t _11144_ = (int)0;
  int32_t _11145_ = (int)((bfix)->size(0));
  for (int32_t _4758_i = _11144_; _4758_i < _11145_; ++_4758_i)
  {
    {
      if ((!((((*bfix)(_4758_i)) <= 0.0) && (((*bfix)(_4758_i)) >= 0.0))))
      {
        {
          ++ _4757_nnz;
        }
      }
      {}
    }
  }
  int32_t _4759_nelem = (int)((bfix)->size(0));
  bool _4760_hassp = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_4755_shape)));
  _4752_rs->alloc_expr(_4756_nd,_4759_nelem,_4757_nnz,_4760_hassp,(int)0);
  int32_t _4761_rshape = mosek::fusion::p_WorkStack::_get_impl(_4752_rs)->shape_base;
  int32_t _4762_rptr = mosek::fusion::p_WorkStack::_get_impl(_4752_rs)->ptr_base;
  int32_t _4763_rsp = mosek::fusion::p_WorkStack::_get_impl(_4752_rs)->sp_base;
  int32_t _4764_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4752_rs)->nidxs_base;
  int32_t _4765_rcof = mosek::fusion::p_WorkStack::_get_impl(_4752_rs)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4766_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4752_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4766_ri32(_4766_ri32 ? _4766_ri32->raw() : nullptr,_4766_ri32 ? _4766_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4767_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4752_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4767_ri64(_4767_ri64 ? _4767_ri64->raw() : nullptr,_4767_ri64 ? _4767_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4768_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4752_rs)->f64;
  _checked_ptr_1<double> _ptr__4768_rf64(_4768_rf64 ? _4768_rf64->raw() : nullptr,_4768_rf64 ? _4768_rf64->size(0) : 0);
  int32_t _11146_ = (int)0;
  int32_t _11147_ = _4756_nd;
  for (int32_t _4769_i = _11146_; _4769_i < _11147_; ++_4769_i)
  {
    {
      _ptr__4766_ri32[safe_add( _4761_rshape,_4769_i )] = _ptr__4755_shape[_4769_i];
    }
  }
  int32_t _4770_nzi = (int)0;
  _ptr__4766_ri32[_4762_rptr] = (int)0;
  if (_4760_hassp)
  {
    {
      int32_t _11148_ = (int)0;
      int32_t _11149_ = _4759_nelem;
      for (int32_t _4771_i = _11148_; _4771_i < _11149_; ++_4771_i)
      {
        {
          _ptr__4767_ri64[safe_add( _4763_rsp,_4771_i )] = ((*sparsity)(_4771_i));
        }
      }
    }
  }
  {}
  int32_t _11150_ = (int)0;
  int32_t _11151_ = _4759_nelem;
  for (int32_t _4772_i = _11150_; _4772_i < _11151_; ++_4772_i)
  {
    {
      if ((!((((*bfix)(_4772_i)) <= 0.0) && (((*bfix)(_4772_i)) >= 0.0))))
      {
        {
          _ptr__4767_ri64[safe_add( _4764_rnidxs,_4770_nzi )] = (int)0;
          _ptr__4768_rf64[safe_add( _4765_rcof,_4770_nzi )] = ((*bfix)(_4772_i));
          ++ _4770_nzi;
        }
      }
      {}
      _ptr__4766_ri32[safe_add( safe_add( _4762_rptr,_4772_i ),(int)1 )] = _4770_nzi;
    }
  }
}
// End mosek.fusion.ExprConst.eval

// Begin mosek.fusion.ExprConst.validate
// Method mosek.fusion.ExprConst.validate @ src/fusion/ExprConst.monty:10:6-26:7
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _4773_shape,std::shared_ptr< monty::ndarray< double,1 > > _4774_bfix,std::shared_ptr< monty::ndarray< int64_t,1 > > _4775_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__4773_shape(_4773_shape ? _4773_shape->raw() : nullptr, _4773_shape ? _4773_shape->size(0) : 0);
  _checked_ptr_1<double> _ptr__4774_bfix(_4774_bfix ? _4774_bfix->raw() : nullptr, _4774_bfix ? _4774_bfix->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__4775_sparsity(_4775_sparsity ? _4775_sparsity->raw() : nullptr, _4775_sparsity ? _4775_sparsity->size(0) : 0);
  int64_t _4776_sz = ::mosek::fusion::p_Set::size(_4773_shape);
  if ((NULL != _4775_sparsity.get()))
  {
    {
      if (((int)((_4775_sparsity)->size(0)) != (int)((_4774_bfix)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      bool _4777_err = false;
      int32_t _11152_ = (int)0;
      int32_t _11153_ = (int)((_4775_sparsity)->size(0));
      for (int32_t _4778_i = _11152_; _4778_i < _11153_; ++_4778_i)
      {
        {
          if (((_ptr__4775_sparsity[_4778_i] < (int)0) || (_ptr__4775_sparsity[_4778_i] >= _4776_sz)))
          {
            {
              _4777_err = true;
            }
          }
          {}
        }
      }
      if (_4777_err)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_4774_bfix)->size(0)) != _4776_sz))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
// End mosek.fusion.ExprConst.validate

// Begin mosek.fusion.ExprConst.toString
// Method mosek.fusion.ExprConst.toString @ src/fusion/ExprConst.monty:8:6-63
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprConst::toString()
{
  return std::string ("ExprConst()");
}
// End mosek.fusion.ExprConst.toString

void mosek::fusion::p_ExprConst::destroy()
{
  sparsity.reset();
  bfix.reset();
}
void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }
// } class ExprConst
// class ExprPick { // @ src/fusion/ExprSlice.monty:186:4-386:5
mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }
mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprPick::p_ExprPick
  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprPick.ctor @ src/fusion/ExprSlice.monty:209:6-238:7
mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4779_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _4780_idxs)
{ return new mosek::fusion::ExprPick(_4779_expr,_4780_idxs); }
mosek::fusion::ExprPick::ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4779_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _4780_idxs) : 
   ExprPick(new mosek::fusion::p_ExprPick(this))
{ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4779_expr,_4780_idxs); }
void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4779_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _4780_idxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_4780_idxs)->size(0)))}));
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4781_shape = _4779_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__4781_shape(_4781_shape ? _4781_shape->raw() : nullptr,_4781_shape ? _4781_shape->size(0) : 0);
    int32_t _4782_nd = (int)((_4781_shape)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4779_expr;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_4780_idxs)->size(0)))));
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4783_this_idxs = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<int64_t> _ptr__4783_this_idxs(_4783_this_idxs ? _4783_this_idxs->raw() : nullptr,_4783_this_idxs ? _4783_this_idxs->size(0) : 0);
    if (((int)((_4780_idxs)->size(1)) != _4782_nd))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    bool _4784_wrongindex = false;
    int32_t _11154_ = (int)0;
    int32_t _11155_ = (int)((_4780_idxs)->size(0));
    for (int32_t _4785_i = _11154_; _4785_i < _11155_; ++_4785_i)
    {
      {
        int32_t _11156_ = (int)0;
        int32_t _11157_ = _4782_nd;
        for (int32_t _4786_j = _11156_; _4786_j < _11157_; ++_4786_j)
        {
          {
            if (((((*_4780_idxs)(_4785_i,_4786_j)) < (int)0) || (((*_4780_idxs)(_4785_i,_4786_j)) >= _ptr__4781_shape[_4786_j])))
            {
              {
                _4784_wrongindex = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_4784_wrongindex)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4787_st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4782_nd)));
      _checked_ptr_1<int64_t> _ptr__4787_st(_4787_st ? _4787_st->raw() : nullptr,_4787_st ? _4787_st->size(0) : 0);
      _ptr__4787_st[(_4782_nd - (int)1)] = (int)1;
      int32_t _11158_ = (int)1;
      int32_t _11159_ = _4782_nd;
      for (int32_t _4788_i = _11158_; _4788_i < _11159_; ++_4788_i)
      {
        {
          _ptr__4787_st[((_4782_nd - _4788_i) - (int)1)] = safe_mul( _ptr__4787_st[(_4782_nd - _4788_i)],_ptr__4781_shape[(_4782_nd - _4788_i)] );
        }
      }
      int32_t _11160_ = (int)0;
      int32_t _11161_ = (int)((_4780_idxs)->size(0));
      for (int32_t _4789_i = _11160_; _4789_i < _11161_; ++_4789_i)
      {
        {
          int64_t _4790_ii = (int64_t)0;
          int32_t _11162_ = (int)0;
          int32_t _11163_ = _4782_nd;
          for (int32_t _4791_j = _11162_; _4791_j < _11163_; ++_4791_j)
          {
            {
              _4790_ii += safe_mul( _ptr__4787_st[_4791_j],((*_4780_idxs)(_4789_i,_4791_j)) );
            }
          }
          _ptr__4783_this_idxs[_4789_i] = _4790_ii;
        }
      }
    }
  }
}
// mosek.fusion.ExprPick.ctor

// mosek.fusion.ExprPick.ctor @ src/fusion/ExprSlice.monty:190:6-205:7
mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4792_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4793_idxs)
{ return new mosek::fusion::ExprPick(_4792_expr,_4793_idxs); }
mosek::fusion::ExprPick::ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4792_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4793_idxs) : 
   ExprPick(new mosek::fusion::p_ExprPick(this))
{ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4792_expr,_4793_idxs); }
void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4792_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4793_idxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__4793_idxs(_4793_idxs ? _4793_idxs->raw() : nullptr, _4793_idxs ? _4793_idxs->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_4793_idxs)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4792_expr;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4794_shape = _4792_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__4794_shape(_4794_shape ? _4794_shape->raw() : nullptr,_4794_shape ? _4794_shape->size(0) : 0);
    int64_t _4795_size = ::mosek::fusion::p_Set::size(_4794_shape);
    bool _4796_wrongindex = false;
    int32_t _11164_ = (int)0;
    int32_t _11165_ = (int)((_4793_idxs)->size(0));
    for (int32_t _4797_i = _11164_; _4797_i < _11165_; ++_4797_i)
    {
      {
        if (((_ptr__4793_idxs[_4797_i] < (int)0) || (_ptr__4793_idxs[_4797_i] >= _4795_size)))
        {
          {
            _4796_wrongindex = true;
          }
        }
        {}
      }
    }
    if (_4796_wrongindex)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_4793_idxs);
  }
}
// mosek.fusion.ExprPick.ctor

// Begin mosek.fusion.ExprPick.eval
// Method mosek.fusion.ExprPick.eval @ src/fusion/ExprSlice.monty:240:6-385:7
void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4798_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4799_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4800_xs) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_4798_rs,_4799_ws,_4800_xs); }
void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4798_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4799_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4800_xs)
{
  expr->eval(_4799_ws,_4798_rs,_4800_xs);
  _4799_ws->pop_expr();
  int32_t _4801_nd = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->nd;
  int32_t _4802_shape = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->shape_base;
  int32_t _4803_nelem = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->nelem;
  int32_t _4804_nnz = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->nnz;
  int32_t _4805_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->ncodeatom;
  bool _4806_hassp = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->hassp;
  int32_t _4807_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->ptr_base;
  int32_t _4808_sp_base = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->sp_base;
  int32_t _4809_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->nidxs_base;
  int32_t _4810_cof_base = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->cof_base;
  int32_t _4811_code = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->code_base;
  int32_t _4812_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->codeptr_base;
  int32_t _4813_cconst = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4814_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4814_wi32(_4814_wi32 ? _4814_wi32->raw() : nullptr,_4814_wi32 ? _4814_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4815_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4815_wi64(_4815_wi64 ? _4815_wi64->raw() : nullptr,_4815_wi64 ? _4815_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4816_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4799_ws)->f64;
  _checked_ptr_1<double> _ptr__4816_wf64(_4816_wf64 ? _4816_wf64->raw() : nullptr,_4816_wf64 ? _4816_wf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4817_idxs = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<int64_t> _ptr__4817_idxs(_4817_idxs ? _4817_idxs->raw() : nullptr,_4817_idxs ? _4817_idxs->size(0) : 0);
  if ((!_4806_hassp))
  {
    {
      int32_t _4818_rnelem = (int)((_4817_idxs)->size(0));
      int32_t _4819_rnd = (int)1;
      int32_t _4820_rnnz = (int)0;
      int32_t _4821_rncodeatom = (int)0;
      int32_t _11166_ = (int)0;
      int32_t _11167_ = (int)((_4817_idxs)->size(0));
      for (int32_t _4822_i = _11166_; _4822_i < _11167_; ++_4822_i)
      {
        {
          _4820_rnnz += (_ptr__4814_wi32[safe_add( safe_add( _4807_ptr_base,_ptr__4817_idxs[_4822_i] ),(int)1 )] - _ptr__4814_wi32[safe_add( _4807_ptr_base,_ptr__4817_idxs[_4822_i] )]);
          if ((_4805_ncodeatom > (int)0))
          {
            {
              _4821_rncodeatom += (_ptr__4814_wi32[safe_add( _4812_codeptr,_ptr__4814_wi32[safe_add( safe_add( _4807_ptr_base,_ptr__4817_idxs[_4822_i] ),(int)1 )] )] - _ptr__4814_wi32[safe_add( _4812_codeptr,_ptr__4814_wi32[safe_add( _4807_ptr_base,_ptr__4817_idxs[_4822_i] )] )]);
            }
          }
          {}
        }
      }
      _4798_rs->alloc_expr(_4819_rnd,_4818_rnelem,_4820_rnnz,false,_4821_rncodeatom);
      int32_t _4823_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->cof_base;
      int32_t _4824_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->nidxs_base;
      int32_t _4825_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->ptr_base;
      int32_t _4826_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->shape_base;
      int32_t _4827_rcode = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->code_base;
      int32_t _4828_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->codeptr_base;
      int32_t _4829_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->cconst_base;
      {
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4830_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4830_ri32(_4830_ri32 ? _4830_ri32->raw() : nullptr,_4830_ri32 ? _4830_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4831_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4831_ri64(_4831_ri64 ? _4831_ri64->raw() : nullptr,_4831_ri64 ? _4831_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4832_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->f64;
      _checked_ptr_1<double> _ptr__4832_rf64(_4832_rf64 ? _4832_rf64->raw() : nullptr,_4832_rf64 ? _4832_rf64->size(0) : 0);
      _ptr__4830_ri32[_4826_rshape_base] = (int)((_4817_idxs)->size(0));
      int32_t _4833_codei = (int)0;
      int32_t _4834_knz = (int)0;
      _ptr__4830_ri32[_4825_rptr_base] = (int)0;
      int32_t _11168_ = (int)0;
      int32_t _11169_ = (int)((_4817_idxs)->size(0));
      for (int32_t _4835_i = _11168_; _4835_i < _11169_; ++_4835_i)
      {
        {
          int32_t _11170_ = _ptr__4814_wi32[safe_add( _4807_ptr_base,_ptr__4817_idxs[_4835_i] )];
          int32_t _11171_ = _ptr__4814_wi32[safe_add( safe_add( _4807_ptr_base,_ptr__4817_idxs[_4835_i] ),(int)1 )];
          for (int32_t _4836_j = _11170_; _4836_j < _11171_; ++_4836_j)
          {
            {
              _ptr__4831_ri64[safe_add( _4824_rnidxs_base,_4834_knz )] = _ptr__4815_wi64[safe_add( _4809_nidxs_base,_4836_j )];
              _ptr__4832_rf64[safe_add( _4823_rcof_base,_4834_knz )] = _ptr__4816_wf64[safe_add( _4810_cof_base,_4836_j )];
              if ((_4805_ncodeatom > (int)0))
              {
                {
                  int32_t _11172_ = _ptr__4814_wi32[safe_add( _4812_codeptr,_4836_j )];
                  int32_t _11173_ = _ptr__4814_wi32[safe_add( safe_add( _4812_codeptr,_4836_j ),(int)1 )];
                  for (int32_t _4837_k = _11172_; _4837_k < _11173_; ++_4837_k)
                  {
                    {
                      _ptr__4830_ri32[safe_add( _4827_rcode,_4833_codei )] = _ptr__4814_wi32[safe_add( _4811_code,_4837_k )];
                      _ptr__4832_rf64[safe_add( _4829_rcconst,_4833_codei )] = _ptr__4816_wf64[safe_add( _4813_cconst,_4837_k )];
                      ++ _4833_codei;
                    }
                  }
                  _ptr__4830_ri32[safe_add( safe_add( _4828_rcodeptr,_4834_knz ),(int)1 )] = _4833_codei;
                }
              }
              {}
              ++ _4834_knz;
            }
          }
          _ptr__4830_ri32[safe_add( safe_add( _4825_rptr_base,_4835_i ),(int)1 )] = _4834_knz;
        }
      }
    }
  }
  else
  {
    {
      int32_t _4838_rnd = (int)1;
      int32_t _4839_rnelem = (int)((_4817_idxs)->size(0));
      int32_t _4840_rnnz = (int)0;
      int32_t _4841_rncodeatom = (int)0;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4842_idxs = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<int64_t> _ptr__4842_idxs(_4842_idxs ? _4842_idxs->raw() : nullptr,_4842_idxs ? _4842_idxs->size(0) : 0);
      int32_t _4843_tidxs = _4800_xs->alloci32((int)((_4842_idxs)->size(0)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4844_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4800_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4844_xi32(_4844_xi32 ? _4844_xi32->raw() : nullptr,_4844_xi32 ? _4844_xi32->size(0) : 0);
      int32_t _11174_ = (int)0;
      int32_t _11175_ = (int)((_4842_idxs)->size(0));
      for (int32_t _4845_i = _11174_; _4845_i < _11175_; ++_4845_i)
      {
        {
          int32_t _4846_b1 = _4803_nelem;
          int32_t _4847_b0 = (int)0;
          while ( (_4847_b0 < (_4846_b1 - (int)1)) )
          {
            {
              int32_t _4848_pi = (safe_add( safe_add( _4846_b1,_4847_b0 ),(int)1 ) / (int)2);
              if ((_ptr__4815_wi64[safe_add( _4808_sp_base,_4848_pi )] >= _ptr__4842_idxs[_4845_i]))
              {
                {
                  _4846_b1 = _4848_pi;
                }
              }
              else
              {
                {
                  _4847_b0 = _4848_pi;
                }
              }
            }
          }
          ++ _4847_b0;
          if (((_4847_b0 < _4803_nelem) && (_ptr__4815_wi64[safe_add( _4808_sp_base,_4847_b0 )] == _ptr__4842_idxs[_4845_i])))
          {
            {
              _ptr__4844_xi32[safe_add( _4843_tidxs,_4845_i )] = _4847_b0;
              _4840_rnnz += (_ptr__4814_wi32[safe_add( safe_add( _4807_ptr_base,_4847_b0 ),(int)1 )] - _ptr__4814_wi32[safe_add( _4807_ptr_base,_4847_b0 )]);
              if ((_4805_ncodeatom > (int)0))
              {
                {
                  _4841_rncodeatom += (_ptr__4814_wi32[safe_add( _4812_codeptr,_ptr__4814_wi32[safe_add( safe_add( _4807_ptr_base,_ptr__4842_idxs[_4845_i] ),(int)1 )] )] - _ptr__4814_wi32[safe_add( _4812_codeptr,_ptr__4814_wi32[safe_add( _4807_ptr_base,_ptr__4842_idxs[_4845_i] )] )]);
                }
              }
              {}
            }
          }
          else
          {
            {
              _ptr__4844_xi32[safe_add( _4843_tidxs,_4845_i )] = (-(int)1);
            }
          }
        }
      }
      _4798_rs->alloc_expr(_4838_rnd,_4839_rnelem,_4840_rnnz,false,_4841_rncodeatom);
      int32_t _4849_rptr = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->ptr_base;
      int32_t _4850_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->nidxs_base;
      int32_t _4851_rcof = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->cof_base;
      int32_t _4852_rshape = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->shape_base;
      int32_t _4853_rcode = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->code_base;
      int32_t _4854_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->codeptr_base;
      int32_t _4855_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4856_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4856_ri32(_4856_ri32 ? _4856_ri32->raw() : nullptr,_4856_ri32 ? _4856_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4857_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4857_ri64(_4857_ri64 ? _4857_ri64->raw() : nullptr,_4857_ri64 ? _4857_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4858_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4798_rs)->f64;
      _checked_ptr_1<double> _ptr__4858_rf64(_4858_rf64 ? _4858_rf64->raw() : nullptr,_4858_rf64 ? _4858_rf64->size(0) : 0);
      _ptr__4856_ri32[_4852_rshape] = (int)((_4842_idxs)->size(0));
      _ptr__4856_ri32[_4849_rptr] = (int)0;
      int32_t _4859_codei = (int)0;
      int32_t _4860_k = (int)0;
      int32_t _11176_ = (int)0;
      int32_t _11177_ = (int)((_4842_idxs)->size(0));
      for (int32_t _4861_i = _11176_; _4861_i < _11177_; ++_4861_i)
      {
        {
          if ((_ptr__4844_xi32[safe_add( _4843_tidxs,_4861_i )] >= (int)0))
          {
            {
              int32_t _4862_b0 = _ptr__4844_xi32[safe_add( _4843_tidxs,_4861_i )];
              int32_t _11178_ = _ptr__4814_wi32[safe_add( _4807_ptr_base,_4862_b0 )];
              int32_t _11179_ = _ptr__4814_wi32[safe_add( safe_add( _4807_ptr_base,_4862_b0 ),(int)1 )];
              for (int32_t _4863_j = _11178_; _4863_j < _11179_; ++_4863_j)
              {
                {
                  _ptr__4857_ri64[safe_add( _4850_rnidxs,_4860_k )] = _ptr__4815_wi64[safe_add( _4809_nidxs_base,_4863_j )];
                  _ptr__4858_rf64[safe_add( _4851_rcof,_4860_k )] = _ptr__4816_wf64[safe_add( _4810_cof_base,_4863_j )];
                  if ((_4805_ncodeatom > (int)0))
                  {
                    {
                      int32_t _11180_ = _ptr__4814_wi32[safe_add( _4812_codeptr,_4863_j )];
                      int32_t _11181_ = _ptr__4814_wi32[safe_add( safe_add( _4812_codeptr,_4863_j ),(int)1 )];
                      for (int32_t _4864_l = _11180_; _4864_l < _11181_; ++_4864_l)
                      {
                        {
                          _ptr__4856_ri32[safe_add( _4853_rcode,_4859_codei )] = _ptr__4814_wi32[safe_add( _4811_code,_4864_l )];
                          _ptr__4858_rf64[safe_add( _4855_rcconst,_4859_codei )] = _ptr__4816_wf64[safe_add( _4813_cconst,_4864_l )];
                          ++ _4859_codei;
                        }
                      }
                      _ptr__4856_ri32[safe_add( safe_add( _4854_rcodeptr,_4860_k ),(int)1 )] = _4859_codei;
                    }
                  }
                  {}
                  ++ _4860_k;
                }
              }
            }
          }
          {}
          _ptr__4856_ri32[safe_add( safe_add( _4849_rptr,_4861_i ),(int)1 )] = _4860_k;
        }
      }
    }
  }
}
// End mosek.fusion.ExprPick.eval

// Begin mosek.fusion.ExprPick.toString
// Method mosek.fusion.ExprPick.toString @ src/fusion/ExprSlice.monty:207:6-62
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprPick::toString()
{
  return std::string ("ExprPick()");
}
// End mosek.fusion.ExprPick.toString

void mosek::fusion::p_ExprPick::destroy()
{
  idxs.reset();
  expr.reset();
}
void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }
// } class ExprPick
// class ExprSlice { // @ src/fusion/ExprSlice.monty:4:4-182:5
mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }
mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprSlice::p_ExprSlice
  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprSlice.ctor @ src/fusion/ExprSlice.monty:28:6-34:7
mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice
  (monty::rc_ptr< ::mosek::fusion::Expression > _4865_expr,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4866_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4867_last)
{ return new mosek::fusion::ExprSlice(_4865_expr,_4866_first,_4867_last); }
mosek::fusion::ExprSlice::ExprSlice
  (monty::rc_ptr< ::mosek::fusion::Expression > _4865_expr,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4866_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4867_last) : 
   ExprSlice(new mosek::fusion::p_ExprSlice(this))
{ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_4865_expr,_4866_first,_4867_last); }
void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4865_expr,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4866_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4867_last)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4866_first(_4866_first ? _4866_first->raw() : nullptr, _4866_first ? _4866_first->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__4867_last(_4867_last ? _4867_last->raw() : nullptr, _4867_last ? _4867_last->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSlice::makeShape(_4865_expr->getShape(),_4866_first,_4867_last));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _4865_expr;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _4866_first;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _4867_last;
  }
}
// mosek.fusion.ExprSlice.ctor

// Begin mosek.fusion.ExprSlice.eval
// Method mosek.fusion.ExprSlice.eval @ src/fusion/ExprSlice.monty:36:6-181:7
void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4868_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4869_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4870_xs) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_4868_rs,_4869_ws,_4870_xs); }
void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4868_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4869_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4870_xs)
{
  expr->eval(_4869_ws,_4868_rs,_4870_xs);
  _4869_ws->pop_expr();
  int32_t _4871_nd = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->nd;
  int32_t _4872_nelem = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->nelem;
  int32_t _4873_nnz = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->nnz;
  int32_t _4874_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->ncodeatom;
  bool _4875_hassp = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->hassp;
  int32_t _4876_shape_base = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->shape_base;
  int32_t _4877_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->ptr_base;
  int32_t _4878_sp_base = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->sp_base;
  int32_t _4879_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->nidxs_base;
  int32_t _4880_cof_base = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->cof_base;
  int32_t _4881_code = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->code_base;
  int32_t _4882_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->codeptr_base;
  int32_t _4883_cconst = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4884_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4884_wi32(_4884_wi32 ? _4884_wi32->raw() : nullptr,_4884_wi32 ? _4884_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4885_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4885_wi64(_4885_wi64 ? _4885_wi64->raw() : nullptr,_4885_wi64 ? _4885_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4886_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4869_ws)->f64;
  _checked_ptr_1<double> _ptr__4886_wf64(_4886_wf64 ? _4886_wf64->raw() : nullptr,_4886_wf64 ? _4886_wf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4887_st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4871_nd)));
  _checked_ptr_1<int64_t> _ptr__4887_st(_4887_st ? _4887_st->raw() : nullptr,_4887_st ? _4887_st->size(0) : 0);
  _ptr__4887_st[(_4871_nd - (int)1)] = (int)1;
  int32_t _11182_ = (int)1;
  int32_t _11183_ = _4871_nd;
  for (int32_t _4888_i = _11182_; _4888_i < _11183_; ++_4888_i)
  {
    {
      _ptr__4887_st[((_4871_nd - _4888_i) - (int)1)] = safe_mul( _ptr__4887_st[(_4871_nd - _4888_i)],_ptr__4884_wi32[(safe_add( _4876_shape_base,_4871_nd ) - _4888_i)] );
    }
  }
  int32_t _4889_rncodeatom = (int)0;
  int32_t _4890_rnelem = (int)0;
  int32_t _4891_rnnz = (int)0;
  if (_4875_hassp)
  {
    {
      int32_t _11184_ = (int)0;
      int32_t _11185_ = _4872_nelem;
      for (int32_t _4892_i = _11184_; _4892_i < _11185_; ++_4892_i)
      {
        {
          bool _4893_in_bounds = true;
          int32_t _11186_ = (int)0;
          int32_t _11187_ = _4871_nd;
          for (int32_t _4894_j = _11186_; _4894_j < _11187_; ++_4894_j)
          {
            {
              int64_t _4895_kj = ((_ptr__4885_wi64[safe_add( _4878_sp_base,_4892_i )] / _ptr__4887_st[_4894_j]) % _ptr__4884_wi32[safe_add( _4876_shape_base,_4894_j )]);
              _4893_in_bounds = (_4893_in_bounds && ((_4895_kj >= ((*first)(_4894_j))) && (_4895_kj < ((*last)(_4894_j)))));
            }
          }
          if (_4893_in_bounds)
          {
            {
              _4891_rnnz += (_ptr__4884_wi32[safe_add( safe_add( _4877_ptr_base,_4892_i ),(int)1 )] - _ptr__4884_wi32[safe_add( _4877_ptr_base,_4892_i )]);
              if ((_4874_ncodeatom > (int)0))
              {
                {
                  _4889_rncodeatom += (_ptr__4884_wi32[safe_add( _4882_codeptr,_ptr__4884_wi32[safe_add( safe_add( _4877_ptr_base,_4892_i ),(int)1 )] )] - _ptr__4884_wi32[safe_add( _4882_codeptr,_ptr__4884_wi32[safe_add( _4877_ptr_base,_4892_i )] )]);
                }
              }
              {}
              ++ _4890_rnelem;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _4890_rnelem = (int)1;
      int32_t _11188_ = (int)0;
      int32_t _11189_ = _4871_nd;
      for (int32_t _4896_i = _11188_; _4896_i < _11189_; ++_4896_i)
      {
        {
          _4890_rnelem *= (((*last)(_4896_i)) - ((*first)(_4896_i)));
        }
      }
      int32_t _11190_ = (int)0;
      int32_t _11191_ = _4872_nelem;
      for (int32_t _4897_i = _11190_; _4897_i < _11191_; ++_4897_i)
      {
        {
          bool _4898_in_bounds = true;
          int32_t _11192_ = (int)0;
          int32_t _11193_ = _4871_nd;
          for (int32_t _4899_j = _11192_; _4899_j < _11193_; ++_4899_j)
          {
            {
              int64_t _4900_kj = ((_4897_i / _ptr__4887_st[_4899_j]) % _ptr__4884_wi32[safe_add( _4876_shape_base,_4899_j )]);
              _4898_in_bounds = (_4898_in_bounds && ((_4900_kj >= ((*first)(_4899_j))) && (_4900_kj < ((*last)(_4899_j)))));
            }
          }
          if (_4898_in_bounds)
          {
            {
              _4891_rnnz += (_ptr__4884_wi32[safe_add( safe_add( _4877_ptr_base,_4897_i ),(int)1 )] - _ptr__4884_wi32[safe_add( _4877_ptr_base,_4897_i )]);
              if ((_4874_ncodeatom > (int)0))
              {
                {
                  _4889_rncodeatom += (_ptr__4884_wi32[safe_add( _4882_codeptr,_ptr__4884_wi32[safe_add( safe_add( _4877_ptr_base,_4897_i ),(int)1 )] )] - _ptr__4884_wi32[safe_add( _4882_codeptr,_ptr__4884_wi32[safe_add( _4877_ptr_base,_4897_i )] )]);
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int32_t> _11194_;
  for (int32_t _4902_i = (int)0, _11195_ = _4871_nd; _4902_i < _11195_ ; ++_4902_i)
  {
    _11194_.push_back((((*last)(_4902_i)) - ((*first)(_4902_i))));
  }
  auto _11196_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11194_.size()),_11194_.begin(),_11194_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4901_rshape = _11196_;
  _checked_ptr_1<int32_t> _ptr__4901_rshape(_4901_rshape ? _4901_rshape->raw() : nullptr,_4901_rshape ? _4901_rshape->size(0) : 0);
  bool _4903_rhassp = (_4890_rnelem < ::mosek::fusion::p_Set::size(_4901_rshape));
  _4868_rs->alloc_expr(_4871_nd,_4890_rnelem,_4891_rnnz,_4903_rhassp,_4889_rncodeatom);
  int32_t _4904_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->shape_base;
  int32_t _4905_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->cof_base;
  int32_t _4906_rnidx_base = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->nidxs_base;
  int32_t _11197_;
  bool _11198_ = _4903_rhassp;
  if (_11198_)
  {
    _11197_ = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->sp_base;
  }
  else
  {
    _11197_ = _4868_rs->alloci64(_4890_rnelem);
  }
  int32_t _4907_rsp_base = _11197_;
  int32_t _4908_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->ptr_base;
  int32_t _4909_rcode = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->code_base;
  int32_t _4910_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->codeptr_base;
  int32_t _4911_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4912_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4912_ri32(_4912_ri32 ? _4912_ri32->raw() : nullptr,_4912_ri32 ? _4912_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4913_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4913_ri64(_4913_ri64 ? _4913_ri64->raw() : nullptr,_4913_ri64 ? _4913_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4914_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4868_rs)->f64;
  _checked_ptr_1<double> _ptr__4914_rf64(_4914_rf64 ? _4914_rf64->raw() : nullptr,_4914_rf64 ? _4914_rf64->size(0) : 0);
  int32_t _11199_ = (int)0;
  int32_t _11200_ = _4871_nd;
  for (int32_t _4915_i = _11199_; _4915_i < _11200_; ++_4915_i)
  {
    {
      _ptr__4912_ri32[safe_add( _4904_rshape_base,_4915_i )] = _ptr__4901_rshape[_4915_i];
    }
  }
  _ptr__4912_ri32[_4908_rptr_base] = (int)0;
  if ((_4874_ncodeatom > (int)0))
  {
    {
      _ptr__4912_ri32[_4910_rcodeptr] = (int)0;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4916_rst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4871_nd)));
  _checked_ptr_1<int64_t> _ptr__4916_rst(_4916_rst ? _4916_rst->raw() : nullptr,_4916_rst ? _4916_rst->size(0) : 0);
  _ptr__4916_rst[(_4871_nd - (int)1)] = (int)1;
  int32_t _11201_ = (int)1;
  int32_t _11202_ = _4871_nd;
  for (int32_t _4917_j = _11201_; _4917_j < _11202_; ++_4917_j)
  {
    {
      _ptr__4916_rst[((_4871_nd - _4917_j) - (int)1)] = safe_mul( _ptr__4916_rst[(_4871_nd - _4917_j)],_ptr__4901_rshape[(_4871_nd - _4917_j)] );
    }
  }
  int32_t _4918_codei = (int)0;
  int32_t _4919_kelem = (int)0;
  int32_t _4920_knz = (int)0;
  if (_4875_hassp)
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4921_key = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4871_nd)));
      _checked_ptr_1<int32_t> _ptr__4921_key(_4921_key ? _4921_key->raw() : nullptr,_4921_key ? _4921_key->size(0) : 0);
      int32_t _11203_ = (int)0;
      int32_t _11204_ = _4872_nelem;
      for (int32_t _4922_i = _11203_; _4922_i < _11204_; ++_4922_i)
      {
        {
          bool _4923_in_bounds = true;
          int32_t _11205_ = (int)0;
          int32_t _11206_ = _4871_nd;
          for (int32_t _4924_j = _11205_; _4924_j < _11206_; ++_4924_j)
          {
            {
              _ptr__4921_key[_4924_j] = (int32_t)((_ptr__4885_wi64[safe_add( _4878_sp_base,_4922_i )] / _ptr__4887_st[_4924_j]) % _ptr__4884_wi32[safe_add( _4876_shape_base,_4924_j )]);
              _4923_in_bounds = (_4923_in_bounds && ((_ptr__4921_key[_4924_j] >= ((*first)(_4924_j))) && (_ptr__4921_key[_4924_j] < ((*last)(_4924_j)))));
            }
          }
          if (_4923_in_bounds)
          {
            {
              int32_t _11207_ = _ptr__4884_wi32[safe_add( _4877_ptr_base,_4922_i )];
              int32_t _11208_ = _ptr__4884_wi32[safe_add( safe_add( _4877_ptr_base,_4922_i ),(int)1 )];
              for (int32_t _4925_j = _11207_; _4925_j < _11208_; ++_4925_j)
              {
                {
                  _ptr__4913_ri64[safe_add( _4906_rnidx_base,_4920_knz )] = _ptr__4885_wi64[safe_add( _4879_nidxs_base,_4925_j )];
                  _ptr__4914_rf64[safe_add( _4905_rcof_base,_4920_knz )] = _ptr__4886_wf64[safe_add( _4880_cof_base,_4925_j )];
                  if ((_4874_ncodeatom > (int)0))
                  {
                    {
                      int32_t _11209_ = _ptr__4884_wi32[safe_add( _4882_codeptr,_4925_j )];
                      int32_t _11210_ = _ptr__4884_wi32[safe_add( safe_add( _4882_codeptr,_4925_j ),(int)1 )];
                      for (int32_t _4926_k = _11209_; _4926_k < _11210_; ++_4926_k)
                      {
                        {
                          _ptr__4912_ri32[safe_add( _4909_rcode,_4918_codei )] = _ptr__4884_wi32[safe_add( _4881_code,_4926_k )];
                          _ptr__4914_rf64[safe_add( _4911_rcconst,_4918_codei )] = _ptr__4886_wf64[safe_add( _4883_cconst,_4926_k )];
                          ++ _4918_codei;
                        }
                      }
                      _ptr__4912_ri32[safe_add( safe_add( _4910_rcodeptr,_4920_knz ),(int)1 )] = _4918_codei;
                    }
                  }
                  {}
                  ++ _4920_knz;
                }
              }
              int64_t _4927_newidx = (int64_t)0;
              int32_t _11211_ = (int)0;
              int32_t _11212_ = _4871_nd;
              for (int32_t _4928_j = _11211_; _4928_j < _11212_; ++_4928_j)
              {
                {
                  _4927_newidx += safe_mul( _ptr__4916_rst[_4928_j],(_ptr__4921_key[_4928_j] - ((*first)(_4928_j))) );
                }
              }
              _ptr__4913_ri64[safe_add( _4907_rsp_base,_4919_kelem )] = _4927_newidx;
              _ptr__4912_ri32[safe_add( safe_add( _4908_rptr_base,_4919_kelem ),(int)1 )] = _4920_knz;
              ++ _4919_kelem;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int32_t _11213_ = (int)0;
      int32_t _11214_ = _4872_nelem;
      for (int32_t _4929_i = _11213_; _4929_i < _11214_; ++_4929_i)
      {
        {
          bool _4930_in_bounds = true;
          int32_t _11215_ = (int)0;
          int32_t _11216_ = _4871_nd;
          for (int32_t _4931_j = _11215_; _4931_j < _11216_; ++_4931_j)
          {
            {
              int64_t _4932_kj = ((_4929_i / _ptr__4887_st[_4931_j]) % _ptr__4884_wi32[safe_add( _4876_shape_base,_4931_j )]);
              _4930_in_bounds = (_4930_in_bounds && ((_4932_kj >= ((*first)(_4931_j))) && (_4932_kj < ((*last)(_4931_j)))));
            }
          }
          if (_4930_in_bounds)
          {
            {
              int32_t _11217_ = _ptr__4884_wi32[safe_add( _4877_ptr_base,_4929_i )];
              int32_t _11218_ = _ptr__4884_wi32[safe_add( safe_add( _4877_ptr_base,_4929_i ),(int)1 )];
              for (int32_t _4933_j = _11217_; _4933_j < _11218_; ++_4933_j)
              {
                {
                  _ptr__4913_ri64[safe_add( _4906_rnidx_base,_4920_knz )] = _ptr__4885_wi64[safe_add( _4879_nidxs_base,_4933_j )];
                  _ptr__4914_rf64[safe_add( _4905_rcof_base,_4920_knz )] = _ptr__4886_wf64[safe_add( _4880_cof_base,_4933_j )];
                  if ((_4874_ncodeatom > (int)0))
                  {
                    {
                      int32_t _11219_ = _ptr__4884_wi32[safe_add( _4882_codeptr,_4933_j )];
                      int32_t _11220_ = _ptr__4884_wi32[safe_add( safe_add( _4882_codeptr,_4933_j ),(int)1 )];
                      for (int32_t _4934_k = _11219_; _4934_k < _11220_; ++_4934_k)
                      {
                        {
                          _ptr__4912_ri32[safe_add( _4909_rcode,_4918_codei )] = _ptr__4884_wi32[safe_add( _4881_code,_4934_k )];
                          _ptr__4914_rf64[safe_add( _4911_rcconst,_4918_codei )] = _ptr__4886_wf64[safe_add( _4883_cconst,_4934_k )];
                          ++ _4918_codei;
                        }
                      }
                      _ptr__4912_ri32[safe_add( safe_add( _4910_rcodeptr,_4920_knz ),(int)1 )] = _4918_codei;
                    }
                  }
                  {}
                  ++ _4920_knz;
                }
              }
              _ptr__4912_ri32[safe_add( safe_add( _4908_rptr_base,_4919_kelem ),(int)1 )] = _4920_knz;
              ++ _4919_kelem;
            }
          }
          {}
        }
      }
    }
  }
  if ((!_4903_rhassp))
  {
    {
      _4868_rs->popi64(_4890_rnelem);
    }
  }
  {}
}
// End mosek.fusion.ExprSlice.eval

// Begin mosek.fusion.ExprSlice.makeShape
// Method mosek.fusion.ExprSlice.makeShape @ src/fusion/ExprSlice.monty:17:6-24:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4935_shape,std::shared_ptr< monty::ndarray< int32_t,1 > > _4936_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _4937_last)
{
  _checked_ptr_1<int32_t> _ptr__4935_shape(_4935_shape ? _4935_shape->raw() : nullptr, _4935_shape ? _4935_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4936_first(_4936_first ? _4936_first->raw() : nullptr, _4936_first ? _4936_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4937_last(_4937_last ? _4937_last->raw() : nullptr, _4937_last ? _4937_last->size(0) : 0);
  if ((((int)((_4935_shape)->size(0)) != (int)((_4936_first)->size(0))) || ((int)((_4935_shape)->size(0)) != (int)((_4937_last)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int32_t _11221_ = (int)0;
  int32_t _11222_ = (int)((_4935_shape)->size(0));
  for (int32_t _4938_i = _11221_; _4938_i < _11222_; ++_4938_i)
  {
    {
      if (((_ptr__4936_first[_4938_i] < (int)0) || ((_ptr__4937_last[_4938_i] < _ptr__4936_first[_4938_i]) || (_ptr__4937_last[_4938_i] > _ptr__4935_shape[_4938_i]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int32_t> _11223_;
  for (int32_t _4939_i = (int)0, _11224_ = (int)((_4935_shape)->size(0)); _4939_i < _11224_ ; ++_4939_i)
  {
    _11223_.push_back((_ptr__4937_last[_4939_i] - _ptr__4936_first[_4939_i]));
  }
  auto _11225_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11223_.size()),_11223_.begin(),_11223_.end()));
  return _11225_;
}
// End mosek.fusion.ExprSlice.makeShape

// Begin mosek.fusion.ExprSlice.toString
// Method mosek.fusion.ExprSlice.toString @ src/fusion/ExprSlice.monty:9:6-15:7
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprSlice::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4940_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int32_t _11226_ = (int)1;
  int32_t _11227_ = (int)((first)->size(0));
  for (int32_t _4941_i = _11226_; _4941_i < _11227_; ++_4941_i)
  {
    {
      _4940_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_4941_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_4941_i)));
    }
  }
  _4940_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4940_sb->toString();
}
// End mosek.fusion.ExprSlice.toString

void mosek::fusion::p_ExprSlice::destroy()
{
  last.reset();
  first.reset();
  expr.reset();
}
void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }
// } class ExprSlice
// class ExprPermuteDims { // @ src/fusion/ExprTranspose.monty:153:4-295:5
mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }
mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims
  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprPermuteDims.ctor @ src/fusion/ExprTranspose.monty:167:6-184:7
mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4942_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4943_expr)
{ return new mosek::fusion::ExprPermuteDims(_4942_perm,_4943_expr); }
mosek::fusion::ExprPermuteDims::ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4942_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4943_expr) : 
   ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this))
{ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4942_perm,_4943_expr); }
void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4942_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4943_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4942_perm(_4942_perm ? _4942_perm->raw() : nullptr, _4942_perm ? _4942_perm->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_4942_perm,_4943_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4944_shape = _4943_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__4944_shape(_4944_shape ? _4944_shape->raw() : nullptr,_4944_shape ? _4944_shape->size(0) : 0);
    if (((int)((_4942_perm)->size(0)) != (int)((_4944_shape)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
      }
    }
    {}
    std::vector<int32_t> _11228_;
    for (int32_t _4946_i = (int)0, _11229_ = (int)((_4942_perm)->size(0)); _4946_i < _11229_ ; ++_4946_i)
    {
      _11228_.push_back((int)0);
    }
    auto _11230_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11228_.size()),_11228_.begin(),_11228_.end()));
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4945_check = _11230_;
    _checked_ptr_1<int32_t> _ptr__4945_check(_4945_check ? _4945_check->raw() : nullptr,_4945_check ? _4945_check->size(0) : 0);
    int32_t _11231_ = (int)0;
    int32_t _11232_ = (int)((_4945_check)->size(0));
    for (int32_t _4947_i = _11231_; _4947_i < _11232_; ++_4947_i)
    {
      {
        if (((_ptr__4942_perm[_4947_i] < (int)0) || (_ptr__4942_perm[_4947_i] > (int)((_4944_shape)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
        ++ _ptr__4945_check[_ptr__4942_perm[_4947_i]];
      }
    }
    int32_t _11233_ = (int)0;
    int32_t _11234_ = (int)((_4945_check)->size(0));
    for (int32_t _4948_i = _11233_; _4948_i < _11234_; ++_4948_i)
    {
      {
        if (((_ptr__4945_check[_4948_i] < (int)1) || (_ptr__4945_check[_4948_i] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprPermuteDims.ctor

// mosek.fusion.ExprPermuteDims.ctor @ src/fusion/ExprTranspose.monty:161:6-165:7
mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4949_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4950_expr,
    int32_t _4951_validated)
{ return new mosek::fusion::ExprPermuteDims(_4949_perm,_4950_expr,_4951_validated); }
mosek::fusion::ExprPermuteDims::ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4949_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4950_expr,
    int32_t _4951_validated) : 
   ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this))
{ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4949_perm,_4950_expr,_4951_validated); }
void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4949_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4950_expr,
    int32_t _4951_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4949_perm(_4949_perm ? _4949_perm->raw() : nullptr, _4949_perm ? _4949_perm->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprPermuteDims::computeshape(_4949_perm,_4950_expr->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _4950_expr;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_4949_perm);
  }
}
// mosek.fusion.ExprPermuteDims.ctor

// Begin mosek.fusion.ExprPermuteDims.eval
// Method mosek.fusion.ExprPermuteDims.eval @ src/fusion/ExprTranspose.monty:186:6-294:7
void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4952_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4953_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4954_xs) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_4952_rs,_4953_ws,_4954_xs); }
void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4952_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4953_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4954_xs)
{
  expr->eval(_4953_ws,_4952_rs,_4954_xs);
  _4953_ws->pop_expr();
  int32_t _4955_nd = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->nd;
  int32_t _4956_nelem = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->nelem;
  int32_t _4957_nnz = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->nnz;
  int32_t _4958_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->ncodeatom;
  bool _4959_hassp = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->hassp;
  int32_t _4960_shape_base = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->shape_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4961_stride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4955_nd)));
  _checked_ptr_1<int64_t> _ptr__4961_stride(_4961_stride ? _4961_stride->raw() : nullptr,_4961_stride ? _4961_stride->size(0) : 0);
  _ptr__4961_stride[(_4955_nd - (int)1)] = (int)1;
  int32_t _11235_ = (int)1;
  int32_t _11236_ = _4955_nd;
  for (int32_t _4962_i = _11235_; _4962_i < _11236_; ++_4962_i)
  {
    {
      _ptr__4961_stride[((_4955_nd - _4962_i) - (int)1)] = safe_mul( _ptr__4961_stride[(_4955_nd - _4962_i)],((*mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->i32)((safe_add( _4960_shape_base,_4955_nd ) - _4962_i))) );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4963_dstride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4955_nd)));
  _checked_ptr_1<int32_t> _ptr__4963_dstride(_4963_dstride ? _4963_dstride->raw() : nullptr,_4963_dstride ? _4963_dstride->size(0) : 0);
  _ptr__4963_dstride[(_4955_nd - (int)1)] = (int)1;
  int32_t _11237_ = (int)1;
  int32_t _11238_ = _4955_nd;
  for (int32_t _4964_i = _11237_; _4964_i < _11238_; ++_4964_i)
  {
    {
      _ptr__4963_dstride[((_4955_nd - _4964_i) - (int)1)] = safe_mul( _ptr__4963_dstride[(_4955_nd - _4964_i)],((*mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->i32)(safe_add( _4960_shape_base,((*dperm)((_4955_nd - _4964_i))) ))) );
    }
  }
  int32_t _4965_eptr_base = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->ptr_base;
  int32_t _4966_esp_base = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->sp_base;
  int32_t _4967_enidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->nidxs_base;
  int32_t _4968_ecof_base = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->cof_base;
  int32_t _4969_code = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->code_base;
  int32_t _4970_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->codeptr_base;
  int32_t _4971_cconst = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4972_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4972_wi32(_4972_wi32 ? _4972_wi32->raw() : nullptr,_4972_wi32 ? _4972_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4973_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4973_wi64(_4973_wi64 ? _4973_wi64->raw() : nullptr,_4973_wi64 ? _4973_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4974_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4953_ws)->f64;
  _checked_ptr_1<double> _ptr__4974_wf64(_4974_wf64 ? _4974_wf64->raw() : nullptr,_4974_wf64 ? _4974_wf64->size(0) : 0);
  _4952_rs->alloc_expr(_4955_nd,_4956_nelem,_4957_nnz,_4959_hassp,_4958_ncodeatom);
  int32_t _4975_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->ptr_base;
  int32_t _4976_rshape = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->shape_base;
  int32_t _4977_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->nidxs_base;
  int32_t _4978_rsp_base = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->sp_base;
  int32_t _4979_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->cof_base;
  int32_t _4980_rcode = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->code_base;
  int32_t _4981_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->codeptr_base;
  int32_t _4982_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4983_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4983_ri32(_4983_ri32 ? _4983_ri32->raw() : nullptr,_4983_ri32 ? _4983_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4984_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4984_ri64(_4984_ri64 ? _4984_ri64->raw() : nullptr,_4984_ri64 ? _4984_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4985_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4952_rs)->f64;
  _checked_ptr_1<double> _ptr__4985_rf64(_4985_rf64 ? _4985_rf64->raw() : nullptr,_4985_rf64 ? _4985_rf64->size(0) : 0);
  int32_t _11239_ = (int)0;
  int32_t _11240_ = _4955_nd;
  for (int32_t _4986_i = _11239_; _4986_i < _11240_; ++_4986_i)
  {
    {
      _ptr__4983_ri32[safe_add( _4976_rshape,_4986_i )] = _ptr__4972_wi32[safe_add( _4960_shape_base,((*dperm)(_4986_i)) )];
    }
  }
  if (_4959_hassp)
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4987_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4956_nelem)));
      _checked_ptr_1<int64_t> _ptr__4987_sp(_4987_sp ? _4987_sp->raw() : nullptr,_4987_sp ? _4987_sp->size(0) : 0);
      {
        int32_t _11241_ = (int)0;
        int32_t _11242_ = _4956_nelem;
        for (int32_t _4988_i = _11241_; _4988_i < _11242_; ++_4988_i)
        {
          {
            int64_t _4989_p = (int64_t)0;
            int32_t _11243_ = (int)0;
            int32_t _11244_ = _4955_nd;
            for (int32_t _4990_j = _11243_; _4990_j < _11244_; ++_4990_j)
            {
              {
                _4989_p += safe_mul( ((_ptr__4973_wi64[safe_add( _4966_esp_base,_4988_i )] / _ptr__4961_stride[_4990_j]) % _ptr__4972_wi32[safe_add( _4960_shape_base,_4990_j )]),_ptr__4963_dstride[((*dperm)(_4990_j))] );
              }
            }
            _ptr__4987_sp[_4988_i] = _4989_p;
          }
        }
      }
      std::vector<int64_t> _11245_;
      for (int32_t _4992_i = (int)0, _11246_ = _4956_nelem; _4992_i < _11246_ ; ++_4992_i)
      {
        _11245_.push_back(_4992_i);
      }
      auto _11247_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_11245_.size()),_11245_.begin(),_11245_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4991_perm = _11247_;
      _checked_ptr_1<int64_t> _ptr__4991_perm(_4991_perm ? _4991_perm->raw() : nullptr,_4991_perm ? _4991_perm->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_4991_perm,_4987_sp,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_4956_nelem));
      _ptr__4983_ri32[_4975_rptr_base] = (int)0;
      if ((_4958_ncodeatom > (int)0))
      {
        {
          _ptr__4983_ri32[_4981_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _4993_codei = (int)0;
      int32_t _4994_kelem = (int)0;
      int32_t _4995_knz = (int)0;
      int32_t _11248_ = (int)0;
      int32_t _11249_ = _4956_nelem;
      for (int32_t _4996_i = _11248_; _4996_i < _11249_; ++_4996_i)
      {
        {
          int64_t _4997_ii = _ptr__4991_perm[_4996_i];
          int32_t _11250_ = _ptr__4972_wi32[safe_add( _4965_eptr_base,_4997_ii )];
          int32_t _11251_ = _ptr__4972_wi32[safe_add( safe_add( _4965_eptr_base,_4997_ii ),(int)1 )];
          for (int32_t _4998_j = _11250_; _4998_j < _11251_; ++_4998_j)
          {
            {
              _ptr__4984_ri64[safe_add( _4977_rnidxs_base,_4995_knz )] = _ptr__4973_wi64[safe_add( _4967_enidxs_base,_4998_j )];
              _ptr__4985_rf64[safe_add( _4979_rcof_base,_4995_knz )] = _ptr__4974_wf64[safe_add( _4968_ecof_base,_4998_j )];
              if ((_4958_ncodeatom > (int)0))
              {
                {
                  int32_t _11252_ = _ptr__4972_wi32[safe_add( _4970_codeptr,_4998_j )];
                  int32_t _11253_ = _ptr__4972_wi32[safe_add( safe_add( _4970_codeptr,_4998_j ),(int)1 )];
                  for (int32_t _4999_l = _11252_; _4999_l < _11253_; ++_4999_l)
                  {
                    {
                      _ptr__4983_ri32[safe_add( _4980_rcode,_4993_codei )] = _ptr__4972_wi32[safe_add( _4969_code,_4999_l )];
                      _ptr__4985_rf64[safe_add( _4982_rcconst,_4993_codei )] = _ptr__4974_wf64[safe_add( _4971_cconst,_4999_l )];
                      ++ _4993_codei;
                    }
                  }
                  _ptr__4983_ri32[safe_add( safe_add( _4981_rcodeptr,_4995_knz ),(int)1 )] = _4993_codei;
                }
              }
              {}
              ++ _4995_knz;
            }
          }
          _ptr__4984_ri64[safe_add( _4978_rsp_base,_4996_i )] = _ptr__4987_sp[_4997_ii];
          ++ _4994_kelem;
          _ptr__4983_ri32[safe_add( safe_add( _4975_rptr_base,_4996_i ),(int)1 )] = _4995_knz;
        }
      }
    }
  }
  else
  {
    {
      _ptr__4983_ri32[_4975_rptr_base] = (int)0;
      if ((_4958_ncodeatom > (int)0))
      {
        {
          _ptr__4983_ri32[_4981_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _5000_codei = (int)0;
      int32_t _5001_kelem = (int)0;
      int32_t _5002_knz = (int)0;
      int32_t _11254_ = (int)0;
      int32_t _11255_ = _4956_nelem;
      for (int32_t _5003_i = _11254_; _5003_i < _11255_; ++_5003_i)
      {
        {
          int64_t _5004_ii = (int64_t)0;
          int32_t _11256_ = (int)0;
          int32_t _11257_ = _4955_nd;
          for (int32_t _5005_j = _11256_; _5005_j < _11257_; ++_5005_j)
          {
            {
              _5004_ii += safe_mul( ((_5003_i / _ptr__4961_stride[((*dperm)(_5005_j))]) % _ptr__4972_wi32[safe_add( _4960_shape_base,((*dperm)(_5005_j)) )]),_ptr__4963_dstride[_5005_j] );
            }
          }
          int32_t _11258_ = _ptr__4972_wi32[safe_add( _4965_eptr_base,_5004_ii )];
          int32_t _11259_ = _ptr__4972_wi32[safe_add( safe_add( _4965_eptr_base,_5004_ii ),(int)1 )];
          for (int32_t _5006_j = _11258_; _5006_j < _11259_; ++_5006_j)
          {
            {
              _ptr__4984_ri64[safe_add( _4977_rnidxs_base,_5002_knz )] = _ptr__4973_wi64[safe_add( _4967_enidxs_base,_5006_j )];
              _ptr__4985_rf64[safe_add( _4979_rcof_base,_5002_knz )] = _ptr__4974_wf64[safe_add( _4968_ecof_base,_5006_j )];
              if ((_4958_ncodeatom > (int)0))
              {
                {
                  int32_t _11260_ = _ptr__4972_wi32[safe_add( _4970_codeptr,_5006_j )];
                  int32_t _11261_ = _ptr__4972_wi32[safe_add( safe_add( _4970_codeptr,_5006_j ),(int)1 )];
                  for (int32_t _5007_l = _11260_; _5007_l < _11261_; ++_5007_l)
                  {
                    {
                      _ptr__4983_ri32[safe_add( _4980_rcode,_5000_codei )] = _ptr__4972_wi32[safe_add( _4969_code,_5007_l )];
                      _ptr__4985_rf64[safe_add( _4982_rcconst,_5000_codei )] = _ptr__4974_wf64[safe_add( _4971_cconst,_5007_l )];
                      ++ _5000_codei;
                    }
                  }
                  _ptr__4983_ri32[safe_add( safe_add( _4981_rcodeptr,_5002_knz ),(int)1 )] = _5000_codei;
                }
              }
              {}
              ++ _5002_knz;
            }
          }
          ++ _5001_kelem;
          _ptr__4983_ri32[safe_add( _4975_rptr_base,_5001_kelem )] = _5002_knz;
        }
      }
    }
  }
}
// End mosek.fusion.ExprPermuteDims.eval

// Begin mosek.fusion.ExprPermuteDims.computeshape
// Method mosek.fusion.ExprPermuteDims.computeshape @ src/fusion/ExprTranspose.monty:157:6-159:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _5008_perm,std::shared_ptr< monty::ndarray< int32_t,1 > > _5009_shape)
{
  _checked_ptr_1<int32_t> _ptr__5008_perm(_5008_perm ? _5008_perm->raw() : nullptr, _5008_perm ? _5008_perm->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5009_shape(_5009_shape ? _5009_shape->raw() : nullptr, _5009_shape ? _5009_shape->size(0) : 0);
  std::vector<int32_t> _11262_;
  for (int32_t _5010_i = (int)0, _11263_ = (int)((_5008_perm)->size(0)); _5010_i < _11263_ ; ++_5010_i)
  {
    _11262_.push_back(_ptr__5009_shape[_ptr__5008_perm[_5010_i]]);
  }
  auto _11264_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11262_.size()),_11262_.begin(),_11262_.end()));
  return _11264_;
}
// End mosek.fusion.ExprPermuteDims.computeshape

void mosek::fusion::p_ExprPermuteDims::destroy()
{
  dperm.reset();
  expr.reset();
}
void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }
// } class ExprPermuteDims
// class ExprTranspose { // @ src/fusion/ExprTranspose.monty:4:4-145:5
mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }
mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprTranspose::p_ExprTranspose
  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprTranspose.ctor @ src/fusion/ExprTranspose.monty:19:6-22:7
mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose
  (monty::rc_ptr< ::mosek::fusion::Expression > _5011_expr)
{ return new mosek::fusion::ExprTranspose(_5011_expr); }
mosek::fusion::ExprTranspose::ExprTranspose
  (monty::rc_ptr< ::mosek::fusion::Expression > _5011_expr) : 
   ExprTranspose(new mosek::fusion::p_ExprTranspose(this))
{ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_5011_expr); }
void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5011_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprTranspose::transposeShape(_5011_expr->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _5011_expr;
  }
}
// mosek.fusion.ExprTranspose.ctor

// Begin mosek.fusion.ExprTranspose.eval
// Method mosek.fusion.ExprTranspose.eval @ src/fusion/ExprTranspose.monty:24:6-144:7
void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5012_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5013_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5014_xs) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_5012_rs,_5013_ws,_5014_xs); }
void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5012_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5013_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5014_xs)
{
  expr->eval(_5013_ws,_5012_rs,_5014_xs);
  _5013_ws->pop_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      int32_t _5015_shape_base = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->shape_base;
      int32_t _5016_nelem = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->nelem;
      int32_t _5017_nnz = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->nnz;
      bool _5018_hassp = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->hassp;
      int32_t _5019_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->ncodeatom;
      int32_t _5020_eptr_base = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->ptr_base;
      int32_t _5021_esp_base = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->sp_base;
      int32_t _5022_enidx_base = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->nidxs_base;
      int32_t _5023_ecof_base = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->cof_base;
      int32_t _5024_code = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->code_base;
      int32_t _5025_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->codeptr_base;
      int32_t _5026_cconst = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->cconst_base;
      int32_t _5027_dim0 = ((*mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->i32)(_5015_shape_base));
      int32_t _5028_dim1 = ((*mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->i32)(safe_add( _5015_shape_base,(int)1 )));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5029_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->i32;
      _checked_ptr_1<int32_t> _ptr__5029_wi32(_5029_wi32 ? _5029_wi32->raw() : nullptr,_5029_wi32 ? _5029_wi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5030_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->i64;
      _checked_ptr_1<int64_t> _ptr__5030_wi64(_5030_wi64 ? _5030_wi64->raw() : nullptr,_5030_wi64 ? _5030_wi64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5031_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5013_ws)->f64;
      _checked_ptr_1<double> _ptr__5031_wf64(_5031_wf64 ? _5031_wf64->raw() : nullptr,_5031_wf64 ? _5031_wf64->size(0) : 0);
      _5012_rs->alloc_expr((int)2,_5016_nelem,_5017_nnz,_5018_hassp,_5019_ncodeatom);
      int32_t _5032_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->ptr_base;
      int32_t _5033_rnidx_base = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->nidxs_base;
      int32_t _5034_rsp_base = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->sp_base;
      int32_t _5035_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->cof_base;
      int32_t _5036_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->shape_base;
      int32_t _5037_rcode = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->code_base;
      int32_t _5038_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->codeptr_base;
      int32_t _5039_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5040_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5040_ri32(_5040_ri32 ? _5040_ri32->raw() : nullptr,_5040_ri32 ? _5040_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5041_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5041_ri64(_5041_ri64 ? _5041_ri64->raw() : nullptr,_5041_ri64 ? _5041_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5042_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5012_rs)->f64;
      _checked_ptr_1<double> _ptr__5042_rf64(_5042_rf64 ? _5042_rf64->raw() : nullptr,_5042_rf64 ? _5042_rf64->size(0) : 0);
      _ptr__5040_ri32[_5036_rshape_base] = _5028_dim1;
      _ptr__5040_ri32[safe_add( _5036_rshape_base,(int)1 )] = _5027_dim0;
      _ptr__5040_ri32[_5032_rptr_base] = (int)0;
      if ((_5019_ncodeatom > (int)0))
      {
        {
          _ptr__5040_ri32[_5038_rcodeptr] = (int)0;
        }
      }
      {}
      if (_5018_hassp)
      {
        {
          int32_t _5043_perm = _5014_xs->alloci32(_5016_nelem);
          int32_t _5044_ptr = _5014_xs->alloci32(safe_add( _5028_dim1,(int)1 ));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5045_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5014_xs)->i32;
          _checked_ptr_1<int32_t> _ptr__5045_xi32(_5045_xi32 ? _5045_xi32->raw() : nullptr,_5045_xi32 ? _5045_xi32->size(0) : 0);
          {
            int32_t _11265_ = (int)0;
            int32_t _11266_ = safe_add( _5028_dim1,(int)1 );
            for (int32_t _5046_i = _11265_; _5046_i < _11266_; ++_5046_i)
            {
              {
                _ptr__5045_xi32[safe_add( _5044_ptr,_5046_i )] = (int)0;
              }
            }
            int32_t _11267_ = (int)0;
            int32_t _11268_ = _5016_nelem;
            for (int32_t _5047_i = _11267_; _5047_i < _11268_; ++_5047_i)
            {
              {
                ++ _ptr__5045_xi32[safe_add( safe_add( _5044_ptr,(_ptr__5030_wi64[safe_add( _5021_esp_base,_5047_i )] % _5028_dim1) ),(int)1 )];
              }
            }
            int32_t _11269_ = (int)0;
            int32_t _11270_ = _5028_dim1;
            for (int32_t _5048_i = _11269_; _5048_i < _11270_; ++_5048_i)
            {
              {
                _ptr__5045_xi32[safe_add( safe_add( _5044_ptr,_5048_i ),(int)1 )] += _ptr__5045_xi32[safe_add( _5044_ptr,_5048_i )];
              }
            }
            int32_t _11271_ = (int)0;
            int32_t _11272_ = _5016_nelem;
            for (int32_t _5049_i = _11271_; _5049_i < _11272_; ++_5049_i)
            {
              {
                int64_t _5050_j = (_ptr__5030_wi64[safe_add( _5021_esp_base,_5049_i )] % _5028_dim1);
                _ptr__5045_xi32[safe_add( _5043_perm,_ptr__5045_xi32[safe_add( _5044_ptr,_5050_j )] )] = _5049_i;
                ++ _ptr__5045_xi32[safe_add( _5044_ptr,_5050_j )];
              }
            }
            _ptr__5040_ri32[_5032_rptr_base] = (int)0;
            int32_t _5051_codei = (int)0;
            int32_t _5052_p = (int)0;
            int32_t _11273_ = (int)0;
            int32_t _11274_ = _5016_nelem;
            for (int32_t _5053_i = _11273_; _5053_i < _11274_; ++_5053_i)
            {
              {
                int32_t _5054_j = _ptr__5045_xi32[safe_add( _5043_perm,_5053_i )];
                int32_t _11275_ = _ptr__5029_wi32[safe_add( _5020_eptr_base,_5054_j )];
                int32_t _11276_ = _ptr__5029_wi32[safe_add( safe_add( _5020_eptr_base,_5054_j ),(int)1 )];
                for (int32_t _5055_k = _11275_; _5055_k < _11276_; ++_5055_k)
                {
                  {
                    _ptr__5041_ri64[safe_add( _5033_rnidx_base,_5052_p )] = _ptr__5030_wi64[safe_add( _5022_enidx_base,_5055_k )];
                    _ptr__5042_rf64[safe_add( _5035_rcof_base,_5052_p )] = _ptr__5031_wf64[safe_add( _5023_ecof_base,_5055_k )];
                    if ((_5019_ncodeatom > (int)0))
                    {
                      {
                        int32_t _11277_ = _ptr__5029_wi32[safe_add( _5025_codeptr,_5055_k )];
                        int32_t _11278_ = _ptr__5029_wi32[safe_add( safe_add( _5025_codeptr,_5055_k ),(int)1 )];
                        for (int32_t _5056_l = _11277_; _5056_l < _11278_; ++_5056_l)
                        {
                          {
                            _ptr__5040_ri32[safe_add( _5037_rcode,_5051_codei )] = _ptr__5029_wi32[safe_add( _5024_code,_5056_l )];
                            _ptr__5042_rf64[safe_add( _5039_rcconst,_5051_codei )] = _ptr__5031_wf64[safe_add( _5026_cconst,_5056_l )];
                            ++ _5051_codei;
                          }
                        }
                        _ptr__5040_ri32[safe_add( safe_add( _5038_rcodeptr,_5052_p ),(int)1 )] = _5051_codei;
                      }
                    }
                    {}
                    ++ _5052_p;
                  }
                }
                int64_t _5057_ii = (_ptr__5030_wi64[safe_add( _5021_esp_base,_5054_j )] / _5028_dim1);
                int64_t _5058_jj = (_ptr__5030_wi64[safe_add( _5021_esp_base,_5054_j )] % _5028_dim1);
                _ptr__5040_ri32[safe_add( safe_add( _5032_rptr_base,_5053_i ),(int)1 )] = _5052_p;
                _ptr__5041_ri64[safe_add( _5034_rsp_base,_5053_i )] = safe_add( safe_mul( _5058_jj,_5027_dim0 ),_5057_ii );
              }
            }
          }
        }
      }
      else
      {
        {
          _ptr__5040_ri32[_5032_rptr_base] = (int)0;
          int32_t _5059_codei = (int)0;
          int32_t _5060_rinz = (int)0;
          int32_t _5061_wi = (int)0;
          int32_t _11279_ = (int)0;
          int32_t _11280_ = _5028_dim1;
          for (int32_t _5062_i = _11279_; _5062_i < _11280_; ++_5062_i)
          {
            {
              int32_t _11281_ = (int)0;
              int32_t _11282_ = _5027_dim0;
              for (int32_t _5063_j = _11281_; _5063_j < _11282_; ++_5063_j)
              {
                {
                  int32_t _5064_p = safe_add( safe_mul( _5063_j,_5028_dim1 ),_5062_i );
                  int32_t _11283_ = _ptr__5029_wi32[safe_add( _5020_eptr_base,_5064_p )];
                  int32_t _11284_ = _ptr__5029_wi32[safe_add( safe_add( _5020_eptr_base,_5064_p ),(int)1 )];
                  for (int32_t _5065_k = _11283_; _5065_k < _11284_; ++_5065_k)
                  {
                    {
                      _ptr__5041_ri64[safe_add( _5033_rnidx_base,_5060_rinz )] = _ptr__5030_wi64[safe_add( _5022_enidx_base,_5065_k )];
                      _ptr__5042_rf64[safe_add( _5035_rcof_base,_5060_rinz )] = _ptr__5031_wf64[safe_add( _5023_ecof_base,_5065_k )];
                      if ((_5019_ncodeatom > (int)0))
                      {
                        {
                          int32_t _11285_ = _ptr__5029_wi32[safe_add( _5025_codeptr,_5065_k )];
                          int32_t _11286_ = _ptr__5029_wi32[safe_add( safe_add( _5025_codeptr,_5065_k ),(int)1 )];
                          for (int32_t _5066_l = _11285_; _5066_l < _11286_; ++_5066_l)
                          {
                            {
                              _ptr__5040_ri32[safe_add( _5037_rcode,_5059_codei )] = _ptr__5029_wi32[safe_add( _5024_code,_5066_l )];
                              _ptr__5042_rf64[safe_add( _5039_rcconst,_5059_codei )] = _ptr__5031_wf64[safe_add( _5026_cconst,_5066_l )];
                              ++ _5059_codei;
                            }
                          }
                          _ptr__5040_ri32[safe_add( safe_add( _5038_rcodeptr,_5060_rinz ),(int)1 )] = _5059_codei;
                        }
                      }
                      {}
                      ++ _5060_rinz;
                    }
                  }
                  _ptr__5040_ri32[safe_add( safe_add( _5032_rptr_base,_5061_wi ),(int)1 )] = _5060_rinz;
                  ++ _5061_wi;
                }
              }
            }
          }
        }
      }
      _5014_xs->clear();
    }
  }
}
// End mosek.fusion.ExprTranspose.eval

// Begin mosek.fusion.ExprTranspose.toString
// Method mosek.fusion.ExprTranspose.toString @ src/fusion/ExprTranspose.monty:14:6-16:7
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprTranspose::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprTranspose.toString

// Begin mosek.fusion.ExprTranspose.transposeShape
// Method mosek.fusion.ExprTranspose.transposeShape @ src/fusion/ExprTranspose.monty:7:6-12:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _5067_shape)
{
  _checked_ptr_1<int32_t> _ptr__5067_shape(_5067_shape ? _5067_shape->raw() : nullptr, _5067_shape ? _5067_shape->size(0) : 0);
  if (((int)((_5067_shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__5067_shape[(int)1]),(int32_t)(_ptr__5067_shape[(int)0])});
    }
  }
}
// End mosek.fusion.ExprTranspose.transposeShape

void mosek::fusion::p_ExprTranspose::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }
// } class ExprTranspose
// class ExprRepeat { // @ src/fusion/ExprStack.monty:435:4-628:5
mosek::fusion::ExprRepeat::ExprRepeat(mosek::fusion::p_ExprRepeat *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprRepeat()" << this << std::endl; */ }
mosek::fusion::ExprRepeat::~ExprRepeat() {  /* std::cout << "~ExprRepeat()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprRepeat::p_ExprRepeat
  (::mosek::fusion::ExprRepeat * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprRepeat.ctor @ src/fusion/ExprStack.monty:459:6-464:7
mosek::fusion::ExprRepeat::t mosek::fusion::p_ExprRepeat::_new_ExprRepeat
  (monty::rc_ptr< ::mosek::fusion::Expression > _5068_expr,
    int32_t _5069_dim,
    int32_t _5070_n)
{ return new mosek::fusion::ExprRepeat(_5068_expr,_5069_dim,_5070_n); }
mosek::fusion::ExprRepeat::ExprRepeat
  (monty::rc_ptr< ::mosek::fusion::Expression > _5068_expr,
    int32_t _5069_dim,
    int32_t _5070_n) : 
   ExprRepeat(new mosek::fusion::p_ExprRepeat(this))
{ mosek::fusion::p_ExprRepeat::_get_impl(this)->_initialize(_5068_expr,_5069_dim,_5070_n); }
void mosek::fusion::p_ExprRepeat::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5068_expr,
    int32_t _5069_dim,
    int32_t _5070_n)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprRepeat::getshape(_5068_expr,_5069_dim,_5070_n));
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->expr = _5068_expr;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->dim = _5069_dim;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->n = _5070_n;
  }
}
// mosek.fusion.ExprRepeat.ctor

// Begin mosek.fusion.ExprRepeat.eval
// Method mosek.fusion.ExprRepeat.eval @ src/fusion/ExprStack.monty:466:6-627:7
void mosek::fusion::ExprRepeat :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5071_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5072_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5073_xs) { mosek::fusion::p_ExprRepeat::_get_impl(this)->eval(_5071_rs,_5072_ws,_5073_xs); }
void mosek::fusion::p_ExprRepeat::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5071_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5072_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5073_xs)
{
  expr->eval(_5072_ws,_5071_rs,_5073_xs);
  _5072_ws->pop_expr();
  int32_t _5074_nd = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->nd;
  int32_t _5075_shape = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->shape_base;
  int32_t _5076_nelem = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->nelem;
  int32_t _5077_nnz = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->nnz;
  int32_t _5078_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->ncodeatom;
  bool _5079_hassp = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->hassp;
  int32_t _5080_ptr = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->ptr_base;
  int32_t _5081_sp = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->sp_base;
  int32_t _5082_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->nidxs_base;
  int32_t _5083_cof = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->cof_base;
  int32_t _5084_code = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->code_base;
  int32_t _5085_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->codeptr_base;
  int32_t _5086_cconst = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5087_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5087_wi32(_5087_wi32 ? _5087_wi32->raw() : nullptr,_5087_wi32 ? _5087_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5088_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5088_wi64(_5088_wi64 ? _5088_wi64->raw() : nullptr,_5088_wi64 ? _5088_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5089_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5072_ws)->f64;
  _checked_ptr_1<double> _ptr__5089_wf64(_5089_wf64 ? _5089_wf64->raw() : nullptr,_5089_wf64 ? _5089_wf64->size(0) : 0);
  int32_t _11287_;
  bool _11288_ = (dim < _5074_nd);
  if (_11288_)
  {
    _11287_ = _5074_nd;
  }
  else
  {
    _11287_ = safe_add( _5074_nd,(int)1 );
  }
  int32_t _5090_rnd = _11287_;
  int32_t _5091_rnelem = safe_mul( _5076_nelem,n );
  int32_t _5092_rnnz = safe_mul( _5077_nnz,n );
  int32_t _5093_rncodeatom = safe_mul( _5078_ncodeatom,n );
  _5071_rs->alloc_expr(_5090_rnd,_5091_rnelem,_5092_rnnz,_5079_hassp,_5093_rncodeatom);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5094_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5094_ri32(_5094_ri32 ? _5094_ri32->raw() : nullptr,_5094_ri32 ? _5094_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5095_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5095_ri64(_5095_ri64 ? _5095_ri64->raw() : nullptr,_5095_ri64 ? _5095_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5096_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->f64;
  _checked_ptr_1<double> _ptr__5096_rf64(_5096_rf64 ? _5096_rf64->raw() : nullptr,_5096_rf64 ? _5096_rf64->size(0) : 0);
  int32_t _5097_rshape = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->shape_base;
  int32_t _5098_rptr = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->ptr_base;
  int32_t _5099_rsp = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->sp_base;
  int32_t _5100_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->nidxs_base;
  int32_t _5101_rcof = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->cof_base;
  int32_t _5102_rcode = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->code_base;
  int32_t _5103_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->codeptr_base;
  int32_t _5104_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5071_rs)->cconst_base;
  int32_t _5105_d0 = (int)1;
  int32_t _11289_ = (int)0;
  int32_t _11290_ = dim;
  for (int32_t _5106_i = _11289_; _5106_i < _11290_; ++_5106_i)
  {
    {
      _5105_d0 *= _ptr__5087_wi32[safe_add( _5075_shape,_5106_i )];
    }
  }
  int32_t _11291_;
  bool _11292_ = (dim < _5074_nd);
  if (_11292_)
  {
    _11291_ = _ptr__5087_wi32[safe_add( _5075_shape,dim )];
  }
  else
  {
    _11291_ = (int)1;
  }
  int32_t _5107_d1 = _11291_;
  int32_t _5108_rd1 = safe_mul( n,_5107_d1 );
  int32_t _5109_d2 = (int)1;
  int32_t _11293_ = safe_add( dim,(int)1 );
  int32_t _11294_ = _5074_nd;
  for (int32_t _5110_i = _11293_; _5110_i < _11294_; ++_5110_i)
  {
    {
      _5109_d2 *= _ptr__5087_wi32[safe_add( _5075_shape,_5110_i )];
    }
  }
  {
    int32_t _11295_ = (int)0;
    int32_t _11296_ = _5074_nd;
    for (int32_t _5111_i = _11295_; _5111_i < _11296_; ++_5111_i)
    {
      {
        _ptr__5094_ri32[safe_add( _5097_rshape,_5111_i )] = _ptr__5087_wi32[safe_add( _5075_shape,_5111_i )];
      }
    }
    _ptr__5094_ri32[safe_add( _5097_rshape,dim )] = _5108_rd1;
    _ptr__5094_ri32[_5098_rptr] = (int)0;
    if ((_5093_rncodeatom != (int)0))
    {
      {
        _ptr__5094_ri32[_5103_rcodeptr] = (int)0;
      }
    }
    {}
    if (_5079_hassp)
    {
      {
        int32_t _5112_codei = (int)0;
        int32_t _5113_ni = (int)0;
        int32_t _5114_ei = (int)0;
        int32_t _5115_elmi = (int)0;
        int32_t _5116_nzi = (int)0;
        while ( (_5114_ei < _5076_nelem) )
        {
          {
            int64_t _5117_nidx = _ptr__5088_wi64[safe_add( _5081_sp,_5114_ei )];
            int64_t _5118_ninext = safe_add( (_5117_nidx - (_5117_nidx % safe_mul( _5107_d1,_5109_d2 ))),safe_mul( _5107_d1,_5109_d2 ) );
            int32_t _5119_eb = _5114_ei;
            ++ _5114_ei;
            while ( ((_5114_ei < _5076_nelem) && (_ptr__5088_wi64[safe_add( _5081_sp,_5114_ei )] < _5118_ninext)) )
            {
              {
                ++ _5114_ei;
              }
            }
            int32_t _5120_ee = _5114_ei;
            int32_t _11297_ = (int)0;
            int32_t _11298_ = n;
            for (int32_t _5121_i = _11297_; _5121_i < _11298_; ++_5121_i)
            {
              {
                int32_t _11299_ = _5119_eb;
                int32_t _11300_ = _5120_ee;
                for (int32_t _5122_j = _11299_; _5122_j < _11300_; ++_5122_j)
                {
                  {
                    int64_t _5123_i0 = (_ptr__5088_wi64[safe_add( _5081_sp,_5122_j )] / safe_mul( _5107_d1,_5109_d2 ));
                    int64_t _5124_i1 = ((_ptr__5088_wi64[safe_add( _5081_sp,_5122_j )] / _5109_d2) % _5107_d1);
                    int64_t _5125_i2 = (_ptr__5088_wi64[safe_add( _5081_sp,_5122_j )] % _5109_d2);
                    int32_t _11301_ = _ptr__5087_wi32[safe_add( _5080_ptr,_5122_j )];
                    int32_t _11302_ = _ptr__5087_wi32[safe_add( safe_add( _5080_ptr,_5122_j ),(int)1 )];
                    for (int32_t _5126_k = _11301_; _5126_k < _11302_; ++_5126_k)
                    {
                      {
                        _ptr__5095_ri64[safe_add( _5100_rnidxs,_5116_nzi )] = _ptr__5088_wi64[safe_add( _5082_nidxs,_5126_k )];
                        _ptr__5096_rf64[safe_add( _5101_rcof,_5116_nzi )] = _ptr__5089_wf64[safe_add( _5083_cof,_5126_k )];
                        if ((_5078_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11303_ = _ptr__5087_wi32[safe_add( _5085_codeptr,_5126_k )];
                            int32_t _11304_ = _ptr__5087_wi32[safe_add( safe_add( _5085_codeptr,_5126_k ),(int)1 )];
                            for (int32_t _5127_l = _11303_; _5127_l < _11304_; ++_5127_l)
                            {
                              {
                                _ptr__5094_ri32[safe_add( _5102_rcode,_5112_codei )] = _ptr__5087_wi32[safe_add( _5084_code,_5127_l )];
                                _ptr__5096_rf64[safe_add( _5104_rcconst,_5112_codei )] = _ptr__5089_wf64[safe_add( _5086_cconst,_5127_l )];
                                ++ _5112_codei;
                              }
                            }
                            _ptr__5094_ri32[safe_add( safe_add( _5103_rcodeptr,_5116_nzi ),(int)1 )] = _5112_codei;
                          }
                        }
                        {}
                        ++ _5116_nzi;
                      }
                    }
                    _ptr__5094_ri32[safe_add( safe_add( _5098_rptr,_5115_elmi ),(int)1 )] = _5116_nzi;
                    _ptr__5095_ri64[safe_add( _5099_rsp,_5115_elmi )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _5123_i0,_5108_rd1 ),safe_mul( _5121_i,_5107_d1 ) ),_5124_i1 ),_5109_d2 ),_5125_i2 );
                    ++ _5115_elmi;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int32_t _5128_codei = (int)0;
        int32_t _5129_elmi = (int)0;
        int32_t _5130_nzi = (int)0;
        int32_t _5131_p0 = (int)0;
        int32_t _11305_ = (int)0;
        int32_t _11306_ = _5105_d0;
        for (int32_t _5132_i0 = _11305_; _5132_i0 < _11306_; ++_5132_i0)
        {
          {
            int32_t _11307_ = (int)0;
            int32_t _11308_ = n;
            for (int32_t _5133_i1 = _11307_; _5133_i1 < _11308_; ++_5133_i1)
            {
              {
                int32_t _5134_p = safe_mul( safe_mul( _5132_i0,_5107_d1 ),_5109_d2 );
                int32_t _11309_ = (int)0;
                int32_t _11310_ = safe_mul( _5107_d1,_5109_d2 );
                for (int32_t _5135_i2 = _11309_; _5135_i2 < _11310_; ++_5135_i2)
                {
                  {
                    int32_t _11311_ = _ptr__5087_wi32[safe_add( _5080_ptr,_5134_p )];
                    int32_t _11312_ = _ptr__5087_wi32[safe_add( safe_add( _5080_ptr,_5134_p ),(int)1 )];
                    for (int32_t _5136_k = _11311_; _5136_k < _11312_; ++_5136_k)
                    {
                      {
                        _ptr__5095_ri64[safe_add( _5100_rnidxs,_5130_nzi )] = _ptr__5088_wi64[safe_add( _5082_nidxs,_5136_k )];
                        _ptr__5096_rf64[safe_add( _5101_rcof,_5130_nzi )] = _ptr__5089_wf64[safe_add( _5083_cof,_5136_k )];
                        if ((_5078_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11313_ = _ptr__5087_wi32[safe_add( _5085_codeptr,_5136_k )];
                            int32_t _11314_ = _ptr__5087_wi32[safe_add( safe_add( _5085_codeptr,_5136_k ),(int)1 )];
                            for (int32_t _5137_l = _11313_; _5137_l < _11314_; ++_5137_l)
                            {
                              {
                                _ptr__5094_ri32[safe_add( _5102_rcode,_5128_codei )] = _ptr__5087_wi32[safe_add( _5084_code,_5137_l )];
                                _ptr__5096_rf64[safe_add( _5104_rcconst,_5128_codei )] = _ptr__5089_wf64[safe_add( _5086_cconst,_5137_l )];
                                ++ _5128_codei;
                              }
                            }
                            _ptr__5094_ri32[safe_add( safe_add( _5103_rcodeptr,_5130_nzi ),(int)1 )] = _5128_codei;
                          }
                        }
                        {}
                        ++ _5130_nzi;
                      }
                    }
                    _ptr__5094_ri32[safe_add( safe_add( _5098_rptr,_5129_elmi ),(int)1 )] = _5130_nzi;
                    ++ _5129_elmi;
                    ++ _5134_p;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprRepeat.eval

// Begin mosek.fusion.ExprRepeat.getshape
// Method mosek.fusion.ExprRepeat.getshape @ src/fusion/ExprStack.monty:444:6-457:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprRepeat::getshape(monty::rc_ptr< ::mosek::fusion::Expression > _5138_e,int32_t _5139_dim,int32_t _5140_n)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5141_shape_ = _5138_e->getShape();
  _checked_ptr_1<int32_t> _ptr__5141_shape_(_5141_shape_ ? _5141_shape_->raw() : nullptr,_5141_shape_ ? _5141_shape_->size(0) : 0);
  int32_t _5142_nd = (int)((_5141_shape_)->size(0));
  if ((_5139_dim < _5142_nd))
  {
    {
      _ptr__5141_shape_[_5139_dim] *= _5140_n;
      return _5141_shape_;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _11315_;
      bool _11316_ = (_5139_dim == _5142_nd);
      if (_11316_)
      {
        _11315_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _5142_nd,(int)1 ))));
      }
      else
      {
        _11315_ = _5141_shape_;
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5143_shape = _11315_;
      _checked_ptr_1<int32_t> _ptr__5143_shape(_5143_shape ? _5143_shape->raw() : nullptr,_5143_shape ? _5143_shape->size(0) : 0);
      int32_t _11317_ = (int)0;
      int32_t _11318_ = _5142_nd;
      for (int32_t _5144_i = _11317_; _5144_i < _11318_; ++_5144_i)
      {
        {
          _ptr__5143_shape[_5144_i] = _ptr__5141_shape_[_5144_i];
        }
      }
      _ptr__5143_shape[_5139_dim] = _5140_n;
      return _5143_shape;
    }
  }
}
// End mosek.fusion.ExprRepeat.getshape

// Begin mosek.fusion.ExprRepeat.toString
// Method mosek.fusion.ExprRepeat.toString @ src/fusion/ExprStack.monty:440:6-442:7
std::string mosek::fusion::ExprRepeat :: toString() { return mosek::fusion::p_ExprRepeat::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprRepeat::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprRepeat(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprRepeat.toString

void mosek::fusion::p_ExprRepeat::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprRepeat::destroy() { mosek::fusion::p_ExprRepeat::_get_impl(this)->destroy(); }
// } class ExprRepeat
// class ExprStack { // @ src/fusion/ExprStack.monty:4:4-431:5
mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }
mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprStack::p_ExprStack
  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprStack.ctor @ src/fusion/ExprStack.monty:49:6-53:7
mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5145_exprs,
    int32_t _5146_dim)
{ return new mosek::fusion::ExprStack(_5145_exprs,_5146_dim); }
mosek::fusion::ExprStack::ExprStack
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5145_exprs,
    int32_t _5146_dim) : 
   ExprStack(new mosek::fusion::p_ExprStack(this))
{ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_5145_exprs,_5146_dim); }
void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5145_exprs,
    int32_t _5146_dim)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprStack::getshape(_5145_exprs,_5146_dim));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _11319_;
    for (int32_t _5147_i = (int)0, _11320_ = (int)((_5145_exprs)->size(0)); _5147_i < _11320_ ; ++_5147_i)
    {
      _11319_.push_back(((*_5145_exprs)(_5147_i)));
    }
    auto _11321_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_11319_.size()),_11319_.begin(),_11319_.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _11321_;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _5146_dim;
  }
}
// mosek.fusion.ExprStack.ctor

// Begin mosek.fusion.ExprStack.eval
// Method mosek.fusion.ExprStack.eval @ src/fusion/ExprStack.monty:55:6-430:7
void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5148_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5149_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5150_xs) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_5148_rs,_5149_ws,_5150_xs); }
void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5148_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5149_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5150_xs)
{
  int32_t _5151_n = (int)((exprs)->size(0));
  if ((_5151_n == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_5148_rs,_5149_ws,_5150_xs);
    }
  }
  else
  {
    {
      int32_t _11322_ = (int)0;
      int32_t _11323_ = _5151_n;
      for (int32_t _5152_i = _11322_; _5152_i < _11323_; ++_5152_i)
      {
        {
          ((*exprs)(((_5151_n - _5152_i) - (int)1)))->eval(_5149_ws,_5148_rs,_5150_xs);
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5153_nds = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5153_nds(_5153_nds ? _5153_nds->raw() : nullptr,_5153_nds ? _5153_nds->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5154_shape_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5154_shape_base(_5154_shape_base ? _5154_shape_base->raw() : nullptr,_5154_shape_base ? _5154_shape_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5155_nelem = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5155_nelem(_5155_nelem ? _5155_nelem->raw() : nullptr,_5155_nelem ? _5155_nelem->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5156_nnz = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5156_nnz(_5156_nnz ? _5156_nnz->raw() : nullptr,_5156_nnz ? _5156_nnz->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5157_ncodeatom = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5157_ncodeatom(_5157_ncodeatom ? _5157_ncodeatom->raw() : nullptr,_5157_ncodeatom ? _5157_ncodeatom->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5158_hassp = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5158_hassp(_5158_hassp ? _5158_hassp->raw() : nullptr,_5158_hassp ? _5158_hassp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5159_ptr_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5159_ptr_base(_5159_ptr_base ? _5159_ptr_base->raw() : nullptr,_5159_ptr_base ? _5159_ptr_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5160_nidxs_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5160_nidxs_base(_5160_nidxs_base ? _5160_nidxs_base->raw() : nullptr,_5160_nidxs_base ? _5160_nidxs_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5161_sp_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5161_sp_base(_5161_sp_base ? _5161_sp_base->raw() : nullptr,_5161_sp_base ? _5161_sp_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5162_cof_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5162_cof_base(_5162_cof_base ? _5162_cof_base->raw() : nullptr,_5162_cof_base ? _5162_cof_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5163_code = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5163_code(_5163_code ? _5163_code->raw() : nullptr,_5163_code ? _5163_code->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5164_codeptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5164_codeptr(_5164_codeptr ? _5164_codeptr->raw() : nullptr,_5164_codeptr ? _5164_codeptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5165_cconst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5165_cconst(_5165_cconst ? _5165_cconst->raw() : nullptr,_5165_cconst ? _5165_cconst->size(0) : 0);
      int32_t _11324_ = (int)0;
      int32_t _11325_ = _5151_n;
      for (int32_t _5166_i = _11324_; _5166_i < _11325_; ++_5166_i)
      {
        {
          _5149_ws->pop_expr();
          _ptr__5153_nds[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->nd;
          _ptr__5154_shape_base[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->shape_base;
          _ptr__5155_nelem[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->nelem;
          _ptr__5156_nnz[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->nnz;
          _ptr__5157_ncodeatom[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->ncodeatom;
          int32_t _11326_;
          bool _11327_ = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->hassp;
          if (_11327_)
          {
            _11326_ = (int)1;
          }
          else
          {
            _11326_ = (int)0;
          }
          _ptr__5158_hassp[_5166_i] = _11326_;
          _ptr__5159_ptr_base[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->ptr_base;
          _ptr__5161_sp_base[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->sp_base;
          _ptr__5160_nidxs_base[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->nidxs_base;
          _ptr__5162_cof_base[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->cof_base;
          _ptr__5163_code[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->code_base;
          _ptr__5164_codeptr[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->codeptr_base;
          _ptr__5165_cconst[_5166_i] = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->cconst_base;
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5167_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->i32;
      _checked_ptr_1<int32_t> _ptr__5167_wi32(_5167_wi32 ? _5167_wi32->raw() : nullptr,_5167_wi32 ? _5167_wi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5168_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->i64;
      _checked_ptr_1<int64_t> _ptr__5168_wi64(_5168_wi64 ? _5168_wi64->raw() : nullptr,_5168_wi64 ? _5168_wi64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5169_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5149_ws)->f64;
      _checked_ptr_1<double> _ptr__5169_wf64(_5169_wf64 ? _5169_wf64->raw() : nullptr,_5169_wf64 ? _5169_wf64->size(0) : 0);
      int32_t _5170_nd = _ptr__5153_nds[(int)0];
      int32_t _5171_shape = _ptr__5154_shape_base[(int)0];
      bool _5172_dense = (_ptr__5158_hassp[(int)0] == (int)0);
      bool _5173_mismatching_dims = false;
      int32_t _11328_ = (int)1;
      int32_t _11329_ = _5151_n;
      for (int32_t _5174_i = _11328_; _5174_i < _11329_; ++_5174_i)
      {
        {
          _5173_mismatching_dims = (_5173_mismatching_dims || ((dim != _5174_i) && (_ptr__5153_nds[_5174_i] != _5170_nd)));
          if ((!_5173_mismatching_dims))
          {
            {
              int32_t _11330_ = (int)0;
              int32_t _11331_ = dim;
              for (int32_t _5175_j = _11330_; _5175_j < _11331_; ++_5175_j)
              {
                {
                  _5173_mismatching_dims = (_5173_mismatching_dims || (_ptr__5167_wi32[safe_add( _5171_shape,_5175_j )] != _ptr__5167_wi32[safe_add( _ptr__5154_shape_base[_5174_i],_5175_j )]));
                }
              }
            }
          }
          {}
          if ((!_5173_mismatching_dims))
          {
            {
              int32_t _11332_ = safe_add( dim,(int)1 );
              int32_t _11333_ = _5170_nd;
              for (int32_t _5176_j = _11332_; _5176_j < _11333_; ++_5176_j)
              {
                {
                  _5173_mismatching_dims = (_5173_mismatching_dims || (_ptr__5167_wi32[safe_add( _5171_shape,_5176_j )] != _ptr__5167_wi32[safe_add( _ptr__5154_shape_base[_5174_i],_5176_j )]));
                }
              }
            }
          }
          {}
          _5172_dense = (_5172_dense && ((int)0 == _ptr__5158_hassp[_5174_i]));
        }
      }
      if (_5173_mismatching_dims)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int32_t _5177_sdim = (int)0;
      if ((dim < _5170_nd))
      {
        {
          int32_t _11334_ = (int)0;
          int32_t _11335_ = _5151_n;
          for (int32_t _5178_i = _11334_; _5178_i < _11335_; ++_5178_i)
          {
            {
              _5177_sdim += _ptr__5167_wi32[safe_add( _ptr__5154_shape_base[_5178_i],dim )];
            }
          }
        }
      }
      else
      {
        {
          _5177_sdim = _5151_n;
        }
      }
      int32_t _11336_;
      bool _11337_ = (dim < _5170_nd);
      if (_11337_)
      {
        _11336_ = _5170_nd;
      }
      else
      {
        _11336_ = safe_add( _5170_nd,(int)1 );
      }
      int32_t _5179_rnd = _11336_;
      if ((_5179_rnd != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Mismatching dimensions"));
        }
      }
      {}
      int32_t _5180_rncodeatom = (int)0;
      int32_t _5181_rnelem = (int)0;
      int32_t _5182_rnnz = (int)0;
      bool _5183_parameterized = false;
      {
        int32_t _11338_ = (int)0;
        int32_t _11339_ = _5151_n;
        for (int32_t _5184_i = _11338_; _5184_i < _11339_; ++_5184_i)
        {
          {
            _5183_parameterized = (_5183_parameterized || (_ptr__5157_ncodeatom[_5184_i] > (int)0));
          }
        }
        int32_t _11340_ = (int)0;
        int32_t _11341_ = _5151_n;
        for (int32_t _5185_i = _11340_; _5185_i < _11341_; ++_5185_i)
        {
          {
            _5182_rnnz += _ptr__5156_nnz[_5185_i];
          }
        }
        int32_t _11342_ = (int)0;
        int32_t _11343_ = _5151_n;
        for (int32_t _5186_i = _11342_; _5186_i < _11343_; ++_5186_i)
        {
          {
            _5181_rnelem += _ptr__5155_nelem[_5186_i];
          }
        }
        if (_5183_parameterized)
        {
          {
            int32_t _11344_ = (int)0;
            int32_t _11345_ = _5151_n;
            for (int32_t _5187_i = _11344_; _5187_i < _11345_; ++_5187_i)
            {
              {
                int32_t _11346_;
                bool _11347_ = (_ptr__5157_ncodeatom[_5187_i] > (int)0);
                if (_11347_)
                {
                  _11346_ = _ptr__5157_ncodeatom[_5187_i];
                }
                else
                {
                  _11346_ = _ptr__5156_nnz[_5187_i];
                }
                _5180_rncodeatom += _11346_;
              }
            }
          }
        }
        {}
      }
      int32_t _5188_d0 = (int)1;
      int32_t _11348_ = (int)0;
      int32_t _11349_ = dim;
      for (int32_t _5189_i = _11348_; _5189_i < _11349_; ++_5189_i)
      {
        {
          _5188_d0 *= _ptr__5167_wi32[safe_add( _5171_shape,_5189_i )];
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _11350_;
      bool _11351_ = (dim < _5170_nd);
      if (_11351_)
      {
        std::vector<int32_t> _11352_;
        for (int32_t _5191_i = (int)0, _11353_ = _5151_n; _5191_i < _11353_ ; ++_5191_i)
        {
          _11352_.push_back(_ptr__5167_wi32[safe_add( _ptr__5154_shape_base[_5191_i],dim )]);
        }
        auto _11354_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11352_.size()),_11352_.begin(),_11352_.end()));
        _11350_ = _11354_;
      }
      else
      {
        std::vector<int32_t> _11355_;
        for (int32_t _5192_i = (int)0, _11356_ = _5151_n; _5192_i < _11356_ ; ++_5192_i)
        {
          _11355_.push_back((int)1);
        }
        auto _11357_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11355_.size()),_11355_.begin(),_11355_.end()));
        _11350_ = _11357_;
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5190_d1s = _11350_;
      _checked_ptr_1<int32_t> _ptr__5190_d1s(_5190_d1s ? _5190_d1s->raw() : nullptr,_5190_d1s ? _5190_d1s->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5193_offset = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5151_n)));
      _checked_ptr_1<int32_t> _ptr__5193_offset(_5193_offset ? _5193_offset->raw() : nullptr,_5193_offset ? _5193_offset->size(0) : 0);
      _ptr__5193_offset[(int)0] = (int)0;
      int32_t _11358_ = (int)1;
      int32_t _11359_ = _5151_n;
      for (int32_t _5194_i = _11358_; _5194_i < _11359_; ++_5194_i)
      {
        {
          _ptr__5193_offset[_5194_i] = safe_add( _ptr__5193_offset[(_5194_i - (int)1)],_ptr__5190_d1s[(_5194_i - (int)1)] );
        }
      }
      int32_t _5195_d1 = (int)0;
      int32_t _11360_ = (int)0;
      int32_t _11361_ = _5151_n;
      for (int32_t _5196_i = _11360_; _5196_i < _11361_; ++_5196_i)
      {
        {
          _5195_d1 += _ptr__5190_d1s[_5196_i];
        }
      }
      int32_t _5197_d2 = (int)1;
      int32_t _11362_ = safe_add( dim,(int)1 );
      int32_t _11363_ = _5170_nd;
      for (int32_t _5198_i = _11362_; _5198_i < _11363_; ++_5198_i)
      {
        {
          _5197_d2 *= _ptr__5167_wi32[safe_add( _5171_shape,_5198_i )];
        }
      }
      if (_5172_dense)
      {
        {
          _5148_rs->alloc_expr(_5179_rnd,_5181_rnelem,_5182_rnnz,false,_5180_rncodeatom);
          int32_t _5199_rptr = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->ptr_base;
          int32_t _5200_rshape = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->shape_base;
          int32_t _5201_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->nidxs_base;
          int32_t _5202_rcof = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->cof_base;
          int32_t _5203_rcode = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->code_base;
          int32_t _5204_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->codeptr_base;
          int32_t _5205_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->cconst_base;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5206_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5206_ri32(_5206_ri32 ? _5206_ri32->raw() : nullptr,_5206_ri32 ? _5206_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5207_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5207_ri64(_5207_ri64 ? _5207_ri64->raw() : nullptr,_5207_ri64 ? _5207_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5208_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->f64;
          _checked_ptr_1<double> _ptr__5208_rf64(_5208_rf64 ? _5208_rf64->raw() : nullptr,_5208_rf64 ? _5208_rf64->size(0) : 0);
          int32_t _11364_;
          bool _11365_ = (_5180_rncodeatom > (int)0);
          if (_11365_)
          {
            _11364_ = _5150_xs->alloci32(safe_add( _5181_rnelem,(int)1 ));
          }
          else
          {
            _11364_ = (-(int)9999);
          }
          int32_t _5209_xcodeptr = _11364_;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5210_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5150_xs)->i32;
          _checked_ptr_1<int32_t> _ptr__5210_xi32(_5210_xi32 ? _5210_xi32->raw() : nullptr,_5210_xi32 ? _5210_xi32->size(0) : 0);
          int32_t _11366_ = (int)0;
          int32_t _11367_ = _5170_nd;
          for (int32_t _5211_i = _11366_; _5211_i < _11367_; ++_5211_i)
          {
            {
              _ptr__5206_ri32[safe_add( _5200_rshape,_5211_i )] = _ptr__5167_wi32[safe_add( _5171_shape,_5211_i )];
            }
          }
          _ptr__5206_ri32[safe_add( _5200_rshape,dim )] = _5177_sdim;
          {
            int32_t _5212_codei = (int)0;
            int32_t _5213_elmi = (int)0;
            int32_t _5214_nzi = (int)0;
            _ptr__5206_ri32[_5199_rptr] = (int)0;
            if (_5183_parameterized)
            {
              {
                _ptr__5206_ri32[_5204_rcodeptr] = (int)0;
              }
            }
            {}
            int32_t _11368_ = (int)0;
            int32_t _11369_ = _5188_d0;
            for (int32_t _5215_i0 = _11368_; _5215_i0 < _11369_; ++_5215_i0)
            {
              {
                int32_t _11370_ = (int)0;
                int32_t _11371_ = _5151_n;
                for (int32_t _5216_i = _11370_; _5216_i < _11371_; ++_5216_i)
                {
                  {
                    int32_t _11372_ = (int)0;
                    int32_t _11373_ = _ptr__5190_d1s[_5216_i];
                    for (int32_t _5217_i1z = _11372_; _5217_i1z < _11373_; ++_5217_i1z)
                    {
                      {
                        int32_t _11374_ = (int)0;
                        int32_t _11375_ = _5197_d2;
                        for (int32_t _5218_i2 = _11374_; _5218_i2 < _11375_; ++_5218_i2)
                        {
                          {
                            int32_t _5219_j = safe_add( safe_add( safe_mul( safe_mul( _5215_i0,_ptr__5190_d1s[_5216_i] ),_5197_d2 ),safe_mul( _5217_i1z,_5197_d2 ) ),_5218_i2 );
                            int32_t _11376_ = _ptr__5167_wi32[safe_add( _ptr__5159_ptr_base[_5216_i],_5219_j )];
                            int32_t _11377_ = _ptr__5167_wi32[safe_add( safe_add( _ptr__5159_ptr_base[_5216_i],_5219_j ),(int)1 )];
                            for (int32_t _5220_k = _11376_; _5220_k < _11377_; ++_5220_k)
                            {
                              {
                                _ptr__5207_ri64[safe_add( _5201_rnidxs,_5214_nzi )] = _ptr__5168_wi64[safe_add( _ptr__5160_nidxs_base[_5216_i],_5220_k )];
                                _ptr__5208_rf64[safe_add( _5202_rcof,_5214_nzi )] = _ptr__5169_wf64[safe_add( _ptr__5162_cof_base[_5216_i],_5220_k )];
                                if ((_ptr__5157_ncodeatom[_5216_i] > (int)0))
                                {
                                  {
                                    int32_t _11378_ = _ptr__5167_wi32[safe_add( _ptr__5164_codeptr[_5216_i],_5220_k )];
                                    int32_t _11379_ = _ptr__5167_wi32[safe_add( safe_add( _ptr__5164_codeptr[_5216_i],_5220_k ),(int)1 )];
                                    for (int32_t _5221_l = _11378_; _5221_l < _11379_; ++_5221_l)
                                    {
                                      {
                                        _ptr__5206_ri32[safe_add( _5203_rcode,_5212_codei )] = _ptr__5167_wi32[safe_add( _ptr__5163_code[_5216_i],_5221_l )];
                                        _ptr__5208_rf64[safe_add( _5205_rcconst,_5212_codei )] = _ptr__5169_wf64[safe_add( _ptr__5165_cconst[_5216_i],_5221_l )];
                                        ++ _5212_codei;
                                      }
                                    }
                                    _ptr__5206_ri32[safe_add( safe_add( _5204_rcodeptr,_5214_nzi ),(int)1 )] = _5212_codei;
                                  }
                                }
                                else if(_5183_parameterized)
                                {
                                  {
                                    _ptr__5206_ri32[safe_add( _5203_rcode,_5212_codei )] = 2;
                                    _ptr__5208_rf64[safe_add( _5205_rcconst,_5212_codei )] = 0.0;
                                    ++ _5212_codei;
                                    _ptr__5206_ri32[safe_add( safe_add( _5204_rcodeptr,_5214_nzi ),(int)1 )] = _5212_codei;
                                  }
                                }
                                {}
                                ++ _5214_nzi;
                              }
                            }
                            _ptr__5206_ri32[safe_add( safe_add( _5199_rptr,_5213_elmi ),(int)1 )] = _5214_nzi;
                            ++ _5213_elmi;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _5222_rshapesize = (int)1;
          int32_t _11380_ = (int)0;
          int32_t _11381_ = dim;
          for (int32_t _5223_i = _11380_; _5223_i < _11381_; ++_5223_i)
          {
            {
              _5222_rshapesize *= _ptr__5167_wi32[safe_add( _5171_shape,_5223_i )];
            }
          }
          _5222_rshapesize *= _5177_sdim;
          int32_t _11382_ = safe_add( dim,(int)1 );
          int32_t _11383_ = _5170_nd;
          for (int32_t _5224_i = _11382_; _5224_i < _11383_; ++_5224_i)
          {
            {
              _5222_rshapesize *= _ptr__5167_wi32[safe_add( _5171_shape,_5224_i )];
            }
          }
          bool _5225_rhassp = (_5181_rnelem < _5222_rshapesize);
          _5148_rs->alloc_expr(_5179_rnd,_5181_rnelem,_5182_rnnz,_5225_rhassp,_5180_rncodeatom);
          int32_t _5226_rptr = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->ptr_base;
          int32_t _5227_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->nidxs_base;
          int32_t _11384_;
          bool _11385_ = _5225_rhassp;
          if (_11385_)
          {
            _11384_ = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->sp_base;
          }
          else
          {
            _11384_ = _5148_rs->alloci64(_5181_rnelem);
          }
          int32_t _5228_rsp = _11384_;
          int32_t _5229_rcof = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->cof_base;
          int32_t _5230_rcode = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->code_base;
          int32_t _5231_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->codeptr_base;
          int32_t _5232_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->cconst_base;
          int32_t _5233_rshape = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->shape_base;
          int32_t _11386_ = (int)0;
          int32_t _11387_ = _5170_nd;
          for (int32_t _5234_i = _11386_; _5234_i < _11387_; ++_5234_i)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->i32)(safe_add( _5233_rshape,_5234_i ))) = _ptr__5167_wi32[safe_add( _5171_shape,_5234_i )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->i32)(safe_add( _5233_rshape,dim ))) = _5177_sdim;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5235_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5235_ri32(_5235_ri32 ? _5235_ri32->raw() : nullptr,_5235_ri32 ? _5235_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5236_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5236_ri64(_5236_ri64 ? _5236_ri64->raw() : nullptr,_5236_ri64 ? _5236_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5237_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5148_rs)->f64;
          _checked_ptr_1<double> _ptr__5237_rf64(_5237_rf64 ? _5237_rf64->raw() : nullptr,_5237_rf64 ? _5237_rf64->size(0) : 0);
          if ((dim == (int)0))
          {
            {
              int32_t _5238_codei = (int)0;
              int32_t _5239_nzi = (int)0;
              int32_t _5240_elmi = (int)0;
              int64_t _5241_spofs = (int64_t)0;
              _ptr__5235_ri32[_5226_rptr] = (int)0;
              if ((_5180_rncodeatom > (int)0))
              {
                {
                  _ptr__5235_ri32[_5231_rcodeptr] = (int)0;
                }
              }
              {}
              int32_t _11388_ = (int)0;
              int32_t _11389_ = _5151_n;
              for (int32_t _5242_i = _11388_; _5242_i < _11389_; ++_5242_i)
              {
                {
                  int32_t _11390_ = (int)0;
                  int32_t _11391_ = _ptr__5155_nelem[_5242_i];
                  for (int32_t _5243_j = _11390_; _5243_j < _11391_; ++_5243_j)
                  {
                    {
                      int32_t _11392_ = _ptr__5167_wi32[safe_add( _ptr__5159_ptr_base[_5242_i],_5243_j )];
                      int32_t _11393_ = _ptr__5167_wi32[safe_add( safe_add( _ptr__5159_ptr_base[_5242_i],_5243_j ),(int)1 )];
                      for (int32_t _5244_k = _11392_; _5244_k < _11393_; ++_5244_k)
                      {
                        {
                          _ptr__5236_ri64[safe_add( _5227_rnidxs,_5239_nzi )] = _ptr__5168_wi64[safe_add( _ptr__5160_nidxs_base[_5242_i],_5244_k )];
                          _ptr__5237_rf64[safe_add( _5229_rcof,_5239_nzi )] = _ptr__5169_wf64[safe_add( _ptr__5162_cof_base[_5242_i],_5244_k )];
                          if ((_ptr__5157_ncodeatom[_5242_i] > (int)0))
                          {
                            {
                              int32_t _11394_ = _ptr__5167_wi32[safe_add( _ptr__5164_codeptr[_5242_i],_5244_k )];
                              int32_t _11395_ = _ptr__5167_wi32[safe_add( safe_add( _ptr__5164_codeptr[_5242_i],_5244_k ),(int)1 )];
                              for (int32_t _5245_l = _11394_; _5245_l < _11395_; ++_5245_l)
                              {
                                {
                                  _ptr__5235_ri32[safe_add( _5230_rcode,_5238_codei )] = _ptr__5167_wi32[safe_add( _ptr__5163_code[_5242_i],_5245_l )];
                                  _ptr__5237_rf64[safe_add( _5232_rcconst,_5238_codei )] = _ptr__5169_wf64[safe_add( _ptr__5165_cconst[_5242_i],_5245_l )];
                                  ++ _5238_codei;
                                }
                              }
                              _ptr__5235_ri32[safe_add( safe_add( _5231_rcodeptr,_5239_nzi ),(int)1 )] = _5238_codei;
                            }
                          }
                          else if((_5180_rncodeatom > (int)0))
                          {
                            {
                              _ptr__5235_ri32[safe_add( _5230_rcode,_5238_codei )] = 2;
                              _ptr__5237_rf64[safe_add( _5232_rcconst,_5238_codei )] = 0.0;
                              ++ _5238_codei;
                              _ptr__5235_ri32[safe_add( safe_add( _5231_rcodeptr,_5239_nzi ),(int)1 )] = _5238_codei;
                            }
                          }
                          {}
                          ++ _5239_nzi;
                        }
                      }
                      _ptr__5235_ri32[safe_add( safe_add( _5226_rptr,_5240_elmi ),(int)1 )] = _5239_nzi;
                      if ((_ptr__5158_hassp[_5242_i] != (int)0))
                      {
                        {
                          _ptr__5236_ri64[safe_add( _5228_rsp,_5240_elmi )] = safe_add( _5241_spofs,_ptr__5168_wi64[safe_add( _ptr__5161_sp_base[_5242_i],_5243_j )] );
                        }
                      }
                      else
                      {
                        {
                          _ptr__5236_ri64[safe_add( _5228_rsp,_5240_elmi )] = safe_add( _5241_spofs,_5243_j );
                        }
                      }
                      ++ _5240_elmi;
                    }
                  }
                  int64_t _5246_sz = (int64_t)1;
                  int32_t _11396_ = (int)0;
                  int32_t _11397_ = _5170_nd;
                  for (int32_t _5247_j = _11396_; _5247_j < _11397_; ++_5247_j)
                  {
                    {
                      _5246_sz *= _ptr__5167_wi32[safe_add( _ptr__5154_shape_base[_5242_i],_5247_j )];
                    }
                  }
                  _5241_spofs += _5246_sz;
                }
              }
            }
          }
          else
          {
            {
              int32_t _5248_maxdim = (int)0;
              int32_t _11398_ = (int)0;
              int32_t _11399_ = _5179_rnd;
              for (int32_t _5249_i = _11398_; _5249_i < _11399_; ++_5249_i)
              {
                {
                  if ((_5248_maxdim < _ptr__5235_ri32[safe_add( _5233_rshape,_5249_i )]))
                  {
                    {
                      _5248_maxdim = _ptr__5235_ri32[safe_add( _5233_rshape,_5249_i )];
                    }
                  }
                  {}
                }
              }
              int32_t _5250_tsp = _5150_xs->alloci64(_5181_rnelem);
              int32_t _5251_ti = _5150_xs->alloci32(_5181_rnelem);
              int32_t _5252_tj = _5150_xs->alloci32(_5181_rnelem);
              int32_t _5253_curperm = _5150_xs->alloci32(_5181_rnelem);
              int32_t _5254_tgtperm = _5150_xs->alloci32(_5181_rnelem);
              int32_t _5255_xptr = _5150_xs->alloci32(safe_add( _5248_maxdim,(int)1 ));
              std::shared_ptr< monty::ndarray< int32_t,1 > > _5256_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5150_xs)->i32;
              _checked_ptr_1<int32_t> _ptr__5256_xi32(_5256_xi32 ? _5256_xi32->raw() : nullptr,_5256_xi32 ? _5256_xi32->size(0) : 0);
              std::shared_ptr< monty::ndarray< int64_t,1 > > _5257_xi64 = mosek::fusion::p_WorkStack::_get_impl(_5150_xs)->i64;
              _checked_ptr_1<int64_t> _ptr__5257_xi64(_5257_xi64 ? _5257_xi64->raw() : nullptr,_5257_xi64 ? _5257_xi64->size(0) : 0);
              {
                int32_t _5258_elmi = (int)0;
                int32_t _11400_ = (int)0;
                int32_t _11401_ = _5151_n;
                for (int32_t _5259_i = _11400_; _5259_i < _11401_; ++_5259_i)
                {
                  {
                    int32_t _5260_d1 = _ptr__5190_d1s[_5259_i];
                    int32_t _5261_s0 = safe_mul( _5260_d1,_5197_d2 );
                    int32_t _5262_s1 = _5197_d2;
                    if ((_ptr__5158_hassp[_5259_i] != (int)0))
                    {
                      {
                        int32_t _11402_ = (int)0;
                        int32_t _11403_ = _ptr__5155_nelem[_5259_i];
                        for (int32_t _5263_j = _11402_; _5263_j < _11403_; ++_5263_j)
                        {
                          {
                            int64_t _5264_i0 = (_ptr__5168_wi64[safe_add( _ptr__5161_sp_base[_5259_i],_5263_j )] / _5261_s0);
                            int64_t _5265_i1 = ((_ptr__5168_wi64[safe_add( _ptr__5161_sp_base[_5259_i],_5263_j )] / _5262_s1) % _5260_d1);
                            int64_t _5266_i2 = (_ptr__5168_wi64[safe_add( _ptr__5161_sp_base[_5259_i],_5263_j )] % _5197_d2);
                            _ptr__5257_xi64[safe_add( _5250_tsp,_5258_elmi )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _5264_i0,_5177_sdim ),_5265_i1 ),_ptr__5193_offset[_5259_i] ),_5197_d2 ),_5266_i2 );
                            _ptr__5256_xi32[safe_add( _5251_ti,_5258_elmi )] = _5259_i;
                            _ptr__5256_xi32[safe_add( _5252_tj,_5258_elmi )] = _5263_j;
                            ++ _5258_elmi;
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        int32_t _11404_ = (int)0;
                        int32_t _11405_ = _ptr__5155_nelem[_5259_i];
                        for (int32_t _5267_j = _11404_; _5267_j < _11405_; ++_5267_j)
                        {
                          {
                            int64_t _5268_i0 = ((int64_t)_5267_j / _5261_s0);
                            int64_t _5269_i1 = (((int64_t)_5267_j / _5262_s1) % _5260_d1);
                            int64_t _5270_i2 = ((int64_t)_5267_j % _5197_d2);
                            _ptr__5257_xi64[safe_add( _5250_tsp,_5258_elmi )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _5268_i0,_5177_sdim ),_5269_i1 ),_ptr__5193_offset[_5259_i] ),_5197_d2 ),_5270_i2 );
                            _ptr__5256_xi32[safe_add( _5251_ti,_5258_elmi )] = _5259_i;
                            _ptr__5256_xi32[safe_add( _5252_tj,_5258_elmi )] = _5267_j;
                            ++ _5258_elmi;
                          }
                        }
                      }
                    }
                  }
                }
              }
              {
                std::shared_ptr< monty::ndarray< int64_t,1 > > _5271_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_5179_rnd)));
                _checked_ptr_1<int64_t> _ptr__5271_s(_5271_s ? _5271_s->raw() : nullptr,_5271_s ? _5271_s->size(0) : 0);
                _ptr__5271_s[(_5179_rnd - (int)1)] = (int)1;
                int32_t _11406_ = (int)1;
                int32_t _11407_ = _5179_rnd;
                for (int32_t _5272_i = _11406_; _5272_i < _11407_; ++_5272_i)
                {
                  {
                    _ptr__5271_s[((_5179_rnd - _5272_i) - (int)1)] = safe_mul( _ptr__5271_s[(_5179_rnd - _5272_i)],_ptr__5235_ri32[(safe_add( _5233_rshape,_5179_rnd ) - _5272_i)] );
                  }
                }
                int32_t _11408_ = (int)0;
                int32_t _11409_ = _5181_rnelem;
                for (int32_t _5273_i = _11408_; _5273_i < _11409_; ++_5273_i)
                {
                  {
                    _ptr__5256_xi32[safe_add( _5253_curperm,_5273_i )] = _5273_i;
                  }
                }
                int32_t _11410_ = (int)0;
                int32_t _11411_ = _5179_rnd;
                for (int32_t _5274_ii = _11410_; _5274_ii < _11411_; ++_5274_ii)
                {
                  {
                    int32_t _5275_i = ((_5179_rnd - _5274_ii) - (int)1);
                    int32_t _5276_di = _ptr__5235_ri32[safe_add( _5233_rshape,_5275_i )];
                    int32_t _11412_ = (int)0;
                    int32_t _11413_ = safe_add( _5276_di,(int)1 );
                    for (int32_t _5277_k = _11412_; _5277_k < _11413_; ++_5277_k)
                    {
                      {
                        _ptr__5256_xi32[safe_add( _5255_xptr,_5277_k )] = (int)0;
                      }
                    }
                    int32_t _11414_ = (int)0;
                    int32_t _11415_ = _5181_rnelem;
                    for (int32_t _5278_kk = _11414_; _5278_kk < _11415_; ++_5278_kk)
                    {
                      {
                        int32_t _5279_k = _ptr__5256_xi32[safe_add( _5253_curperm,_5278_kk )];
                        int64_t _5280_sub = ((_ptr__5257_xi64[safe_add( _5250_tsp,_5279_k )] / _ptr__5271_s[_5275_i]) % _5276_di);
                        ++ _ptr__5256_xi32[safe_add( safe_add( _5255_xptr,_5280_sub ),(int)1 )];
                      }
                    }
                    {
                      int32_t _11416_ = (int)0;
                      int32_t _11417_ = _5276_di;
                      for (int32_t _5281_k = _11416_; _5281_k < _11417_; ++_5281_k)
                      {
                        {
                          _ptr__5256_xi32[safe_add( safe_add( _5255_xptr,_5281_k ),(int)1 )] += _ptr__5256_xi32[safe_add( _5255_xptr,_5281_k )];
                        }
                      }
                      int32_t _11418_ = (int)0;
                      int32_t _11419_ = _5181_rnelem;
                      for (int32_t _5282_kk = _11418_; _5282_kk < _11419_; ++_5282_kk)
                      {
                        {
                          int32_t _5283_k = _ptr__5256_xi32[safe_add( _5253_curperm,_5282_kk )];
                          int64_t _5284_sub = ((_ptr__5257_xi64[safe_add( _5250_tsp,_5283_k )] / _ptr__5271_s[_5275_i]) % _5276_di);
                          _ptr__5256_xi32[safe_add( _5254_tgtperm,_ptr__5256_xi32[safe_add( _5255_xptr,_5284_sub )] )] = _5283_k;
                          ++ _ptr__5256_xi32[safe_add( _5255_xptr,_5284_sub )];
                        }
                      }
                    }
                    int32_t _5285_tmp = _5253_curperm;
                    _5253_curperm = _5254_tgtperm;
                    _5254_tgtperm = _5285_tmp;
                  }
                }
              }
              {
                int32_t _5286_codei = (int)0;
                int32_t _5287_nzi = (int)0;
                _ptr__5235_ri32[_5226_rptr] = (int)0;
                if ((_5180_rncodeatom > (int)0))
                {
                  {
                    _ptr__5235_ri32[_5231_rcodeptr] = (int)0;
                  }
                }
                {}
                int32_t _11420_ = (int)0;
                int32_t _11421_ = _5181_rnelem;
                for (int32_t _5288_elmi = _11420_; _5288_elmi < _11421_; ++_5288_elmi)
                {
                  {
                    int32_t _5289_pelmi = _ptr__5256_xi32[safe_add( _5253_curperm,_5288_elmi )];
                    int32_t _5290_i = _ptr__5256_xi32[safe_add( _5251_ti,_5289_pelmi )];
                    int32_t _5291_j = _ptr__5256_xi32[safe_add( _5252_tj,_5289_pelmi )];
                    int32_t _11422_ = _ptr__5167_wi32[safe_add( _ptr__5159_ptr_base[_5290_i],_5291_j )];
                    int32_t _11423_ = _ptr__5167_wi32[safe_add( safe_add( _ptr__5159_ptr_base[_5290_i],_5291_j ),(int)1 )];
                    for (int32_t _5292_k = _11422_; _5292_k < _11423_; ++_5292_k)
                    {
                      {
                        _ptr__5236_ri64[safe_add( _5227_rnidxs,_5287_nzi )] = _ptr__5168_wi64[safe_add( _ptr__5160_nidxs_base[_5290_i],_5292_k )];
                        _ptr__5237_rf64[safe_add( _5229_rcof,_5287_nzi )] = _ptr__5169_wf64[safe_add( _ptr__5162_cof_base[_5290_i],_5292_k )];
                        if ((_ptr__5157_ncodeatom[_5290_i] > (int)0))
                        {
                          {
                            int32_t _11424_ = _ptr__5167_wi32[safe_add( _ptr__5164_codeptr[_5290_i],_5292_k )];
                            int32_t _11425_ = _ptr__5167_wi32[safe_add( safe_add( _ptr__5164_codeptr[_5290_i],_5292_k ),(int)1 )];
                            for (int32_t _5293_l = _11424_; _5293_l < _11425_; ++_5293_l)
                            {
                              {
                                _ptr__5235_ri32[safe_add( _5230_rcode,_5286_codei )] = _ptr__5167_wi32[safe_add( _ptr__5163_code[_5290_i],_5293_l )];
                                _ptr__5237_rf64[safe_add( _5232_rcconst,_5286_codei )] = _ptr__5169_wf64[safe_add( _ptr__5165_cconst[_5290_i],_5293_l )];
                                ++ _5286_codei;
                              }
                            }
                            _ptr__5235_ri32[safe_add( safe_add( _5231_rcodeptr,_5287_nzi ),(int)1 )] = _5286_codei;
                          }
                        }
                        else if(_5183_parameterized)
                        {
                          {
                            _ptr__5235_ri32[safe_add( _5230_rcode,_5286_codei )] = 2;
                            _ptr__5237_rf64[safe_add( _5232_rcconst,_5286_codei )] = 0.0;
                            ++ _5286_codei;
                            _ptr__5235_ri32[safe_add( safe_add( _5231_rcodeptr,_5287_nzi ),(int)1 )] = _5286_codei;
                          }
                        }
                        {}
                        ++ _5287_nzi;
                      }
                    }
                    _ptr__5235_ri32[safe_add( safe_add( _5226_rptr,_5288_elmi ),(int)1 )] = _5287_nzi;
                    _ptr__5236_ri64[safe_add( _5228_rsp,_5288_elmi )] = _ptr__5257_xi64[safe_add( _5250_tsp,_5289_pelmi )];
                  }
                }
              }
            }
          }
          if ((!_5225_rhassp))
          {
            {
              _5148_rs->popi64(_5181_rnelem);
            }
          }
          {}
        }
      }
    }
  }
}
// End mosek.fusion.ExprStack.eval

// Begin mosek.fusion.ExprStack.getshape
// Method mosek.fusion.ExprStack.getshape @ src/fusion/ExprStack.monty:16:6-47:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5294_es,int32_t _5295_dim)
{
  if (((int)((_5294_es)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_5294_es)->size(0)) == (int)1))
  {
    {
      return ((*_5294_es)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int32_t,1 > >> _11426_;
      for (int32_t _5297_i = (int)0, _11427_ = (int)((_5294_es)->size(0)); _5297_i < _11427_ ; ++_5297_i)
      {
        _11426_.push_back(((*_5294_es)(_5297_i))->getShape());
      }
      auto _11428_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape(_11426_.size()),_11426_.begin(),_11426_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _5296_shapes = _11428_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5298_shape = ((*_5296_shapes)((int)0));
      _checked_ptr_1<int32_t> _ptr__5298_shape(_5298_shape ? _5298_shape->raw() : nullptr,_5298_shape ? _5298_shape->size(0) : 0);
      int32_t _5299_nd = (int)((_5298_shape)->size(0));
      int32_t _11429_ = (int)1;
      int32_t _11430_ = (int)((_5296_shapes)->size(0));
      for (int32_t _5300_i = _11429_; _5300_i < _11430_; ++_5300_i)
      {
        {
          if ((_5299_nd != (int)((((*_5296_shapes)(_5300_i)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int32_t _11431_ = (int)0;
          int32_t _11432_ = _5295_dim;
          for (int32_t _5301_j = _11431_; _5301_j < _11432_; ++_5301_j)
          {
            {
              if ((_ptr__5298_shape[_5301_j] != ((*((*_5296_shapes)(_5300_i)))(_5301_j))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int32_t _11433_ = safe_add( _5295_dim,(int)1 );
          int32_t _11434_ = _5299_nd;
          for (int32_t _5302_j = _11433_; _5302_j < _11434_; ++_5302_j)
          {
            {
              if ((_ptr__5298_shape[_5302_j] != ((*((*_5296_shapes)(_5300_i)))(_5302_j))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_5295_dim == _5299_nd))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5303_resshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _5299_nd,(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__5303_resshape(_5303_resshape ? _5303_resshape->raw() : nullptr,_5303_resshape ? _5303_resshape->size(0) : 0);
          int32_t _11435_ = (int)0;
          int32_t _11436_ = _5299_nd;
          for (int32_t _5304_i = _11435_; _5304_i < _11436_; ++_5304_i)
          {
            {
              _ptr__5303_resshape[_5304_i] = _ptr__5298_shape[_5304_i];
            }
          }
          _ptr__5303_resshape[_5299_nd] = (int)((_5296_shapes)->size(0));
          return _5303_resshape;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5305_resshape = _5298_shape;
          _checked_ptr_1<int32_t> _ptr__5305_resshape(_5305_resshape ? _5305_resshape->raw() : nullptr,_5305_resshape ? _5305_resshape->size(0) : 0);
          int32_t _11437_ = (int)1;
          int32_t _11438_ = (int)((_5296_shapes)->size(0));
          for (int32_t _5306_i = _11437_; _5306_i < _11438_; ++_5306_i)
          {
            {
              _ptr__5305_resshape[_5295_dim] += ((*((*_5296_shapes)(_5306_i)))(_5295_dim));
            }
          }
          return _5305_resshape;
        }
      }
    }
  }
}
// End mosek.fusion.ExprStack.getshape

// Begin mosek.fusion.ExprStack.toString
// Method mosek.fusion.ExprStack.toString @ src/fusion/ExprStack.monty:8:6-14:7
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprStack::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5307_b = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int32_t _11439_ = (int)1;
  int32_t _11440_ = (int)((exprs)->size(0));
  for (int32_t _5308_i = _11439_; _5308_i < _11440_; ++_5308_i)
  {
    {
      _5307_b->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_5308_i))->toString());
    }
  }
  _5307_b->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _5307_b->toString();
}
// End mosek.fusion.ExprStack.toString

void mosek::fusion::p_ExprStack::destroy()
{
  exprs.reset();
}
void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }
// } class ExprStack
// class ExprInner { // @ src/fusion/ExprMul.monty:2320:4-2512:5
mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }
mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprInner::p_ExprInner
  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprInner.ctor @ src/fusion/ExprMul.monty:2352:6-2380:7
mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5309_expr3,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5310_vsub3,
    std::shared_ptr< monty::ndarray< double,1 > > _5311_vcof3)
{ return new mosek::fusion::ExprInner(_5309_expr3,_5310_vsub3,_5311_vcof3); }
mosek::fusion::ExprInner::ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5309_expr3,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5310_vsub3,
    std::shared_ptr< monty::ndarray< double,1 > > _5311_vcof3) : 
   ExprInner(new mosek::fusion::p_ExprInner(this))
{ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5309_expr3,_5310_vsub3,_5311_vcof3); }
void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5309_expr3,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5310_vsub3,
    std::shared_ptr< monty::ndarray< double,1 > > _5311_vcof3)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__5310_vsub3(_5310_vsub3 ? _5310_vsub3->raw() : nullptr, _5310_vsub3 ? _5310_vsub3->size(0) : 0);
    _checked_ptr_1<double> _ptr__5311_vcof3(_5311_vcof3 ? _5311_vcof3->raw() : nullptr, _5311_vcof3 ? _5311_vcof3->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _5309_expr3;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _5310_vsub3;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _5311_vcof3;
    if (((int)((_5310_vsub3)->size(0)) != (int)((_5311_vcof3)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5312_shp = _5309_expr3->getShape();
    _checked_ptr_1<int32_t> _ptr__5312_shp(_5312_shp ? _5312_shp->raw() : nullptr,_5312_shp ? _5312_shp->size(0) : 0);
    int64_t _5313_size = ::mosek::fusion::p_Set::size(_5312_shp);
    bool _5314_err_sorted = false;
    bool _5315_err_bounds = false;
    {
      int32_t _11441_ = (int)1;
      int32_t _11442_ = (int)((_5310_vsub3)->size(0));
      for (int32_t _5316_i = _11441_; _5316_i < _11442_; ++_5316_i)
      {
        {
          if ((_ptr__5310_vsub3[_5316_i] <= _ptr__5310_vsub3[(_5316_i - (int)1)]))
          {
            {
              _5314_err_sorted = true;
            }
          }
          {}
        }
      }
      if (((int)((_5310_vsub3)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5310_vsub3[(int)0] < (int)0) || (_ptr__5310_vsub3[((int)((_5310_vsub3)->size(0)) - (int)1)] > _5313_size)))
          {
            {
              _5315_err_bounds = true;
            }
          }
          {}
        }
      }
      {}
    }
    if (_5314_err_sorted)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
      }
    }
    {}
    if (_5315_err_bounds)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprInner.ctor

// mosek.fusion.ExprInner.ctor @ src/fusion/ExprMul.monty:2343:6-2350:7
mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5317_expr2,
    std::shared_ptr< monty::ndarray< double,1 > > _5318_vcof2)
{ return new mosek::fusion::ExprInner(_5317_expr2,_5318_vcof2); }
mosek::fusion::ExprInner::ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5317_expr2,
    std::shared_ptr< monty::ndarray< double,1 > > _5318_vcof2) : 
   ExprInner(new mosek::fusion::p_ExprInner(this))
{ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5317_expr2,_5318_vcof2); }
void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5317_expr2,
    std::shared_ptr< monty::ndarray< double,1 > > _5318_vcof2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5318_vcof2(_5318_vcof2 ? _5318_vcof2->raw() : nullptr, _5318_vcof2 ? _5318_vcof2->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5317_expr2,::mosek::fusion::p_ExprInner::range((int)((_5318_vcof2)->size(0))),_5318_vcof2);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5319_eshape = _5317_expr2->getShape();
    _checked_ptr_1<int32_t> _ptr__5319_eshape(_5319_eshape ? _5319_eshape->raw() : nullptr,_5319_eshape ? _5319_eshape->size(0) : 0);
    if ((((int)((_5319_eshape)->size(0)) != (int)1) || (_ptr__5319_eshape[(int)0] != (int)((_5318_vcof2)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprInner.ctor

// mosek.fusion.ExprInner.ctor @ src/fusion/ExprMul.monty:2339:6-2341:7
mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5320_expr1,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _5321_vsub1,
    std::shared_ptr< monty::ndarray< double,1 > > _5322_vcof1)
{ return new mosek::fusion::ExprInner(_5320_expr1,_5321_vsub1,_5322_vcof1); }
mosek::fusion::ExprInner::ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5320_expr1,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _5321_vsub1,
    std::shared_ptr< monty::ndarray< double,1 > > _5322_vcof1) : 
   ExprInner(new mosek::fusion::p_ExprInner(this))
{ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5320_expr1,_5321_vsub1,_5322_vcof1); }
void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5320_expr1,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _5321_vsub1,
    std::shared_ptr< monty::ndarray< double,1 > > _5322_vcof1)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5322_vcof1(_5322_vcof1 ? _5322_vcof1->raw() : nullptr, _5322_vcof1 ? _5322_vcof1->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5320_expr1,::mosek::fusion::p_ExprInner::convert(_5320_expr1->getShape(),_5321_vsub1),_5322_vcof1);
  }
}
// mosek.fusion.ExprInner.ctor

// Begin mosek.fusion.ExprInner.eval
// Method mosek.fusion.ExprInner.eval @ src/fusion/ExprMul.monty:2382:6-2511:7
void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5323_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5324_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5325_xs) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_5323_rs,_5324_ws,_5325_xs); }
void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5323_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5324_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5325_xs)
{
  expr->eval(_5324_ws,_5323_rs,_5325_xs);
  _5324_ws->pop_expr();
  int32_t _5326_nd = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->nd;
  int32_t _5327_nelem = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->nelem;
  int32_t _5328_nnz = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->nnz;
  int32_t _5329_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->ncodeatom;
  bool _5330_hassp = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->hassp;
  int32_t _5331_shape = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->shape_base;
  int32_t _5332_ptr = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->ptr_base;
  int32_t _5333_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->nidxs_base;
  int32_t _5334_sp = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->sp_base;
  int32_t _5335_cof = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->cof_base;
  int32_t _5336_code = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->code_base;
  int32_t _5337_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->codeptr_base;
  int32_t _5338_cconst = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5339_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5339_wi32(_5339_wi32 ? _5339_wi32->raw() : nullptr,_5339_wi32 ? _5339_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5340_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5340_wi64(_5340_wi64 ? _5340_wi64->raw() : nullptr,_5340_wi64 ? _5340_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5341_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5324_ws)->f64;
  _checked_ptr_1<double> _ptr__5341_wf64(_5341_wf64 ? _5341_wf64->raw() : nullptr,_5341_wf64 ? _5341_wf64->size(0) : 0);
  int32_t _5342_rnnz = (int)0;
  if (_5330_hassp)
  {
    {
      int32_t _5343_i1 = (int)0;
      int32_t _5344_i0 = (int)0;
      while ( ((_5344_i0 < (int)((vsub)->size(0))) && (_5343_i1 < _5327_nelem)) )
      {
        {
          if ((_ptr__5340_wi64[safe_add( _5334_sp,_5343_i1 )] < ((*vsub)(_5344_i0))))
          {
            {
              ++ _5343_i1;
            }
          }
          else if((_ptr__5340_wi64[safe_add( _5334_sp,_5343_i1 )] > ((*vsub)(_5344_i0))))
          {
            {
              ++ _5344_i0;
            }
          }
          else
          {
            {
              _5342_rnnz += (_ptr__5339_wi32[safe_add( safe_add( _5332_ptr,_5343_i1 ),(int)1 )] - _ptr__5339_wi32[safe_add( _5332_ptr,_5343_i1 )]);
              ++ _5344_i0;
              ++ _5343_i1;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _11443_ = (int)0;
      int32_t _11444_ = (int)((vsub)->size(0));
      for (int32_t _5345_i = _11443_; _5345_i < _11444_; ++_5345_i)
      {
        {
          _5342_rnnz += (_ptr__5339_wi32[safe_add( safe_add( _5332_ptr,((*vsub)(_5345_i)) ),(int)1 )] - _ptr__5339_wi32[safe_add( _5332_ptr,((*vsub)(_5345_i)) )]);
        }
      }
    }
  }
  int32_t _11445_;
  bool _11446_ = (_5329_ncodeatom > (int)0);
  if (_11446_)
  {
    _11445_ = safe_add( _5329_ncodeatom,safe_mul( (int)2,_5328_nnz ) );
  }
  else
  {
    _11445_ = (int)0;
  }
  int32_t _5346_rncodeatom = _11445_;
  _5323_rs->alloc_expr((int)0,(int)1,_5342_rnnz,false,_5346_rncodeatom);
  int32_t _5347_rptr = mosek::fusion::p_WorkStack::_get_impl(_5323_rs)->ptr_base;
  int32_t _5348_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5323_rs)->nidxs_base;
  int32_t _5349_rcof = mosek::fusion::p_WorkStack::_get_impl(_5323_rs)->cof_base;
  int32_t _5350_rcode = mosek::fusion::p_WorkStack::_get_impl(_5323_rs)->code_base;
  int32_t _5351_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5323_rs)->codeptr_base;
  int32_t _5352_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5323_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5353_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5323_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5353_ri32(_5353_ri32 ? _5353_ri32->raw() : nullptr,_5353_ri32 ? _5353_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5354_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5323_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5354_ri64(_5354_ri64 ? _5354_ri64->raw() : nullptr,_5354_ri64 ? _5354_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5355_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5323_rs)->f64;
  _checked_ptr_1<double> _ptr__5355_rf64(_5355_rf64 ? _5355_rf64->raw() : nullptr,_5355_rf64 ? _5355_rf64->size(0) : 0);
  _ptr__5353_ri32[_5347_rptr] = (int)0;
  _ptr__5353_ri32[safe_add( _5347_rptr,(int)1 )] = _5342_rnnz;
  if ((_5346_rncodeatom > (int)0))
  {
    {
      _ptr__5353_ri32[_5351_rcodeptr] = (int)0;
    }
  }
  {}
  int32_t _5356_codei = (int)0;
  int32_t _5357_k = (int)0;
  if (_5330_hassp)
  {
    {
      int32_t _5358_i1 = (int)0;
      int32_t _5359_i0 = (int)0;
      while ( ((_5359_i0 < (int)((vsub)->size(0))) && (_5358_i1 < _5327_nelem)) )
      {
        {
          if ((_ptr__5340_wi64[safe_add( _5334_sp,_5358_i1 )] < ((*vsub)(_5359_i0))))
          {
            {
              ++ _5358_i1;
            }
          }
          else if((_ptr__5340_wi64[safe_add( _5334_sp,_5358_i1 )] > ((*vsub)(_5359_i0))))
          {
            {
              ++ _5359_i0;
            }
          }
          else
          {
            {
              int32_t _5360_p0 = _ptr__5339_wi32[safe_add( _5332_ptr,_5358_i1 )];
              int32_t _5361_p1 = _ptr__5339_wi32[safe_add( safe_add( _5332_ptr,_5358_i1 ),(int)1 )];
              int32_t _11447_ = _5360_p0;
              int32_t _11448_ = _5361_p1;
              for (int32_t _5362_j = _11447_; _5362_j < _11448_; ++_5362_j)
              {
                {
                  _ptr__5354_ri64[safe_add( _5348_rnidxs,_5357_k )] = _ptr__5340_wi64[safe_add( _5333_nidxs,_5362_j )];
                  _ptr__5355_rf64[safe_add( _5349_rcof,_5357_k )] = (((*vcof)(_5359_i0)) * _ptr__5341_wf64[safe_add( _5335_cof,_5362_j )]);
                  if ((_5346_rncodeatom > (int)0))
                  {
                    {
                      int32_t _11449_ = _ptr__5339_wi32[safe_add( _5337_codeptr,_5362_j )];
                      int32_t _11450_ = _ptr__5339_wi32[safe_add( safe_add( _5337_codeptr,_5362_j ),(int)1 )];
                      for (int32_t _5363_l = _11449_; _5363_l < _11450_; ++_5363_l)
                      {
                        {
                          _ptr__5353_ri32[safe_add( _5350_rcode,_5356_codei )] = _ptr__5339_wi32[safe_add( _5336_code,_5363_l )];
                          _ptr__5355_rf64[safe_add( _5352_rcconst,_5356_codei )] = _ptr__5341_wf64[safe_add( _5338_cconst,_5363_l )];
                          ++ _5356_codei;
                        }
                      }
                      _ptr__5353_ri32[safe_add( _5350_rcode,_5356_codei )] = 2;
                      _ptr__5355_rf64[safe_add( _5352_rcconst,_5356_codei )] = ((*vcof)(_5359_i0));
                      ++ _5356_codei;
                      _ptr__5353_ri32[safe_add( _5350_rcode,_5356_codei )] = 5;
                      ++ _5356_codei;
                      _ptr__5353_ri32[safe_add( safe_add( _5351_rcodeptr,_5357_k ),(int)1 )] = _5356_codei;
                    }
                  }
                  {}
                  ++ _5357_k;
                }
              }
              ++ _5359_i0;
              ++ _5358_i1;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _11451_ = (int)0;
      int32_t _11452_ = (int)((vsub)->size(0));
      for (int32_t _5364_i = _11451_; _5364_i < _11452_; ++_5364_i)
      {
        {
          int32_t _5365_p0 = _ptr__5339_wi32[safe_add( _5332_ptr,((*vsub)(_5364_i)) )];
          int32_t _5366_p1 = _ptr__5339_wi32[safe_add( safe_add( _5332_ptr,((*vsub)(_5364_i)) ),(int)1 )];
          int32_t _11453_ = _5365_p0;
          int32_t _11454_ = _5366_p1;
          for (int32_t _5367_j = _11453_; _5367_j < _11454_; ++_5367_j)
          {
            {
              _ptr__5354_ri64[safe_add( _5348_rnidxs,_5357_k )] = _ptr__5340_wi64[safe_add( _5333_nidxs,_5367_j )];
              _ptr__5355_rf64[safe_add( _5349_rcof,_5357_k )] = (((*vcof)(_5364_i)) * _ptr__5341_wf64[safe_add( _5335_cof,_5367_j )]);
              if ((_5346_rncodeatom > (int)0))
              {
                {
                  int32_t _11455_ = _ptr__5339_wi32[safe_add( _5337_codeptr,_5367_j )];
                  int32_t _11456_ = _ptr__5339_wi32[safe_add( safe_add( _5337_codeptr,_5367_j ),(int)1 )];
                  for (int32_t _5368_l = _11455_; _5368_l < _11456_; ++_5368_l)
                  {
                    {
                      _ptr__5353_ri32[safe_add( _5350_rcode,_5356_codei )] = _ptr__5339_wi32[safe_add( _5336_code,_5368_l )];
                      _ptr__5355_rf64[safe_add( _5352_rcconst,_5356_codei )] = _ptr__5339_wi32[safe_add( _5338_cconst,_5368_l )];
                      ++ _5356_codei;
                    }
                  }
                  _ptr__5353_ri32[safe_add( _5350_rcode,_5356_codei )] = 2;
                  _ptr__5355_rf64[safe_add( _5352_rcconst,_5356_codei )] = ((*vcof)(_5364_i));
                  ++ _5356_codei;
                  _ptr__5353_ri32[safe_add( _5350_rcode,_5356_codei )] = 5;
                  ++ _5356_codei;
                  _ptr__5353_ri32[safe_add( safe_add( _5351_rcodeptr,_5357_k ),(int)1 )] = _5356_codei;
                }
              }
              {}
              ++ _5357_k;
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprInner.eval

// Begin mosek.fusion.ExprInner.range
// Method mosek.fusion.ExprInner.range @ src/fusion/ExprMul.monty:2337:6-90
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_ExprInner::range(int32_t _5369_n)
{
  std::vector<int64_t> _11457_;
  for (int32_t _5370_i = (int)0, _11458_ = _5369_n; _5370_i < _11458_ ; ++_5370_i)
  {
    _11457_.push_back(_5370_i);
  }
  auto _11459_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_11457_.size()),_11457_.begin(),_11457_.end()));
  return _11459_;
}
// End mosek.fusion.ExprInner.range

// Begin mosek.fusion.ExprInner.convert
// Method mosek.fusion.ExprInner.convert @ src/fusion/ExprMul.monty:2327:6-2335:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int32_t,1 > > _5371_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _5372_vsub)
{
  _checked_ptr_1<int32_t> _ptr__5371_shape(_5371_shape ? _5371_shape->raw() : nullptr, _5371_shape ? _5371_shape->size(0) : 0);
  int32_t _5373_nd = (int)((_5371_shape)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5374_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_5373_nd)));
  _checked_ptr_1<int64_t> _ptr__5374_s(_5374_s ? _5374_s->raw() : nullptr,_5374_s ? _5374_s->size(0) : 0);
  _ptr__5374_s[(_5373_nd - (int)1)] = (int)1;
  int32_t _11460_ = (int)1;
  int32_t _11461_ = _5373_nd;
  for (int32_t _5375_i = _11460_; _5375_i < _11461_; ++_5375_i)
  {
    {
      _ptr__5374_s[((_5373_nd - _5375_i) - (int)1)] = safe_mul( _ptr__5374_s[(_5373_nd - _5375_i)],_ptr__5371_shape[(_5373_nd - _5375_i)] );
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5376_res = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_5372_vsub)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__5376_res(_5376_res ? _5376_res->raw() : nullptr,_5376_res ? _5376_res->size(0) : 0);
  int32_t _11462_ = (int)0;
  int32_t _11463_ = (int)((_5372_vsub)->size(0));
  for (int32_t _5377_i = _11462_; _5377_i < _11463_; ++_5377_i)
  {
    {
      int32_t _11464_ = (int)0;
      int32_t _11465_ = _5373_nd;
      for (int32_t _5378_j = _11464_; _5378_j < _11465_; ++_5378_j)
      {
        {
          _ptr__5376_res[_5377_i] += safe_mul( _ptr__5374_s[_5378_j],((*_5372_vsub)(_5377_i,_5378_j)) );
        }
      }
    }
  }
  return _5376_res;
}
// End mosek.fusion.ExprInner.convert

// Begin mosek.fusion.ExprInner.toString
// Method mosek.fusion.ExprInner.toString @ src/fusion/ExprMul.monty:2325:6-64
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprInner::toString()
{
  return std::string ("ExprInner()");
}
// End mosek.fusion.ExprInner.toString

void mosek::fusion::p_ExprInner::destroy()
{
  vcof.reset();
  vsub.reset();
  expr.reset();
}
void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }
// } class ExprInner
// class ExprMulDiagRight { // @ src/fusion/ExprMul.monty:1961:4-2316:5
mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }
mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight
  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulDiagRight.ctor @ src/fusion/ExprMul.monty:2047:6-2065:7
mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight
  (int32_t _5379_mdim0,
    int32_t _5380_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5381_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5382_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5383_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5384_expr,
    int32_t _5385_validated)
{ return new mosek::fusion::ExprMulDiagRight(_5379_mdim0,_5380_mdim1,_5381_msubi,_5382_msubj,_5383_mval,_5384_expr,_5385_validated); }
mosek::fusion::ExprMulDiagRight::ExprMulDiagRight
  (int32_t _5379_mdim0,
    int32_t _5380_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5381_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5382_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5383_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5384_expr,
    int32_t _5385_validated) : 
   ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this))
{ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5379_mdim0,_5380_mdim1,_5381_msubi,_5382_msubj,_5383_mval,_5384_expr,_5385_validated); }
void mosek::fusion::p_ExprMulDiagRight::_initialize  (int32_t _5379_mdim0,
    int32_t _5380_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5381_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5382_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5383_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5384_expr,
    int32_t _5385_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5381_msubi(_5381_msubi ? _5381_msubi->raw() : nullptr, _5381_msubi ? _5381_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5382_msubj(_5382_msubj ? _5382_msubj->raw() : nullptr, _5382_msubj ? _5382_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5383_mval(_5383_mval ? _5383_mval->raw() : nullptr, _5383_mval ? _5383_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_5380_mdim1)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _5379_mdim0;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _5380_mdim1;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _5381_msubi;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _5382_msubj;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _5383_mval;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _5384_expr;
  }
}
// mosek.fusion.ExprMulDiagRight.ctor

// mosek.fusion.ExprMulDiagRight.ctor @ src/fusion/ExprMul.monty:2035:6-2045:7
mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight
  (int32_t _5386_mdim0,
    int32_t _5387_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5388_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5389_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5390_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5391_expr)
{ return new mosek::fusion::ExprMulDiagRight(_5386_mdim0,_5387_mdim1,_5388_msubi,_5389_msubj,_5390_mval,_5391_expr); }
mosek::fusion::ExprMulDiagRight::ExprMulDiagRight
  (int32_t _5386_mdim0,
    int32_t _5387_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5388_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5389_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5390_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5391_expr) : 
   ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this))
{ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5386_mdim0,_5387_mdim1,_5388_msubi,_5389_msubj,_5390_mval,_5391_expr); }
void mosek::fusion::p_ExprMulDiagRight::_initialize  (int32_t _5386_mdim0,
    int32_t _5387_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5388_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5389_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5390_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5391_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5388_msubi(_5388_msubi ? _5388_msubi->raw() : nullptr, _5388_msubi ? _5388_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5389_msubj(_5389_msubj ? _5389_msubj->raw() : nullptr, _5389_msubj ? _5389_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5390_mval(_5390_mval ? _5390_mval->raw() : nullptr, _5390_mval ? _5390_mval->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_5386_mdim0,_5387_mdim1,_5388_msubi,_5389_msubj,_5390_mval,_5391_expr,::mosek::fusion::p_ExprMulDiagRight::validate(_5386_mdim0,_5387_mdim1,_5388_msubi,_5389_msubj,_5390_mval,_5391_expr));
  }
}
// mosek.fusion.ExprMulDiagRight.ctor

// Begin mosek.fusion.ExprMulDiagRight.eval
// Method mosek.fusion.ExprMulDiagRight.eval @ src/fusion/ExprMul.monty:2068:6-2315:7
void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5392_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5393_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5394_xs) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_5392_rs,_5393_ws,_5394_xs); }
void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5392_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5393_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5394_xs)
{
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_5393_ws,_5392_rs,_5394_xs);
  _5393_ws->pop_expr();
  int32_t _5395_nd = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->nd;
  int32_t _5396_nnz = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->nnz;
  int32_t _5397_nelem = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->nelem;
  int32_t _5398_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->ncodeatom;
  bool _5399_hassp = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->hassp;
  int32_t _5400_shape = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->shape_base;
  int32_t _5401_ptr = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->ptr_base;
  int32_t _5402_sp = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->sp_base;
  int32_t _5403_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->nidxs_base;
  int32_t _5404_cof = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->cof_base;
  int32_t _5405_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->codeptr_base;
  int32_t _5406_code = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->code_base;
  int32_t _5407_cconst = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5408_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5408_wi32(_5408_wi32 ? _5408_wi32->raw() : nullptr,_5408_wi32 ? _5408_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5409_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5409_wi64(_5409_wi64 ? _5409_wi64->raw() : nullptr,_5409_wi64 ? _5409_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5410_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5393_ws)->f64;
  _checked_ptr_1<double> _ptr__5410_wf64(_5410_wf64 ? _5410_wf64->raw() : nullptr,_5410_wf64 ? _5410_wf64->size(0) : 0);
  int32_t _5411_edim0 = _ptr__5408_wi32[_5400_shape];
  int32_t _5412_edim1 = _ptr__5408_wi32[safe_add( _5400_shape,(int)1 )];
  int32_t _5413_mnnz = (int)((mval)->size(0));
  int32_t _5414_xmperm = _5394_xs->alloci32(_5413_mnnz);
  int32_t _5415_xmcolptr = _5394_xs->alloci32(safe_add( mdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5416_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5394_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__5416_xi32(_5416_xi32 ? _5416_xi32->raw() : nullptr,_5416_xi32 ? _5416_xi32->size(0) : 0);
  {
    int32_t _11466_ = (int)0;
    int32_t _11467_ = safe_add( mdim1,(int)1 );
    for (int32_t _5417_i = _11466_; _5417_i < _11467_; ++_5417_i)
    {
      {
        _ptr__5416_xi32[safe_add( _5415_xmcolptr,_5417_i )] = (int)0;
      }
    }
    int32_t _11468_ = (int)0;
    int32_t _11469_ = _5413_mnnz;
    for (int32_t _5418_i = _11468_; _5418_i < _11469_; ++_5418_i)
    {
      {
        ++ _ptr__5416_xi32[safe_add( safe_add( _5415_xmcolptr,((*msubj)(_5418_i)) ),(int)1 )];
      }
    }
    int32_t _11470_ = (int)0;
    int32_t _11471_ = mdim1;
    for (int32_t _5419_i = _11470_; _5419_i < _11471_; ++_5419_i)
    {
      {
        _ptr__5416_xi32[safe_add( safe_add( _5415_xmcolptr,_5419_i ),(int)1 )] += _ptr__5416_xi32[safe_add( _5415_xmcolptr,_5419_i )];
      }
    }
    int32_t _11472_ = (int)0;
    int32_t _11473_ = _5413_mnnz;
    for (int32_t _5420_i = _11472_; _5420_i < _11473_; ++_5420_i)
    {
      {
        _ptr__5416_xi32[safe_add( _5414_xmperm,_ptr__5416_xi32[safe_add( _5415_xmcolptr,((*msubj)(_5420_i)) )] )] = _5420_i;
        ++ _ptr__5416_xi32[safe_add( _5415_xmcolptr,((*msubj)(_5420_i)) )];
      }
    }
    int32_t _11474_ = (int)0;
    int32_t _11475_ = mdim1;
    for (int32_t _5421_i = _11474_; _5421_i < _11475_; ++_5421_i)
    {
      {
        _ptr__5416_xi32[(safe_add( _5415_xmcolptr,mdim1 ) - _5421_i)] = _ptr__5416_xi32[((safe_add( _5415_xmcolptr,mdim1 ) - _5421_i) - (int)1)];
      }
    }
    _ptr__5416_xi32[_5415_xmcolptr] = (int)0;
  }
  int32_t _5422_rncodeatom = (int)0;
  int32_t _5423_rnnz = (int)0;
  int32_t _5424_rnelem = (int)0;
  if ((!_5399_hassp))
  {
    {
      int32_t _5425_i1 = (int)0;
      while ( (_5425_i1 < _5413_mnnz) )
      {
        {
          int32_t _5426_mcol = ((*msubj)(_ptr__5416_xi32[safe_add( _5414_xmperm,_5425_i1 )]));
          int32_t _5427_b1 = _5425_i1;
          while ( ((_5425_i1 < _5413_mnnz) && (_5426_mcol == ((*msubj)(_ptr__5416_xi32[safe_add( _5414_xmperm,_5425_i1 )])))) )
          {
            {
              ++ _5425_i1;
            }
          }
          int32_t _11476_ = _5427_b1;
          int32_t _11477_ = _5425_i1;
          for (int32_t _5428_i = _11476_; _5428_i < _11477_; ++_5428_i)
          {
            {
              int32_t _5429_eidx = safe_add( safe_mul( ((*msubj)(_ptr__5416_xi32[safe_add( _5414_xmperm,_5428_i )])),_5412_edim1 ),((*msubi)(_ptr__5416_xi32[safe_add( _5414_xmperm,_5428_i )])) );
              _5423_rnnz += (_ptr__5408_wi32[safe_add( safe_add( _5401_ptr,_5429_eidx ),(int)1 )] - _ptr__5408_wi32[safe_add( _5401_ptr,_5429_eidx )]);
              if ((_5398_ncodeatom > (int)0))
              {
                {
                  _5422_rncodeatom += safe_add( (_ptr__5408_wi32[safe_add( _5405_codeptr,_ptr__5408_wi32[safe_add( safe_add( _5401_ptr,_5429_eidx ),(int)1 )] )] - _ptr__5408_wi32[safe_add( _5405_codeptr,_ptr__5408_wi32[safe_add( _5401_ptr,_5429_eidx )] )]),safe_mul( (int)2,(_ptr__5408_wi32[safe_add( safe_add( _5401_ptr,_5429_eidx ),(int)1 )] - _ptr__5408_wi32[safe_add( _5401_ptr,_5429_eidx )]) ) );
                }
              }
              {}
            }
          }
          ++ _5424_rnelem;
        }
      }
    }
  }
  else
  {
    {
      int32_t _5430_i1 = (int)0;
      int32_t _5431_i0 = (int)0;
      int32_t _11478_ = (int)0;
      int32_t _11479_ = mdim1;
      for (int32_t _5432_i = _11478_; _5432_i < _11479_; ++_5432_i)
      {
        {
          int32_t _5433_b1 = _5430_i1;
          int32_t _5434_b0 = _5431_i0;
          while ( ((_5430_i1 < _5413_mnnz) && (_5432_i == ((*msubj)(_ptr__5416_xi32[safe_add( _5414_xmperm,_5430_i1 )])))) )
          {
            {
              ++ _5430_i1;
            }
          }
          while ( ((_5431_i0 < _5397_nelem) && (_5432_i == (_ptr__5409_wi64[safe_add( _5402_sp,_5431_i0 )] / _5412_edim1))) )
          {
            {
              ++ _5431_i0;
            }
          }
          int32_t _5435_ii1 = _5433_b1;
          int32_t _5436_ii0 = _5434_b0;
          int32_t _5437_rownnz = (int)0;
          while ( ((_5436_ii0 < _5431_i0) && (_5435_ii1 < _5430_i1)) )
          {
            {
              if (((_ptr__5409_wi64[safe_add( _5402_sp,_5436_ii0 )] % _5412_edim1) < ((*msubi)(_ptr__5416_xi32[safe_add( _5414_xmperm,_5435_ii1 )]))))
              {
                {
                  ++ _5436_ii0;
                }
              }
              else if(((_ptr__5409_wi64[safe_add( _5402_sp,_5436_ii0 )] % _5412_edim1) > ((*msubi)(_ptr__5416_xi32[safe_add( _5414_xmperm,_5435_ii1 )]))))
              {
                {
                  ++ _5435_ii1;
                }
              }
              else
              {
                {
                  _5423_rnnz += (_ptr__5408_wi32[safe_add( safe_add( _5401_ptr,_5436_ii0 ),(int)1 )] - _ptr__5408_wi32[safe_add( _5401_ptr,_5436_ii0 )]);
                  if ((_5398_ncodeatom > (int)0))
                  {
                    {
                      _5422_rncodeatom += safe_add( (_ptr__5408_wi32[safe_add( _5405_codeptr,_ptr__5408_wi32[safe_add( safe_add( _5401_ptr,_5436_ii0 ),(int)1 )] )] - _ptr__5408_wi32[safe_add( _5405_codeptr,_ptr__5408_wi32[safe_add( _5401_ptr,_5436_ii0 )] )]),safe_mul( (int)2,(_ptr__5408_wi32[safe_add( safe_add( _5401_ptr,_5436_ii0 ),(int)1 )] - _ptr__5408_wi32[safe_add( _5401_ptr,_5436_ii0 )]) ) );
                    }
                  }
                  {}
                  ++ _5437_rownnz;
                  ++ _5436_ii0;
                  ++ _5435_ii1;
                }
              }
            }
          }
          if ((_5437_rownnz > (int)0))
          {
            {
              ++ _5424_rnelem;
            }
          }
          {}
        }
      }
    }
  }
  bool _5438_rhassp = (_5424_rnelem < _5411_edim0);
  _5392_rs->alloc_expr((int)1,_5424_rnelem,_5423_rnnz,_5438_rhassp,_5422_rncodeatom);
  int32_t _5439_rptr = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->ptr_base;
  int32_t _5440_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->nidxs_base;
  int32_t _11480_;
  bool _11481_ = _5438_rhassp;
  if (_11481_)
  {
    _11480_ = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->sp_base;
  }
  else
  {
    _11480_ = _5392_rs->alloci64(_5424_rnelem);
  }
  int32_t _5441_rsp = _11480_;
  int32_t _5442_rcof = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->cof_base;
  int32_t _5443_rshape = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->shape_base;
  int32_t _5444_rcode = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->code_base;
  int32_t _5445_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->codeptr_base;
  int32_t _5446_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5447_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5447_ri64(_5447_ri64 ? _5447_ri64->raw() : nullptr,_5447_ri64 ? _5447_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5448_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->f64;
  _checked_ptr_1<double> _ptr__5448_rf64(_5448_rf64 ? _5448_rf64->raw() : nullptr,_5448_rf64 ? _5448_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5449_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5392_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5449_ri32(_5449_ri32 ? _5449_ri32->raw() : nullptr,_5449_ri32 ? _5449_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5450_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5394_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__5450_xi32(_5450_xi32 ? _5450_xi32->raw() : nullptr,_5450_xi32 ? _5450_xi32->size(0) : 0);
  {
    int32_t _5451_codei = (int)0;
    int32_t _5452_nzi = (int)0;
    int32_t _5453_elmi = (int)0;
    _ptr__5449_ri32[_5439_rptr] = (int)0;
    if ((_5422_rncodeatom > (int)0))
    {
      {
        _ptr__5449_ri32[_5445_rcodeptr] = (int)0;
      }
    }
    {}
    _ptr__5449_ri32[_5443_rshape] = mdim1;
    if ((!_5399_hassp))
    {
      {
        int32_t _5454_i1 = (int)0;
        while ( (_5454_i1 < _5413_mnnz) )
        {
          {
            int32_t _5455_mcol = ((*msubj)(_ptr__5450_xi32[safe_add( _5414_xmperm,_5454_i1 )]));
            int32_t _5456_b1 = _5454_i1;
            while ( ((_5454_i1 < _5413_mnnz) && (_5455_mcol == ((*msubj)(_ptr__5450_xi32[safe_add( _5414_xmperm,_5454_i1 )])))) )
            {
              {
                ++ _5454_i1;
              }
            }
            int32_t _11482_ = _5456_b1;
            int32_t _11483_ = _5454_i1;
            for (int32_t _5457_i = _11482_; _5457_i < _11483_; ++_5457_i)
            {
              {
                int32_t _5458_midx = _ptr__5450_xi32[safe_add( _5414_xmperm,_5457_i )];
                int32_t _5459_eidx = safe_add( safe_mul( ((*msubj)(_5458_midx)),_5412_edim1 ),((*msubi)(_5458_midx)) );
                int32_t _11484_ = _ptr__5408_wi32[safe_add( _5401_ptr,_5459_eidx )];
                int32_t _11485_ = _ptr__5408_wi32[safe_add( safe_add( _5401_ptr,_5459_eidx ),(int)1 )];
                for (int32_t _5460_j = _11484_; _5460_j < _11485_; ++_5460_j)
                {
                  {
                    _ptr__5447_ri64[safe_add( _5440_rnidxs,_5452_nzi )] = _ptr__5409_wi64[safe_add( _5403_nidxs,_5460_j )];
                    _ptr__5448_rf64[safe_add( _5442_rcof,_5452_nzi )] = (_ptr__5410_wf64[safe_add( _5404_cof,_5460_j )] * ((*mval)(_5458_midx)));
                    if ((_5398_ncodeatom > (int)0))
                    {
                      {
                        int32_t _11486_ = _ptr__5408_wi32[safe_add( _5405_codeptr,_5460_j )];
                        int32_t _11487_ = _ptr__5408_wi32[safe_add( safe_add( _5405_codeptr,_5460_j ),(int)1 )];
                        for (int32_t _5461_k = _11486_; _5461_k < _11487_; ++_5461_k)
                        {
                          {
                            _ptr__5449_ri32[safe_add( _5444_rcode,_5451_codei )] = _ptr__5408_wi32[safe_add( _5406_code,_5461_k )];
                            _ptr__5448_rf64[safe_add( _5446_rcconst,_5451_codei )] = _ptr__5410_wf64[safe_add( _5407_cconst,_5461_k )];
                            ++ _5451_codei;
                          }
                        }
                        _ptr__5449_ri32[safe_add( _5444_rcode,_5451_codei )] = 2;
                        _ptr__5448_rf64[safe_add( _5446_rcconst,_5451_codei )] = ((*mval)(_5458_midx));
                        ++ _5451_codei;
                        _ptr__5449_ri32[safe_add( _5444_rcode,_5451_codei )] = 5;
                        ++ _5451_codei;
                        _ptr__5449_ri32[safe_add( safe_add( _5445_rcodeptr,_5452_nzi ),(int)1 )] = _5451_codei;
                      }
                    }
                    {}
                    ++ _5452_nzi;
                  }
                }
              }
            }
            _ptr__5447_ri64[safe_add( _5441_rsp,_5453_elmi )] = _5455_mcol;
            _ptr__5449_ri32[safe_add( safe_add( _5439_rptr,_5453_elmi ),(int)1 )] = _5452_nzi;
            ++ _5453_elmi;
          }
        }
      }
    }
    else
    {
      {
        int32_t _5462_i1 = (int)0;
        int32_t _5463_i0 = (int)0;
        int32_t _11488_ = (int)0;
        int32_t _11489_ = mdim1;
        for (int32_t _5464_i = _11488_; _5464_i < _11489_; ++_5464_i)
        {
          {
            int32_t _5465_b1 = _5462_i1;
            int32_t _5466_b0 = _5463_i0;
            while ( ((_5463_i0 < _5397_nelem) && (_5464_i == (_ptr__5409_wi64[safe_add( _5402_sp,_5463_i0 )] / _5412_edim1))) )
            {
              {
                ++ _5463_i0;
              }
            }
            while ( ((_5462_i1 < _5413_mnnz) && (_5464_i == ((*msubj)(_ptr__5450_xi32[safe_add( _5414_xmperm,_5462_i1 )])))) )
            {
              {
                ++ _5462_i1;
              }
            }
            int32_t _5467_ii1 = _5465_b1;
            int32_t _5468_ii0 = _5466_b0;
            int32_t _5469_rownnz = (int)0;
            while ( ((_5468_ii0 < _5463_i0) && (_5467_ii1 < _5462_i1)) )
            {
              {
                if (((_ptr__5409_wi64[safe_add( _5402_sp,_5468_ii0 )] % _5412_edim1) < ((*msubi)(_ptr__5450_xi32[safe_add( _5414_xmperm,_5467_ii1 )]))))
                {
                  {
                    ++ _5468_ii0;
                  }
                }
                else if(((_ptr__5409_wi64[safe_add( _5402_sp,_5468_ii0 )] % _5412_edim1) > ((*msubi)(_ptr__5450_xi32[safe_add( _5414_xmperm,_5467_ii1 )]))))
                {
                  {
                    ++ _5467_ii1;
                  }
                }
                else
                {
                  {
                    int32_t _5470_midx = _ptr__5450_xi32[safe_add( _5414_xmperm,_5467_ii1 )];
                    int32_t _11490_ = _ptr__5408_wi32[safe_add( _5401_ptr,_5468_ii0 )];
                    int32_t _11491_ = _ptr__5408_wi32[safe_add( safe_add( _5401_ptr,_5468_ii0 ),(int)1 )];
                    for (int32_t _5471_j = _11490_; _5471_j < _11491_; ++_5471_j)
                    {
                      {
                        _ptr__5447_ri64[safe_add( _5440_rnidxs,_5452_nzi )] = _ptr__5409_wi64[safe_add( _5403_nidxs,_5471_j )];
                        _ptr__5448_rf64[safe_add( _5442_rcof,_5452_nzi )] = (_ptr__5410_wf64[safe_add( _5404_cof,_5471_j )] * ((*mval)(_5470_midx)));
                        if ((_5398_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11492_ = _ptr__5408_wi32[safe_add( _5405_codeptr,_5471_j )];
                            int32_t _11493_ = _ptr__5408_wi32[safe_add( safe_add( _5405_codeptr,_5471_j ),(int)1 )];
                            for (int32_t _5472_k = _11492_; _5472_k < _11493_; ++_5472_k)
                            {
                              {
                                _ptr__5449_ri32[safe_add( _5444_rcode,_5451_codei )] = _ptr__5408_wi32[safe_add( _5406_code,_5472_k )];
                                _ptr__5448_rf64[safe_add( _5446_rcconst,_5451_codei )] = _ptr__5410_wf64[safe_add( _5407_cconst,_5472_k )];
                                ++ _5451_codei;
                              }
                            }
                            _ptr__5449_ri32[safe_add( _5444_rcode,_5451_codei )] = 2;
                            _ptr__5448_rf64[safe_add( _5446_rcconst,_5451_codei )] = ((*mval)(_5470_midx));
                            ++ _5451_codei;
                            _ptr__5449_ri32[safe_add( _5444_rcode,_5451_codei )] = 5;
                            ++ _5451_codei;
                            _ptr__5449_ri32[safe_add( safe_add( _5445_rcodeptr,_5452_nzi ),(int)1 )] = _5451_codei;
                          }
                        }
                        {}
                        ++ _5452_nzi;
                      }
                    }
                    ++ _5469_rownnz;
                    ++ _5468_ii0;
                    ++ _5467_ii1;
                  }
                }
              }
            }
            if ((_5469_rownnz > (int)0))
            {
              {
                _ptr__5449_ri32[safe_add( safe_add( _5439_rptr,_5453_elmi ),(int)1 )] = _5452_nzi;
                _ptr__5447_ri64[safe_add( _5441_rsp,_5453_elmi )] = _5464_i;
                ++ _5453_elmi;
              }
            }
            {}
          }
        }
      }
    }
    if ((!_5438_rhassp))
    {
      {
        _5392_rs->popi64(_5424_rnelem);
      }
    }
    {}
    if ((!(_5423_rnnz == _5452_nzi)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of non-zeros"));
      }
    }
    {}
    if ((!(_5424_rnelem == _5453_elmi)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of elements"));
      }
    }
    {}
  }
  _5394_xs->clear();
}
// End mosek.fusion.ExprMulDiagRight.eval

// Begin mosek.fusion.ExprMulDiagRight.validate
// Method mosek.fusion.ExprMulDiagRight.validate @ src/fusion/ExprMul.monty:1974:6-2020:7
int32_t mosek::fusion::p_ExprMulDiagRight::validate(int32_t _5473_mdim0,int32_t _5474_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5475_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5476_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5477_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5478_expr)
{
  _checked_ptr_1<int32_t> _ptr__5475_msubi(_5475_msubi ? _5475_msubi->raw() : nullptr, _5475_msubi ? _5475_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5476_msubj(_5476_msubj ? _5476_msubj->raw() : nullptr, _5476_msubj ? _5476_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5477_mval(_5477_mval ? _5477_mval->raw() : nullptr, _5477_mval ? _5477_mval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5479_eshape = _5478_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__5479_eshape(_5479_eshape ? _5479_eshape->raw() : nullptr,_5479_eshape ? _5479_eshape->size(0) : 0);
  if (((int)((_5479_eshape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _5480_edim0 = _ptr__5479_eshape[(int)0];
  int32_t _5481_edim1 = _ptr__5479_eshape[(int)1];
  if (((_5473_mdim0 < (int)0) || ((_5474_mdim1 < (int)0) || ((_5480_edim0 < (int)0) || (_5481_edim1 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5473_mdim0 != _5481_edim1) || (_5474_mdim1 != _5480_edim0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5475_msubi)->size(0)) != (int)((_5476_msubj)->size(0))) || ((int)((_5475_msubi)->size(0)) != (int)((_5477_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5482_mnnz = (int)((_5475_msubi)->size(0));
  bool _5483_err_data = false;
  bool _5484_err_sorted = false;
  {
    int32_t _11494_ = (int)0;
    int32_t _11495_ = _5482_mnnz;
    for (int32_t _5485_i = _11494_; _5485_i < _11495_; ++_5485_i)
    {
      {
        if (((_ptr__5475_msubi[_5485_i] < (int)0) || ((_ptr__5475_msubi[_5485_i] >= _5473_mdim0) || ((_ptr__5476_msubj[_5485_i] < (int)0) || (_ptr__5476_msubj[_5485_i] >= _5474_mdim1)))))
        {
          {
            _5483_err_data = true;
          }
        }
        {}
      }
    }
    int32_t _11496_ = (int)0;
    int32_t _11497_ = (_5482_mnnz - (int)1);
    for (int32_t _5486_i = _11496_; _5486_i < _11497_; ++_5486_i)
    {
      {
        if (((_ptr__5475_msubi[_5486_i] > _ptr__5475_msubi[safe_add( _5486_i,(int)1 )]) || ((_ptr__5475_msubi[_5486_i] == _ptr__5475_msubi[safe_add( _5486_i,(int)1 )]) && (_ptr__5476_msubj[_5486_i] >= _ptr__5476_msubj[safe_add( _5486_i,(int)1 )]))))
        {
          {
            _5484_err_sorted = true;
          }
        }
        {}
      }
    }
  }
  if (_5483_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5484_err_sorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprMulDiagRight.validate

// Begin mosek.fusion.ExprMulDiagRight.toString
// Method mosek.fusion.ExprMulDiagRight.toString @ src/fusion/ExprMul.monty:1972:6-137
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulDiagRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",m)"))->toString();
}
// End mosek.fusion.ExprMulDiagRight.toString

void mosek::fusion::p_ExprMulDiagRight::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }
// } class ExprMulDiagRight
// class ExprMulDiagLeft { // @ src/fusion/ExprMul.monty:1578:4-1947:5
mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft
  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulDiagLeft.ctor @ src/fusion/ExprMul.monty:1663:6-1682:7
mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft
  (int32_t _5487_mdim0,
    int32_t _5488_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5489_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5490_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5491_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5492_expr,
    int32_t _5493_validated)
{ return new mosek::fusion::ExprMulDiagLeft(_5487_mdim0,_5488_mdim1,_5489_msubi,_5490_msubj,_5491_mval,_5492_expr,_5493_validated); }
mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft
  (int32_t _5487_mdim0,
    int32_t _5488_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5489_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5490_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5491_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5492_expr,
    int32_t _5493_validated) : 
   ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this))
{ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5487_mdim0,_5488_mdim1,_5489_msubi,_5490_msubj,_5491_mval,_5492_expr,_5493_validated); }
void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int32_t _5487_mdim0,
    int32_t _5488_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5489_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5490_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5491_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5492_expr,
    int32_t _5493_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5489_msubi(_5489_msubi ? _5489_msubi->raw() : nullptr, _5489_msubi ? _5489_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5490_msubj(_5490_msubj ? _5490_msubj->raw() : nullptr, _5490_msubj ? _5490_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5491_mval(_5491_mval ? _5491_mval->raw() : nullptr, _5491_mval ? _5491_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_5487_mdim0)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _5487_mdim0;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _5488_mdim1;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _5489_msubi;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _5490_msubj;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _5491_mval;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _5492_expr;
  }
}
// mosek.fusion.ExprMulDiagLeft.ctor

// mosek.fusion.ExprMulDiagLeft.ctor @ src/fusion/ExprMul.monty:1651:6-1661:7
mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft
  (int32_t _5494_mdim0,
    int32_t _5495_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5496_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5497_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5498_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5499_expr)
{ return new mosek::fusion::ExprMulDiagLeft(_5494_mdim0,_5495_mdim1,_5496_msubi,_5497_msubj,_5498_mval,_5499_expr); }
mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft
  (int32_t _5494_mdim0,
    int32_t _5495_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5496_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5497_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5498_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5499_expr) : 
   ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this))
{ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5494_mdim0,_5495_mdim1,_5496_msubi,_5497_msubj,_5498_mval,_5499_expr); }
void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int32_t _5494_mdim0,
    int32_t _5495_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5496_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5497_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5498_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5499_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5496_msubi(_5496_msubi ? _5496_msubi->raw() : nullptr, _5496_msubi ? _5496_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5497_msubj(_5497_msubj ? _5497_msubj->raw() : nullptr, _5497_msubj ? _5497_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5498_mval(_5498_mval ? _5498_mval->raw() : nullptr, _5498_mval ? _5498_mval->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_5494_mdim0,_5495_mdim1,_5496_msubi,_5497_msubj,_5498_mval,_5499_expr,::mosek::fusion::p_ExprMulDiagLeft::validate(_5494_mdim0,_5495_mdim1,_5496_msubi,_5497_msubj,_5498_mval,_5499_expr));
  }
}
// mosek.fusion.ExprMulDiagLeft.ctor

// Begin mosek.fusion.ExprMulDiagLeft.eval
// Method mosek.fusion.ExprMulDiagLeft.eval @ src/fusion/ExprMul.monty:1685:6-1946:7
void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5500_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5501_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5502_xs) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_5500_rs,_5501_ws,_5502_xs); }
void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5500_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5501_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5502_xs)
{
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_5501_ws,_5500_rs,_5502_xs);
  _5501_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5503_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5503_wi32(_5503_wi32 ? _5503_wi32->raw() : nullptr,_5503_wi32 ? _5503_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5504_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5504_wi64(_5504_wi64 ? _5504_wi64->raw() : nullptr,_5504_wi64 ? _5504_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5505_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->f64;
  _checked_ptr_1<double> _ptr__5505_wf64(_5505_wf64 ? _5505_wf64->raw() : nullptr,_5505_wf64 ? _5505_wf64->size(0) : 0);
  int32_t _5506_nd = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->nd;
  int32_t _5507_nelem = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->nelem;
  int32_t _5508_nnz = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->nnz;
  bool _5509_hassp = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->hassp;
  int32_t _5510_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->ncodeatom;
  int32_t _5511_ptr = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->ptr_base;
  int32_t _5512_code = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->code_base;
  int32_t _5513_cconst = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->cconst_base;
  int32_t _5514_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->codeptr_base;
  int32_t _5515_shape = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->shape_base;
  int32_t _5516_sp = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->sp_base;
  int32_t _5517_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->nidxs_base;
  int32_t _5518_cof = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->cof_base;
  int32_t _5519_consts = mosek::fusion::p_WorkStack::_get_impl(_5501_ws)->cconst_base;
  if ((_5506_nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int32_t _5520_edim0 = _ptr__5503_wi32[_5515_shape];
  int32_t _5521_edim1 = _ptr__5503_wi32[safe_add( _5515_shape,(int)1 )];
  int32_t _5522_mnumnz = (int)((msubi)->size(0));
  if ((!_5509_hassp))
  {
    {
      int32_t _5523_rnnz = (int)0;
      int32_t _5524_rnelem = (int)0;
      int32_t _5525_rncodeatom = (int)0;
      int32_t _5526_i = (int)0;
      while ( (_5526_i < (int)((msubi)->size(0))) )
      {
        {
          int32_t _5527_i0 = ((*msubi)(_5526_i));
          while ( ((_5526_i < (int)((msubi)->size(0))) && (((*msubi)(_5526_i)) == _5527_i0)) )
          {
            {
              int32_t _5528_idx = safe_add( safe_mul( ((*msubj)(_5526_i)),_5521_edim1 ),((*msubi)(_5526_i)) );
              _5523_rnnz += (_ptr__5503_wi32[safe_add( safe_add( _5511_ptr,_5528_idx ),(int)1 )] - _ptr__5503_wi32[safe_add( _5511_ptr,_5528_idx )]);
              if ((_5510_ncodeatom > (int)0))
              {
                {
                  _5525_rncodeatom += safe_add( (_ptr__5503_wi32[safe_add( _5514_codeptr,_ptr__5503_wi32[safe_add( safe_add( _5511_ptr,_5528_idx ),(int)1 )] )] - _ptr__5503_wi32[safe_add( _5514_codeptr,_ptr__5503_wi32[safe_add( _5511_ptr,_5528_idx )] )]),safe_mul( (int)2,(_ptr__5503_wi32[safe_add( safe_add( _5511_ptr,_5528_idx ),(int)1 )] - _ptr__5503_wi32[safe_add( _5511_ptr,_5528_idx )]) ) );
                }
              }
              {}
              ++ _5526_i;
            }
          }
          ++ _5524_rnelem;
        }
      }
      bool _5529_rhassp = (_5524_rnelem < mdim0);
      _5500_rs->alloc_expr((int)1,_5524_rnelem,_5523_rnnz,_5529_rhassp,_5525_rncodeatom);
      int32_t _5530_rptr = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->ptr_base;
      int32_t _5531_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->nidxs_base;
      int32_t _11498_;
      bool _11499_ = _5529_rhassp;
      if (_11499_)
      {
        _11498_ = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->sp_base;
      }
      else
      {
        _11498_ = _5500_rs->alloci64(_5524_rnelem);
      }
      int32_t _5532_rsp = _11498_;
      int32_t _5533_rcof = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->cof_base;
      int32_t _5534_rshape = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->shape_base;
      int32_t _5535_rcode = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->code_base;
      int32_t _5536_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->codeptr_base;
      int32_t _5537_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5538_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5538_ri64(_5538_ri64 ? _5538_ri64->raw() : nullptr,_5538_ri64 ? _5538_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5539_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->f64;
      _checked_ptr_1<double> _ptr__5539_rf64(_5539_rf64 ? _5539_rf64->raw() : nullptr,_5539_rf64 ? _5539_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5540_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5540_ri32(_5540_ri32 ? _5540_ri32->raw() : nullptr,_5540_ri32 ? _5540_ri32->size(0) : 0);
      {
        _ptr__5540_ri32[_5530_rptr] = (int)0;
        if ((_5510_ncodeatom > (int)0))
        {
          {
            _ptr__5540_ri32[_5536_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__5540_ri32[_5534_rshape] = mdim0;
        int32_t _5541_nzi = (int)0;
        int32_t _5542_elmi = (int)0;
        int32_t _5543_codei = (int)0;
        {
        }
        {
          int32_t _5544_i = (int)0;
          while ( (_5544_i < (int)((msubi)->size(0))) )
          {
            {
              int32_t _5545_i0 = ((*msubi)(_5544_i));
              while ( ((_5544_i < (int)((msubi)->size(0))) && (((*msubi)(_5544_i)) == _5545_i0)) )
              {
                {
                  int32_t _5546_idx = safe_add( safe_mul( ((*msubj)(_5544_i)),_5521_edim1 ),((*msubi)(_5544_i)) );
                  int32_t _11500_ = _ptr__5503_wi32[safe_add( _5511_ptr,_5546_idx )];
                  int32_t _11501_ = _ptr__5503_wi32[safe_add( safe_add( _5511_ptr,_5546_idx ),(int)1 )];
                  for (int32_t _5547_j = _11500_; _5547_j < _11501_; ++_5547_j)
                  {
                    {
                      _ptr__5538_ri64[safe_add( _5531_rnidxs,_5541_nzi )] = _ptr__5504_wi64[safe_add( _5517_nidxs,_5547_j )];
                      _ptr__5539_rf64[safe_add( _5533_rcof,_5541_nzi )] = (_ptr__5505_wf64[safe_add( _5518_cof,_5547_j )] * ((*mval)(_5544_i)));
                      if ((_5525_rncodeatom > (int)0))
                      {
                        {
                          int32_t _11502_ = _ptr__5503_wi32[safe_add( _5514_codeptr,_5547_j )];
                          int32_t _11503_ = _ptr__5503_wi32[safe_add( safe_add( _5514_codeptr,_5547_j ),(int)1 )];
                          for (int32_t _5548_k = _11502_; _5548_k < _11503_; ++_5548_k)
                          {
                            {
                              _ptr__5540_ri32[safe_add( _5535_rcode,_5543_codei )] = _ptr__5503_wi32[safe_add( _5512_code,_5548_k )];
                              _ptr__5539_rf64[safe_add( _5537_rcconst,_5543_codei )] = _ptr__5505_wf64[safe_add( _5513_cconst,_5548_k )];
                              ++ _5543_codei;
                            }
                          }
                          _ptr__5540_ri32[safe_add( _5535_rcode,_5543_codei )] = 2;
                          _ptr__5539_rf64[safe_add( _5537_rcconst,_5543_codei )] = ((*mval)(_5544_i));
                          ++ _5543_codei;
                          _ptr__5540_ri32[safe_add( _5535_rcode,_5543_codei )] = 5;
                          ++ _5543_codei;
                          _ptr__5540_ri32[safe_add( safe_add( _5536_rcodeptr,_5541_nzi ),(int)1 )] = _5543_codei;
                        }
                      }
                      {}
                      ++ _5541_nzi;
                    }
                  }
                  ++ _5544_i;
                }
              }
              _ptr__5540_ri32[safe_add( safe_add( _5530_rptr,_5542_elmi ),(int)1 )] = _5541_nzi;
              _ptr__5538_ri64[safe_add( _5532_rsp,_5542_elmi )] = _5545_i0;
              ++ _5542_elmi;
            }
          }
        }
      }
      if ((!_5529_rhassp))
      {
        {
          _5500_rs->popi64(_5524_rnelem);
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _5549_xecolptr = _5502_xs->alloci32(safe_add( _5521_edim1,(int)1 ));
      int32_t _5550_xeperm = _5502_xs->alloci32(_5507_nelem);
      int32_t _5551_xmptr = _5502_xs->alloci32(safe_add( mdim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5552_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5502_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__5552_xi32(_5552_xi32 ? _5552_xi32->raw() : nullptr,_5552_xi32 ? _5552_xi32->size(0) : 0);
      int32_t _5553_rncodeatom = (int)0;
      int32_t _5554_rnnz = (int)0;
      int32_t _5555_rnelem = (int)0;
      {
        int32_t _11504_ = (int)0;
        int32_t _11505_ = safe_add( _5521_edim1,(int)1 );
        for (int32_t _5556_i = _11504_; _5556_i < _11505_; ++_5556_i)
        {
          {
            _ptr__5552_xi32[safe_add( _5549_xecolptr,_5556_i )] = (int)0;
          }
        }
        int32_t _11506_ = (int)0;
        int32_t _11507_ = _5507_nelem;
        for (int32_t _5557_i = _11506_; _5557_i < _11507_; ++_5557_i)
        {
          {
            ++ _ptr__5552_xi32[safe_add( safe_add( _5549_xecolptr,(_ptr__5504_wi64[safe_add( _5516_sp,_5557_i )] % _5521_edim1) ),(int)1 )];
          }
        }
        int32_t _11508_ = (int)0;
        int32_t _11509_ = _5521_edim1;
        for (int32_t _5558_i = _11508_; _5558_i < _11509_; ++_5558_i)
        {
          {
            _ptr__5552_xi32[safe_add( safe_add( _5549_xecolptr,_5558_i ),(int)1 )] += _ptr__5552_xi32[safe_add( _5549_xecolptr,_5558_i )];
          }
        }
        int32_t _11510_ = (int)0;
        int32_t _11511_ = _5507_nelem;
        for (int32_t _5559_i = _11510_; _5559_i < _11511_; ++_5559_i)
        {
          {
            int64_t _5560_ej = (_ptr__5504_wi64[safe_add( _5516_sp,_5559_i )] % _5521_edim1);
            _ptr__5552_xi32[safe_add( _5550_xeperm,_ptr__5552_xi32[safe_add( _5549_xecolptr,_5560_ej )] )] = _5559_i;
            ++ _ptr__5552_xi32[safe_add( _5549_xecolptr,_5560_ej )];
          }
        }
        int32_t _11512_ = (int)0;
        int32_t _11513_ = _5521_edim1;
        for (int32_t _5561_i = _11512_; _5561_i < _11513_; ++_5561_i)
        {
          {
            _ptr__5552_xi32[(safe_add( _5549_xecolptr,_5521_edim1 ) - _5561_i)] = _ptr__5552_xi32[((safe_add( _5549_xecolptr,_5521_edim1 ) - _5561_i) - (int)1)];
          }
        }
        _ptr__5552_xi32[_5549_xecolptr] = (int)0;
        int32_t _5562_ie = (int)0;
        int32_t _5563_im = (int)0;
        while ( ((_5563_im < (int)((msubi)->size(0))) && (_5562_ie < _5507_nelem)) )
        {
          {
            if ((((*msubi)(_5563_im)) < (_ptr__5504_wi64[safe_add( _5516_sp,_ptr__5552_xi32[safe_add( _5550_xeperm,_5562_ie )] )] % _5521_edim1)))
            {
              {
                ++ _5563_im;
              }
            }
            else if((((*msubi)(_5563_im)) > (_ptr__5504_wi64[safe_add( _5516_sp,_ptr__5552_xi32[safe_add( _5550_xeperm,_5562_ie )] )] % _5521_edim1)))
            {
              {
                ++ _5562_ie;
              }
            }
            else
            {
              {
                int32_t _5564_elmnnz = (int)0;
                int64_t _5565_ecol = (_ptr__5504_wi64[safe_add( _5516_sp,_ptr__5552_xi32[safe_add( _5550_xeperm,_5562_ie )] )] % _5521_edim1);
                int32_t _5566_mb = _5563_im;
                while ( ((_5563_im < (int)((msubi)->size(0))) && (((*msubi)(_5563_im)) == ((*msubi)(_5566_mb)))) )
                {
                  {
                    ++ _5563_im;
                  }
                }
                int32_t _5567_eb = _5562_ie;
                while ( ((_5562_ie < _5507_nelem) && ((_ptr__5504_wi64[safe_add( _5516_sp,_ptr__5552_xi32[safe_add( _5550_xeperm,_5562_ie )] )] % _5521_edim1) == _5565_ecol)) )
                {
                  {
                    ++ _5562_ie;
                  }
                }
                int32_t _5568_i1 = _5567_eb;
                int32_t _5569_i0 = _5566_mb;
                int32_t _5570_elmnz = (int)0;
                while ( ((_5569_i0 < _5563_im) && (_5568_i1 < _5562_ie)) )
                {
                  {
                    int32_t _5571_eidx = _ptr__5552_xi32[safe_add( _5550_xeperm,_5568_i1 )];
                    if ((((*msubj)(_5569_i0)) < (_ptr__5504_wi64[safe_add( _5516_sp,_5571_eidx )] / _5521_edim1)))
                    {
                      {
                        ++ _5569_i0;
                      }
                    }
                    else if((((*msubj)(_5569_i0)) > (_ptr__5504_wi64[safe_add( _5516_sp,_5571_eidx )] / _5521_edim1)))
                    {
                      {
                        ++ _5568_i1;
                      }
                    }
                    else
                    {
                      {
                        _5554_rnnz += (_ptr__5503_wi32[safe_add( safe_add( _5511_ptr,_5571_eidx ),(int)1 )] - _ptr__5503_wi32[safe_add( _5511_ptr,_5571_eidx )]);
                        if ((_5510_ncodeatom > (int)0))
                        {
                          {
                            _5553_rncodeatom += safe_add( (_ptr__5503_wi32[safe_add( _5514_codeptr,_ptr__5503_wi32[safe_add( safe_add( _5511_ptr,_5571_eidx ),(int)1 )] )] - _ptr__5503_wi32[safe_add( _5514_codeptr,_ptr__5503_wi32[safe_add( _5511_ptr,_5571_eidx )] )]),safe_mul( (int)2,(_ptr__5503_wi32[safe_add( safe_add( _5511_ptr,_5571_eidx ),(int)1 )] - _ptr__5503_wi32[safe_add( _5511_ptr,_5571_eidx )]) ) );
                          }
                        }
                        {}
                        ++ _5570_elmnz;
                        ++ _5569_i0;
                        ++ _5568_i1;
                      }
                    }
                  }
                }
                if ((_5570_elmnz > (int)0))
                {
                  {
                    ++ _5555_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
      bool _5572_rhassp = (_5555_rnelem < mdim0);
      _5500_rs->alloc_expr((int)1,_5555_rnelem,_5554_rnnz,_5572_rhassp,_5553_rncodeatom);
      int32_t _5573_rptr = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->ptr_base;
      int32_t _5574_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->nidxs_base;
      int32_t _11514_;
      bool _11515_ = _5572_rhassp;
      if (_11515_)
      {
        _11514_ = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->sp_base;
      }
      else
      {
        _11514_ = _5500_rs->alloci64(_5555_rnelem);
      }
      int32_t _5575_rsp = _11514_;
      int32_t _5576_rcof = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->cof_base;
      int32_t _5577_rshape = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->shape_base;
      int32_t _5578_rcode = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->code_base;
      int32_t _5579_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->codeptr_base;
      int32_t _5580_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5581_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5581_ri64(_5581_ri64 ? _5581_ri64->raw() : nullptr,_5581_ri64 ? _5581_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5582_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->f64;
      _checked_ptr_1<double> _ptr__5582_rf64(_5582_rf64 ? _5582_rf64->raw() : nullptr,_5582_rf64 ? _5582_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5583_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5500_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5583_ri32(_5583_ri32 ? _5583_ri32->raw() : nullptr,_5583_ri32 ? _5583_ri32->size(0) : 0);
      {
        int32_t _5584_elmi = (int)0;
        int32_t _5585_nzi = (int)0;
        int32_t _5586_codei = (int)0;
        int32_t _5587_ie = (int)0;
        int32_t _5588_im = (int)0;
        _ptr__5583_ri32[_5573_rptr] = (int)0;
        if ((_5510_ncodeatom > (int)0))
        {
          {
            _ptr__5583_ri32[_5579_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__5583_ri32[_5577_rshape] = mdim0;
        while ( ((_5588_im < (int)((msubi)->size(0))) && (_5587_ie < _5507_nelem)) )
        {
          {
            if ((((*msubi)(_5588_im)) < (_ptr__5504_wi64[safe_add( _5516_sp,_ptr__5552_xi32[safe_add( _5550_xeperm,_5587_ie )] )] % _5521_edim1)))
            {
              {
                ++ _5588_im;
              }
            }
            else if((((*msubi)(_5588_im)) > (_ptr__5504_wi64[safe_add( _5516_sp,_ptr__5552_xi32[safe_add( _5550_xeperm,_5587_ie )] )] % _5521_edim1)))
            {
              {
                ++ _5587_ie;
              }
            }
            else
            {
              {
                int32_t _5589_elmnnz = (int)0;
                int64_t _5590_ecol = (_ptr__5504_wi64[safe_add( _5516_sp,_ptr__5552_xi32[safe_add( _5550_xeperm,_5587_ie )] )] % _5521_edim1);
                int32_t _5591_mb = _5588_im;
                while ( ((_5588_im < (int)((msubi)->size(0))) && (((*msubi)(_5588_im)) == ((*msubi)(_5591_mb)))) )
                {
                  {
                    ++ _5588_im;
                  }
                }
                int32_t _5592_eb = _5587_ie;
                while ( ((_5587_ie < _5507_nelem) && ((_ptr__5504_wi64[safe_add( _5516_sp,_ptr__5552_xi32[safe_add( _5550_xeperm,_5587_ie )] )] % _5521_edim1) == _5590_ecol)) )
                {
                  {
                    ++ _5587_ie;
                  }
                }
                int32_t _5593_i1 = _5592_eb;
                int32_t _5594_i0 = _5591_mb;
                int32_t _5595_elmnz = (int)0;
                int32_t _5596_mrow = ((*msubi)(_5591_mb));
                while ( ((_5594_i0 < _5588_im) && (_5593_i1 < _5587_ie)) )
                {
                  {
                    int32_t _5597_eidx = _ptr__5552_xi32[safe_add( _5550_xeperm,_5593_i1 )];
                    if ((((*msubj)(_5594_i0)) < (_ptr__5504_wi64[safe_add( _5516_sp,_5597_eidx )] / _5521_edim1)))
                    {
                      {
                        ++ _5594_i0;
                      }
                    }
                    else if((((*msubj)(_5594_i0)) > (_ptr__5504_wi64[safe_add( _5516_sp,_5597_eidx )] / _5521_edim1)))
                    {
                      {
                        ++ _5593_i1;
                      }
                    }
                    else
                    {
                      {
                        int32_t _11516_ = _ptr__5503_wi32[safe_add( _5511_ptr,_5597_eidx )];
                        int32_t _11517_ = _ptr__5503_wi32[safe_add( safe_add( _5511_ptr,_5597_eidx ),(int)1 )];
                        for (int32_t _5598_j = _11516_; _5598_j < _11517_; ++_5598_j)
                        {
                          {
                            _ptr__5581_ri64[safe_add( _5574_rnidxs,_5585_nzi )] = _ptr__5504_wi64[safe_add( _5517_nidxs,_5598_j )];
                            _ptr__5582_rf64[safe_add( _5576_rcof,_5585_nzi )] = (_ptr__5505_wf64[safe_add( _5518_cof,_5598_j )] * ((*mval)(_5594_i0)));
                            if ((_5510_ncodeatom > (int)0))
                            {
                              {
                                int32_t _11518_ = _ptr__5503_wi32[safe_add( _5514_codeptr,_5598_j )];
                                int32_t _11519_ = _ptr__5503_wi32[safe_add( safe_add( _5514_codeptr,_5598_j ),(int)1 )];
                                for (int32_t _5599_k = _11518_; _5599_k < _11519_; ++_5599_k)
                                {
                                  {
                                    _ptr__5583_ri32[safe_add( _5578_rcode,_5586_codei )] = _ptr__5503_wi32[safe_add( _5512_code,_5599_k )];
                                    _ptr__5582_rf64[safe_add( _5580_rcconst,_5586_codei )] = _ptr__5505_wf64[safe_add( _5513_cconst,_5599_k )];
                                    ++ _5586_codei;
                                  }
                                }
                                _ptr__5583_ri32[safe_add( _5578_rcode,_5586_codei )] = 2;
                                _ptr__5582_rf64[safe_add( _5580_rcconst,_5586_codei )] = ((*mval)(_5594_i0));
                                ++ _5586_codei;
                                _ptr__5583_ri32[safe_add( _5578_rcode,_5586_codei )] = 5;
                                ++ _5586_codei;
                                _ptr__5583_ri32[safe_add( safe_add( _5579_rcodeptr,_5585_nzi ),(int)1 )] = _5586_codei;
                              }
                            }
                            {}
                            ++ _5585_nzi;
                            ++ _5595_elmnz;
                          }
                        }
                        ++ _5594_i0;
                        ++ _5593_i1;
                      }
                    }
                  }
                }
                if ((_5595_elmnz > (int)0))
                {
                  {
                    _ptr__5583_ri32[safe_add( safe_add( _5573_rptr,_5584_elmi ),(int)1 )] = _5585_nzi;
                    _ptr__5581_ri64[safe_add( _5575_rsp,_5584_elmi )] = _5596_mrow;
                    ++ _5584_elmi;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_5585_nzi != _5554_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
          }
        }
        {}
        if ((_5584_elmi != _5555_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
          }
        }
        {}
      }
      if ((!_5572_rhassp))
      {
        {
          _5500_rs->popi64(_5555_rnelem);
        }
      }
      {}
    }
  }
  _5502_xs->clear();
}
// End mosek.fusion.ExprMulDiagLeft.eval

// Begin mosek.fusion.ExprMulDiagLeft.validate
// Method mosek.fusion.ExprMulDiagLeft.validate @ src/fusion/ExprMul.monty:1591:6-1635:7
int32_t mosek::fusion::p_ExprMulDiagLeft::validate(int32_t _5600_mdim0,int32_t _5601_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5602_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5603_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5604_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5605_expr)
{
  _checked_ptr_1<int32_t> _ptr__5602_msubi(_5602_msubi ? _5602_msubi->raw() : nullptr, _5602_msubi ? _5602_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5603_msubj(_5603_msubj ? _5603_msubj->raw() : nullptr, _5603_msubj ? _5603_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5604_mval(_5604_mval ? _5604_mval->raw() : nullptr, _5604_mval ? _5604_mval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5606_eshape = _5605_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__5606_eshape(_5606_eshape ? _5606_eshape->raw() : nullptr,_5606_eshape ? _5606_eshape->size(0) : 0);
  if (((int)((_5606_eshape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _5607_edim0 = _ptr__5606_eshape[(int)0];
  int32_t _5608_edim1 = _ptr__5606_eshape[(int)1];
  if (((_5600_mdim0 < (int)0) || (_5601_mdim1 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5601_mdim1 != _5607_edim0) || (_5600_mdim0 != _5608_edim1)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5602_msubi)->size(0)) != (int)((_5603_msubj)->size(0))) || ((int)((_5602_msubi)->size(0)) != (int)((_5604_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5609_mnnz = (int)((_5602_msubi)->size(0));
  bool _5610_err_data = false;
  bool _5611_err_sorted = false;
  {
    int32_t _11520_ = (int)0;
    int32_t _11521_ = _5609_mnnz;
    for (int32_t _5612_i = _11520_; _5612_i < _11521_; ++_5612_i)
    {
      {
        if (((_ptr__5602_msubi[_5612_i] < (int)0) || ((_ptr__5602_msubi[_5612_i] >= _5600_mdim0) || ((_ptr__5603_msubj[_5612_i] < (int)0) || (_ptr__5603_msubj[_5612_i] >= _5601_mdim1)))))
        {
          {
            _5610_err_data = true;
          }
        }
        {}
      }
    }
    int32_t _11522_ = (int)0;
    int32_t _11523_ = (_5609_mnnz - (int)1);
    for (int32_t _5613_i = _11522_; _5613_i < _11523_; ++_5613_i)
    {
      {
        if (((_ptr__5602_msubi[_5613_i] > _ptr__5602_msubi[safe_add( _5613_i,(int)1 )]) || ((_ptr__5602_msubi[_5613_i] == _ptr__5602_msubi[safe_add( _5613_i,(int)1 )]) && (_ptr__5603_msubj[_5613_i] >= _ptr__5603_msubj[safe_add( _5613_i,(int)1 )]))))
        {
          {
            _5611_err_sorted = true;
          }
        }
        {}
      }
    }
  }
  if (_5610_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5611_err_sorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprMulDiagLeft.validate

// Begin mosek.fusion.ExprMulDiagLeft.toString
// Method mosek.fusion.ExprMulDiagLeft.toString @ src/fusion/ExprMul.monty:1589:6-136
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulDiagLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagLeft(m,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulDiagLeft.toString

void mosek::fusion::p_ExprMulDiagLeft::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }
// } class ExprMulDiagLeft
// class ExprMulElement { // @ src/fusion/ExprMul.monty:1361:4-1562:5
mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }
mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulElement::p_ExprMulElement
  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulElement.ctor @ src/fusion/ExprMul.monty:1376:6-1401:7
mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5614_mcof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5615_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5616_expr)
{ return new mosek::fusion::ExprMulElement(_5614_mcof,_5615_msp,_5616_expr); }
mosek::fusion::ExprMulElement::ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5614_mcof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5615_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5616_expr) : 
   ExprMulElement(new mosek::fusion::p_ExprMulElement(this))
{ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5614_mcof,_5615_msp,_5616_expr); }
void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5614_mcof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5615_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5616_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5614_mcof(_5614_mcof ? _5614_mcof->raw() : nullptr, _5614_mcof ? _5614_mcof->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__5615_msp(_5615_msp ? _5615_msp->raw() : nullptr, _5615_msp ? _5615_msp->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_5614_mcof,_5615_msp,_5616_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5617_eshape = _5616_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__5617_eshape(_5617_eshape ? _5617_eshape->raw() : nullptr,_5617_eshape ? _5617_eshape->size(0) : 0);
    if (((int)((_5614_mcof)->size(0)) != (int)((_5615_msp)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    int64_t _5618_sz = ::mosek::fusion::p_Set::size(_5617_eshape);
    bool _5619_err_data = false;
    bool _5620_err_sorted = false;
    {
      int32_t _11524_ = (int)0;
      int32_t _11525_ = (int)((_5615_msp)->size(0));
      for (int32_t _5621_i = _11524_; _5621_i < _11525_; ++_5621_i)
      {
        {
          if (((_ptr__5615_msp[_5621_i] < (int)0) || (_ptr__5615_msp[_5621_i] >= _5618_sz)))
          {
            {
              _5619_err_data = true;
            }
          }
          {}
        }
      }
      int32_t _11526_ = (int)0;
      int32_t _11527_ = ((int)((_5615_msp)->size(0)) - (int)1);
      for (int32_t _5622_i = _11526_; _5622_i < _11527_; ++_5622_i)
      {
        {
          if ((_ptr__5615_msp[_5622_i] >= _ptr__5615_msp[safe_add( _5622_i,(int)1 )]))
          {
            {
              _5620_err_sorted = true;
            }
          }
          {}
        }
      }
    }
    if (_5619_err_data)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
      }
    }
    {}
    if (_5620_err_sorted)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulElement.ctor

// mosek.fusion.ExprMulElement.ctor @ src/fusion/ExprMul.monty:1369:6-1374:7
mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5623_cof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5624_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5625_expr,
    int32_t _5626_validated)
{ return new mosek::fusion::ExprMulElement(_5623_cof,_5624_msp,_5625_expr,_5626_validated); }
mosek::fusion::ExprMulElement::ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5623_cof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5624_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5625_expr,
    int32_t _5626_validated) : 
   ExprMulElement(new mosek::fusion::p_ExprMulElement(this))
{ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5623_cof,_5624_msp,_5625_expr,_5626_validated); }
void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5623_cof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5624_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5625_expr,
    int32_t _5626_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5623_cof(_5623_cof ? _5623_cof->raw() : nullptr, _5623_cof ? _5623_cof->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__5624_msp(_5624_msp ? _5624_msp->raw() : nullptr, _5624_msp ? _5624_msp->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5625_expr->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _5625_expr;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _5623_cof;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _5624_msp;
  }
}
// mosek.fusion.ExprMulElement.ctor

// Begin mosek.fusion.ExprMulElement.eval
// Method mosek.fusion.ExprMulElement.eval @ src/fusion/ExprMul.monty:1403:6-1561:7
void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5627_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5628_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5629_xs) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_5627_rs,_5628_ws,_5629_xs); }
void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5627_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5628_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5629_xs)
{
  expr->eval(_5628_ws,_5627_rs,_5629_xs);
  _5628_ws->pop_expr();
  int32_t _5630_nd = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->nd;
  int32_t _5631_nelem = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->nelem;
  int32_t _5632_nnz = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->nnz;
  int32_t _5633_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->ncodeatom;
  bool _5634_hassp = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->hassp;
  int32_t _5635_shape = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->shape_base;
  int32_t _5636_ptr = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->ptr_base;
  int32_t _5637_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->nidxs_base;
  int32_t _5638_sp = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->sp_base;
  int32_t _5639_cof = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->cof_base;
  int32_t _5640_code = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->code_base;
  int32_t _5641_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->codeptr_base;
  int32_t _5642_cconst = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5643_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5643_wi32(_5643_wi32 ? _5643_wi32->raw() : nullptr,_5643_wi32 ? _5643_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5644_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5644_wi64(_5644_wi64 ? _5644_wi64->raw() : nullptr,_5644_wi64 ? _5644_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5645_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5628_ws)->f64;
  _checked_ptr_1<double> _ptr__5645_wf64(_5645_wf64 ? _5645_wf64->raw() : nullptr,_5645_wf64 ? _5645_wf64->size(0) : 0);
  int32_t _5646_rncodeatom = (int)0;
  int32_t _5647_rnnz = (int)0;
  int32_t _5648_rnelem = (int)0;
  if ((!_5634_hassp))
  {
    {
      _5648_rnelem = (int)((msp)->size(0));
      int32_t _11528_ = (int)0;
      int32_t _11529_ = (int)((msp)->size(0));
      for (int32_t _5649_i = _11528_; _5649_i < _11529_; ++_5649_i)
      {
        {
          _5647_rnnz += (_ptr__5643_wi32[safe_add( safe_add( _5636_ptr,((*msp)(_5649_i)) ),(int)1 )] - _ptr__5643_wi32[safe_add( _5636_ptr,((*msp)(_5649_i)) )]);
        }
      }
      if ((_5633_ncodeatom > (int)0))
      {
        {
          int32_t _11530_ = (int)0;
          int32_t _11531_ = (int)((msp)->size(0));
          for (int32_t _5650_i = _11530_; _5650_i < _11531_; ++_5650_i)
          {
            {
              _5646_rncodeatom += safe_add( (_ptr__5643_wi32[safe_add( _5641_codeptr,_ptr__5643_wi32[safe_add( safe_add( _5636_ptr,((*msp)(_5650_i)) ),(int)1 )] )] - _ptr__5643_wi32[safe_add( _5641_codeptr,_ptr__5643_wi32[safe_add( _5636_ptr,((*msp)(_5650_i)) )] )]),safe_mul( (int)2,(_ptr__5643_wi32[safe_add( safe_add( _5636_ptr,((*msp)(_5650_i)) ),(int)1 )] - _ptr__5643_wi32[safe_add( _5636_ptr,((*msp)(_5650_i)) )]) ) );
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _5651_e0 = (int)((msp)->size(0));
      int32_t _5652_i0 = (int)0;
      int32_t _5653_e1 = _5631_nelem;
      int32_t _5654_i1 = (int)0;
      while ( ((_5652_i0 < _5651_e0) && (_5654_i1 < _5653_e1)) )
      {
        {
          if ((((*msp)(_5652_i0)) < _ptr__5644_wi64[safe_add( _5638_sp,_5654_i1 )]))
          {
            {
              ++ _5652_i0;
            }
          }
          else if((((*msp)(_5652_i0)) > _ptr__5644_wi64[safe_add( _5638_sp,_5654_i1 )]))
          {
            {
              ++ _5654_i1;
            }
          }
          else
          {
            {
              _5647_rnnz += (_ptr__5643_wi32[safe_add( safe_add( _5636_ptr,_5654_i1 ),(int)1 )] - _ptr__5643_wi32[safe_add( _5636_ptr,_5654_i1 )]);
              if ((_5633_ncodeatom > (int)0))
              {
                {
                  _5646_rncodeatom += safe_add( (_ptr__5643_wi32[safe_add( _5641_codeptr,_ptr__5643_wi32[safe_add( safe_add( _5636_ptr,_5654_i1 ),(int)1 )] )] - _ptr__5643_wi32[safe_add( _5641_codeptr,_ptr__5643_wi32[safe_add( _5636_ptr,_5654_i1 )] )]),safe_mul( (int)2,(_ptr__5643_wi32[safe_add( safe_add( _5636_ptr,_5654_i1 ),(int)1 )] - _ptr__5643_wi32[safe_add( _5636_ptr,_5654_i1 )]) ) );
                }
              }
              {}
              ++ _5652_i0;
              ++ _5654_i1;
              ++ _5648_rnelem;
            }
          }
        }
      }
    }
  }
  int64_t _5655_rsize = (int64_t)1;
  int32_t _11532_ = (int)0;
  int32_t _11533_ = _5630_nd;
  for (int32_t _5656_i = _11532_; _5656_i < _11533_; ++_5656_i)
  {
    {
      _5655_rsize *= _ptr__5643_wi32[safe_add( _5635_shape,_5656_i )];
    }
  }
  bool _5657_rhassp = (_5648_rnelem < _5655_rsize);
  int32_t _5658_rnd = _5630_nd;
  _5627_rs->alloc_expr(_5658_rnd,_5648_rnelem,_5647_rnnz,_5657_rhassp,_5646_rncodeatom);
  int32_t _5659_rptr = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->ptr_base;
  int32_t _5660_rshape = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->shape_base;
  int32_t _5661_rnidx = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->nidxs_base;
  int32_t _11534_;
  bool _11535_ = _5657_rhassp;
  if (_11535_)
  {
    _11534_ = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->sp_base;
  }
  else
  {
    _11534_ = _5627_rs->alloci64(_5648_rnelem);
  }
  int32_t _5662_rsp = _11534_;
  int32_t _5663_rcof = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->cof_base;
  int32_t _5664_rcode = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->code_base;
  int32_t _5665_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->codeptr_base;
  int32_t _5666_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5667_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5667_ri32(_5667_ri32 ? _5667_ri32->raw() : nullptr,_5667_ri32 ? _5667_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5668_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5668_ri64(_5668_ri64 ? _5668_ri64->raw() : nullptr,_5668_ri64 ? _5668_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5669_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5627_rs)->f64;
  _checked_ptr_1<double> _ptr__5669_rf64(_5669_rf64 ? _5669_rf64->raw() : nullptr,_5669_rf64 ? _5669_rf64->size(0) : 0);
  {
    int32_t _5670_codei = (int)0;
    int32_t _5671_elmi = (int)0;
    int32_t _5672_nzi = (int)0;
    _ptr__5667_ri32[_5659_rptr] = (int)0;
    if ((_5646_rncodeatom > (int)0))
    {
      {
        _ptr__5667_ri32[_5665_rcodeptr] = (int)0;
      }
    }
    {}
    int32_t _11536_ = (int)0;
    int32_t _11537_ = _5658_rnd;
    for (int32_t _5673_i = _11536_; _5673_i < _11537_; ++_5673_i)
    {
      {
        _ptr__5667_ri32[safe_add( _5660_rshape,_5673_i )] = _ptr__5643_wi32[safe_add( _5635_shape,_5673_i )];
      }
    }
    if ((!_5634_hassp))
    {
      {
        int32_t _11538_ = (int)0;
        int32_t _11539_ = (int)((msp)->size(0));
        for (int32_t _5674_i = _11538_; _5674_i < _11539_; ++_5674_i)
        {
          {
            int32_t _5675_p0 = _ptr__5643_wi32[safe_add( _5636_ptr,((*msp)(_5674_i)) )];
            int32_t _5676_p1 = _ptr__5643_wi32[safe_add( safe_add( _5636_ptr,((*msp)(_5674_i)) ),(int)1 )];
            int32_t _11540_ = _5675_p0;
            int32_t _11541_ = _5676_p1;
            for (int32_t _5677_p = _11540_; _5677_p < _11541_; ++_5677_p)
            {
              {
                _ptr__5668_ri64[safe_add( _5661_rnidx,_5672_nzi )] = _ptr__5644_wi64[safe_add( _5637_nidxs,_5677_p )];
                _ptr__5669_rf64[safe_add( _5663_rcof,_5672_nzi )] = (_ptr__5645_wf64[safe_add( _5639_cof,_5677_p )] * ((*mcof)(_5674_i)));
                if ((_5633_ncodeatom > (int)0))
                {
                  {
                    int32_t _11542_ = _ptr__5643_wi32[safe_add( _5641_codeptr,_5677_p )];
                    int32_t _11543_ = _ptr__5643_wi32[safe_add( safe_add( _5641_codeptr,_5677_p ),(int)1 )];
                    for (int32_t _5678_l = _11542_; _5678_l < _11543_; ++_5678_l)
                    {
                      {
                        _ptr__5667_ri32[safe_add( _5664_rcode,_5670_codei )] = _ptr__5643_wi32[safe_add( _5640_code,_5678_l )];
                        _ptr__5669_rf64[safe_add( _5666_rcconst,_5670_codei )] = _ptr__5645_wf64[safe_add( _5642_cconst,_5678_l )];
                        ++ _5670_codei;
                      }
                    }
                    _ptr__5667_ri32[safe_add( _5664_rcode,_5670_codei )] = 2;
                    _ptr__5669_rf64[safe_add( _5666_rcconst,_5670_codei )] = ((*mcof)(_5674_i));
                    ++ _5670_codei;
                    _ptr__5667_ri32[safe_add( _5664_rcode,_5670_codei )] = 5;
                    ++ _5670_codei;
                    _ptr__5667_ri32[safe_add( safe_add( _5665_rcodeptr,_5672_nzi ),(int)1 )] = _5670_codei;
                  }
                }
                {}
                ++ _5672_nzi;
              }
            }
            _ptr__5667_ri32[safe_add( safe_add( _5659_rptr,_5674_i ),(int)1 )] = _5672_nzi;
            _ptr__5668_ri64[safe_add( _5662_rsp,_5674_i )] = ((*msp)(_5674_i));
          }
        }
      }
    }
    else
    {
      {
        int32_t _5679_e0 = (int)((msp)->size(0));
        int32_t _5680_i0 = (int)0;
        int32_t _5681_e1 = _5631_nelem;
        int32_t _5682_i1 = (int)0;
        while ( ((_5680_i0 < _5679_e0) && (_5682_i1 < _5681_e1)) )
        {
          {
            if ((((*msp)(_5680_i0)) < _ptr__5644_wi64[safe_add( _5638_sp,_5682_i1 )]))
            {
              {
                ++ _5680_i0;
              }
            }
            else if((((*msp)(_5680_i0)) > _ptr__5644_wi64[safe_add( _5638_sp,_5682_i1 )]))
            {
              {
                ++ _5682_i1;
              }
            }
            else
            {
              {
                int32_t _5683_p0 = _ptr__5643_wi32[safe_add( _5636_ptr,_5682_i1 )];
                int32_t _5684_p1 = _ptr__5643_wi32[safe_add( safe_add( _5636_ptr,_5682_i1 ),(int)1 )];
                int32_t _11544_ = _5683_p0;
                int32_t _11545_ = _5684_p1;
                for (int32_t _5685_j = _11544_; _5685_j < _11545_; ++_5685_j)
                {
                  {
                    _ptr__5668_ri64[safe_add( _5661_rnidx,_5672_nzi )] = _ptr__5644_wi64[safe_add( _5637_nidxs,_5685_j )];
                    _ptr__5669_rf64[safe_add( _5663_rcof,_5672_nzi )] = (_ptr__5645_wf64[safe_add( _5637_nidxs,_5685_j )] * ((*mcof)(_5680_i0)));
                    if ((_5633_ncodeatom > (int)0))
                    {
                      {
                        int32_t _11546_ = _ptr__5643_wi32[safe_add( _5641_codeptr,_5685_j )];
                        int32_t _11547_ = _ptr__5643_wi32[safe_add( safe_add( _5641_codeptr,_5685_j ),(int)1 )];
                        for (int32_t _5686_l = _11546_; _5686_l < _11547_; ++_5686_l)
                        {
                          {
                            _ptr__5667_ri32[safe_add( _5664_rcode,_5670_codei )] = _ptr__5643_wi32[safe_add( _5640_code,_5686_l )];
                            _ptr__5669_rf64[safe_add( _5666_rcconst,_5670_codei )] = _ptr__5645_wf64[safe_add( _5642_cconst,_5686_l )];
                            ++ _5670_codei;
                          }
                        }
                        _ptr__5667_ri32[safe_add( _5664_rcode,_5670_codei )] = 2;
                        _ptr__5669_rf64[safe_add( _5666_rcconst,_5670_codei )] = ((*mcof)(_5680_i0));
                        ++ _5670_codei;
                        _ptr__5667_ri32[safe_add( _5664_rcode,_5670_codei )] = 5;
                        ++ _5670_codei;
                        _ptr__5667_ri32[safe_add( safe_add( _5665_rcodeptr,_5672_nzi ),(int)1 )] = _5670_codei;
                      }
                    }
                    {}
                    ++ _5672_nzi;
                  }
                }
                _ptr__5667_ri32[safe_add( safe_add( _5659_rptr,_5671_elmi ),(int)1 )] = _5672_nzi;
                _ptr__5668_ri64[safe_add( _5662_rsp,_5671_elmi )] = ((*msp)(_5680_i0));
                ++ _5671_elmi;
                ++ _5680_i0;
                ++ _5682_i1;
              }
            }
          }
        }
      }
    }
  }
  if ((!_5657_rhassp))
  {
    {
      _5627_rs->popi64(_5648_rnelem);
    }
  }
  {}
}
// End mosek.fusion.ExprMulElement.eval

// Begin mosek.fusion.ExprMulElement.toString
// Method mosek.fusion.ExprMulElement.toString @ src/fusion/ExprMul.monty:1367:6-135
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulElement::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulElement(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulElement.toString

void mosek::fusion::p_ExprMulElement::destroy()
{
  expr.reset();
  msp.reset();
  mcof.reset();
}
void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }
// } class ExprMulElement
// class ExprMulScalarConst { // @ src/fusion/ExprMul.monty:1258:4-1349:5
mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }
mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst
  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulScalarConst.ctor @ src/fusion/ExprMul.monty:1267:6-1272:7
mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst
  (double _5687_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _5688_expr)
{ return new mosek::fusion::ExprMulScalarConst(_5687_c,_5688_expr); }
mosek::fusion::ExprMulScalarConst::ExprMulScalarConst
  (double _5687_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _5688_expr) : 
   ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this))
{ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_5687_c,_5688_expr); }
void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _5687_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _5688_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_5688_expr->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _5687_c;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _5688_expr;
  }
}
// mosek.fusion.ExprMulScalarConst.ctor

// Begin mosek.fusion.ExprMulScalarConst.eval
// Method mosek.fusion.ExprMulScalarConst.eval @ src/fusion/ExprMul.monty:1274:6-1348:7
void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5689_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5690_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5691_xs) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_5689_rs,_5690_ws,_5691_xs); }
void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5689_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5690_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5691_xs)
{
  expr->eval(_5690_ws,_5689_rs,_5691_xs);
  _5690_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5692_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5692_wi32(_5692_wi32 ? _5692_wi32->raw() : nullptr,_5692_wi32 ? _5692_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5693_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5693_wi64(_5693_wi64 ? _5693_wi64->raw() : nullptr,_5693_wi64 ? _5693_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5694_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->f64;
  _checked_ptr_1<double> _ptr__5694_wf64(_5694_wf64 ? _5694_wf64->raw() : nullptr,_5694_wf64 ? _5694_wf64->size(0) : 0);
  int32_t _5695_nd = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->nd;
  int32_t _5696_nelem = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->nelem;
  int32_t _5697_nnz = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->nnz;
  bool _5698_hassp = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->hassp;
  int32_t _5699_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->ncodeatom;
  int32_t _5700_ptr = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->ptr_base;
  int32_t _5701_code = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->code_base;
  int32_t _5702_cconst = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->cconst_base;
  int32_t _5703_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->codeptr_base;
  int32_t _5704_shape = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->shape_base;
  int32_t _5705_sp = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->sp_base;
  int32_t _5706_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->nidxs_base;
  int32_t _5707_cof = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->cof_base;
  int32_t _5708_consts = mosek::fusion::p_WorkStack::_get_impl(_5690_ws)->cconst_base;
  int32_t _11548_;
  bool _11549_ = (_5699_ncodeatom == (int)0);
  if (_11549_)
  {
    _11548_ = (int)0;
  }
  else
  {
    _11548_ = safe_add( _5699_ncodeatom,safe_mul( (int)2,_5697_nnz ) );
  }
  int32_t _5709_rncodeatom = _11548_;
  _5689_rs->alloc_expr(_5695_nd,_5696_nelem,_5697_nnz,_5698_hassp,_5709_rncodeatom);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5710_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5710_ri64(_5710_ri64 ? _5710_ri64->raw() : nullptr,_5710_ri64 ? _5710_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5711_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->f64;
  _checked_ptr_1<double> _ptr__5711_rf64(_5711_rf64 ? _5711_rf64->raw() : nullptr,_5711_rf64 ? _5711_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5712_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5712_ri32(_5712_ri32 ? _5712_ri32->raw() : nullptr,_5712_ri32 ? _5712_ri32->size(0) : 0);
  int32_t _5713_rptr = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->ptr_base;
  int32_t _5714_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->nidxs_base;
  int32_t _5715_rcof = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->cof_base;
  int32_t _5716_rcode = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->code_base;
  int32_t _5717_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->codeptr_base;
  int32_t _5718_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->cconst_base;
  bool _5719_rhassp = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->hassp;
  int32_t _5720_rshape = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->shape_base;
  int32_t _5721_rsp = mosek::fusion::p_WorkStack::_get_impl(_5689_rs)->sp_base;
  {
    int32_t _11550_ = (int)0;
    int32_t _11551_ = safe_add( _5696_nelem,(int)1 );
    for (int32_t _5722_i = _11550_; _5722_i < _11551_; ++_5722_i)
    {
      {
        _ptr__5712_ri32[safe_add( _5713_rptr,_5722_i )] = _ptr__5692_wi32[safe_add( _5700_ptr,_5722_i )];
      }
    }
    int32_t _11552_ = (int)0;
    int32_t _11553_ = _5697_nnz;
    for (int32_t _5723_i = _11552_; _5723_i < _11553_; ++_5723_i)
    {
      {
        _ptr__5710_ri64[safe_add( _5714_rnidxs,_5723_i )] = _ptr__5693_wi64[safe_add( _5706_nidxs,_5723_i )];
        _ptr__5711_rf64[safe_add( _5715_rcof,_5723_i )] = (_ptr__5694_wf64[safe_add( _5707_cof,_5723_i )] * c);
      }
    }
    if (_5698_hassp)
    {
      {
        int32_t _11554_ = (int)0;
        int32_t _11555_ = _5696_nelem;
        for (int32_t _5724_i = _11554_; _5724_i < _11555_; ++_5724_i)
        {
          {
            _ptr__5710_ri64[safe_add( _5721_rsp,_5724_i )] = _ptr__5693_wi64[safe_add( _5705_sp,_5724_i )];
          }
        }
      }
    }
    {}
    int32_t _11556_ = (int)0;
    int32_t _11557_ = _5695_nd;
    for (int32_t _5725_i = _11556_; _5725_i < _11557_; ++_5725_i)
    {
      {
        _ptr__5712_ri32[safe_add( _5720_rshape,_5725_i )] = _ptr__5692_wi32[safe_add( _5704_shape,_5725_i )];
      }
    }
    if ((_5699_ncodeatom > (int)0))
    {
      {
        _ptr__5712_ri32[_5717_rcodeptr] = (int)0;
        int32_t _5726_codei = (int)0;
        int32_t _11558_ = (int)0;
        int32_t _11559_ = _5697_nnz;
        for (int32_t _5727_j = _11558_; _5727_j < _11559_; ++_5727_j)
        {
          {
            int32_t _11560_ = _ptr__5692_wi32[safe_add( _5703_codeptr,_5727_j )];
            int32_t _11561_ = _ptr__5692_wi32[safe_add( safe_add( _5703_codeptr,_5727_j ),(int)1 )];
            for (int32_t _5728_k = _11560_; _5728_k < _11561_; ++_5728_k)
            {
              {
                _ptr__5712_ri32[safe_add( _5716_rcode,_5726_codei )] = _ptr__5692_wi32[safe_add( _5701_code,_5728_k )];
                _ptr__5711_rf64[safe_add( _5718_rcconst,_5726_codei )] = _ptr__5694_wf64[safe_add( _5702_cconst,_5728_k )];
                ++ _5726_codei;
              }
            }
            _ptr__5712_ri32[safe_add( _5716_rcode,_5726_codei )] = 2;
            _ptr__5711_rf64[safe_add( _5718_rcconst,_5726_codei )] = c;
            ++ _5726_codei;
            _ptr__5712_ri32[safe_add( _5716_rcode,_5726_codei )] = 5;
            ++ _5726_codei;
            _ptr__5712_ri32[safe_add( safe_add( _5717_rcodeptr,_5727_j ),(int)1 )] = _5726_codei;
          }
        }
      }
    }
    {}
  }
}
// End mosek.fusion.ExprMulScalarConst.eval

// Begin mosek.fusion.ExprMulScalarConst.toString
// Method mosek.fusion.ExprMulScalarConst.toString @ src/fusion/ExprMul.monty:1265:6-73
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulScalarConst::toString()
{
  return std::string ("ExprMulScalarConst()");
}
// End mosek.fusion.ExprMulScalarConst.toString

void mosek::fusion::p_ExprMulScalarConst::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }
// } class ExprMulScalarConst
// class ExprScalarMul { // @ src/fusion/ExprMul.monty:1054:4-1247:5
mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }
mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprScalarMul::p_ExprScalarMul
  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprScalarMul.ctor @ src/fusion/ExprMul.monty:1133:6-1152:7
mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul
  (int32_t _5729_mdim0,
    int32_t _5730_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5731_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5732_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5733_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5734_expr,
    int32_t _5735_validated)
{ return new mosek::fusion::ExprScalarMul(_5729_mdim0,_5730_mdim1,_5731_msubi,_5732_msubj,_5733_mval,_5734_expr,_5735_validated); }
mosek::fusion::ExprScalarMul::ExprScalarMul
  (int32_t _5729_mdim0,
    int32_t _5730_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5731_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5732_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5733_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5734_expr,
    int32_t _5735_validated) : 
   ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this))
{ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5729_mdim0,_5730_mdim1,_5731_msubi,_5732_msubj,_5733_mval,_5734_expr,_5735_validated); }
void mosek::fusion::p_ExprScalarMul::_initialize  (int32_t _5729_mdim0,
    int32_t _5730_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5731_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5732_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5733_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5734_expr,
    int32_t _5735_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5731_msubi(_5731_msubi ? _5731_msubi->raw() : nullptr, _5731_msubi ? _5731_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5732_msubj(_5732_msubj ? _5732_msubj->raw() : nullptr, _5732_msubj ? _5732_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5733_mval(_5733_mval ? _5733_mval->raw() : nullptr, _5733_mval ? _5733_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_5729_mdim0),(int32_t)(_5730_mdim1)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _5729_mdim0;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _5730_mdim1;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _5731_msubi;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _5732_msubj;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _5733_mval;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _5734_expr;
  }
}
// mosek.fusion.ExprScalarMul.ctor

// mosek.fusion.ExprScalarMul.ctor @ src/fusion/ExprMul.monty:1121:6-1131:7
mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul
  (int32_t _5736_mdim0,
    int32_t _5737_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5738_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5739_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5740_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5741_expr)
{ return new mosek::fusion::ExprScalarMul(_5736_mdim0,_5737_mdim1,_5738_msubi,_5739_msubj,_5740_mval,_5741_expr); }
mosek::fusion::ExprScalarMul::ExprScalarMul
  (int32_t _5736_mdim0,
    int32_t _5737_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5738_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5739_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5740_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5741_expr) : 
   ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this))
{ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5736_mdim0,_5737_mdim1,_5738_msubi,_5739_msubj,_5740_mval,_5741_expr); }
void mosek::fusion::p_ExprScalarMul::_initialize  (int32_t _5736_mdim0,
    int32_t _5737_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5738_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5739_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5740_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5741_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5738_msubi(_5738_msubi ? _5738_msubi->raw() : nullptr, _5738_msubi ? _5738_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5739_msubj(_5739_msubj ? _5739_msubj->raw() : nullptr, _5739_msubj ? _5739_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5740_mval(_5740_mval ? _5740_mval->raw() : nullptr, _5740_mval ? _5740_mval->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_5736_mdim0,_5737_mdim1,_5738_msubi,_5739_msubj,_5740_mval,_5741_expr,::mosek::fusion::p_ExprScalarMul::validate(_5736_mdim0,_5737_mdim1,_5738_msubi,_5739_msubj,_5740_mval,_5741_expr));
  }
}
// mosek.fusion.ExprScalarMul.ctor

// Begin mosek.fusion.ExprScalarMul.eval
// Method mosek.fusion.ExprScalarMul.eval @ src/fusion/ExprMul.monty:1154:6-1246:7
void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5742_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5743_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5744_xs) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_5742_rs,_5743_ws,_5744_xs); }
void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5742_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5743_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5744_xs)
{
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_5743_ws,_5742_rs,_5744_xs);
  _5743_ws->pop_expr();
  int32_t _5745_nd = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->nd;
  int32_t _5746_nelem = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->nelem;
  int32_t _5747_nnz = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->nnz;
  bool _5748_hassp = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->hassp;
  int32_t _5749_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->ncodeatom;
  int32_t _5750_ptr = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->ptr_base;
  int32_t _5751_sp = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->sp_base;
  int32_t _5752_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->nidxs_base;
  int32_t _5753_cof = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->cof_base;
  int32_t _5754_code = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->code_base;
  int32_t _5755_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->codeptr_base;
  int32_t _5756_cconst = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5757_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5757_wi32(_5757_wi32 ? _5757_wi32->raw() : nullptr,_5757_wi32 ? _5757_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5758_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5758_wi64(_5758_wi64 ? _5758_wi64->raw() : nullptr,_5758_wi64 ? _5758_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5759_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5743_ws)->f64;
  _checked_ptr_1<double> _ptr__5759_wf64(_5759_wf64 ? _5759_wf64->raw() : nullptr,_5759_wf64 ? _5759_wf64->size(0) : 0);
  int32_t _5760_mnumnz = (int)((mval)->size(0));
  if ((_5745_nd != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_5746_nelem == (int)0))
  {
    {
      _5742_rs->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      int32_t _11562_;
      bool _11563_ = (_5749_ncodeatom > (int)0);
      if (_11563_)
      {
        _11562_ = safe_mul( (int)2,_5747_nnz );
      }
      else
      {
        _11562_ = (int)0;
      }
      int32_t _5761_rncodeatom = safe_mul( _5760_mnumnz,safe_add( _5749_ncodeatom,_11562_ ) );
      _5742_rs->alloc_expr((int)2,_5760_mnumnz,safe_mul( _5760_mnumnz,_5747_nnz ),true,_5761_rncodeatom);
      int32_t _5762_rptr = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->ptr_base;
      int32_t _5763_rnidx = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->nidxs_base;
      int32_t _5764_rsp = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->sp_base;
      int32_t _5765_rcof = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->cof_base;
      int32_t _5766_rshape = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->shape_base;
      int32_t _5767_rcode = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->code_base;
      int32_t _5768_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->codeptr_base;
      int32_t _5769_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5770_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5770_ri32(_5770_ri32 ? _5770_ri32->raw() : nullptr,_5770_ri32 ? _5770_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5771_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5771_ri64(_5771_ri64 ? _5771_ri64->raw() : nullptr,_5771_ri64 ? _5771_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5772_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5742_rs)->f64;
      _checked_ptr_1<double> _ptr__5772_rf64(_5772_rf64 ? _5772_rf64->raw() : nullptr,_5772_rf64 ? _5772_rf64->size(0) : 0);
      _ptr__5770_ri32[_5766_rshape] = mdim0;
      _ptr__5770_ri32[safe_add( _5766_rshape,(int)1 )] = mdim1;
      int32_t _5773_codei = (int)0;
      int32_t _5774_nzi = (int)0;
      _ptr__5770_ri32[_5762_rptr] = (int)0;
      if ((_5749_ncodeatom > (int)0))
      {
        {
          _ptr__5770_ri32[_5768_rcodeptr] = (int)0;
          int32_t _11564_ = (int)0;
          int32_t _11565_ = _5760_mnumnz;
          for (int32_t _5775_i = _11564_; _5775_i < _11565_; ++_5775_i)
          {
            {
              int32_t _11566_ = (int)0;
              int32_t _11567_ = _5747_nnz;
              for (int32_t _5776_j = _11566_; _5776_j < _11567_; ++_5776_j)
              {
                {
                  _ptr__5771_ri64[safe_add( _5763_rnidx,_5774_nzi )] = _ptr__5758_wi64[safe_add( _5752_nidxs,_5776_j )];
                  _ptr__5772_rf64[safe_add( _5765_rcof,_5774_nzi )] = (_ptr__5759_wf64[safe_add( _5753_cof,_5776_j )] * ((*mval)(_5775_i)));
                  int32_t _11568_ = _ptr__5757_wi32[safe_add( _5755_codeptr,_5776_j )];
                  int32_t _11569_ = _ptr__5757_wi32[safe_add( safe_add( _5755_codeptr,_5776_j ),(int)1 )];
                  for (int32_t _5777_k = _11568_; _5777_k < _11569_; ++_5777_k)
                  {
                    {
                      _ptr__5770_ri32[safe_add( _5767_rcode,_5773_codei )] = _ptr__5757_wi32[safe_add( _5754_code,_5777_k )];
                      _ptr__5772_rf64[safe_add( _5769_rcconst,_5773_codei )] = _ptr__5759_wf64[safe_add( _5756_cconst,_5777_k )];
                      ++ _5773_codei;
                    }
                  }
                  _ptr__5770_ri32[safe_add( _5767_rcode,_5773_codei )] = 2;
                  _ptr__5772_rf64[safe_add( _5769_rcconst,_5773_codei )] = ((*mval)(_5775_i));
                  ++ _5773_codei;
                  _ptr__5770_ri32[safe_add( _5767_rcode,_5773_codei )] = 5;
                  ++ _5773_codei;
                  _ptr__5770_ri32[safe_add( safe_add( _5768_rcodeptr,_5774_nzi ),(int)1 )] = _5773_codei;
                  ++ _5774_nzi;
                }
              }
              _ptr__5771_ri64[safe_add( _5764_rsp,_5775_i )] = safe_add( safe_mul( ((*msubi)(_5775_i)),mdim1 ),((*msubj)(_5775_i)) );
              _ptr__5770_ri32[safe_add( safe_add( _5762_rptr,_5775_i ),(int)1 )] = _5774_nzi;
            }
          }
        }
      }
      else
      {
        {
          int32_t _11570_ = (int)0;
          int32_t _11571_ = _5760_mnumnz;
          for (int32_t _5778_i = _11570_; _5778_i < _11571_; ++_5778_i)
          {
            {
              int32_t _11572_ = (int)0;
              int32_t _11573_ = _5747_nnz;
              for (int32_t _5779_j = _11572_; _5779_j < _11573_; ++_5779_j)
              {
                {
                  _ptr__5771_ri64[safe_add( _5763_rnidx,_5774_nzi )] = _ptr__5758_wi64[safe_add( _5752_nidxs,_5779_j )];
                  _ptr__5772_rf64[safe_add( _5765_rcof,_5774_nzi )] = (_ptr__5759_wf64[safe_add( _5753_cof,_5779_j )] * ((*mval)(_5778_i)));
                  ++ _5774_nzi;
                }
              }
              _ptr__5771_ri64[safe_add( _5764_rsp,_5778_i )] = safe_add( safe_mul( ((*msubi)(_5778_i)),mdim1 ),((*msubj)(_5778_i)) );
              _ptr__5770_ri32[safe_add( safe_add( _5762_rptr,_5778_i ),(int)1 )] = _5774_nzi;
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprScalarMul.eval

// Begin mosek.fusion.ExprScalarMul.validate
// Method mosek.fusion.ExprScalarMul.validate @ src/fusion/ExprMul.monty:1067:6-1106:7
int32_t mosek::fusion::p_ExprScalarMul::validate(int32_t _5780_mdim0,int32_t _5781_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5782_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5783_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5784_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5785_expr)
{
  _checked_ptr_1<int32_t> _ptr__5782_msubi(_5782_msubi ? _5782_msubi->raw() : nullptr, _5782_msubi ? _5782_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5783_msubj(_5783_msubj ? _5783_msubj->raw() : nullptr, _5783_msubj ? _5783_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5784_mval(_5784_mval ? _5784_mval->raw() : nullptr, _5784_mval ? _5784_mval->size(0) : 0);
  int32_t _5786_nd = _5785_expr->getND();
  if ((_5786_nd != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5780_mdim0 < (int)0) || (_5781_mdim1 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_5782_msubi)->size(0)) != (int)((_5783_msubj)->size(0))) || ((int)((_5782_msubi)->size(0)) != (int)((_5784_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5787_mnnz = (int)((_5782_msubi)->size(0));
  bool _5788_err_data = false;
  bool _5789_err_sorted = false;
  {
    int32_t _11574_ = (int)0;
    int32_t _11575_ = _5787_mnnz;
    for (int32_t _5790_i = _11574_; _5790_i < _11575_; ++_5790_i)
    {
      {
        if (((_ptr__5782_msubi[_5790_i] < (int)0) || ((_ptr__5782_msubi[_5790_i] >= _5780_mdim0) || ((_ptr__5783_msubj[_5790_i] < (int)0) || (_ptr__5783_msubj[_5790_i] >= _5781_mdim1)))))
        {
          {
            _5788_err_data = true;
          }
        }
        {}
      }
    }
    int32_t _11576_ = (int)0;
    int32_t _11577_ = (_5787_mnnz - (int)1);
    for (int32_t _5791_i = _11576_; _5791_i < _11577_; ++_5791_i)
    {
      {
        if (((_ptr__5782_msubi[_5791_i] > _ptr__5782_msubi[safe_add( _5791_i,(int)1 )]) || ((_ptr__5782_msubi[_5791_i] == _ptr__5782_msubi[safe_add( _5791_i,(int)1 )]) && (_ptr__5783_msubj[_5791_i] >= _ptr__5783_msubj[safe_add( _5791_i,(int)1 )]))))
        {
          {
            _5789_err_sorted = true;
          }
        }
        {}
      }
    }
  }
  if (_5788_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5789_err_sorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprScalarMul.validate

// Begin mosek.fusion.ExprScalarMul.toString
// Method mosek.fusion.ExprScalarMul.toString @ src/fusion/ExprMul.monty:1065:6-134
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprScalarMul::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprScalarMul.toString

void mosek::fusion::p_ExprScalarMul::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }
// } class ExprScalarMul
// class ExprMulRight { // @ src/fusion/ExprMul.monty:480:4-1041:5
mosek::fusion::ExprMulRight::ExprMulRight(mosek::fusion::p_ExprMulRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulRight()" << this << std::endl; */ }
mosek::fusion::ExprMulRight::~ExprMulRight() {  /* std::cout << "~ExprMulRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulRight::p_ExprMulRight
  (::mosek::fusion::ExprMulRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulRight.ctor @ src/fusion/ExprMul.monty:575:6-593:7
mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight
  (int32_t _5792_mdim0,
    int32_t _5793_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5794_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5795_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5796_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5797_expr,
    int32_t _5798_validated)
{ return new mosek::fusion::ExprMulRight(_5792_mdim0,_5793_mdim1,_5794_msubi,_5795_msubj,_5796_mval,_5797_expr,_5798_validated); }
mosek::fusion::ExprMulRight::ExprMulRight
  (int32_t _5792_mdim0,
    int32_t _5793_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5794_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5795_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5796_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5797_expr,
    int32_t _5798_validated) : 
   ExprMulRight(new mosek::fusion::p_ExprMulRight(this))
{ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5792_mdim0,_5793_mdim1,_5794_msubi,_5795_msubj,_5796_mval,_5797_expr,_5798_validated); }
void mosek::fusion::p_ExprMulRight::_initialize  (int32_t _5792_mdim0,
    int32_t _5793_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5794_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5795_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5796_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5797_expr,
    int32_t _5798_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5794_msubi(_5794_msubi ? _5794_msubi->raw() : nullptr, _5794_msubi ? _5794_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5795_msubj(_5795_msubj ? _5795_msubj->raw() : nullptr, _5795_msubj ? _5795_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5796_mval(_5796_mval ? _5796_mval->raw() : nullptr, _5796_mval ? _5796_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulRight::computeshape(_5793_mdim1,_5797_expr->getShape()));
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim0 = _5792_mdim0;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim1 = _5793_mdim1;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubi = _5794_msubi;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubj = _5795_msubj;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mval = _5796_mval;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr = _5797_expr;
  }
}
// mosek.fusion.ExprMulRight.ctor

// mosek.fusion.ExprMulRight.ctor @ src/fusion/ExprMul.monty:556:6-566:7
mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight
  (int32_t _5799_mdim0,
    int32_t _5800_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5801_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5802_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5803_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5804_expr)
{ return new mosek::fusion::ExprMulRight(_5799_mdim0,_5800_mdim1,_5801_msubi,_5802_msubj,_5803_mval,_5804_expr); }
mosek::fusion::ExprMulRight::ExprMulRight
  (int32_t _5799_mdim0,
    int32_t _5800_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5801_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5802_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5803_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5804_expr) : 
   ExprMulRight(new mosek::fusion::p_ExprMulRight(this))
{ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5799_mdim0,_5800_mdim1,_5801_msubi,_5802_msubj,_5803_mval,_5804_expr); }
void mosek::fusion::p_ExprMulRight::_initialize  (int32_t _5799_mdim0,
    int32_t _5800_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5801_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5802_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5803_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5804_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5801_msubi(_5801_msubi ? _5801_msubi->raw() : nullptr, _5801_msubi ? _5801_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5802_msubj(_5802_msubj ? _5802_msubj->raw() : nullptr, _5802_msubj ? _5802_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5803_mval(_5803_mval ? _5803_mval->raw() : nullptr, _5803_mval ? _5803_mval->size(0) : 0);
    mosek::fusion::p_ExprMulRight::_initialize(_5799_mdim0,_5800_mdim1,_5801_msubi,_5802_msubj,_5803_mval,_5804_expr,::mosek::fusion::p_ExprMulRight::validate(_5799_mdim0,_5800_mdim1,_5801_msubi,_5802_msubj,_5803_mval,_5804_expr));
  }
}
// mosek.fusion.ExprMulRight.ctor

// Begin mosek.fusion.ExprMulRight.eval
// Method mosek.fusion.ExprMulRight.eval @ src/fusion/ExprMul.monty:596:6-1040:7
void mosek::fusion::ExprMulRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5805_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5806_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5807_xs) { mosek::fusion::p_ExprMulRight::_get_impl(this)->eval(_5805_rs,_5806_ws,_5807_xs); }
void mosek::fusion::p_ExprMulRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5805_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5806_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5807_xs)
{
  mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr->eval(_5806_ws,_5805_rs,_5807_xs);
  _5806_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5808_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5808_wi32(_5808_wi32 ? _5808_wi32->raw() : nullptr,_5808_wi32 ? _5808_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5809_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5809_wi64(_5809_wi64 ? _5809_wi64->raw() : nullptr,_5809_wi64 ? _5809_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5810_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->f64;
  _checked_ptr_1<double> _ptr__5810_wf64(_5810_wf64 ? _5810_wf64->raw() : nullptr,_5810_wf64 ? _5810_wf64->size(0) : 0);
  int32_t _5811_nd = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->nd;
  if ((_5811_nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int32_t _5812_nelem = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->nelem;
  int32_t _5813_nnz = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->nnz;
  int32_t _5814_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->ncodeatom;
  bool _5815_hassp = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->hassp;
  int32_t _5816_ptr = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->ptr_base;
  int32_t _5817_shape = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->shape_base;
  int32_t _5818_sp = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->sp_base;
  int32_t _5819_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->nidxs_base;
  int32_t _5820_cof = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->cof_base;
  int32_t _5821_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->codeptr_base;
  int32_t _5822_code = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->code_base;
  int32_t _5823_cconst = mosek::fusion::p_WorkStack::_get_impl(_5806_ws)->cconst_base;
  int32_t _5824_edim0 = _ptr__5808_wi32[_5817_shape];
  int32_t _5825_edim1 = _ptr__5808_wi32[safe_add( _5817_shape,(int)1 )];
  int32_t _5826_mnnz = (int)((mval)->size(0));
  bool _5827_msp = (_5826_mnnz < safe_mul( (int64_t)mdim0,(int64_t)mdim1 ));
  if (_5827_msp)
  {
    {
      int32_t _5828_mcolptr = _5807_xs->alloci32(safe_add( mdim1,(int)1 ));
      int32_t _5829_mperm = _5807_xs->alloci32(_5826_mnnz);
      int32_t _5830_erowptr = _5807_xs->alloci32(safe_add( _5824_edim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5831_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5807_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__5831_xi32(_5831_xi32 ? _5831_xi32->raw() : nullptr,_5831_xi32 ? _5831_xi32->size(0) : 0);
      {
        int32_t _11578_ = (int)0;
        int32_t _11579_ = safe_add( mdim1,(int)1 );
        for (int32_t _5832_i = _11578_; _5832_i < _11579_; ++_5832_i)
        {
          {
            _ptr__5831_xi32[safe_add( _5828_mcolptr,_5832_i )] = (int)0;
          }
        }
        int32_t _11580_ = (int)0;
        int32_t _11581_ = _5826_mnnz;
        for (int32_t _5833_i = _11580_; _5833_i < _11581_; ++_5833_i)
        {
          {
            ++ _ptr__5831_xi32[safe_add( safe_add( _5828_mcolptr,((*msubj)(_5833_i)) ),(int)1 )];
          }
        }
        int32_t _11582_ = (int)0;
        int32_t _11583_ = mdim1;
        for (int32_t _5834_i = _11582_; _5834_i < _11583_; ++_5834_i)
        {
          {
            _ptr__5831_xi32[safe_add( safe_add( _5828_mcolptr,_5834_i ),(int)1 )] += _ptr__5831_xi32[safe_add( _5828_mcolptr,_5834_i )];
          }
        }
        int32_t _11584_ = (int)0;
        int32_t _11585_ = _5826_mnnz;
        for (int32_t _5835_i = _11584_; _5835_i < _11585_; ++_5835_i)
        {
          {
            _ptr__5831_xi32[safe_add( _5829_mperm,_ptr__5831_xi32[safe_add( _5828_mcolptr,((*msubj)(_5835_i)) )] )] = _5835_i;
            ++ _ptr__5831_xi32[safe_add( _5828_mcolptr,((*msubj)(_5835_i)) )];
          }
        }
        int32_t _11586_ = (int)0;
        int32_t _11587_ = mdim1;
        for (int32_t _5836_i = _11586_; _5836_i < _11587_; ++_5836_i)
        {
          {
            _ptr__5831_xi32[(safe_add( _5828_mcolptr,mdim1 ) - _5836_i)] = _ptr__5831_xi32[((safe_add( _5828_mcolptr,mdim1 ) - _5836_i) - (int)1)];
          }
        }
        _ptr__5831_xi32[_5828_mcolptr] = (int)0;
        int32_t _11588_ = (int)0;
        int32_t _11589_ = safe_add( _5824_edim0,(int)1 );
        for (int32_t _5837_i = _11588_; _5837_i < _11589_; ++_5837_i)
        {
          {
            _ptr__5831_xi32[safe_add( _5830_erowptr,_5837_i )] = (int)0;
          }
        }
      }
      if (_5815_hassp)
      {
        {
          int32_t _5838_rncodeatom = (int)0;
          int32_t _5839_rnelem = (int)0;
          int64_t _5840_rnnz = (int64_t)0;
          {
            int32_t _5841_i0 = (int)0;
            while ( (_5841_i0 < _5812_nelem) )
            {
              {
                int64_t _5842_erow = (_ptr__5809_wi64[safe_add( _5818_sp,_5841_i0 )] / _5825_edim1);
                int32_t _5843_b0 = _5841_i0;
                ++ _5841_i0;
                while ( ((_5841_i0 < _5812_nelem) && ((_ptr__5809_wi64[safe_add( _5818_sp,_5841_i0 )] / _5825_edim1) == _5842_erow)) )
                {
                  {
                    ++ _5841_i0;
                  }
                }
                int32_t _5844_e0 = _5841_i0;
                int32_t _5845_i1 = (int)0;
                while ( (_5845_i1 < _5826_mnnz) )
                {
                  {
                    int32_t _5846_mcol = ((*msubj)(_ptr__5831_xi32[safe_add( _5829_mperm,_5845_i1 )]));
                    int32_t _5847_b1 = _5845_i1;
                    ++ _5845_i1;
                    while ( ((_5845_i1 < _5826_mnnz) && (((*msubj)(_ptr__5831_xi32[safe_add( _5829_mperm,_5845_i1 )])) == _5846_mcol)) )
                    {
                      {
                        ++ _5845_i1;
                      }
                    }
                    int32_t _5848_e1 = _5845_i1;
                    bool _5849_hasnz = false;
                    int32_t _5850_ii1 = _5847_b1;
                    int32_t _5851_ii0 = _5843_b0;
                    while ( ((_5851_ii0 < _5844_e0) && (_5850_ii1 < _5848_e1)) )
                    {
                      {
                        int32_t _5852_ip1 = _ptr__5831_xi32[safe_add( _5829_mperm,_5850_ii1 )];
                        if (((_ptr__5809_wi64[safe_add( _5818_sp,_5851_ii0 )] % _5825_edim1) < ((*msubi)(_5852_ip1))))
                        {
                          {
                            ++ _5851_ii0;
                          }
                        }
                        else if(((_ptr__5809_wi64[safe_add( _5818_sp,_5851_ii0 )] % _5825_edim1) > ((*msubi)(_5852_ip1))))
                        {
                          {
                            ++ _5850_ii1;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5852_ip1)) > (int)0) || ((int)0 < ((*mval)(_5852_ip1)))))
                            {
                              {
                                _5840_rnnz += (_ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5851_ii0 ),(int)1 )] - _ptr__5808_wi32[safe_add( _5816_ptr,_5851_ii0 )]);
                                if ((_5814_ncodeatom > (int)0))
                                {
                                  {
                                    _5838_rncodeatom += safe_add( (_ptr__5808_wi32[safe_add( _5821_codeptr,_ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5851_ii0 ),(int)1 )] )] - _ptr__5808_wi32[safe_add( _5821_codeptr,_ptr__5808_wi32[safe_add( _5816_ptr,_5851_ii0 )] )]),safe_mul( (int)2,(_ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5851_ii0 ),(int)1 )] - _ptr__5808_wi32[safe_add( _5816_ptr,_5851_ii0 )]) ) );
                                  }
                                }
                                {}
                                _5849_hasnz = true;
                              }
                            }
                            {}
                            ++ _5851_ii0;
                            ++ _5850_ii1;
                          }
                        }
                      }
                    }
                    if (_5849_hasnz)
                    {
                      {
                        ++ _5839_rnelem;
                      }
                    }
                    {}
                  }
                }
              }
            }
          }
          bool _5853_rhassp = (_5839_rnelem < safe_mul( _5824_edim0,mdim1 ));
          _5805_rs->alloc_expr((int)2,_5839_rnelem,(int32_t)_5840_rnnz,_5853_rhassp,_5838_rncodeatom);
          int32_t _5854_rptr = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->ptr_base;
          int32_t _5855_ridxs = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->nidxs_base;
          int32_t _11590_;
          bool _11591_ = _5853_rhassp;
          if (_11591_)
          {
            _11590_ = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->sp_base;
          }
          else
          {
            _11590_ = _5805_rs->alloci64(_5839_rnelem);
          }
          int32_t _5856_rsp = _11590_;
          int32_t _5857_rcof = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->cof_base;
          int32_t _5858_rshape = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->shape_base;
          int32_t _5859_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->codeptr_base;
          int32_t _5860_rcode = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->code_base;
          int32_t _5861_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->cconst_base;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5862_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5862_ri32(_5862_ri32 ? _5862_ri32->raw() : nullptr,_5862_ri32 ? _5862_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5863_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5863_ri64(_5863_ri64 ? _5863_ri64->raw() : nullptr,_5863_ri64 ? _5863_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5864_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->f64;
          _checked_ptr_1<double> _ptr__5864_rf64(_5864_rf64 ? _5864_rf64->raw() : nullptr,_5864_rf64 ? _5864_rf64->size(0) : 0);
          _ptr__5862_ri32[_5858_rshape] = _5824_edim0;
          _ptr__5862_ri32[safe_add( _5858_rshape,(int)1 )] = mdim1;
          _ptr__5862_ri32[_5854_rptr] = (int)0;
          if ((_5838_rncodeatom > (int)0))
          {
            {
              _ptr__5862_ri32[_5859_rcodeptr] = (int)0;
            }
          }
          {}
          {
            int32_t _5865_i0 = (int)0;
            int32_t _5866_codei = (int)0;
            int32_t _5867_elmi = (int)0;
            int32_t _5868_nzi = (int)0;
            while ( (_5865_i0 < _5812_nelem) )
            {
              {
                int64_t _5869_erow = (_ptr__5809_wi64[safe_add( _5818_sp,_5865_i0 )] / _5825_edim1);
                int32_t _5870_b0 = _5865_i0;
                ++ _5865_i0;
                while ( ((_5865_i0 < _5812_nelem) && ((_ptr__5809_wi64[safe_add( _5818_sp,_5865_i0 )] / _5825_edim1) == _5869_erow)) )
                {
                  {
                    ++ _5865_i0;
                  }
                }
                int32_t _5871_e0 = _5865_i0;
                int32_t _5872_i1 = (int)0;
                while ( (_5872_i1 < _5826_mnnz) )
                {
                  {
                    int32_t _5873_mcol = ((*msubj)(_ptr__5831_xi32[safe_add( _5829_mperm,_5872_i1 )]));
                    int32_t _5874_b1 = _5872_i1;
                    ++ _5872_i1;
                    while ( ((_5872_i1 < _5826_mnnz) && (((*msubj)(_ptr__5831_xi32[safe_add( _5829_mperm,_5872_i1 )])) == _5873_mcol)) )
                    {
                      {
                        ++ _5872_i1;
                      }
                    }
                    int32_t _5875_e1 = _5872_i1;
                    int32_t _5876_ii1 = _5874_b1;
                    int32_t _5877_ii0 = _5870_b0;
                    bool _5878_hasnz = false;
                    while ( ((_5877_ii0 < _5871_e0) && (_5876_ii1 < _5875_e1)) )
                    {
                      {
                        int32_t _5879_ip1 = _ptr__5831_xi32[safe_add( _5829_mperm,_5876_ii1 )];
                        if (((_ptr__5809_wi64[safe_add( _5818_sp,_5877_ii0 )] % _5825_edim1) < ((*msubi)(_5879_ip1))))
                        {
                          {
                            ++ _5877_ii0;
                          }
                        }
                        else if(((_ptr__5809_wi64[safe_add( _5818_sp,_5877_ii0 )] % _5825_edim1) > ((*msubi)(_5879_ip1))))
                        {
                          {
                            ++ _5876_ii1;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5879_ip1)) > (int)0) || ((int)0 < ((*mval)(_5879_ip1)))))
                            {
                              {
                                int32_t _11592_ = _ptr__5808_wi32[safe_add( _5816_ptr,_5877_ii0 )];
                                int32_t _11593_ = _ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5877_ii0 ),(int)1 )];
                                for (int32_t _5880_k = _11592_; _5880_k < _11593_; ++_5880_k)
                                {
                                  {
                                    _ptr__5863_ri64[safe_add( _5855_ridxs,_5868_nzi )] = _ptr__5809_wi64[safe_add( _5819_nidxs,_5880_k )];
                                    _ptr__5864_rf64[safe_add( _5857_rcof,_5868_nzi )] = (_ptr__5810_wf64[safe_add( _5820_cof,_5880_k )] * ((*mval)(_5879_ip1)));
                                    if ((_5814_ncodeatom > (int)0))
                                    {
                                      {
                                        int32_t _11594_ = _ptr__5808_wi32[safe_add( _5821_codeptr,_5880_k )];
                                        int32_t _11595_ = _ptr__5808_wi32[safe_add( safe_add( _5821_codeptr,_5880_k ),(int)1 )];
                                        for (int32_t _5881_l = _11594_; _5881_l < _11595_; ++_5881_l)
                                        {
                                          {
                                            _ptr__5862_ri32[safe_add( _5860_rcode,_5866_codei )] = _ptr__5808_wi32[safe_add( _5822_code,_5881_l )];
                                            _ptr__5864_rf64[safe_add( _5861_rcconst,_5866_codei )] = _ptr__5810_wf64[safe_add( _5823_cconst,_5881_l )];
                                            ++ _5866_codei;
                                          }
                                        }
                                        _ptr__5862_ri32[safe_add( _5860_rcode,_5866_codei )] = 2;
                                        _ptr__5864_rf64[safe_add( _5861_rcconst,_5866_codei )] = ((*mval)(_5876_ii1));
                                        ++ _5866_codei;
                                        _ptr__5862_ri32[safe_add( _5860_rcode,_5866_codei )] = 5;
                                        ++ _5866_codei;
                                        _ptr__5862_ri32[safe_add( safe_add( _5859_rcodeptr,_5868_nzi ),(int)1 )] = _5866_codei;
                                      }
                                    }
                                    {}
                                    ++ _5868_nzi;
                                  }
                                }
                                _5878_hasnz = true;
                              }
                            }
                            {}
                            ++ _5877_ii0;
                            ++ _5876_ii1;
                          }
                        }
                      }
                    }
                    if (_5878_hasnz)
                    {
                      {
                        _ptr__5862_ri32[safe_add( safe_add( _5854_rptr,_5867_elmi ),(int)1 )] = _5868_nzi;
                        _ptr__5863_ri64[safe_add( _5856_rsp,_5867_elmi )] = safe_add( safe_mul( _5869_erow,mdim1 ),_5873_mcol );
                        ++ _5867_elmi;
                      }
                    }
                    {}
                  }
                }
              }
            }
            if ((_5868_nzi != _5840_rnnz))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_5867_elmi != _5839_rnelem))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_ptr__5862_ri32[safe_add( _5854_rptr,_5839_rnelem )] != _5840_rnnz))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
          }
          if ((!_5853_rhassp))
          {
            {
              _5805_rs->popi64(_5839_rnelem);
            }
          }
          {}
        }
      }
      else
      {
        {
          int32_t _5882_rncodeatom = (int)0;
          int32_t _5883_rnelem = safe_mul( _5824_edim0,mdim1 );
          int32_t _5884_rnnz = (int)0;
          int32_t _11596_ = (int)0;
          int32_t _11597_ = _5824_edim0;
          for (int32_t _5885_i = _11596_; _5885_i < _11597_; ++_5885_i)
          {
            {
              int32_t _11598_ = (int)0;
              int32_t _11599_ = mdim1;
              for (int32_t _5886_j = _11598_; _5886_j < _11599_; ++_5886_j)
              {
                {
                  int32_t _11600_ = _ptr__5831_xi32[safe_add( _5828_mcolptr,_5886_j )];
                  int32_t _11601_ = _ptr__5831_xi32[safe_add( safe_add( _5828_mcolptr,_5886_j ),(int)1 )];
                  for (int32_t _5887_i1 = _11600_; _5887_i1 < _11601_; ++_5887_i1)
                  {
                    {
                      int32_t _5888_ii1 = _ptr__5831_xi32[safe_add( _5829_mperm,_5887_i1 )];
                      int32_t _5889_i0 = safe_add( safe_mul( _5885_i,_5825_edim1 ),((*msubi)(_5888_ii1)) );
                      _5884_rnnz += (_ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5889_i0 ),(int)1 )] - _ptr__5808_wi32[safe_add( _5816_ptr,_5889_i0 )]);
                      if ((_5814_ncodeatom > (int)0))
                      {
                        {
                          _5882_rncodeatom += safe_add( (_ptr__5808_wi32[safe_add( _5821_codeptr,_ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5889_i0 ),(int)1 )] )] - _ptr__5808_wi32[safe_add( _5821_codeptr,_ptr__5808_wi32[safe_add( _5816_ptr,_5889_i0 )] )]),safe_mul( (int)2,(_ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5889_i0 ),(int)1 )] - _ptr__5808_wi32[safe_add( _5816_ptr,_5889_i0 )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          bool _5890_rhassp = (_5883_rnelem < safe_mul( _5824_edim0,mdim1 ));
          if ((!(_5884_rnnz <= (int)0x7fffffff)))
          {
            {
              throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
            }
          }
          {}
          _5805_rs->alloc_expr((int)2,_5883_rnelem,(int32_t)_5884_rnnz,_5890_rhassp,_5882_rncodeatom);
          int32_t _5891_rshape = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->shape_base;
          int32_t _5892_rptr = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->ptr_base;
          int32_t _5893_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->nidxs_base;
          int32_t _11602_;
          bool _11603_ = _5890_rhassp;
          if (_11603_)
          {
            _11602_ = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->sp_base;
          }
          else
          {
            _11602_ = _5805_rs->alloci64(_5883_rnelem);
          }
          int32_t _5894_rsp = _11602_;
          int32_t _5895_rcof = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->cof_base;
          int32_t _5896_rcode = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->code_base;
          int32_t _5897_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->codeptr_base;
          int32_t _5898_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->cconst_base;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5899_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5899_ri32(_5899_ri32 ? _5899_ri32->raw() : nullptr,_5899_ri32 ? _5899_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5900_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5900_ri64(_5900_ri64 ? _5900_ri64->raw() : nullptr,_5900_ri64 ? _5900_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5901_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->f64;
          _checked_ptr_1<double> _ptr__5901_rf64(_5901_rf64 ? _5901_rf64->raw() : nullptr,_5901_rf64 ? _5901_rf64->size(0) : 0);
          _ptr__5899_ri32[_5891_rshape] = _5824_edim0;
          _ptr__5899_ri32[safe_add( _5891_rshape,(int)1 )] = mdim1;
          int32_t _5902_codei = (int)0;
          int32_t _5903_relm = (int)0;
          int32_t _5904_nzi = (int)0;
          _ptr__5899_ri32[_5892_rptr] = (int)0;
          if ((_5882_rncodeatom > (int)0))
          {
            {
              _ptr__5899_ri32[_5897_rcodeptr] = (int)0;
            }
          }
          {}
          int32_t _11604_ = (int)0;
          int32_t _11605_ = _5824_edim0;
          for (int32_t _5905_i = _11604_; _5905_i < _11605_; ++_5905_i)
          {
            {
              int32_t _11606_ = (int)0;
              int32_t _11607_ = mdim1;
              for (int32_t _5906_j = _11606_; _5906_j < _11607_; ++_5906_j)
              {
                {
                  int32_t _5907_b0 = safe_mul( _5905_i,_5825_edim1 );
                  int32_t _11608_ = _ptr__5831_xi32[safe_add( _5828_mcolptr,_5906_j )];
                  int32_t _11609_ = _ptr__5831_xi32[safe_add( safe_add( _5828_mcolptr,_5906_j ),(int)1 )];
                  for (int32_t _5908_i1 = _11608_; _5908_i1 < _11609_; ++_5908_i1)
                  {
                    {
                      int32_t _5909_ii1 = _ptr__5831_xi32[safe_add( _5829_mperm,_5908_i1 )];
                      int32_t _5910_i0 = safe_add( _5907_b0,((*msubi)(_5909_ii1)) );
                      if ((_5882_rncodeatom == (int)0))
                      {
                        {
                          int32_t _11610_ = _ptr__5808_wi32[safe_add( _5816_ptr,_5910_i0 )];
                          int32_t _11611_ = _ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5910_i0 ),(int)1 )];
                          for (int32_t _5911_k = _11610_; _5911_k < _11611_; ++_5911_k)
                          {
                            {
                              _ptr__5900_ri64[safe_add( _5893_rnidxs,_5904_nzi )] = _ptr__5809_wi64[safe_add( _5819_nidxs,_5911_k )];
                              _ptr__5901_rf64[safe_add( _5895_rcof,_5904_nzi )] = (_ptr__5810_wf64[safe_add( _5820_cof,_5911_k )] * ((*mval)(_5909_ii1)));
                              ++ _5904_nzi;
                            }
                          }
                        }
                      }
                      else
                      {
                        {
                          int32_t _11612_ = _ptr__5808_wi32[safe_add( _5816_ptr,_5910_i0 )];
                          int32_t _11613_ = _ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5910_i0 ),(int)1 )];
                          for (int32_t _5912_k = _11612_; _5912_k < _11613_; ++_5912_k)
                          {
                            {
                              _ptr__5900_ri64[safe_add( _5893_rnidxs,_5904_nzi )] = _ptr__5809_wi64[safe_add( _5819_nidxs,_5912_k )];
                              _ptr__5901_rf64[safe_add( _5895_rcof,_5904_nzi )] = (_ptr__5810_wf64[safe_add( _5820_cof,_5912_k )] * ((*mval)(_5909_ii1)));
                              int32_t _11614_ = _ptr__5808_wi32[safe_add( _5821_codeptr,_5912_k )];
                              int32_t _11615_ = _ptr__5808_wi32[safe_add( safe_add( _5821_codeptr,_5912_k ),(int)1 )];
                              for (int32_t _5913_l = _11614_; _5913_l < _11615_; ++_5913_l)
                              {
                                {
                                  _ptr__5899_ri32[safe_add( _5896_rcode,_5902_codei )] = _ptr__5808_wi32[safe_add( _5822_code,_5913_l )];
                                  _ptr__5901_rf64[safe_add( _5898_rcconst,_5902_codei )] = _ptr__5810_wf64[safe_add( _5823_cconst,_5913_l )];
                                  ++ _5902_codei;
                                }
                              }
                              _ptr__5899_ri32[safe_add( _5896_rcode,_5902_codei )] = 2;
                              _ptr__5901_rf64[safe_add( _5898_rcconst,_5902_codei )] = ((*mval)(_5909_ii1));
                              ++ _5902_codei;
                              _ptr__5899_ri32[safe_add( _5896_rcode,_5902_codei )] = 5;
                              ++ _5902_codei;
                              _ptr__5899_ri32[safe_add( safe_add( _5897_rcodeptr,_5904_nzi ),(int)1 )] = _5902_codei;
                              ++ _5904_nzi;
                            }
                          }
                        }
                      }
                    }
                  }
                  _ptr__5899_ri32[safe_add( safe_add( _5892_rptr,_5903_relm ),(int)1 )] = _5904_nzi;
                  _ptr__5900_ri64[safe_add( _5894_rsp,_5903_relm )] = safe_add( safe_mul( _5905_i,mdim1 ),_5906_j );
                  ++ _5903_relm;
                }
              }
            }
          }
          if ((!_5890_rhassp))
          {
            {
              _5805_rs->popi64(_5883_rnelem);
            }
          }
          {}
        }
      }
      _5807_xs->clear();
    }
  }
  else
  {
    {
      int32_t _5914_xrowptr = _5807_xs->alloci32(safe_add( _5824_edim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5915_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5807_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__5915_xi32(_5915_xi32 ? _5915_xi32->raw() : nullptr,_5915_xi32 ? _5915_xi32->size(0) : 0);
      int32_t _11616_ = (int)0;
      int32_t _11617_ = safe_add( _5824_edim0,(int)1 );
      for (int32_t _5916_i = _11616_; _5916_i < _11617_; ++_5916_i)
      {
        {
          _ptr__5915_xi32[safe_add( _5914_xrowptr,_5916_i )] = (int)0;
        }
      }
      int64_t _5917_rnnz = safe_mul( (int64_t)_5813_nnz,mdim1 );
      int32_t _5918_rnelem = safe_mul( _5824_edim0,mdim1 );
      int32_t _11618_;
      bool _11619_ = (_5814_ncodeatom == (int)0);
      if (_11619_)
      {
        _11618_ = (int)0;
      }
      else
      {
        _11618_ = safe_mul( (int32_t)_5917_rnnz,(int)2 );
      }
      int32_t _5919_rncodeatom = safe_add( safe_mul( _5814_ncodeatom,mdim1 ),_11618_ );
      bool _5920_rhassp = false;
      int32_t _5921_rnd = (int)2;
      if ((!(_5917_rnnz <= (int)0x7fffffff)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
        }
      }
      {}
      _5805_rs->alloc_expr(_5921_rnd,_5918_rnelem,(int32_t)_5917_rnnz,_5920_rhassp,_5919_rncodeatom);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5922_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5922_ri32(_5922_ri32 ? _5922_ri32->raw() : nullptr,_5922_ri32 ? _5922_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5923_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5923_ri64(_5923_ri64 ? _5923_ri64->raw() : nullptr,_5923_ri64 ? _5923_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5924_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->f64;
      _checked_ptr_1<double> _ptr__5924_rf64(_5924_rf64 ? _5924_rf64->raw() : nullptr,_5924_rf64 ? _5924_rf64->size(0) : 0);
      int32_t _5925_rshape = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->shape_base;
      int32_t _5926_rptr = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->ptr_base;
      int32_t _5927_ridxs = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->nidxs_base;
      int32_t _5928_rsp = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->sp_base;
      int32_t _5929_rcof = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->cof_base;
      int32_t _5930_rcode = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->code_base;
      int32_t _5931_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->codeptr_base;
      int32_t _5932_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5805_rs)->cconst_base;
      _ptr__5922_ri32[_5925_rshape] = _5824_edim0;
      _ptr__5922_ri32[safe_add( _5925_rshape,(int)1 )] = mdim1;
      int32_t _5933_codei = (int)0;
      int32_t _5934_nzi = (int)0;
      int32_t _5935_elmi = (int)0;
      _ptr__5922_ri32[_5926_rptr] = (int)0;
      if ((_5919_rncodeatom > (int)0))
      {
        {
          _ptr__5922_ri32[_5931_rcodeptr] = (int)0;
        }
      }
      {}
      if (_5815_hassp)
      {
        {
          {
            int32_t _11620_ = (int)0;
            int32_t _11621_ = _5812_nelem;
            for (int32_t _5936_i = _11620_; _5936_i < _11621_; ++_5936_i)
            {
              {
                ++ _ptr__5915_xi32[safe_add( safe_add( _5914_xrowptr,(_ptr__5809_wi64[safe_add( _5818_sp,_5936_i )] / _5825_edim1) ),(int)1 )];
              }
            }
            int32_t _11622_ = (int)0;
            int32_t _11623_ = _5824_edim0;
            for (int32_t _5937_i = _11622_; _5937_i < _11623_; ++_5937_i)
            {
              {
                _ptr__5915_xi32[safe_add( safe_add( _5914_xrowptr,_5937_i ),(int)1 )] += _ptr__5915_xi32[safe_add( _5914_xrowptr,_5937_i )];
              }
            }
            int32_t _11624_ = (int)0;
            int32_t _11625_ = _5824_edim0;
            for (int32_t _5938_i = _11624_; _5938_i < _11625_; ++_5938_i)
            {
              {
                int32_t _11626_ = (int)0;
                int32_t _11627_ = mdim1;
                for (int32_t _5939_j = _11626_; _5939_j < _11627_; ++_5939_j)
                {
                  {
                    int32_t _11628_ = _ptr__5915_xi32[safe_add( _5914_xrowptr,_5938_i )];
                    int32_t _11629_ = _ptr__5915_xi32[safe_add( safe_add( _5914_xrowptr,_5938_i ),(int)1 )];
                    for (int32_t _5940_i0 = _11628_; _5940_i0 < _11629_; ++_5940_i0)
                    {
                      {
                        int64_t _5941_ii1 = safe_add( _5939_j,safe_mul( (_ptr__5809_wi64[safe_add( _5818_sp,_5940_i0 )] % _5825_edim1),mdim1 ) );
                        int32_t _11630_ = _ptr__5808_wi32[safe_add( _5816_ptr,_5940_i0 )];
                        int32_t _11631_ = _ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5940_i0 ),(int)1 )];
                        for (int32_t _5942_k = _11630_; _5942_k < _11631_; ++_5942_k)
                        {
                          {
                            _ptr__5923_ri64[safe_add( _5927_ridxs,_5934_nzi )] = _ptr__5809_wi64[safe_add( _5819_nidxs,_5942_k )];
                            _ptr__5924_rf64[safe_add( _5929_rcof,_5934_nzi )] = (_ptr__5810_wf64[safe_add( _5820_cof,_5942_k )] * ((*mval)(_5941_ii1)));
                            if ((_5814_ncodeatom > (int)0))
                            {
                              {
                                int32_t _11632_ = _ptr__5808_wi32[safe_add( _5821_codeptr,_5942_k )];
                                int32_t _11633_ = _ptr__5808_wi32[safe_add( safe_add( _5821_codeptr,_5942_k ),(int)1 )];
                                for (int32_t _5943_l = _11632_; _5943_l < _11633_; ++_5943_l)
                                {
                                  {
                                    _ptr__5922_ri32[safe_add( _5930_rcode,_5933_codei )] = _ptr__5808_wi32[safe_add( _5822_code,_5943_l )];
                                    _ptr__5924_rf64[safe_add( _5932_rcconst,_5933_codei )] = _ptr__5810_wf64[safe_add( _5823_cconst,_5943_l )];
                                    ++ _5933_codei;
                                  }
                                }
                                _ptr__5922_ri32[safe_add( _5930_rcode,_5933_codei )] = 2;
                                _ptr__5924_rf64[safe_add( _5932_rcconst,_5933_codei )] = ((*mval)(_5941_ii1));
                                ++ _5933_codei;
                                _ptr__5922_ri32[safe_add( _5930_rcode,_5933_codei )] = 5;
                                ++ _5933_codei;
                                _ptr__5922_ri32[safe_add( safe_add( _5931_rcodeptr,_5934_nzi ),(int)1 )] = _5933_codei;
                              }
                            }
                            {}
                            ++ _5934_nzi;
                          }
                        }
                      }
                    }
                    _ptr__5922_ri32[safe_add( safe_add( _5926_rptr,_5935_elmi ),(int)1 )] = _5934_nzi;
                    ++ _5935_elmi;
                  }
                }
              }
            }
          }
          if ((_5934_nzi != _5917_rnnz))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
          if ((_5935_elmi != _5918_rnelem))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_5933_codei != _5919_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num code atoms"));
            }
          }
          {}
        }
      }
      else
      {
        {
          int32_t _11634_ = (int)0;
          int32_t _11635_ = _5824_edim0;
          for (int32_t _5944_i = _11634_; _5944_i < _11635_; ++_5944_i)
          {
            {
              int32_t _11636_ = (int)0;
              int32_t _11637_ = mdim1;
              for (int32_t _5945_j = _11636_; _5945_j < _11637_; ++_5945_j)
              {
                {
                  int32_t _11638_ = (int)0;
                  int32_t _11639_ = _5825_edim1;
                  for (int32_t _5946_ii = _11638_; _5946_ii < _11639_; ++_5946_ii)
                  {
                    {
                      int32_t _5947_i0 = safe_add( safe_mul( _5944_i,_5825_edim1 ),_5946_ii );
                      int32_t _5948_ii1 = safe_add( _5945_j,safe_mul( _5946_ii,mdim1 ) );
                      int32_t _11640_ = _ptr__5808_wi32[safe_add( _5816_ptr,_5947_i0 )];
                      int32_t _11641_ = _ptr__5808_wi32[safe_add( safe_add( _5816_ptr,_5947_i0 ),(int)1 )];
                      for (int32_t _5949_k = _11640_; _5949_k < _11641_; ++_5949_k)
                      {
                        {
                          _ptr__5923_ri64[safe_add( _5927_ridxs,_5934_nzi )] = _ptr__5809_wi64[safe_add( _5819_nidxs,_5949_k )];
                          _ptr__5924_rf64[safe_add( _5929_rcof,_5934_nzi )] = (_ptr__5810_wf64[safe_add( _5820_cof,_5949_k )] * ((*mval)(_5948_ii1)));
                          if ((_5814_ncodeatom > (int)0))
                          {
                            {
                              int32_t _11642_ = _ptr__5808_wi32[safe_add( _5821_codeptr,_5949_k )];
                              int32_t _11643_ = _ptr__5808_wi32[safe_add( safe_add( _5821_codeptr,_5949_k ),(int)1 )];
                              for (int32_t _5950_l = _11642_; _5950_l < _11643_; ++_5950_l)
                              {
                                {
                                  _ptr__5922_ri32[safe_add( _5930_rcode,_5933_codei )] = _ptr__5808_wi32[safe_add( _5822_code,_5950_l )];
                                  _ptr__5924_rf64[safe_add( _5932_rcconst,_5933_codei )] = _ptr__5810_wf64[safe_add( _5823_cconst,_5950_l )];
                                  ++ _5933_codei;
                                }
                              }
                              _ptr__5922_ri32[safe_add( _5930_rcode,_5933_codei )] = 2;
                              _ptr__5924_rf64[safe_add( _5932_rcconst,_5933_codei )] = ((*mval)(_5948_ii1));
                              ++ _5933_codei;
                              _ptr__5922_ri32[safe_add( _5930_rcode,_5933_codei )] = 5;
                              ++ _5933_codei;
                              _ptr__5922_ri32[safe_add( safe_add( _5931_rcodeptr,_5934_nzi ),(int)1 )] = _5933_codei;
                            }
                          }
                          {}
                          ++ _5934_nzi;
                        }
                      }
                    }
                  }
                  _ptr__5922_ri32[safe_add( safe_add( _5926_rptr,_5935_elmi ),(int)1 )] = _5934_nzi;
                  ++ _5935_elmi;
                }
              }
            }
          }
        }
      }
      _5807_xs->clear();
    }
  }
}
// End mosek.fusion.ExprMulRight.eval

// Begin mosek.fusion.ExprMulRight.computeshape
// Method mosek.fusion.ExprMulRight.computeshape @ src/fusion/ExprMul.monty:568:6-573:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprMulRight::computeshape(int32_t _5951_d0,std::shared_ptr< monty::ndarray< int32_t,1 > > _5952_ds)
{
  _checked_ptr_1<int32_t> _ptr__5952_ds(_5952_ds ? _5952_ds->raw() : nullptr, _5952_ds ? _5952_ds->size(0) : 0);
  if (((int)((_5952_ds)->size(0)) == (int)1))
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_5951_d0)});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__5952_ds[(int)0]),(int32_t)(_5951_d0)});
    }
  }
}
// End mosek.fusion.ExprMulRight.computeshape

// Begin mosek.fusion.ExprMulRight.validate
// Method mosek.fusion.ExprMulRight.validate @ src/fusion/ExprMul.monty:495:6-541:7
int32_t mosek::fusion::p_ExprMulRight::validate(int32_t _5953_mdim0,int32_t _5954_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5955_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5956_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5957_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5958_expr)
{
  _checked_ptr_1<int32_t> _ptr__5955_msubi(_5955_msubi ? _5955_msubi->raw() : nullptr, _5955_msubi ? _5955_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5956_msubj(_5956_msubj ? _5956_msubj->raw() : nullptr, _5956_msubj ? _5956_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5957_mval(_5957_mval ? _5957_mval->raw() : nullptr, _5957_mval ? _5957_mval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5959_eshape = _5958_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__5959_eshape(_5959_eshape ? _5959_eshape->raw() : nullptr,_5959_eshape ? _5959_eshape->size(0) : 0);
  if (((int)((_5959_eshape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _5960_edim0 = _ptr__5959_eshape[(int)0];
  int32_t _5961_edim1 = _ptr__5959_eshape[(int)1];
  if (((_5953_mdim0 < (int)0) || ((_5954_mdim1 < (int)0) || ((_5960_edim0 < (int)0) || (_5961_edim1 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_5953_mdim0 != _5961_edim1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5955_msubi)->size(0)) != (int)((_5956_msubj)->size(0))) || ((int)((_5955_msubi)->size(0)) != (int)((_5957_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5962_mnnz = (int)((_5955_msubi)->size(0));
  {
    bool _5963_err = false;
    int32_t _11644_ = (int)0;
    int32_t _11645_ = _5962_mnnz;
    for (int32_t _5964_i = _11644_; _5964_i < _11645_; ++_5964_i)
    {
      {
        _5963_err = (_5963_err || ((_ptr__5955_msubi[_5964_i] < (int)0) || ((_ptr__5955_msubi[_5964_i] >= _5953_mdim0) || ((_ptr__5956_msubj[_5964_i] < (int)0) || (_ptr__5956_msubj[_5964_i] >= _5954_mdim1)))));
      }
    }
    if (_5963_err)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
      }
    }
    {}
  }
  {
    bool _5965_err = false;
    int32_t _11646_ = (int)0;
    int32_t _11647_ = (_5962_mnnz - (int)1);
    for (int32_t _5966_i = _11646_; _5966_i < _11647_; ++_5966_i)
    {
      {
        _5965_err = (_5965_err || ((_ptr__5955_msubi[_5966_i] > _ptr__5955_msubi[safe_add( _5966_i,(int)1 )]) || ((_ptr__5955_msubi[_5966_i] == _ptr__5955_msubi[safe_add( _5966_i,(int)1 )]) && (_ptr__5956_msubj[_5966_i] >= _ptr__5956_msubj[safe_add( _5966_i,(int)1 )]))));
      }
    }
    if (_5965_err)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
      }
    }
    {}
  }
  return (int)1;
}
// End mosek.fusion.ExprMulRight.validate

// Begin mosek.fusion.ExprMulRight.toString
// Method mosek.fusion.ExprMulRight.toString @ src/fusion/ExprMul.monty:491:6-493:7
std::string mosek::fusion::ExprMulRight :: toString() { return mosek::fusion::p_ExprMulRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulRight(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulRight.toString

void mosek::fusion::p_ExprMulRight::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulRight::destroy() { mosek::fusion::p_ExprMulRight::_get_impl(this)->destroy(); }
// } class ExprMulRight
// class ExprMulLeft { // @ src/fusion/ExprMul.monty:12:4-469:5
mosek::fusion::ExprMulLeft::ExprMulLeft(mosek::fusion::p_ExprMulLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulLeft::~ExprMulLeft() {  /* std::cout << "~ExprMulLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulLeft::p_ExprMulLeft
  (::mosek::fusion::ExprMulLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulLeft.ctor @ src/fusion/ExprMul.monty:104:6-123:7
mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft
  (int32_t _5967_mdim0,
    int32_t _5968_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5969_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5970_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5971_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5972_expr,
    int32_t _5973_validated)
{ return new mosek::fusion::ExprMulLeft(_5967_mdim0,_5968_mdim1,_5969_msubi,_5970_msubj,_5971_mval,_5972_expr,_5973_validated); }
mosek::fusion::ExprMulLeft::ExprMulLeft
  (int32_t _5967_mdim0,
    int32_t _5968_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5969_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5970_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5971_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5972_expr,
    int32_t _5973_validated) : 
   ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this))
{ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5967_mdim0,_5968_mdim1,_5969_msubi,_5970_msubj,_5971_mval,_5972_expr,_5973_validated); }
void mosek::fusion::p_ExprMulLeft::_initialize  (int32_t _5967_mdim0,
    int32_t _5968_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5969_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5970_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5971_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5972_expr,
    int32_t _5973_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5969_msubi(_5969_msubi ? _5969_msubi->raw() : nullptr, _5969_msubi ? _5969_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5970_msubj(_5970_msubj ? _5970_msubj->raw() : nullptr, _5970_msubj ? _5970_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5971_mval(_5971_mval ? _5971_mval->raw() : nullptr, _5971_mval ? _5971_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulLeft::computeshape(_5967_mdim0,_5968_mdim1,_5972_expr->getShape()));
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim0 = _5967_mdim0;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim1 = _5968_mdim1;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubi = _5969_msubi;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubj = _5970_msubj;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mval = _5971_mval;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr = _5972_expr;
  }
}
// mosek.fusion.ExprMulLeft.ctor

// mosek.fusion.ExprMulLeft.ctor @ src/fusion/ExprMul.monty:84:6-94:7
mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft
  (int32_t _5974_mdim0,
    int32_t _5975_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5976_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5977_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5978_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5979_expr)
{ return new mosek::fusion::ExprMulLeft(_5974_mdim0,_5975_mdim1,_5976_msubi,_5977_msubj,_5978_mval,_5979_expr); }
mosek::fusion::ExprMulLeft::ExprMulLeft
  (int32_t _5974_mdim0,
    int32_t _5975_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5976_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5977_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5978_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5979_expr) : 
   ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this))
{ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5974_mdim0,_5975_mdim1,_5976_msubi,_5977_msubj,_5978_mval,_5979_expr); }
void mosek::fusion::p_ExprMulLeft::_initialize  (int32_t _5974_mdim0,
    int32_t _5975_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5976_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5977_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5978_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5979_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5976_msubi(_5976_msubi ? _5976_msubi->raw() : nullptr, _5976_msubi ? _5976_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5977_msubj(_5977_msubj ? _5977_msubj->raw() : nullptr, _5977_msubj ? _5977_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5978_mval(_5978_mval ? _5978_mval->raw() : nullptr, _5978_mval ? _5978_mval->size(0) : 0);
    mosek::fusion::p_ExprMulLeft::_initialize(_5974_mdim0,_5975_mdim1,_5976_msubi,_5977_msubj,_5978_mval,_5979_expr,::mosek::fusion::p_ExprMulLeft::validate(_5974_mdim0,_5975_mdim1,_5976_msubi,_5977_msubj,_5978_mval,_5979_expr));
  }
}
// mosek.fusion.ExprMulLeft.ctor

// Begin mosek.fusion.ExprMulLeft.eval
// Method mosek.fusion.ExprMulLeft.eval @ src/fusion/ExprMul.monty:125:6-468:7
void mosek::fusion::ExprMulLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5980_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5981_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5982_xs) { mosek::fusion::p_ExprMulLeft::_get_impl(this)->eval(_5980_rs,_5981_ws,_5982_xs); }
void mosek::fusion::p_ExprMulLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5980_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5981_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5982_xs)
{
  mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr->eval(_5981_ws,_5980_rs,_5982_xs);
  _5981_ws->pop_expr();
  int32_t _5983_nd = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->nd;
  int32_t _5984_nnz = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->nnz;
  int32_t _5985_nelem = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->nelem;
  int32_t _5986_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->ncodeatom;
  bool _5987_hassp = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->hassp;
  int32_t _5988_shape = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->shape_base;
  int32_t _5989_ptr = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->ptr_base;
  int32_t _5990_sp = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->sp_base;
  int32_t _5991_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->nidxs_base;
  int32_t _5992_cof = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->cof_base;
  int32_t _5993_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->codeptr_base;
  int32_t _5994_code = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->code_base;
  int32_t _5995_cconst = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5996_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5996_wi32(_5996_wi32 ? _5996_wi32->raw() : nullptr,_5996_wi32 ? _5996_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5997_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5997_wi64(_5997_wi64 ? _5997_wi64->raw() : nullptr,_5997_wi64 ? _5997_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5998_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5981_ws)->f64;
  _checked_ptr_1<double> _ptr__5998_wf64(_5998_wf64 ? _5998_wf64->raw() : nullptr,_5998_wf64 ? _5998_wf64->size(0) : 0);
  if ((_5983_nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int32_t _5999_eperm = (int)9999;
  int32_t _6000_esubi = (int)9999;
  int32_t _6001_eptr = (int)9999;
  int32_t _6002_edim0 = _ptr__5996_wi32[_5988_shape];
  int32_t _6003_edim1 = _ptr__5996_wi32[safe_add( _5988_shape,(int)1 )];
  int32_t _6004_mnnz = (int)((msubi)->size(0));
  bool _6005_missp = (_6004_mnnz < safe_mul( (int64_t)mdim0,(int64_t)mdim1 ));
  bool _6006_rhassp = false;
  int32_t _6007_rncodeatom = (int)0;
  int32_t _6008_rnelem = (int)0;
  int64_t _6009_rnnz = (int64_t)0;
  if (_5987_hassp)
  {
    {
      _5999_eperm = _5982_xs->alloci32(_5985_nelem);
      _6000_esubi = _5982_xs->alloci32(_5985_nelem);
      _6001_eptr = _5982_xs->alloci32(safe_add( _6003_edim1,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6010_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5982_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__6010_xi32(_6010_xi32 ? _6010_xi32->raw() : nullptr,_6010_xi32 ? _6010_xi32->size(0) : 0);
      {
        int32_t _11648_ = (int)0;
        int32_t _11649_ = safe_add( _6003_edim1,(int)1 );
        for (int32_t _6011_i = _11648_; _6011_i < _11649_; ++_6011_i)
        {
          {
            _ptr__6010_xi32[safe_add( _6001_eptr,_6011_i )] = (int)0;
          }
        }
        int32_t _11650_ = (int)0;
        int32_t _11651_ = _5985_nelem;
        for (int32_t _6012_i = _11650_; _6012_i < _11651_; ++_6012_i)
        {
          {
            ++ _ptr__6010_xi32[safe_add( safe_add( _6001_eptr,(_ptr__5997_wi64[safe_add( _5990_sp,_6012_i )] % _6003_edim1) ),(int)1 )];
          }
        }
        int32_t _11652_ = (int)0;
        int32_t _11653_ = _6003_edim1;
        for (int32_t _6013_i = _11652_; _6013_i < _11653_; ++_6013_i)
        {
          {
            _ptr__6010_xi32[safe_add( safe_add( _6001_eptr,_6013_i ),(int)1 )] += _ptr__6010_xi32[safe_add( _6001_eptr,_6013_i )];
          }
        }
        int32_t _11654_ = (int)0;
        int32_t _11655_ = _5985_nelem;
        for (int32_t _6014_i = _11654_; _6014_i < _11655_; ++_6014_i)
        {
          {
            int64_t _6015_j = (_ptr__5997_wi64[safe_add( _5990_sp,_6014_i )] % _6003_edim1);
            _ptr__6010_xi32[safe_add( _5999_eperm,_ptr__6010_xi32[safe_add( _6001_eptr,_6015_j )] )] = _6014_i;
            ++ _ptr__6010_xi32[safe_add( _6001_eptr,_6015_j )];
          }
        }
        int32_t _11656_ = (int)0;
        int32_t _11657_ = _6003_edim1;
        for (int32_t _6016_i = _11656_; _6016_i < _11657_; ++_6016_i)
        {
          {
            _ptr__6010_xi32[(safe_add( _6001_eptr,_6003_edim1 ) - _6016_i)] = _ptr__6010_xi32[((safe_add( _6001_eptr,_6003_edim1 ) - _6016_i) - (int)1)];
          }
        }
        _ptr__6010_xi32[_6001_eptr] = (int)0;
      }
      if (_6005_missp)
      {
        {
          int32_t _6017_mp = (int)0;
          while ( (_6017_mp < _6004_mnnz) )
          {
            {
              int32_t _6018_i = ((*msubi)(_6017_mp));
              int32_t _6019_me = safe_add( _6017_mp,(int)1 );
              while ( ((_6019_me < _6004_mnnz) && (((*msubi)(_6019_me)) == ((*msubi)(_6017_mp)))) )
              {
                {
                  ++ _6019_me;
                }
              }
              int32_t _11658_ = (int)0;
              int32_t _11659_ = _6003_edim1;
              for (int32_t _6020_j = _11658_; _6020_j < _11659_; ++_6020_j)
              {
                {
                  bool _6021_hasnz = false;
                  int32_t _6022_e0 = _6019_me;
                  int32_t _6023_i0 = _6017_mp;
                  int32_t _6024_ee1 = _ptr__6010_xi32[safe_add( safe_add( _6001_eptr,_6020_j ),(int)1 )];
                  int32_t _6025_ii1 = _ptr__6010_xi32[safe_add( _6001_eptr,_6020_j )];
                  while ( ((_6023_i0 < _6022_e0) && (_6025_ii1 < _6024_ee1)) )
                  {
                    {
                      int32_t _6026_i1 = _ptr__6010_xi32[safe_add( _5999_eperm,_6025_ii1 )];
                      if ((((*msubj)(_6023_i0)) < (_ptr__5997_wi64[safe_add( _5990_sp,_6026_i1 )] / _6003_edim1)))
                      {
                        {
                          ++ _6023_i0;
                        }
                      }
                      else if((((*msubj)(_6023_i0)) > (_ptr__5997_wi64[safe_add( _5990_sp,_6026_i1 )] / _6003_edim1)))
                      {
                        {
                          ++ _6025_ii1;
                        }
                      }
                      else
                      {
                        {
                          _6021_hasnz = true;
                          _6009_rnnz += (_ptr__5996_wi32[safe_add( safe_add( _5989_ptr,_6026_i1 ),(int)1 )] - _ptr__5996_wi32[safe_add( _5989_ptr,_6026_i1 )]);
                          if ((_5986_ncodeatom > (int)0))
                          {
                            {
                              _6007_rncodeatom += safe_add( (_ptr__5996_wi32[safe_add( _5993_codeptr,_ptr__5996_wi32[safe_add( safe_add( _5989_ptr,_6026_i1 ),(int)1 )] )] - _ptr__5996_wi32[safe_add( _5993_codeptr,_ptr__5996_wi32[safe_add( _5989_ptr,_6026_i1 )] )]),safe_mul( (int)2,(_ptr__5996_wi32[safe_add( safe_add( _5989_ptr,_6026_i1 ),(int)1 )] - _ptr__5996_wi32[safe_add( _5989_ptr,_6026_i1 )]) ) );
                            }
                          }
                          {}
                          ++ _6025_ii1;
                          ++ _6023_i0;
                        }
                      }
                    }
                  }
                  if (_6021_hasnz)
                  {
                    {
                      ++ _6008_rnelem;
                    }
                  }
                  {}
                }
              }
              _6017_mp = _6019_me;
            }
          }
        }
      }
      else
      {
        {
          _6008_rnelem = safe_mul( mdim0,_6003_edim1 );
          _6009_rnnz = safe_mul( (int64_t)_5984_nnz,mdim0 );
          if ((_5986_ncodeatom > (int)0))
          {
            {
              _6007_rncodeatom = (int32_t)safe_add( safe_mul( _5986_ncodeatom,mdim0 ),safe_mul( (int)2,_6009_rnnz ) );
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      if (_6005_missp)
      {
        {
          int32_t _6027_mp = (int)0;
          while ( (_6027_mp < _6004_mnnz) )
          {
            {
              int32_t _6028_me = safe_add( _6027_mp,(int)1 );
              while ( ((_6028_me < _6004_mnnz) && (((*msubi)(_6027_mp)) == ((*msubi)(_6028_me)))) )
              {
                {
                  ++ _6028_me;
                }
              }
              int32_t _6029_i = ((*msubi)(_6027_mp));
              int32_t _11660_ = (int)0;
              int32_t _11661_ = _6003_edim1;
              for (int32_t _6030_j = _11660_; _6030_j < _11661_; ++_6030_j)
              {
                {
                  bool _6031_hasnz = false;
                  int32_t _11662_ = _6027_mp;
                  int32_t _11663_ = _6028_me;
                  for (int32_t _6032_i0 = _11662_; _6032_i0 < _11663_; ++_6032_i0)
                  {
                    {
                      int32_t _6033_i1 = safe_add( safe_mul( ((*msubj)(_6032_i0)),_6003_edim1 ),_6030_j );
                      _6009_rnnz += (_ptr__5996_wi32[safe_add( safe_add( _5989_ptr,_6033_i1 ),(int)1 )] - _ptr__5996_wi32[safe_add( _5989_ptr,_6033_i1 )]);
                      if ((_5986_ncodeatom > (int)0))
                      {
                        {
                          _6007_rncodeatom += safe_add( (_ptr__5996_wi32[safe_add( _5993_codeptr,_ptr__5996_wi32[safe_add( safe_add( _5989_ptr,_6033_i1 ),(int)1 )] )] - _ptr__5996_wi32[safe_add( _5993_codeptr,_ptr__5996_wi32[safe_add( _5989_ptr,_6033_i1 )] )]),safe_mul( (int)2,(_ptr__5996_wi32[safe_add( safe_add( _5989_ptr,_6033_i1 ),(int)1 )] - _ptr__5996_wi32[safe_add( _5989_ptr,_6033_i1 )]) ) );
                        }
                      }
                      {}
                      _6031_hasnz = true;
                    }
                  }
                  if (_6031_hasnz)
                  {
                    {
                      ++ _6008_rnelem;
                    }
                  }
                  {}
                }
              }
              _6027_mp = _6028_me;
            }
          }
        }
      }
      else
      {
        {
          _6009_rnnz = safe_mul( (int64_t)_5984_nnz,mdim0 );
          if ((_5986_ncodeatom > (int)0))
          {
            {
              _6007_rncodeatom = (int32_t)safe_add( safe_mul( _5986_ncodeatom,mdim0 ),safe_mul( (int)2,_6009_rnnz ) );
            }
          }
          {}
          _6008_rnelem = safe_mul( mdim0,_6003_edim1 );
        }
      }
    }
  }
  if ((!(_6009_rnnz <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
    }
  }
  {}
  _6006_rhassp = (_6008_rnelem < safe_mul( mdim0,_6003_edim1 ));
  int32_t _6034_rnd = (int)2;
  _5980_rs->alloc_expr(_6034_rnd,_6008_rnelem,(int32_t)_6009_rnnz,_6006_rhassp,_6007_rncodeatom);
  int32_t _6035_rptr = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->ptr_base;
  int32_t _6036_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->nidxs_base;
  int32_t _11664_;
  bool _11665_ = _6006_rhassp;
  if (_11665_)
  {
    _11664_ = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->sp_base;
  }
  else
  {
    _11664_ = _5980_rs->alloci64(_6008_rnelem);
  }
  int32_t _6037_rsp = _11664_;
  int32_t _6038_rcof = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->cof_base;
  int32_t _6039_rshape = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->shape_base;
  int32_t _6040_rcode = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->code_base;
  int32_t _6041_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->codeptr_base;
  int32_t _6042_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6043_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6043_ri64(_6043_ri64 ? _6043_ri64->raw() : nullptr,_6043_ri64 ? _6043_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6044_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->f64;
  _checked_ptr_1<double> _ptr__6044_rf64(_6044_rf64 ? _6044_rf64->raw() : nullptr,_6044_rf64 ? _6044_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6045_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5980_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6045_ri32(_6045_ri32 ? _6045_ri32->raw() : nullptr,_6045_ri32 ? _6045_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6046_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5982_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__6046_xi32(_6046_xi32 ? _6046_xi32->raw() : nullptr,_6046_xi32 ? _6046_xi32->size(0) : 0);
  _ptr__6045_ri32[_6039_rshape] = mdim0;
  _ptr__6045_ri32[safe_add( _6039_rshape,(int)1 )] = _6003_edim1;
  _ptr__6045_ri32[_6035_rptr] = (int)0;
  if ((_6007_rncodeatom > (int)0))
  {
    {
      _ptr__6045_ri32[_6041_rcodeptr] = (int)0;
    }
  }
  {}
  if (_5987_hassp)
  {
    {
      if (_6005_missp)
      {
        {
          int32_t _6047_codei = (int)0;
          int32_t _6048_relm = (int)0;
          int32_t _6049_nzi = (int)0;
          int32_t _6050_mp = (int)0;
          while ( (_6050_mp < _6004_mnnz) )
          {
            {
              int32_t _6051_i = ((*msubi)(_6050_mp));
              int32_t _6052_me = safe_add( _6050_mp,(int)1 );
              while ( ((_6052_me < _6004_mnnz) && (((*msubi)(_6052_me)) == ((*msubi)(_6050_mp)))) )
              {
                {
                  ++ _6052_me;
                }
              }
              int32_t _11666_ = (int)0;
              int32_t _11667_ = _6003_edim1;
              for (int32_t _6053_j = _11666_; _6053_j < _11667_; ++_6053_j)
              {
                {
                  bool _6054_hasnz = false;
                  int32_t _6055_e0 = _6052_me;
                  int32_t _6056_i0 = _6050_mp;
                  int32_t _6057_ee1 = _ptr__6046_xi32[safe_add( safe_add( _6001_eptr,_6053_j ),(int)1 )];
                  int32_t _6058_ii1 = _ptr__6046_xi32[safe_add( _6001_eptr,_6053_j )];
                  while ( ((_6056_i0 < _6055_e0) && (_6058_ii1 < _6057_ee1)) )
                  {
                    {
                      int32_t _6059_i1 = _ptr__6046_xi32[safe_add( _5999_eperm,_6058_ii1 )];
                      if ((((*msubj)(_6056_i0)) < (_ptr__5997_wi64[safe_add( _5990_sp,_6059_i1 )] / _6003_edim1)))
                      {
                        {
                          ++ _6056_i0;
                        }
                      }
                      else if((((*msubj)(_6056_i0)) > (_ptr__5997_wi64[safe_add( _5990_sp,_6059_i1 )] / _6003_edim1)))
                      {
                        {
                          ++ _6058_ii1;
                        }
                      }
                      else
                      {
                        {
                          _6054_hasnz = true;
                          int32_t _11668_ = _ptr__5996_wi32[safe_add( _5989_ptr,_6059_i1 )];
                          int32_t _11669_ = _ptr__5996_wi32[safe_add( safe_add( _5989_ptr,_6059_i1 ),(int)1 )];
                          for (int32_t _6060_k = _11668_; _6060_k < _11669_; ++_6060_k)
                          {
                            {
                              _ptr__6043_ri64[safe_add( _6036_rnidxs,_6049_nzi )] = _ptr__5997_wi64[safe_add( _5991_nidxs,_6060_k )];
                              _ptr__6044_rf64[safe_add( _6038_rcof,_6049_nzi )] = (_ptr__5998_wf64[safe_add( _5992_cof,_6060_k )] * ((*mval)(_6056_i0)));
                              if ((_6007_rncodeatom > (int)0))
                              {
                                {
                                  int32_t _11670_ = _ptr__5996_wi32[safe_add( _5993_codeptr,_6060_k )];
                                  int32_t _11671_ = _ptr__5996_wi32[safe_add( safe_add( _5993_codeptr,_6060_k ),(int)1 )];
                                  for (int32_t _6061_l = _11670_; _6061_l < _11671_; ++_6061_l)
                                  {
                                    {
                                      _ptr__6045_ri32[safe_add( _6040_rcode,_6047_codei )] = _ptr__5996_wi32[safe_add( _5994_code,_6061_l )];
                                      _ptr__6044_rf64[safe_add( _6042_rcconst,_6047_codei )] = _ptr__6044_rf64[safe_add( _5995_cconst,_6061_l )];
                                      ++ _6047_codei;
                                    }
                                  }
                                  _ptr__6045_ri32[safe_add( _6040_rcode,_6047_codei )] = 2;
                                  _ptr__6044_rf64[safe_add( _6042_rcconst,_6047_codei )] = ((*mval)(_6056_i0));
                                  ++ _6047_codei;
                                  _ptr__6045_ri32[safe_add( _6040_rcode,_6047_codei )] = 5;
                                  _ptr__6045_ri32[safe_add( safe_add( _6041_rcodeptr,_6049_nzi ),(int)1 )] = _6047_codei;
                                }
                              }
                              {}
                              ++ _6049_nzi;
                            }
                          }
                          ++ _6056_i0;
                          ++ _6058_ii1;
                        }
                      }
                    }
                  }
                  if (_6054_hasnz)
                  {
                    {
                      _ptr__6045_ri32[safe_add( safe_add( _6035_rptr,_6048_relm ),(int)1 )] = _6049_nzi;
                      _ptr__6043_ri64[safe_add( _6037_rsp,_6048_relm )] = safe_add( safe_mul( _6051_i,_6003_edim1 ),_6053_j );
                      ++ _6048_relm;
                    }
                  }
                  {}
                }
              }
              _6050_mp = _6052_me;
            }
          }
        }
      }
      else
      {
        {
          int32_t _6062_codei = (int)0;
          int32_t _6063_elmi = (int)0;
          int32_t _6064_nzi = (int)0;
          int32_t _11672_ = (int)0;
          int32_t _11673_ = mdim0;
          for (int32_t _6065_i = _11672_; _6065_i < _11673_; ++_6065_i)
          {
            {
              int32_t _11674_ = (int)0;
              int32_t _11675_ = _6003_edim1;
              for (int32_t _6066_j = _11674_; _6066_j < _11675_; ++_6066_j)
              {
                {
                  int32_t _11676_ = _ptr__6046_xi32[safe_add( _6001_eptr,_6066_j )];
                  int32_t _11677_ = _ptr__6046_xi32[safe_add( safe_add( _6001_eptr,_6066_j ),(int)1 )];
                  for (int32_t _6067_ii1 = _11676_; _6067_ii1 < _11677_; ++_6067_ii1)
                  {
                    {
                      int32_t _6068_i1 = _ptr__6046_xi32[safe_add( _5999_eperm,_6067_ii1 )];
                      int64_t _6069_i0 = safe_add( safe_mul( _6065_i,mdim1 ),(_ptr__5997_wi64[safe_add( _5990_sp,_6068_i1 )] / _6003_edim1) );
                      int32_t _11678_ = _ptr__5996_wi32[safe_add( _5989_ptr,_6068_i1 )];
                      int32_t _11679_ = _ptr__5996_wi32[safe_add( safe_add( _5989_ptr,_6068_i1 ),(int)1 )];
                      for (int32_t _6070_k = _11678_; _6070_k < _11679_; ++_6070_k)
                      {
                        {
                          _ptr__6043_ri64[safe_add( _6036_rnidxs,_6064_nzi )] = _ptr__5997_wi64[safe_add( _5991_nidxs,_6070_k )];
                          _ptr__6044_rf64[safe_add( _6038_rcof,_6064_nzi )] = (_ptr__5998_wf64[safe_add( _5992_cof,_6070_k )] * ((*mval)(_6069_i0)));
                          if ((_6007_rncodeatom > (int)0))
                          {
                            {
                              int32_t _11680_ = _ptr__5996_wi32[safe_add( _5993_codeptr,_6070_k )];
                              int32_t _11681_ = _ptr__5996_wi32[safe_add( safe_add( _5993_codeptr,_6070_k ),(int)1 )];
                              for (int32_t _6071_l = _11680_; _6071_l < _11681_; ++_6071_l)
                              {
                                {
                                  _ptr__6045_ri32[safe_add( _6040_rcode,_6062_codei )] = _ptr__5996_wi32[safe_add( _5994_code,_6071_l )];
                                  _ptr__6044_rf64[safe_add( _6042_rcconst,_6062_codei )] = _ptr__5998_wf64[safe_add( _5995_cconst,_6071_l )];
                                  ++ _6062_codei;
                                }
                              }
                              _ptr__6045_ri32[safe_add( _6040_rcode,_6062_codei )] = 2;
                              _ptr__6044_rf64[safe_add( _6042_rcconst,_6062_codei )] = ((*mval)(_6069_i0));
                              ++ _6062_codei;
                              _ptr__6045_ri32[safe_add( _6040_rcode,_6062_codei )] = 5;
                              ++ _6062_codei;
                              _ptr__6045_ri32[safe_add( safe_add( _6041_rcodeptr,_6064_nzi ),(int)1 )] = _6062_codei;
                            }
                          }
                          {}
                          ++ _6064_nzi;
                        }
                      }
                    }
                  }
                  _ptr__6045_ri32[safe_add( safe_add( _6035_rptr,_6063_elmi ),(int)1 )] = _6064_nzi;
                  ++ _6063_elmi;
                }
              }
            }
          }
          if ((_6063_elmi != _6008_rnelem))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
            }
          }
          {}
          if ((_6064_nzi != _6009_rnnz))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
            }
          }
          {}
          if ((_6062_codei != _6007_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int32_t _6072_codei = (int)0;
      int32_t _6073_mp = (int)0;
      int32_t _6074_elmi = (int)0;
      int32_t _6075_nzi = (int)0;
      while ( (_6073_mp < _6004_mnnz) )
      {
        {
          int32_t _6076_me = safe_add( _6073_mp,(int)1 );
          while ( ((_6076_me < _6004_mnnz) && (((*msubi)(_6073_mp)) == ((*msubi)(_6076_me)))) )
          {
            {
              ++ _6076_me;
            }
          }
          int32_t _6077_i = ((*msubi)(_6073_mp));
          int32_t _11682_ = (int)0;
          int32_t _11683_ = _6003_edim1;
          for (int32_t _6078_j = _11682_; _6078_j < _11683_; ++_6078_j)
          {
            {
              bool _6079_hasnz = false;
              int32_t _11684_ = _6073_mp;
              int32_t _11685_ = _6076_me;
              for (int32_t _6080_i0 = _11684_; _6080_i0 < _11685_; ++_6080_i0)
              {
                {
                  int32_t _6081_i1 = safe_add( safe_mul( ((*msubj)(_6080_i0)),_6003_edim1 ),_6078_j );
                  int32_t _11686_ = _ptr__5996_wi32[safe_add( _5989_ptr,_6081_i1 )];
                  int32_t _11687_ = _ptr__5996_wi32[safe_add( safe_add( _5989_ptr,_6081_i1 ),(int)1 )];
                  for (int32_t _6082_j = _11686_; _6082_j < _11687_; ++_6082_j)
                  {
                    {
                      _ptr__6043_ri64[safe_add( _6036_rnidxs,_6075_nzi )] = _ptr__5997_wi64[safe_add( _5991_nidxs,_6082_j )];
                      _ptr__6044_rf64[safe_add( _6038_rcof,_6075_nzi )] = (_ptr__5998_wf64[safe_add( _5992_cof,_6082_j )] * ((*mval)(_6080_i0)));
                      if ((_6007_rncodeatom > (int)0))
                      {
                        {
                          int32_t _11688_ = _ptr__5996_wi32[safe_add( _5993_codeptr,_6082_j )];
                          int32_t _11689_ = _ptr__5996_wi32[safe_add( safe_add( _5993_codeptr,_6082_j ),(int)1 )];
                          for (int32_t _6083_k = _11688_; _6083_k < _11689_; ++_6083_k)
                          {
                            {
                              _ptr__6045_ri32[safe_add( _6040_rcode,_6072_codei )] = _ptr__5996_wi32[safe_add( _5994_code,_6083_k )];
                              _ptr__6044_rf64[safe_add( _6042_rcconst,_6072_codei )] = _ptr__5998_wf64[safe_add( _5995_cconst,_6083_k )];
                              ++ _6072_codei;
                            }
                          }
                          _ptr__6045_ri32[safe_add( _6040_rcode,_6072_codei )] = 2;
                          _ptr__6044_rf64[safe_add( _6042_rcconst,_6072_codei )] = ((*mval)(_6080_i0));
                          ++ _6072_codei;
                          _ptr__6045_ri32[safe_add( _6040_rcode,_6072_codei )] = 5;
                          ++ _6072_codei;
                          _ptr__6045_ri32[safe_add( safe_add( _6041_rcodeptr,_6075_nzi ),(int)1 )] = _6072_codei;
                        }
                      }
                      {}
                      ++ _6075_nzi;
                    }
                  }
                  _6079_hasnz = true;
                }
              }
              if (_6079_hasnz)
              {
                {
                  _ptr__6043_ri64[safe_add( _6037_rsp,_6074_elmi )] = safe_add( safe_mul( _6077_i,_6003_edim1 ),_6078_j );
                  _ptr__6045_ri32[safe_add( safe_add( _6035_rptr,_6074_elmi ),(int)1 )] = _6075_nzi;
                  ++ _6074_elmi;
                }
              }
              {}
            }
          }
          _6073_mp = _6076_me;
        }
      }
      if ((_6074_elmi != _6008_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
        }
      }
      {}
      if ((_6075_nzi != _6009_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
        }
      }
      {}
      if ((_6072_codei != _6007_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
        }
      }
      {}
    }
  }
  if ((!_6006_rhassp))
  {
    {
      _5980_rs->popi64(_6008_rnelem);
    }
  }
  {}
  _5982_xs->clear();
}
// End mosek.fusion.ExprMulLeft.eval

// Begin mosek.fusion.ExprMulLeft.computeshape
// Method mosek.fusion.ExprMulLeft.computeshape @ src/fusion/ExprMul.monty:96:6-102:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprMulLeft::computeshape(int32_t _6084_d0,int32_t _6085_d1,std::shared_ptr< monty::ndarray< int32_t,1 > > _6086_ds)
{
  _checked_ptr_1<int32_t> _ptr__6086_ds(_6086_ds ? _6086_ds->raw() : nullptr, _6086_ds ? _6086_ds->size(0) : 0);
  if (((int)((_6086_ds)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_6085_d1 != _ptr__6086_ds[(int)0]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_6084_d0),(int32_t)(_ptr__6086_ds[(int)1])});
}
// End mosek.fusion.ExprMulLeft.computeshape

// Begin mosek.fusion.ExprMulLeft.validate
// Method mosek.fusion.ExprMulLeft.validate @ src/fusion/ExprMul.monty:27:6-68:7
int32_t mosek::fusion::p_ExprMulLeft::validate(int32_t _6087_mdim0,int32_t _6088_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _6089_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _6090_msubj,std::shared_ptr< monty::ndarray< double,1 > > _6091_mval,monty::rc_ptr< ::mosek::fusion::Expression > _6092_expr)
{
  _checked_ptr_1<int32_t> _ptr__6089_msubi(_6089_msubi ? _6089_msubi->raw() : nullptr, _6089_msubi ? _6089_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__6090_msubj(_6090_msubj ? _6090_msubj->raw() : nullptr, _6090_msubj ? _6090_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__6091_mval(_6091_mval ? _6091_mval->raw() : nullptr, _6091_mval ? _6091_mval->size(0) : 0);
  if ((_6092_expr->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _6093_edim0 = _6092_expr->getDim((int)0);
  int32_t _6094_edim1 = _6092_expr->getDim((int)0);
  if (((_6087_mdim0 < (int)0) || (_6088_mdim1 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_6088_mdim1 != _6093_edim0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_6089_msubi)->size(0)) != (int)((_6090_msubj)->size(0))) || ((int)((_6089_msubi)->size(0)) != (int)((_6091_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _6095_mnnz = (int)((_6089_msubi)->size(0));
  bool _6096_err_data = false;
  bool _6097_err_unsorted = false;
  {
    int32_t _11690_ = (int)0;
    int32_t _11691_ = _6095_mnnz;
    for (int32_t _6098_i = _11690_; _6098_i < _11691_; ++_6098_i)
    {
      {
        _6096_err_data = (_6096_err_data || ((_ptr__6089_msubi[_6098_i] < (int)0) || ((_ptr__6089_msubi[_6098_i] >= _6087_mdim0) || ((_ptr__6090_msubj[_6098_i] < (int)0) || (_ptr__6090_msubj[_6098_i] >= _6088_mdim1)))));
      }
    }
    if ((!_6096_err_data))
    {
      {
        int32_t _11692_ = (int)0;
        int32_t _11693_ = (_6095_mnnz - (int)1);
        for (int32_t _6099_i = _11692_; _6099_i < _11693_; ++_6099_i)
        {
          {
            _6097_err_unsorted = (_6097_err_unsorted || ((_ptr__6089_msubi[_6099_i] > _ptr__6089_msubi[safe_add( _6099_i,(int)1 )]) || ((_ptr__6089_msubi[_6099_i] == _ptr__6089_msubi[safe_add( _6099_i,(int)1 )]) && (_ptr__6090_msubj[_6099_i] >= _ptr__6090_msubj[safe_add( _6099_i,(int)1 )]))));
          }
        }
      }
    }
    {}
  }
  if (_6096_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_6097_err_unsorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprMulLeft.validate

// Begin mosek.fusion.ExprMulLeft.toString
// Method mosek.fusion.ExprMulLeft.toString @ src/fusion/ExprMul.monty:23:6-25:7
std::string mosek::fusion::ExprMulLeft :: toString() { return mosek::fusion::p_ExprMulLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulLeft(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulLeft.toString

void mosek::fusion::p_ExprMulLeft::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulLeft::destroy() { mosek::fusion::p_ExprMulLeft::_get_impl(this)->destroy(); }
// } class ExprMulLeft
// class ExprMulVar { // @ src/fusion/ExprMulVar.monty:170:4-746:5
mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }
mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulVar::p_ExprMulVar
  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulVar.ctor @ src/fusion/ExprMulVar.monty:248:6-276:7
mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar
  (bool _6100_left,
    int32_t _6101_mdimi,
    int32_t _6102_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6103_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6104_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6105_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6106_x)
{ return new mosek::fusion::ExprMulVar(_6100_left,_6101_mdimi,_6102_mdimj,_6103_msubi,_6104_msubj,_6105_mcof,_6106_x); }
mosek::fusion::ExprMulVar::ExprMulVar
  (bool _6100_left,
    int32_t _6101_mdimi,
    int32_t _6102_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6103_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6104_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6105_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6106_x) : 
   ExprMulVar(new mosek::fusion::p_ExprMulVar(this))
{ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_6100_left,_6101_mdimi,_6102_mdimj,_6103_msubi,_6104_msubj,_6105_mcof,_6106_x); }
void mosek::fusion::p_ExprMulVar::_initialize  (bool _6100_left,
    int32_t _6101_mdimi,
    int32_t _6102_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6103_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6104_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6105_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6106_x)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6103_msubi(_6103_msubi ? _6103_msubi->raw() : nullptr, _6103_msubi ? _6103_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6104_msubj(_6104_msubj ? _6104_msubj->raw() : nullptr, _6104_msubj ? _6104_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6105_mcof(_6105_mcof ? _6105_mcof->raw() : nullptr, _6105_mcof ? _6105_mcof->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_6100_left,_6101_mdimi,_6102_mdimj,_6103_msubi,_6104_msubj,_6105_mcof,_6106_x,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6107_xshape = _6106_x->getShape();
    _checked_ptr_1<int32_t> _ptr__6107_xshape(_6107_xshape ? _6107_xshape->raw() : nullptr,_6107_xshape ? _6107_xshape->size(0) : 0);
    int32_t _6108_nd = (int)((_6107_xshape)->size(0));
    if ((_6108_nd != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_6100_left && (_ptr__6107_xshape[(int)0] != _6102_mdimj)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_6100_left) && (_ptr__6107_xshape[(int)1] != _6101_mdimi)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_6103_msubi)->size(0)) != (int)((_6104_msubj)->size(0))) || ((int)((_6103_msubi)->size(0)) != (int)((_6105_mcof)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_6101_mdimi,_6102_mdimj,_6103_msubi,_6104_msubj,_6105_mcof);
  }
}
// mosek.fusion.ExprMulVar.ctor

// mosek.fusion.ExprMulVar.ctor @ src/fusion/ExprMulVar.monty:196:6-220:7
mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar
  (bool _6109_left,
    int32_t _6110_mdimi,
    int32_t _6111_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6112_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6113_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6114_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6115_x,
    int32_t _6116_unchecked_)
{ return new mosek::fusion::ExprMulVar(_6109_left,_6110_mdimi,_6111_mdimj,_6112_msubi,_6113_msubj,_6114_mcof,_6115_x,_6116_unchecked_); }
mosek::fusion::ExprMulVar::ExprMulVar
  (bool _6109_left,
    int32_t _6110_mdimi,
    int32_t _6111_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6112_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6113_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6114_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6115_x,
    int32_t _6116_unchecked_) : 
   ExprMulVar(new mosek::fusion::p_ExprMulVar(this))
{ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_6109_left,_6110_mdimi,_6111_mdimj,_6112_msubi,_6113_msubj,_6114_mcof,_6115_x,_6116_unchecked_); }
void mosek::fusion::p_ExprMulVar::_initialize  (bool _6109_left,
    int32_t _6110_mdimi,
    int32_t _6111_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6112_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6113_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6114_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6115_x,
    int32_t _6116_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6112_msubi(_6112_msubi ? _6112_msubi->raw() : nullptr, _6112_msubi ? _6112_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6113_msubj(_6113_msubj ? _6113_msubj->raw() : nullptr, _6113_msubj ? _6113_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6114_mcof(_6114_mcof ? _6114_mcof->raw() : nullptr, _6114_mcof ? _6114_mcof->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulVar::resshape(_6110_mdimi,_6111_mdimj,_6115_x->getShape(),_6109_left));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _6109_left;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _6115_x;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _6110_mdimi;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _6111_mdimj;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_6112_msubi);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_6113_msubj);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_6114_mcof);
  }
}
// mosek.fusion.ExprMulVar.ctor

// Begin mosek.fusion.ExprMulVar.eval
// Method mosek.fusion.ExprMulVar.eval @ src/fusion/ExprMulVar.monty:740:6-745:7
void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6117_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6118_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6119_xs) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_6117_rs,_6118_ws,_6119_xs); }
void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6117_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6118_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6119_xs)
{
  if (left)
  {
    {
      _pubthis->eval_left(_6117_rs,_6118_ws,_6119_xs);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_6117_rs,_6118_ws,_6119_xs);
    }
  }
}
// End mosek.fusion.ExprMulVar.eval

// Begin mosek.fusion.ExprMulVar.eval_right
// Method mosek.fusion.ExprMulVar.eval_right @ src/fusion/ExprMulVar.monty:460:6-737:7
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _6120_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6121_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6122_xs) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_6120_rs,_6121_ws,_6122_xs); }
void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _6120_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6121_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6122_xs)
{
  int32_t _6123_base_pi32 = mosek::fusion::p_WorkStack::_get_impl(_6121_ws)->pi32;
  int32_t _6124_base_pi64 = mosek::fusion::p_WorkStack::_get_impl(_6121_ws)->pi64;
  int32_t _6125_nx = x->numInst();
  int32_t _6126_nidxs = _6121_ws->alloci64(_6125_nx);
  int32_t _6127_sp = _6121_ws->alloci64(_6125_nx);
  int32_t _6128_xsubi = _6121_ws->alloci32(_6125_nx);
  int32_t _6129_xsubj = _6121_ws->alloci32(_6125_nx);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6130_xshape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6130_xshape(_6130_xshape ? _6130_xshape->raw() : nullptr,_6130_xshape ? _6130_xshape->size(0) : 0);
  int32_t _6131_nd = (int)((_6130_xshape)->size(0));
  int64_t _6132_x_total_size = safe_mul( _ptr__6130_xshape[(int)0],_ptr__6130_xshape[(int)1] );
  int32_t _6133_xdim1 = _ptr__6130_xshape[(int)1];
  int32_t _6134_xdim0 = _ptr__6130_xshape[(int)0];
  int32_t _6135_ptr = _6121_ws->alloci32(safe_add( _6134_xdim0,(int)1 ));
  int32_t _6136_numm = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6137_msubi = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int32_t> _ptr__6137_msubi(_6137_msubi ? _6137_msubi->raw() : nullptr,_6137_msubi ? _6137_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6138_msubj = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int32_t> _ptr__6138_msubj(_6138_msubj ? _6138_msubj->raw() : nullptr,_6138_msubj ? _6138_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6139_mcof = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__6139_mcof(_6139_mcof ? _6139_mcof->raw() : nullptr,_6139_mcof ? _6139_mcof->size(0) : 0);
  int32_t _6140_mdim0 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int32_t _6141_mdim1 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _6142_m_is_dense = ((_6136_numm / _6140_mdim0) == _6141_mdim1);
  int32_t _6143_perm = _6121_ws->alloci32(_6136_numm);
  int32_t _6144_mptr = _6121_ws->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6145_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6121_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6145_wi32(_6145_wi32 ? _6145_wi32->raw() : nullptr,_6145_wi32 ? _6145_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6146_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6121_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6146_wi64(_6146_wi64 ? _6146_wi64->raw() : nullptr,_6146_wi64 ? _6146_wi64->size(0) : 0);
  int32_t _6147_nnz = (int)0;
  int32_t _6148_nelem = (int)0;
  x->inst(_6127_sp,_6146_wi64,_6126_nidxs,_6146_wi64);
  if (_6142_m_is_dense)
  {
    {
      int32_t _6149_x_num_nonempty_rows = (int)0;
      if ((_6125_nx > (int)0))
      {
        {
          _6149_x_num_nonempty_rows = (int)1;
          if ((_6134_xdim0 > (int)1))
          {
            {
              if ((_6133_xdim1 == (int)1))
              {
                {
                  int32_t _11694_ = (int)1;
                  int32_t _11695_ = _6125_nx;
                  for (int32_t _6150_i = _11694_; _6150_i < _11695_; ++_6150_i)
                  {
                    {
                      if ((_ptr__6146_wi64[safe_add( _6127_sp,_6150_i )] > _ptr__6146_wi64[(safe_add( _6127_sp,_6150_i ) - (int)1)]))
                      {
                        {
                          ++ _6149_x_num_nonempty_rows;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int32_t _11696_ = (int)1;
                  int32_t _11697_ = _6125_nx;
                  for (int32_t _6151_i = _11696_; _6151_i < _11697_; ++_6151_i)
                  {
                    {
                      if (((_ptr__6146_wi64[safe_add( _6127_sp,_6151_i )] / _6133_xdim1) > (_ptr__6146_wi64[(safe_add( _6127_sp,_6151_i ) - (int)1)] / _6133_xdim1)))
                      {
                        {
                          ++ _6149_x_num_nonempty_rows;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _6148_nelem = safe_mul( _6149_x_num_nonempty_rows,_6141_mdim1 );
      _6147_nnz = safe_mul( _6125_nx,_6141_mdim1 );
      bool _6152_hassp = (_6149_x_num_nonempty_rows < _6134_xdim0);
      _6120_rs->alloc_expr((int)2,_6148_nelem,_6147_nnz,_6152_hassp);
      int32_t _6153_rptr = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->ptr_base;
      int32_t _6154_rshape = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->shape_base;
      int32_t _6155_rnidx = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->nidxs_base;
      int32_t _11698_;
      bool _11699_ = _6152_hassp;
      if (_11699_)
      {
        _11698_ = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->sp_base;
      }
      else
      {
        _11698_ = _6120_rs->alloci64(_6148_nelem);
      }
      int32_t _6156_rsp = _11698_;
      int32_t _6157_rcof = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->cof_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6158_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6158_ri32(_6158_ri32 ? _6158_ri32->raw() : nullptr,_6158_ri32 ? _6158_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6159_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6159_ri64(_6159_ri64 ? _6159_ri64->raw() : nullptr,_6159_ri64 ? _6159_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6160_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->f64;
      _checked_ptr_1<double> _ptr__6160_rf64(_6160_rf64 ? _6160_rf64->raw() : nullptr,_6160_rf64 ? _6160_rf64->size(0) : 0);
      _ptr__6158_ri32[_6154_rshape] = _6134_xdim0;
      _ptr__6158_ri32[safe_add( _6154_rshape,(int)1 )] = _6141_mdim1;
      {
        int32_t _6161_p = (int)0;
        int32_t _6162_relm = (int)0;
        int32_t _6163_rnz = (int)0;
        _ptr__6158_ri32[_6153_rptr] = (int)0;
        while ( (_6161_p < _6125_nx) )
        {
          {
            int32_t _6164_p0 = _6161_p;
            ++ _6161_p;
            while ( ((_6161_p < _6125_nx) && ((_ptr__6146_wi64[safe_add( _6127_sp,_6161_p )] / _6133_xdim1) == (_ptr__6146_wi64[safe_add( _6127_sp,_6164_p0 )] / _6133_xdim1))) )
            {
              {
                ++ _6161_p;
              }
            }
            int64_t _6165_i = (_ptr__6146_wi64[safe_add( _6127_sp,_6164_p0 )] / _6133_xdim1);
            int32_t _11700_ = (int)0;
            int32_t _11701_ = _6141_mdim1;
            for (int32_t _6166_j = _11700_; _6166_j < _11701_; ++_6166_j)
            {
              {
                int32_t _11702_ = _6164_p0;
                int32_t _11703_ = _6161_p;
                for (int32_t _6167_k = _11702_; _6167_k < _11703_; ++_6167_k)
                {
                  {
                    int64_t _6168_jj = (_ptr__6146_wi64[safe_add( _6127_sp,_6167_k )] % _6133_xdim1);
                    _ptr__6159_ri64[safe_add( _6155_rnidx,_6163_rnz )] = _ptr__6146_wi64[safe_add( _6126_nidxs,_6167_k )];
                    _ptr__6160_rf64[safe_add( _6157_rcof,_6163_rnz )] = _ptr__6139_mcof[safe_add( safe_mul( _6168_jj,_6141_mdim1 ),_6166_j )];
                    ++ _6163_rnz;
                  }
                }
                _ptr__6158_ri32[safe_add( safe_add( _6153_rptr,_6162_relm ),(int)1 )] = _6163_rnz;
                _ptr__6159_ri64[safe_add( _6156_rsp,_6162_relm )] = safe_add( safe_mul( _6165_i,_6141_mdim1 ),_6166_j );
                ++ _6162_relm;
              }
            }
          }
        }
      }
      if ((!_6152_hassp))
      {
        {
          _6120_rs->popi64(_6148_nelem);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_6141_mdim1 == (int)1))
        {
          {
            int32_t _11704_ = (int)0;
            int32_t _11705_ = _6136_numm;
            for (int32_t _6169_i = _11704_; _6169_i < _11705_; ++_6169_i)
            {
              {
                _ptr__6145_wi32[safe_add( _6143_perm,_6169_i )] = _6169_i;
              }
            }
            _ptr__6145_wi32[_6144_mptr] = (int)0;
            _ptr__6145_wi32[safe_add( _6144_mptr,(int)1 )] = _6136_numm;
          }
        }
        else
        {
          {
            _ptr__6145_wi32[_6144_mptr] = (int)0;
            int32_t _11706_ = (int)0;
            int32_t _11707_ = safe_add( _6141_mdim1,(int)1 );
            for (int32_t _6170_i = _11706_; _6170_i < _11707_; ++_6170_i)
            {
              {
                _ptr__6145_wi32[safe_add( _6144_mptr,_6170_i )] = (int)0;
              }
            }
            int32_t _11708_ = (int)0;
            int32_t _11709_ = _6136_numm;
            for (int32_t _6171_i = _11708_; _6171_i < _11709_; ++_6171_i)
            {
              {
                ++ _ptr__6145_wi32[safe_add( safe_add( _6144_mptr,_ptr__6138_msubj[_6171_i] ),(int)1 )];
              }
            }
            int32_t _11710_ = (int)0;
            int32_t _11711_ = mdimj;
            for (int32_t _6172_i = _11710_; _6172_i < _11711_; ++_6172_i)
            {
              {
                _ptr__6145_wi32[safe_add( safe_add( _6144_mptr,_6172_i ),(int)1 )] += _ptr__6145_wi32[safe_add( _6144_mptr,_6172_i )];
              }
            }
            int32_t _11712_ = (int)0;
            int32_t _11713_ = _6136_numm;
            for (int32_t _6173_i = _11712_; _6173_i < _11713_; ++_6173_i)
            {
              {
                _ptr__6145_wi32[safe_add( _6143_perm,_ptr__6145_wi32[safe_add( _6144_mptr,_ptr__6138_msubj[_6173_i] )] )] = _6173_i;
                ++ _ptr__6145_wi32[safe_add( _6144_mptr,_ptr__6138_msubj[_6173_i] )];
              }
            }
            int32_t _11714_ = (int)0;
            int32_t _11715_ = _6141_mdim1;
            for (int32_t _6174_i = _11714_; _6174_i < _11715_; ++_6174_i)
            {
              {
                _ptr__6145_wi32[(safe_add( _6144_mptr,_6141_mdim1 ) - _6174_i)] = _ptr__6145_wi32[((safe_add( _6144_mptr,_6141_mdim1 ) - _6174_i) - (int)1)];
              }
            }
            _ptr__6145_wi32[_6144_mptr] = (int)0;
          }
        }
      }
      if (((_6125_nx / _6134_xdim0) == _6133_xdim1))
      {
        {
          int32_t _6175_num_nz_cols = (int)0;
          {
            int32_t _6176_p = (int)0;
            while ( (_6176_p < _6136_numm) )
            {
              {
                ++ _6176_p;
                while ( ((_6176_p < _6136_numm) && (_ptr__6138_msubj[_ptr__6145_wi32[(safe_add( _6143_perm,_6176_p ) - (int)1)]] == _ptr__6138_msubj[_ptr__6145_wi32[safe_add( _6143_perm,_6176_p )]])) )
                {
                  {
                    ++ _6176_p;
                  }
                }
                ++ _6175_num_nz_cols;
              }
            }
          }
          _6148_nelem = safe_mul( _6175_num_nz_cols,_6134_xdim0 );
          _6147_nnz = safe_mul( _6136_numm,_6134_xdim0 );
          bool _6177_rhassp = (_6175_num_nz_cols < _6141_mdim1);
          _6120_rs->alloc_expr((int)2,_6148_nelem,_6147_nnz,_6177_rhassp);
          int32_t _6178_rptr = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->ptr_base;
          int32_t _6179_rshape = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->shape_base;
          int32_t _6180_rnidx = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->nidxs_base;
          int32_t _11716_;
          bool _11717_ = _6177_rhassp;
          if (_11717_)
          {
            _11716_ = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->sp_base;
          }
          else
          {
            _11716_ = _6120_rs->alloci64(_6148_nelem);
          }
          int32_t _6181_rsp = _11716_;
          int32_t _6182_rcof = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->i32)(_6179_rshape)) = _6134_xdim0;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->i32)(safe_add( _6179_rshape,(int)1 ))) = _6141_mdim1;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _6183_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__6183_ri32(_6183_ri32 ? _6183_ri32->raw() : nullptr,_6183_ri32 ? _6183_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6184_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__6184_ri64(_6184_ri64 ? _6184_ri64->raw() : nullptr,_6184_ri64 ? _6184_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _6185_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->f64;
          _checked_ptr_1<double> _ptr__6185_rf64(_6185_rf64 ? _6185_rf64->raw() : nullptr,_6185_rf64 ? _6185_rf64->size(0) : 0);
          _ptr__6183_ri32[_6178_rptr] = (int)0;
          int32_t _6186_kelm = (int)0;
          int32_t _6187_knz = (int)0;
          int32_t _11718_ = (int)0;
          int32_t _11719_ = _6134_xdim0;
          for (int32_t _6188_i = _11718_; _6188_i < _11719_; ++_6188_i)
          {
            {
              int32_t _6189_p = (int)0;
              while ( (_6189_p < _6136_numm) )
              {
                {
                  int32_t _6190_p0 = _6189_p;
                  ++ _6189_p;
                  while ( ((_6189_p < _6136_numm) && (_ptr__6138_msubj[_ptr__6145_wi32[safe_add( _6143_perm,_6190_p0 )]] == _ptr__6138_msubj[_ptr__6145_wi32[safe_add( _6143_perm,_6189_p )]])) )
                  {
                    {
                      ++ _6189_p;
                    }
                  }
                  int32_t _6191_j = _ptr__6138_msubj[_ptr__6145_wi32[safe_add( _6143_perm,_6190_p0 )]];
                  int32_t _11720_ = _6190_p0;
                  int32_t _11721_ = _6189_p;
                  for (int32_t _6192_k = _11720_; _6192_k < _11721_; ++_6192_k)
                  {
                    {
                      int32_t _6193_ii = _ptr__6137_msubi[_ptr__6145_wi32[safe_add( _6143_perm,_6192_k )]];
                      _ptr__6184_ri64[safe_add( _6180_rnidx,_6187_knz )] = _ptr__6146_wi64[safe_add( safe_add( _6126_nidxs,safe_mul( _6188_i,_6133_xdim1 ) ),_6193_ii )];
                      _ptr__6185_rf64[safe_add( _6182_rcof,_6187_knz )] = _ptr__6139_mcof[_ptr__6145_wi32[safe_add( _6143_perm,_6192_k )]];
                      ++ _6187_knz;
                    }
                  }
                  _ptr__6184_ri64[safe_add( _6181_rsp,_6186_kelm )] = safe_add( safe_mul( _6188_i,_6141_mdim1 ),_6191_j );
                  _ptr__6183_ri32[safe_add( safe_add( _6178_rptr,_6186_kelm ),(int)1 )] = _6187_knz;
                  ++ _6186_kelm;
                }
              }
            }
          }
          if ((!_6177_rhassp))
          {
            {
              _6120_rs->popi64(_6148_nelem);
            }
          }
          {}
        }
      }
      else
      {
        {
          int32_t _11722_ = (int)0;
          int32_t _11723_ = safe_add( _6134_xdim0,(int)1 );
          for (int32_t _6194_i = _11722_; _6194_i < _11723_; ++_6194_i)
          {
            {
              _ptr__6145_wi32[safe_add( _6135_ptr,_6194_i )] = (int)0;
            }
          }
          if ((_6131_nd == (int)1))
          {
            {
              int32_t _11724_ = (int)0;
              int32_t _11725_ = _6125_nx;
              for (int32_t _6195_i = _11724_; _6195_i < _11725_; ++_6195_i)
              {
                {
                  _ptr__6145_wi32[safe_add( _6128_xsubi,_6195_i )] = (int)0;
                }
              }
              int32_t _11726_ = (int)0;
              int32_t _11727_ = _6125_nx;
              for (int32_t _6196_i = _11726_; _6196_i < _11727_; ++_6196_i)
              {
                {
                  _ptr__6145_wi32[safe_add( _6129_xsubj,_6196_i )] = (int32_t)_ptr__6146_wi64[safe_add( _6127_sp,_6196_i )];
                }
              }
              _ptr__6145_wi32[_6135_ptr] = (int)0;
              _ptr__6145_wi32[safe_add( _6135_ptr,(int)1 )] = _6125_nx;
            }
          }
          else
          {
            {
              int32_t _11728_ = (int)0;
              int32_t _11729_ = _6125_nx;
              for (int32_t _6197_i = _11728_; _6197_i < _11729_; ++_6197_i)
              {
                {
                  _ptr__6145_wi32[safe_add( _6128_xsubi,_6197_i )] = (int32_t)(_ptr__6146_wi64[safe_add( _6127_sp,_6197_i )] / _ptr__6130_xshape[(int)1]);
                }
              }
              int32_t _11730_ = (int)0;
              int32_t _11731_ = _6125_nx;
              for (int32_t _6198_i = _11730_; _6198_i < _11731_; ++_6198_i)
              {
                {
                  _ptr__6145_wi32[safe_add( _6129_xsubj,_6198_i )] = (int32_t)(_ptr__6146_wi64[safe_add( _6127_sp,_6198_i )] % _ptr__6130_xshape[(int)1]);
                }
              }
              _ptr__6145_wi32[_6135_ptr] = (int)0;
              int32_t _11732_ = (int)0;
              int32_t _11733_ = _6125_nx;
              for (int32_t _6199_i = _11732_; _6199_i < _11733_; ++_6199_i)
              {
                {
                  ++ _ptr__6145_wi32[safe_add( safe_add( _6135_ptr,_ptr__6145_wi32[safe_add( _6128_xsubi,_6199_i )] ),(int)1 )];
                }
              }
              int32_t _11734_ = (int)0;
              int32_t _11735_ = _6134_xdim0;
              for (int32_t _6200_i = _11734_; _6200_i < _11735_; ++_6200_i)
              {
                {
                  _ptr__6145_wi32[safe_add( safe_add( _6135_ptr,_6200_i ),(int)1 )] += _ptr__6145_wi32[safe_add( _6135_ptr,_6200_i )];
                }
              }
            }
          }
          int32_t _11736_ = (int)0;
          int32_t _11737_ = _6134_xdim0;
          for (int32_t _6201_i = _11736_; _6201_i < _11737_; ++_6201_i)
          {
            {
              int32_t _11738_ = (int)0;
              int32_t _11739_ = mdimj;
              for (int32_t _6202_j = _11738_; _6202_j < _11739_; ++_6202_j)
              {
                {
                  int32_t _6203_nz = (int)0;
                  int32_t _6204_e1 = _ptr__6145_wi32[safe_add( safe_add( _6135_ptr,_6201_i ),(int)1 )];
                  int32_t _6205_e0 = _ptr__6145_wi32[safe_add( safe_add( _6144_mptr,_6202_j ),(int)1 )];
                  int32_t _6206_i1 = _ptr__6145_wi32[safe_add( _6135_ptr,_6201_i )];
                  int32_t _6207_i0 = _ptr__6145_wi32[safe_add( _6144_mptr,_6202_j )];
                  while ( ((_6207_i0 < _6205_e0) && (_6206_i1 < _6204_e1)) )
                  {
                    {
                      if ((_ptr__6137_msubi[_ptr__6145_wi32[safe_add( _6143_perm,_6207_i0 )]] < _ptr__6145_wi32[safe_add( _6129_xsubj,_6206_i1 )]))
                      {
                        {
                          ++ _6207_i0;
                        }
                      }
                      else if((_ptr__6137_msubi[_ptr__6145_wi32[safe_add( _6143_perm,_6207_i0 )]] > _ptr__6145_wi32[safe_add( _6129_xsubj,_6206_i1 )]))
                      {
                        {
                          ++ _6206_i1;
                        }
                      }
                      else
                      {
                        {
                          ++ _6203_nz;
                          ++ _6207_i0;
                          ++ _6206_i1;
                        }
                      }
                    }
                  }
                  if ((_6203_nz > (int)0))
                  {
                    {
                      _6147_nnz += _6203_nz;
                      ++ _6148_nelem;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _6208_rhassp = (_6148_nelem < safe_mul( _6133_xdim1,mdimi ));
          _6120_rs->alloc_expr((int)2,_6148_nelem,_6147_nnz,_6208_rhassp);
          int32_t _6209_rptr = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->ptr_base;
          int32_t _6210_rshape = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->shape_base;
          int32_t _6211_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->nidxs_base;
          int32_t _6212_rsp = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->sp_base;
          int32_t _6213_rcof = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->i32)(_6210_rshape)) = _6134_xdim0;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->i32)(safe_add( _6210_rshape,(int)1 ))) = mdimj;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _6214_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__6214_ri32(_6214_ri32 ? _6214_ri32->raw() : nullptr,_6214_ri32 ? _6214_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6215_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__6215_ri64(_6215_ri64 ? _6215_ri64->raw() : nullptr,_6215_ri64 ? _6215_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _6216_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6120_rs)->f64;
          _checked_ptr_1<double> _ptr__6216_rf64(_6216_rf64 ? _6216_rf64->raw() : nullptr,_6216_rf64 ? _6216_rf64->size(0) : 0);
          {
            int32_t _6217_pi = (int)0;
            int32_t _6218_pe = (int)0;
            int32_t _6219_p = (int)0;
            _ptr__6214_ri32[_6209_rptr] = (int)0;
            int32_t _11740_ = (int)0;
            int32_t _11741_ = _6134_xdim0;
            for (int32_t _6220_i = _11740_; _6220_i < _11741_; ++_6220_i)
            {
              {
                int32_t _11742_ = (int)0;
                int32_t _11743_ = mdimj;
                for (int32_t _6221_j = _11742_; _6221_j < _11743_; ++_6221_j)
                {
                  {
                    int32_t _6222_nz = (int)0;
                    int32_t _6223_e1 = _ptr__6145_wi32[safe_add( safe_add( _6135_ptr,_6220_i ),(int)1 )];
                    int32_t _6224_e0 = _ptr__6145_wi32[safe_add( safe_add( _6144_mptr,_6221_j ),(int)1 )];
                    int32_t _6225_i1 = _ptr__6145_wi32[safe_add( _6135_ptr,_6220_i )];
                    int32_t _6226_i0 = _ptr__6145_wi32[safe_add( _6144_mptr,_6221_j )];
                    while ( ((_6226_i0 < _6224_e0) && (_6225_i1 < _6223_e1)) )
                    {
                      {
                        if ((_ptr__6137_msubi[_ptr__6145_wi32[safe_add( _6143_perm,_6226_i0 )]] < _ptr__6145_wi32[safe_add( _6129_xsubj,_6225_i1 )]))
                        {
                          {
                            ++ _6226_i0;
                          }
                        }
                        else if((_ptr__6137_msubi[_ptr__6145_wi32[safe_add( _6143_perm,_6226_i0 )]] > _ptr__6145_wi32[safe_add( _6129_xsubj,_6225_i1 )]))
                        {
                          {
                            ++ _6225_i1;
                          }
                        }
                        else
                        {
                          {
                            _ptr__6215_ri64[safe_add( _6211_rnidxs,_6219_p )] = _ptr__6146_wi64[safe_add( _6126_nidxs,_6225_i1 )];
                            _ptr__6216_rf64[safe_add( _6213_rcof,_6219_p )] = _ptr__6139_mcof[_ptr__6145_wi32[safe_add( _6143_perm,_6226_i0 )]];
                            ++ _6222_nz;
                            ++ _6219_p;
                            ++ _6226_i0;
                            ++ _6225_i1;
                          }
                        }
                      }
                    }
                    if ((_6222_nz > (int)0))
                    {
                      {
                        _ptr__6214_ri32[safe_add( safe_add( _6209_rptr,_6218_pe ),(int)1 )] = _6219_p;
                        _ptr__6215_ri64[safe_add( _6212_rsp,_6218_pe )] = _6217_pi;
                        ++ _6218_pe;
                      }
                    }
                    {}
                    ++ _6217_pi;
                  }
                }
              }
            }
          }
          if ((!_6208_rhassp))
          {
            {
              _6120_rs->popi64(_6148_nelem);
            }
          }
          {}
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_6121_ws)->pi32 = _6123_base_pi32;
  mosek::fusion::p_WorkStack::_get_impl(_6121_ws)->pi64 = _6124_base_pi64;
}
// End mosek.fusion.ExprMulVar.eval_right

// Begin mosek.fusion.ExprMulVar.eval_left
// Method mosek.fusion.ExprMulVar.eval_left @ src/fusion/ExprMulVar.monty:279:6-458:7
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _6227_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6228_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6229_xs) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_6227_rs,_6228_ws,_6229_xs); }
void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _6227_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6228_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6229_xs)
{
  int32_t _6230_nx = x->numInst();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6231_xshape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6231_xshape(_6231_xshape ? _6231_xshape->raw() : nullptr,_6231_xshape ? _6231_xshape->size(0) : 0);
  int32_t _6232_nd = (int)((_6231_xshape)->size(0));
  int32_t _6233_nidxs = _6229_xs->alloci64(_6230_nx);
  int32_t _6234_sp = _6229_xs->alloci64(_6230_nx);
  int32_t _6235_xsubi = _6229_xs->alloci32(_6230_nx);
  int32_t _6236_xsubj = _6229_xs->alloci32(_6230_nx);
  int32_t _6237_perm = _6229_xs->alloci32(_6230_nx);
  int32_t _6238_mptr = _6229_xs->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6239_xshape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6239_xshape(_6239_xshape ? _6239_xshape->raw() : nullptr,_6239_xshape ? _6239_xshape->size(0) : 0);
  int32_t _6240_nd = (int)((_6239_xshape)->size(0));
  int32_t _11744_;
  bool _11745_ = (_6240_nd == (int)1);
  if (_11745_)
  {
    _11744_ = (int)1;
  }
  else
  {
    _11744_ = _ptr__6239_xshape[(int)1];
  }
  int32_t _6241_xdim1 = _11744_;
  int32_t _6242_xdim0 = _ptr__6239_xshape[(int)0];
  int32_t _6243_ptr = _6229_xs->alloci32(safe_add( _6241_xdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6244_msubi = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int32_t> _ptr__6244_msubi(_6244_msubi ? _6244_msubi->raw() : nullptr,_6244_msubi ? _6244_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6245_msubj = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int32_t> _ptr__6245_msubj(_6245_msubj ? _6245_msubj->raw() : nullptr,_6245_msubj ? _6245_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6246_mcof = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__6246_mcof(_6246_mcof ? _6246_mcof->raw() : nullptr,_6246_mcof ? _6246_mcof->size(0) : 0);
  int32_t _6247_mdimi = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int32_t _6248_mdimj = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int32_t _6249_rnnz = (int)0;
  int32_t _6250_rnelem = (int)0;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6251_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6229_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__6251_xi32(_6251_xi32 ? _6251_xi32->raw() : nullptr,_6251_xi32 ? _6251_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6252_xi64 = mosek::fusion::p_WorkStack::_get_impl(_6229_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__6252_xi64(_6252_xi64 ? _6252_xi64->raw() : nullptr,_6252_xi64 ? _6252_xi64->size(0) : 0);
  int32_t _6253_mnnz = (int)((_6246_mcof)->size(0));
  x->inst(_6234_sp,_6252_xi64,_6233_nidxs,_6252_xi64);
  if ((x->numInst() < x->getSize()))
  {
    {
      {
        int32_t _11746_ = (int)0;
        int32_t _11747_ = safe_add( _6247_mdimi,(int)1 );
        for (int32_t _6254_i = _11746_; _6254_i < _11747_; ++_6254_i)
        {
          {
            _ptr__6251_xi32[safe_add( _6238_mptr,_6254_i )] = (int)0;
          }
        }
        int32_t _11748_ = (int)0;
        int32_t _11749_ = (int)((_6244_msubi)->size(0));
        for (int32_t _6255_i = _11748_; _6255_i < _11749_; ++_6255_i)
        {
          {
            ++ _ptr__6251_xi32[safe_add( safe_add( _6238_mptr,_ptr__6244_msubi[_6255_i] ),(int)1 )];
          }
        }
        int32_t _11750_ = (int)0;
        int32_t _11751_ = _6247_mdimi;
        for (int32_t _6256_i = _11750_; _6256_i < _11751_; ++_6256_i)
        {
          {
            _ptr__6251_xi32[safe_add( safe_add( _6238_mptr,_6256_i ),(int)1 )] += _ptr__6251_xi32[safe_add( _6238_mptr,_6256_i )];
          }
        }
        if ((_6240_nd == (int)1))
        {
          {
            int32_t _11752_ = (int)0;
            int32_t _11753_ = _6230_nx;
            for (int32_t _6257_i = _11752_; _6257_i < _11753_; ++_6257_i)
            {
              {
                _ptr__6251_xi32[safe_add( _6235_xsubi,_6257_i )] = (int32_t)_ptr__6252_xi64[safe_add( _6234_sp,_6257_i )];
              }
            }
            int32_t _11754_ = (int)0;
            int32_t _11755_ = _6230_nx;
            for (int32_t _6258_i = _11754_; _6258_i < _11755_; ++_6258_i)
            {
              {
                _ptr__6251_xi32[safe_add( _6236_xsubj,_6258_i )] = (int)0;
              }
            }
          }
        }
        else
        {
          {
            int32_t _11756_ = (int)0;
            int32_t _11757_ = _6230_nx;
            for (int32_t _6259_i = _11756_; _6259_i < _11757_; ++_6259_i)
            {
              {
                _ptr__6251_xi32[safe_add( _6235_xsubi,_6259_i )] = (int32_t)(_ptr__6252_xi64[safe_add( _6234_sp,_6259_i )] / _6241_xdim1);
              }
            }
            int32_t _11758_ = (int)0;
            int32_t _11759_ = _6230_nx;
            for (int32_t _6260_i = _11758_; _6260_i < _11759_; ++_6260_i)
            {
              {
                _ptr__6251_xi32[safe_add( _6236_xsubj,_6260_i )] = (int32_t)(_ptr__6252_xi64[safe_add( _6234_sp,_6260_i )] % _6241_xdim1);
              }
            }
          }
        }
        if ((_6240_nd > (int)1))
        {
          {
            int32_t _11760_ = (int)0;
            int32_t _11761_ = safe_add( _6241_xdim1,(int)1 );
            for (int32_t _6261_i = _11760_; _6261_i < _11761_; ++_6261_i)
            {
              {
                _ptr__6251_xi32[safe_add( _6243_ptr,_6261_i )] = (int)0;
              }
            }
            int32_t _11762_ = (int)0;
            int32_t _11763_ = _6230_nx;
            for (int32_t _6262_i = _11762_; _6262_i < _11763_; ++_6262_i)
            {
              {
                ++ _ptr__6251_xi32[safe_add( safe_add( _6243_ptr,_ptr__6251_xi32[safe_add( _6236_xsubj,_6262_i )] ),(int)1 )];
              }
            }
            int32_t _11764_ = (int)0;
            int32_t _11765_ = _6241_xdim1;
            for (int32_t _6263_i = _11764_; _6263_i < _11765_; ++_6263_i)
            {
              {
                _ptr__6251_xi32[safe_add( safe_add( _6243_ptr,_6263_i ),(int)1 )] += _ptr__6251_xi32[safe_add( _6243_ptr,_6263_i )];
              }
            }
            int32_t _11766_ = (int)0;
            int32_t _11767_ = _6230_nx;
            for (int32_t _6264_i = _11766_; _6264_i < _11767_; ++_6264_i)
            {
              {
                _ptr__6251_xi32[safe_add( _6237_perm,_ptr__6251_xi32[safe_add( _6243_ptr,_ptr__6251_xi32[safe_add( _6236_xsubj,_6264_i )] )] )] = _6264_i;
                ++ _ptr__6251_xi32[safe_add( _6243_ptr,_ptr__6251_xi32[safe_add( _6236_xsubj,_6264_i )] )];
              }
            }
            int32_t _11768_ = (int)0;
            int32_t _11769_ = _6241_xdim1;
            for (int32_t _6265_i = _11768_; _6265_i < _11769_; ++_6265_i)
            {
              {
                _ptr__6251_xi32[(safe_add( _6243_ptr,_6241_xdim1 ) - _6265_i)] = _ptr__6251_xi32[((safe_add( _6243_ptr,_6241_xdim1 ) - _6265_i) - (int)1)];
              }
            }
            _ptr__6251_xi32[_6243_ptr] = (int)0;
          }
        }
        else
        {
          {
            _ptr__6251_xi32[_6243_ptr] = (int)0;
            _ptr__6251_xi32[safe_add( _6243_ptr,(int)1 )] = _6230_nx;
            int32_t _11770_ = (int)0;
            int32_t _11771_ = _6230_nx;
            for (int32_t _6266_i = _11770_; _6266_i < _11771_; ++_6266_i)
            {
              {
                _ptr__6251_xi32[safe_add( _6237_perm,_6266_i )] = _6266_i;
              }
            }
          }
        }
        int32_t _11772_ = (int)0;
        int32_t _11773_ = _6247_mdimi;
        for (int32_t _6267_i = _11772_; _6267_i < _11773_; ++_6267_i)
        {
          {
            int32_t _11774_ = (int)0;
            int32_t _11775_ = _6241_xdim1;
            for (int32_t _6268_j = _11774_; _6268_j < _11775_; ++_6268_j)
            {
              {
                int32_t _6269_nz = (int)0;
                int32_t _6270_e1 = _ptr__6251_xi32[safe_add( safe_add( _6243_ptr,_6268_j ),(int)1 )];
                int32_t _6271_e0 = _ptr__6251_xi32[safe_add( safe_add( _6238_mptr,_6267_i ),(int)1 )];
                int32_t _6272_i1 = _ptr__6251_xi32[safe_add( _6243_ptr,_6268_j )];
                int32_t _6273_i0 = _ptr__6251_xi32[safe_add( _6238_mptr,_6267_i )];
                while ( ((_6273_i0 < _6271_e0) && (_6272_i1 < _6270_e1)) )
                {
                  {
                    if ((_ptr__6245_msubj[_6273_i0] < _ptr__6251_xi32[safe_add( _6235_xsubi,_ptr__6251_xi32[safe_add( _6237_perm,_6272_i1 )] )]))
                    {
                      {
                        ++ _6273_i0;
                      }
                    }
                    else if((_ptr__6245_msubj[_6273_i0] > _ptr__6251_xi32[safe_add( _6235_xsubi,_ptr__6251_xi32[safe_add( _6237_perm,_6272_i1 )] )]))
                    {
                      {
                        ++ _6272_i1;
                      }
                    }
                    else
                    {
                      {
                        ++ _6269_nz;
                        ++ _6273_i0;
                        ++ _6272_i1;
                      }
                    }
                  }
                }
                if ((_6269_nz > (int)0))
                {
                  {
                    _6249_rnnz += _6269_nz;
                    ++ _6250_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _6249_rnnz = safe_mul( _6253_mnnz,_6241_xdim1 );
      int32_t _6274_i0 = (int)0;
      while ( (_6274_i0 < _6253_mnnz) )
      {
        {
          int32_t _6275_e0 = safe_add( _6274_i0,(int)1 );
          while ( ((_6275_e0 < _6253_mnnz) && (_ptr__6244_msubi[_6274_i0] == _ptr__6244_msubi[_6275_e0])) )
          {
            {
              ++ _6275_e0;
            }
          }
          ++ _6250_rnelem;
          _6274_i0 = _6275_e0;
        }
      }
      _6250_rnelem *= _6241_xdim1;
    }
  }
  bool _11776_;
  bool _11777_ = (_6250_rnelem < safe_mul( _6241_xdim1,_6247_mdimi ));
  if (_11777_)
  {
    _11776_ = true;
  }
  else
  {
    _11776_ = false;
  }
  bool _6276_rhassp = _11776_;
  int32_t _6277_rnd = _6240_nd;
  _6227_rs->alloc_expr(_6277_rnd,_6250_rnelem,_6249_rnnz,_6276_rhassp);
  int32_t _6278_rptr = mosek::fusion::p_WorkStack::_get_impl(_6227_rs)->ptr_base;
  int32_t _6279_rshape = mosek::fusion::p_WorkStack::_get_impl(_6227_rs)->shape_base;
  int32_t _6280_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6227_rs)->nidxs_base;
  int32_t _11778_;
  bool _11779_ = _6276_rhassp;
  if (_11779_)
  {
    _11778_ = mosek::fusion::p_WorkStack::_get_impl(_6227_rs)->sp_base;
  }
  else
  {
    _11778_ = _6227_rs->alloci64(_6250_rnelem);
  }
  int32_t _6281_rsp = _11778_;
  int32_t _6282_rcof = mosek::fusion::p_WorkStack::_get_impl(_6227_rs)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6283_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6227_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6283_ri32(_6283_ri32 ? _6283_ri32->raw() : nullptr,_6283_ri32 ? _6283_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6284_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6227_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6284_ri64(_6284_ri64 ? _6284_ri64->raw() : nullptr,_6284_ri64 ? _6284_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6285_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6227_rs)->f64;
  _checked_ptr_1<double> _ptr__6285_rf64(_6285_rf64 ? _6285_rf64->raw() : nullptr,_6285_rf64 ? _6285_rf64->size(0) : 0);
  _ptr__6283_ri32[_6279_rshape] = _6247_mdimi;
  if ((_6240_nd > (int)1))
  {
    {
      _ptr__6283_ri32[safe_add( _6279_rshape,(int)1 )] = _6241_xdim1;
    }
  }
  {}
  if ((x->numInst() < x->getSize()))
  {
    {
      int32_t _6286_pi = (int)0;
      int32_t _6287_pe = (int)0;
      int32_t _6288_p = (int)0;
      _ptr__6283_ri32[_6278_rptr] = (int)0;
      int32_t _11780_ = (int)0;
      int32_t _11781_ = _6247_mdimi;
      for (int32_t _6289_i = _11780_; _6289_i < _11781_; ++_6289_i)
      {
        {
          int32_t _11782_ = (int)0;
          int32_t _11783_ = _6241_xdim1;
          for (int32_t _6290_j = _11782_; _6290_j < _11783_; ++_6290_j)
          {
            {
              int32_t _6291_nz = (int)0;
              int32_t _6292_e1 = _ptr__6251_xi32[safe_add( safe_add( _6243_ptr,_6290_j ),(int)1 )];
              int32_t _6293_e0 = _ptr__6251_xi32[safe_add( safe_add( _6238_mptr,_6289_i ),(int)1 )];
              int32_t _6294_i1 = _ptr__6251_xi32[safe_add( _6243_ptr,_6290_j )];
              int32_t _6295_i0 = _ptr__6251_xi32[safe_add( _6238_mptr,_6289_i )];
              while ( ((_6295_i0 < _6293_e0) && (_6294_i1 < _6292_e1)) )
              {
                {
                  if ((_ptr__6245_msubj[_6295_i0] < _ptr__6251_xi32[safe_add( _6235_xsubi,_ptr__6251_xi32[safe_add( _6237_perm,_6294_i1 )] )]))
                  {
                    {
                      ++ _6295_i0;
                    }
                  }
                  else if((_ptr__6245_msubj[_6295_i0] > _ptr__6251_xi32[safe_add( _6235_xsubi,_ptr__6251_xi32[safe_add( _6237_perm,_6294_i1 )] )]))
                  {
                    {
                      ++ _6294_i1;
                    }
                  }
                  else
                  {
                    {
                      _ptr__6284_ri64[safe_add( _6280_rnidxs,_6288_p )] = _ptr__6252_xi64[safe_add( _6233_nidxs,_ptr__6251_xi32[safe_add( _6237_perm,_6294_i1 )] )];
                      _ptr__6285_rf64[safe_add( _6282_rcof,_6288_p )] = _ptr__6246_mcof[_6295_i0];
                      ++ _6291_nz;
                      ++ _6288_p;
                      ++ _6295_i0;
                      ++ _6294_i1;
                    }
                  }
                }
              }
              if ((_6291_nz > (int)0))
              {
                {
                  _ptr__6283_ri32[safe_add( safe_add( _6278_rptr,_6287_pe ),(int)1 )] = _6288_p;
                  _ptr__6284_ri64[safe_add( _6281_rsp,_6287_pe )] = _6286_pi;
                  ++ _6287_pe;
                }
              }
              {}
              ++ _6286_pi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _6296_rnzi = (int)0;
      int32_t _6297_relmi = (int)0;
      _ptr__6283_ri32[_6278_rptr] = (int)0;
      int32_t _6298_i0 = (int)0;
      while ( (_6298_i0 < _6253_mnnz) )
      {
        {
          int32_t _6299_e0 = safe_add( _6298_i0,(int)1 );
          while ( ((_6299_e0 < _6253_mnnz) && (_ptr__6244_msubi[_6299_e0] == _ptr__6244_msubi[_6298_i0])) )
          {
            {
              ++ _6299_e0;
            }
          }
          int32_t _11784_ = (int)0;
          int32_t _11785_ = _6241_xdim1;
          for (int32_t _6300_j = _11784_; _6300_j < _11785_; ++_6300_j)
          {
            {
              int32_t _11786_ = _6298_i0;
              int32_t _11787_ = _6299_e0;
              for (int32_t _6301_k = _11786_; _6301_k < _11787_; ++_6301_k)
              {
                {
                  _ptr__6284_ri64[safe_add( _6280_rnidxs,_6296_rnzi )] = _ptr__6252_xi64[safe_add( safe_add( _6233_nidxs,safe_mul( _ptr__6245_msubj[_6301_k],_6241_xdim1 ) ),_6300_j )];
                  _ptr__6285_rf64[safe_add( _6282_rcof,_6296_rnzi )] = _ptr__6246_mcof[_6301_k];
                  ++ _6296_rnzi;
                }
              }
              _ptr__6283_ri32[safe_add( safe_add( _6278_rptr,_6297_relmi ),(int)1 )] = _6296_rnzi;
              _ptr__6284_ri64[safe_add( _6281_rsp,_6297_relmi )] = safe_add( safe_mul( _ptr__6244_msubi[_6298_i0],_6241_xdim1 ),_6300_j );
              ++ _6297_relmi;
            }
          }
          _6298_i0 = _6299_e0;
        }
      }
    }
  }
  if ((!_6276_rhassp))
  {
    {
      _6227_rs->popi64(_6250_rnelem);
    }
  }
  {}
  _6229_xs->clear();
}
// End mosek.fusion.ExprMulVar.eval_left

// Begin mosek.fusion.ExprMulVar.validate
// Method mosek.fusion.ExprMulVar.validate @ src/fusion/ExprMulVar.monty:222:6-244:7
void mosek::fusion::p_ExprMulVar::validate(int32_t _6302_mdimi,int32_t _6303_mdimj,std::shared_ptr< monty::ndarray< int32_t,1 > > _6304_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _6305_msubj,std::shared_ptr< monty::ndarray< double,1 > > _6306_mcof)
{
  _checked_ptr_1<int32_t> _ptr__6304_msubi(_6304_msubi ? _6304_msubi->raw() : nullptr, _6304_msubi ? _6304_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__6305_msubj(_6305_msubj ? _6305_msubj->raw() : nullptr, _6305_msubj ? _6305_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__6306_mcof(_6306_mcof ? _6306_mcof->raw() : nullptr, _6306_mcof ? _6306_mcof->size(0) : 0);
  bool _6307_ok = true;
  {
    int32_t _11788_ = (int)0;
    int32_t _11789_ = (int)((_6304_msubi)->size(0));
    for (int32_t _6308_i = _11788_; _6308_i < _11789_; ++_6308_i)
    {
      {
        if (((_ptr__6304_msubi[_6308_i] < (int)0) || ((_ptr__6304_msubi[_6308_i] >= _6302_mdimi) || ((_ptr__6305_msubj[_6308_i] < (int)0) || (_ptr__6305_msubj[_6308_i] >= _6303_mdimj)))))
        {
          {
            _6307_ok = false;
          }
        }
        {}
      }
    }
    int32_t _11790_ = (int)1;
    int32_t _11791_ = (int)((_6304_msubi)->size(0));
    for (int32_t _6309_i = _11790_; _6309_i < _11791_; ++_6309_i)
    {
      {
        if (((_ptr__6304_msubi[(_6309_i - (int)1)] > _ptr__6304_msubi[_6309_i]) || ((_ptr__6304_msubi[(_6309_i - (int)1)] == _ptr__6304_msubi[_6309_i]) && (_ptr__6305_msubj[(_6309_i - (int)1)] >= _ptr__6305_msubj[_6309_i]))))
        {
          {
            _6307_ok = false;
          }
        }
        {}
      }
    }
  }
  if ((!_6307_ok))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
// End mosek.fusion.ExprMulVar.validate

// Begin mosek.fusion.ExprMulVar.resshape
// Method mosek.fusion.ExprMulVar.resshape @ src/fusion/ExprMulVar.monty:189:6-194:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprMulVar::resshape(int32_t _6310_mdimi,int32_t _6311_mdimj,std::shared_ptr< monty::ndarray< int32_t,1 > > _6312_xshape,bool _6313_left)
{
  _checked_ptr_1<int32_t> _ptr__6312_xshape(_6312_xshape ? _6312_xshape->raw() : nullptr, _6312_xshape ? _6312_xshape->size(0) : 0);
  if (_6313_left)
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_6310_mdimi),(int32_t)(_ptr__6312_xshape[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__6312_xshape[(int)0]),(int32_t)(_6311_mdimj)});
    }
  }
}
// End mosek.fusion.ExprMulVar.resshape

// Begin mosek.fusion.ExprMulVar.toString
// Method mosek.fusion.ExprMulVar.toString @ src/fusion/ExprMulVar.monty:182:6-187:7
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulVar::toString()
{
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
// End mosek.fusion.ExprMulVar.toString

void mosek::fusion::p_ExprMulVar::destroy()
{
  x.reset();
  mcof.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }
// } class ExprMulVar
// class ExprMulScalarVar { // @ src/fusion/ExprMulVar.monty:53:4-167:5
mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }
mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar
  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulScalarVar.ctor @ src/fusion/ExprMulVar.monty:89:6-126:7
mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar
  (int32_t _6314_mdimi,
    int32_t _6315_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6316_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6317_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6318_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6319_x)
{ return new mosek::fusion::ExprMulScalarVar(_6314_mdimi,_6315_mdimj,_6316_msubi,_6317_msubj,_6318_mcof,_6319_x); }
mosek::fusion::ExprMulScalarVar::ExprMulScalarVar
  (int32_t _6314_mdimi,
    int32_t _6315_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6316_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6317_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6318_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6319_x) : 
   ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this))
{ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6314_mdimi,_6315_mdimj,_6316_msubi,_6317_msubj,_6318_mcof,_6319_x); }
void mosek::fusion::p_ExprMulScalarVar::_initialize  (int32_t _6314_mdimi,
    int32_t _6315_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6316_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6317_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6318_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6319_x)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6316_msubi(_6316_msubi ? _6316_msubi->raw() : nullptr, _6316_msubi ? _6316_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6317_msubj(_6317_msubj ? _6317_msubj->raw() : nullptr, _6317_msubj ? _6317_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6318_mcof(_6318_mcof ? _6318_mcof->raw() : nullptr, _6318_mcof ? _6318_mcof->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_6314_mdimi,_6315_mdimj,::mosek::fusion::Utils::Tools::arraycopy(_6316_msubi),::mosek::fusion::Utils::Tools::arraycopy(_6317_msubj),::mosek::fusion::Utils::Tools::arraycopy(_6318_mcof),_6319_x,(int)1);
    if ((_6319_x->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_6314_mdimi < (int)0) || ((_6315_mdimj < (int)0) || (((int)((_6316_msubi)->size(0)) != (int)((_6317_msubj)->size(0))) || ((int)((_6316_msubi)->size(0)) != (int)((_6318_mcof)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6320_err_data = false;
    int32_t _11792_ = (int)0;
    int32_t _11793_ = (int)((_6316_msubi)->size(0));
    for (int32_t _6321_i = _11792_; _6321_i < _11793_; ++_6321_i)
    {
      {
        if (((_ptr__6316_msubi[_6321_i] < (int)0) || ((_ptr__6316_msubi[_6321_i] >= _6314_mdimi) || ((_ptr__6317_msubj[_6321_i] < (int)0) || (_ptr__6317_msubj[_6321_i] >= _6315_mdimj)))))
        {
          {
            _6320_err_data = true;
          }
        }
        {}
      }
    }
    if (_6320_err_data)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6322_err_sorted = false;
    int32_t _11794_ = (int)1;
    int32_t _11795_ = (int)((_6316_msubi)->size(0));
    for (int32_t _6323_i = _11794_; _6323_i < _11795_; ++_6323_i)
    {
      {
        if (((_ptr__6316_msubi[_6323_i] < _ptr__6316_msubi[(_6323_i - (int)1)]) || ((_ptr__6316_msubi[_6323_i] == _ptr__6316_msubi[(_6323_i - (int)1)]) && (_ptr__6317_msubj[_6323_i] <= _ptr__6317_msubj[(_6323_i - (int)1)]))))
        {
          {
            _6322_err_sorted = true;
          }
        }
        {}
      }
    }
    if (_6322_err_sorted)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulScalarVar.ctor

// mosek.fusion.ExprMulScalarVar.ctor @ src/fusion/ExprMulVar.monty:68:6-87:7
mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar
  (int32_t _6324_mdimi,
    int32_t _6325_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6326_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6327_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6328_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6329_x,
    int32_t _6330_unchecked_)
{ return new mosek::fusion::ExprMulScalarVar(_6324_mdimi,_6325_mdimj,_6326_msubi,_6327_msubj,_6328_mcof,_6329_x,_6330_unchecked_); }
mosek::fusion::ExprMulScalarVar::ExprMulScalarVar
  (int32_t _6324_mdimi,
    int32_t _6325_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6326_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6327_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6328_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6329_x,
    int32_t _6330_unchecked_) : 
   ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this))
{ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6324_mdimi,_6325_mdimj,_6326_msubi,_6327_msubj,_6328_mcof,_6329_x,_6330_unchecked_); }
void mosek::fusion::p_ExprMulScalarVar::_initialize  (int32_t _6324_mdimi,
    int32_t _6325_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6326_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6327_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6328_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6329_x,
    int32_t _6330_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6326_msubi(_6326_msubi ? _6326_msubi->raw() : nullptr, _6326_msubi ? _6326_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6327_msubj(_6327_msubj ? _6327_msubj->raw() : nullptr, _6327_msubj ? _6327_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6328_mcof(_6328_mcof ? _6328_mcof->raw() : nullptr, _6328_mcof ? _6328_mcof->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_6324_mdimi),(int32_t)(_6325_mdimj)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _6324_mdimi;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _6325_mdimj;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _6326_msubi;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _6327_msubj;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _6328_mcof;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _6329_x;
  }
}
// mosek.fusion.ExprMulScalarVar.ctor

// Begin mosek.fusion.ExprMulScalarVar.eval
// Method mosek.fusion.ExprMulScalarVar.eval @ src/fusion/ExprMulVar.monty:128:6-166:7
void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6331_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6332_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6333_xs) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_6331_rs,_6332_ws,_6333_xs); }
void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6331_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6332_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6333_xs)
{
  if ((x->numInst() == (int)0))
  {
    {
      _6331_rs->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6334_xidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)1)));
      _checked_ptr_1<int64_t> _ptr__6334_xidxs(_6334_xidxs ? _6334_xidxs->raw() : nullptr,_6334_xidxs ? _6334_xidxs->size(0) : 0);
      x->inst((int)0,_6334_xidxs);
      int64_t _6335_xi = _ptr__6334_xidxs[(int)0];
      int32_t _6336_nelem = (int)((msubi)->size(0));
      int32_t _6337_nnz = _6336_nelem;
      bool _6338_hassp = (_6336_nelem < safe_mul( mdimi,mdimj ));
      _6331_rs->alloc_expr((int)2,_6336_nelem,_6337_nnz,_6338_hassp);
      int32_t _6339_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->shape_base,(int)1 ))) = mdimj;
      int32_t _6340_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->nidxs_base;
      int32_t _6341_sp_base = mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->sp_base;
      int32_t _6342_cof_base = mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->cof_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6343_i32 = mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6343_i32(_6343_i32 ? _6343_i32->raw() : nullptr,_6343_i32 ? _6343_i32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6344_i64 = mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6344_i64(_6344_i64 ? _6344_i64->raw() : nullptr,_6344_i64 ? _6344_i64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6345_f64 = mosek::fusion::p_WorkStack::_get_impl(_6331_rs)->f64;
      _checked_ptr_1<double> _ptr__6345_f64(_6345_f64 ? _6345_f64->raw() : nullptr,_6345_f64 ? _6345_f64->size(0) : 0);
      {
        int32_t _11796_ = (int)0;
        int32_t _11797_ = _6337_nnz;
        for (int32_t _6346_i = _11796_; _6346_i < _11797_; ++_6346_i)
        {
          {
            _ptr__6345_f64[safe_add( _6342_cof_base,_6346_i )] = ((*mcof)(_6346_i));
          }
        }
        int32_t _11798_ = (int)0;
        int32_t _11799_ = _6337_nnz;
        for (int32_t _6347_i = _11798_; _6347_i < _11799_; ++_6347_i)
        {
          {
            _ptr__6344_i64[safe_add( _6340_nidxs_base,_6347_i )] = _6335_xi;
          }
        }
        if (_6338_hassp)
        {
          {
            int32_t _11800_ = (int)0;
            int32_t _11801_ = _6336_nelem;
            for (int32_t _6348_i = _11800_; _6348_i < _11801_; ++_6348_i)
            {
              {
                _ptr__6344_i64[safe_add( _6341_sp_base,_6348_i )] = safe_add( safe_mul( ((*msubi)(_6348_i)),mdimj ),((*msubj)(_6348_i)) );
              }
            }
          }
        }
        {}
        int32_t _11802_ = (int)0;
        int32_t _11803_ = safe_add( _6336_nelem,(int)1 );
        for (int32_t _6349_i = _11802_; _6349_i < _11803_; ++_6349_i)
        {
          {
            _ptr__6343_i32[safe_add( _6339_ptr_base,_6349_i )] = _6349_i;
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprMulScalarVar.eval

// Begin mosek.fusion.ExprMulScalarVar.toString
// Method mosek.fusion.ExprMulScalarVar.toString @ src/fusion/ExprMulVar.monty:63:6-66:7
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulScalarVar::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulScalarVar.toString

void mosek::fusion::p_ExprMulScalarVar::destroy()
{
  x.reset();
  mcof.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }
// } class ExprMulScalarVar
// class ExprMulVarScalarConst { // @ src/fusion/ExprMulVar.monty:4:4-50:5
mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }
mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst
  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulVarScalarConst.ctor @ src/fusion/ExprMulVar.monty:10:6-14:7
mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst
  (monty::rc_ptr< ::mosek::fusion::Variable > _6350_x,
    double _6351_c)
{ return new mosek::fusion::ExprMulVarScalarConst(_6350_x,_6351_c); }
mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst
  (monty::rc_ptr< ::mosek::fusion::Variable > _6350_x,
    double _6351_c) : 
   ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this))
{ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_6350_x,_6351_c); }
void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6350_x,
    double _6351_c)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6350_x->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _6350_x;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _6351_c;
  }
}
// mosek.fusion.ExprMulVarScalarConst.ctor

// Begin mosek.fusion.ExprMulVarScalarConst.eval
// Method mosek.fusion.ExprMulVarScalarConst.eval @ src/fusion/ExprMulVar.monty:16:6-49:7
void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6352_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6353_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6354_xs) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_6352_rs,_6353_ws,_6354_xs); }
void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6352_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6353_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6354_xs)
{
  int32_t _6355_nnz = x->numInst();
  int32_t _6356_nelem = _6355_nnz;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6357_shape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6357_shape(_6357_shape ? _6357_shape->raw() : nullptr,_6357_shape ? _6357_shape->size(0) : 0);
  int32_t _6358_nd = (int)((_6357_shape)->size(0));
  bool _6359_hassp = (::mosek::fusion::p_Set::size(_6357_shape) > _6356_nelem);
  _6352_rs->alloc_expr(_6358_nd,_6356_nelem,_6355_nnz,_6359_hassp);
  int32_t _6360_ptrb = mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->ptr_base;
  int32_t _6361_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->nidxs_base;
  int32_t _6362_sp = mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->sp_base;
  int32_t _6363_cof = mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->cof_base;
  int32_t _6364_rshape = mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->shape_base;
  if (_6359_hassp)
  {
    {
      x->inst(_6362_sp,mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->i64,_6361_nidxs,mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->i64);
    }
  }
  else
  {
    {
      x->inst(_6361_nidxs,mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->i64);
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6365_i32 = mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6365_i32(_6365_i32 ? _6365_i32->raw() : nullptr,_6365_i32 ? _6365_i32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6366_i64 = mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6366_i64(_6366_i64 ? _6366_i64->raw() : nullptr,_6366_i64 ? _6366_i64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6367_f64 = mosek::fusion::p_WorkStack::_get_impl(_6352_rs)->f64;
  _checked_ptr_1<double> _ptr__6367_f64(_6367_f64 ? _6367_f64->raw() : nullptr,_6367_f64 ? _6367_f64->size(0) : 0);
  {
    int32_t _11804_ = (int)0;
    int32_t _11805_ = _6358_nd;
    for (int32_t _6368_i = _11804_; _6368_i < _11805_; ++_6368_i)
    {
      {
        _ptr__6365_i32[safe_add( _6364_rshape,_6368_i )] = _ptr__6357_shape[_6368_i];
      }
    }
    int32_t _11806_ = (int)0;
    int32_t _11807_ = safe_add( _6356_nelem,(int)1 );
    for (int32_t _6369_i = _11806_; _6369_i < _11807_; ++_6369_i)
    {
      {
        _ptr__6365_i32[safe_add( _6360_ptrb,_6369_i )] = _6369_i;
      }
    }
    int32_t _11808_ = (int)0;
    int32_t _11809_ = _6355_nnz;
    for (int32_t _6370_i = _11808_; _6370_i < _11809_; ++_6370_i)
    {
      {
        _ptr__6367_f64[safe_add( _6363_cof,_6370_i )] = 1.0;
      }
    }
  }
}
// End mosek.fusion.ExprMulVarScalarConst.eval

// Begin mosek.fusion.ExprMulVarScalarConst.toString
// Method mosek.fusion.ExprMulVarScalarConst.toString @ src/fusion/ExprMulVar.monty:8:6-75
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulVarScalarConst::toString()
{
  return std::string ("ExprMulVarScalarConst()");
}
// End mosek.fusion.ExprMulVarScalarConst.toString

void mosek::fusion::p_ExprMulVarScalarConst::destroy()
{
  x.reset();
}
void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }
// } class ExprMulVarScalarConst
// class ExprAdd { // @ src/fusion/ExprAdd.monty:597:4-1275:5
mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }
mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprAdd::p_ExprAdd
  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprAdd.ctor @ src/fusion/ExprAdd.monty:607:6-620:7
mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd
  (monty::rc_ptr< ::mosek::fusion::Expression > _6371_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6372_e2,
    double _6373_m1,
    double _6374_m2)
{ return new mosek::fusion::ExprAdd(_6371_e1,_6372_e2,_6373_m1,_6374_m2); }
mosek::fusion::ExprAdd::ExprAdd
  (monty::rc_ptr< ::mosek::fusion::Expression > _6371_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6372_e2,
    double _6373_m1,
    double _6374_m2) : 
   ExprAdd(new mosek::fusion::p_ExprAdd(this))
{ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_6371_e1,_6372_e2,_6373_m1,_6374_m2); }
void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6371_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6372_e2,
    double _6373_m1,
    double _6374_m2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6371_e1->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _6371_e1;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _6372_e2;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _6373_m1;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _6374_m2;
    if ((_6371_e1->getND() != _6372_e2->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int32_t _11810_ = (int)0;
    int32_t _11811_ = _6371_e1->getND();
    for (int32_t _6375_i = _11810_; _6375_i < _11811_; ++_6375_i)
    {
      {
        if ((_6371_e1->getDim(_6375_i) != _6372_e2->getDim(_6375_i)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprAdd.ctor

// Begin mosek.fusion.ExprAdd.eval
// Method mosek.fusion.ExprAdd.eval @ src/fusion/ExprAdd.monty:622:6-1274:7
void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6376_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6377_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6378_xs) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_6376_rs,_6377_ws,_6378_xs); }
void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6376_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6377_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6378_xs)
{
  e1->eval(_6377_ws,_6376_rs,_6378_xs);
  e2->eval(_6377_ws,_6376_rs,_6378_xs);
  _6377_ws->pop_expr();
  int32_t _6379_nd2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->nd;
  int32_t _6380_shape2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->shape_base;
  int32_t _6381_nelem2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->nelem;
  int32_t _6382_nnz2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->nnz;
  int32_t _6383_ncodeatom2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->ncodeatom;
  bool _6384_hassp2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->hassp;
  int32_t _6385_ptr2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->ptr_base;
  int32_t _6386_sp2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->sp_base;
  int32_t _6387_nidxs2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->nidxs_base;
  int32_t _6388_cof2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->cof_base;
  int32_t _6389_code2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->code_base;
  int32_t _6390_codeptr2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->codeptr_base;
  int32_t _6391_cconst2 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->cconst_base;
  _6377_ws->pop_expr();
  int32_t _6392_nd1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->nd;
  int32_t _6393_shape1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->shape_base;
  int32_t _6394_nelem1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->nelem;
  int32_t _6395_nnz1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->nnz;
  int32_t _6396_ncodeatom1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->ncodeatom;
  bool _6397_hassp1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->hassp;
  int32_t _6398_ptr1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->ptr_base;
  int32_t _6399_sp1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->sp_base;
  int32_t _6400_nidxs1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->nidxs_base;
  int32_t _6401_cof1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->cof_base;
  int32_t _6402_code1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->code_base;
  int32_t _6403_codeptr1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->codeptr_base;
  int32_t _6404_cconst1 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6405_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6405_wi32(_6405_wi32 ? _6405_wi32->raw() : nullptr,_6405_wi32 ? _6405_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6406_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6406_wi64(_6406_wi64 ? _6406_wi64->raw() : nullptr,_6406_wi64 ? _6406_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6407_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6377_ws)->f64;
  _checked_ptr_1<double> _ptr__6407_wf64(_6407_wf64 ? _6407_wf64->raw() : nullptr,_6407_wf64 ? _6407_wf64->size(0) : 0);
  bool _6408_parameterized = ((_6396_ncodeatom1 > (int)0) || (_6383_ncodeatom2 > (int)0));
  if ((_6392_nd1 != _6379_nd2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int32_t _11812_ = (int)0;
  int32_t _11813_ = _6392_nd1;
  for (int32_t _6409_i = _11812_; _6409_i < _11813_; ++_6409_i)
  {
    {
      if ((_ptr__6405_wi32[safe_add( _6393_shape1,_6409_i )] != _ptr__6405_wi32[safe_add( _6380_shape2,_6409_i )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_6397_hassp1) && (!_6384_hassp2)))
  {
    {
      int32_t _6410_rnelem = _6394_nelem1;
      int32_t _6411_rnnz = safe_add( _6395_nnz1,_6382_nnz2 );
      int32_t _6412_rncodeatom = (int)0;
      if (_6408_parameterized)
      {
        {
          int32_t _11814_;
          bool _11815_ = (_6396_ncodeatom1 > (int)0);
          if (_11815_)
          {
            _11814_ = safe_add( _6396_ncodeatom1,safe_mul( _6395_nnz1,(int)2 ) );
          }
          else
          {
            _11814_ = _6395_nnz1;
          }
          _6412_rncodeatom += _11814_;
          int32_t _11816_;
          bool _11817_ = (_6383_ncodeatom2 > (int)0);
          if (_11817_)
          {
            _11816_ = safe_add( _6383_ncodeatom2,safe_mul( _6382_nnz2,(int)2 ) );
          }
          else
          {
            _11816_ = _6382_nnz2;
          }
          _6412_rncodeatom += _11816_;
        }
      }
      {}
      int32_t _6413_rnd = _6392_nd1;
      _6376_rs->alloc_expr(_6413_rnd,_6410_rnelem,_6411_rnnz,false,_6412_rncodeatom);
      int32_t _6414_rshape = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->shape_base;
      int32_t _6415_rptr = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->ptr_base;
      int32_t _6416_rsp = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->sp_base;
      int32_t _6417_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->nidxs_base;
      int32_t _6418_rcof = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->cof_base;
      int32_t _6419_rcode = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->code_base;
      int32_t _6420_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->codeptr_base;
      int32_t _6421_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6422_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6422_ri32(_6422_ri32 ? _6422_ri32->raw() : nullptr,_6422_ri32 ? _6422_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6423_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6423_ri64(_6423_ri64 ? _6423_ri64->raw() : nullptr,_6423_ri64 ? _6423_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6424_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->f64;
      _checked_ptr_1<double> _ptr__6424_rf64(_6424_rf64 ? _6424_rf64->raw() : nullptr,_6424_rf64 ? _6424_rf64->size(0) : 0);
      int32_t _11818_ = (int)0;
      int32_t _11819_ = _6413_rnd;
      for (int32_t _6425_i = _11818_; _6425_i < _11819_; ++_6425_i)
      {
        {
          _ptr__6422_ri32[safe_add( _6414_rshape,_6425_i )] = _ptr__6405_wi32[safe_add( _6393_shape1,_6425_i )];
        }
      }
      int32_t _6426_codei = (int)0;
      int32_t _6427_knz = (int)0;
      if ((_6412_rncodeatom > (int)0))
      {
        {
          _ptr__6422_ri32[_6420_rcodeptr] = (int)0;
        }
      }
      {}
      _ptr__6422_ri32[_6415_rptr] = (int)0;
      int32_t _11820_ = (int)0;
      int32_t _11821_ = _6410_rnelem;
      for (int32_t _6428_i = _11820_; _6428_i < _11821_; ++_6428_i)
      {
        {
          int32_t _11822_ = _ptr__6405_wi32[safe_add( _6398_ptr1,_6428_i )];
          int32_t _11823_ = _ptr__6405_wi32[safe_add( safe_add( _6398_ptr1,_6428_i ),(int)1 )];
          for (int32_t _6429_k = _11822_; _6429_k < _11823_; ++_6429_k)
          {
            {
              _ptr__6423_ri64[safe_add( _6417_rnidxs,_6427_knz )] = _ptr__6406_wi64[safe_add( _6400_nidxs1,_6429_k )];
              _ptr__6424_rf64[safe_add( _6418_rcof,_6427_knz )] = (_ptr__6407_wf64[safe_add( _6401_cof1,_6429_k )] * m1);
              if ((_6396_ncodeatom1 > (int)0))
              {
                {
                  int32_t _11824_ = _ptr__6405_wi32[safe_add( _6403_codeptr1,_6429_k )];
                  int32_t _11825_ = _ptr__6405_wi32[safe_add( safe_add( _6403_codeptr1,_6429_k ),(int)1 )];
                  for (int32_t _6430_l = _11824_; _6430_l < _11825_; ++_6430_l)
                  {
                    {
                      _ptr__6422_ri32[safe_add( _6419_rcode,_6426_codei )] = _ptr__6405_wi32[safe_add( _6402_code1,_6430_l )];
                      _ptr__6424_rf64[safe_add( _6421_rcconst,_6426_codei )] = _ptr__6407_wf64[safe_add( _6404_cconst1,_6430_l )];
                      ++ _6426_codei;
                    }
                  }
                  _ptr__6422_ri32[safe_add( _6419_rcode,_6426_codei )] = 2;
                  _ptr__6424_rf64[safe_add( _6421_rcconst,_6426_codei )] = m1;
                  ++ _6426_codei;
                  _ptr__6422_ri32[safe_add( _6419_rcode,_6426_codei )] = 5;
                  ++ _6426_codei;
                  _ptr__6422_ri32[safe_add( safe_add( _6420_rcodeptr,_6427_knz ),(int)1 )] = _6426_codei;
                }
              }
              else
              {
                {
                  if ((_6412_rncodeatom > (int)0))
                  {
                    {
                      _ptr__6422_ri32[safe_add( _6419_rcode,_6426_codei )] = 2;
                      _ptr__6424_rf64[safe_add( _6421_rcconst,_6426_codei )] = 0.0;
                      ++ _6426_codei;
                      _ptr__6422_ri32[safe_add( safe_add( _6420_rcodeptr,_6427_knz ),(int)1 )] = _6426_codei;
                    }
                  }
                  {}
                }
              }
              ++ _6427_knz;
            }
          }
          int32_t _11826_ = _ptr__6405_wi32[safe_add( _6385_ptr2,_6428_i )];
          int32_t _11827_ = _ptr__6405_wi32[safe_add( safe_add( _6385_ptr2,_6428_i ),(int)1 )];
          for (int32_t _6431_k = _11826_; _6431_k < _11827_; ++_6431_k)
          {
            {
              _ptr__6423_ri64[safe_add( _6417_rnidxs,_6427_knz )] = _ptr__6406_wi64[safe_add( _6387_nidxs2,_6431_k )];
              _ptr__6424_rf64[safe_add( _6418_rcof,_6427_knz )] = (_ptr__6407_wf64[safe_add( _6388_cof2,_6431_k )] * m2);
              if ((_6383_ncodeatom2 > (int)0))
              {
                {
                  int32_t _11828_ = _ptr__6405_wi32[safe_add( _6390_codeptr2,_6431_k )];
                  int32_t _11829_ = _ptr__6405_wi32[safe_add( safe_add( _6390_codeptr2,_6431_k ),(int)1 )];
                  for (int32_t _6432_l = _11828_; _6432_l < _11829_; ++_6432_l)
                  {
                    {
                      _ptr__6422_ri32[safe_add( _6419_rcode,_6426_codei )] = _ptr__6405_wi32[safe_add( _6389_code2,_6432_l )];
                      _ptr__6424_rf64[safe_add( _6421_rcconst,_6426_codei )] = _ptr__6407_wf64[safe_add( _6391_cconst2,_6432_l )];
                      ++ _6426_codei;
                    }
                  }
                  _ptr__6422_ri32[safe_add( _6419_rcode,_6426_codei )] = 2;
                  _ptr__6424_rf64[safe_add( _6421_rcconst,_6426_codei )] = m2;
                  ++ _6426_codei;
                  _ptr__6422_ri32[safe_add( _6419_rcode,_6426_codei )] = 5;
                  ++ _6426_codei;
                  _ptr__6422_ri32[safe_add( safe_add( _6420_rcodeptr,_6427_knz ),(int)1 )] = _6426_codei;
                }
              }
              else
              {
                {
                  if ((_6412_rncodeatom > (int)0))
                  {
                    {
                      _ptr__6422_ri32[safe_add( _6419_rcode,_6426_codei )] = 2;
                      _ptr__6424_rf64[safe_add( _6421_rcconst,_6426_codei )] = 0.0;
                      ++ _6426_codei;
                      _ptr__6422_ri32[safe_add( safe_add( _6420_rcodeptr,_6427_knz ),(int)1 )] = _6426_codei;
                    }
                  }
                  {}
                }
              }
              ++ _6427_knz;
            }
          }
          _ptr__6422_ri32[safe_add( safe_add( _6415_rptr,_6428_i ),(int)1 )] = _6427_knz;
        }
      }
    }
  }
  else if(((!_6397_hassp1) || (!_6384_hassp2)))
  {
    {
      if ((!_6384_hassp2))
      {
        {
          int32_t _6433_tnelem = _6381_nelem2;
          int32_t _6434_tnnz = _6382_nnz2;
          int32_t _6435_tptr = _6385_ptr2;
          int32_t _6436_tsp = _6386_sp2;
          int32_t _6437_tnidxs = _6387_nidxs2;
          int32_t _6438_tncodeatom = _6383_ncodeatom2;
          int32_t _6439_tcodeptr = _6390_codeptr2;
          int32_t _6440_tcode = _6389_code2;
          int32_t _6441_tcconst = _6391_cconst2;
          int32_t _6442_tcof = _6388_cof2;
          _6381_nelem2 = _6394_nelem1;
          _6382_nnz2 = _6395_nnz1;
          _6385_ptr2 = _6398_ptr1;
          _6386_sp2 = _6399_sp1;
          _6387_nidxs2 = _6400_nidxs1;
          _6383_ncodeatom2 = _6396_ncodeatom1;
          _6390_codeptr2 = _6403_codeptr1;
          _6389_code2 = _6402_code1;
          _6391_cconst2 = _6404_cconst1;
          _6388_cof2 = _6401_cof1;
          _6394_nelem1 = _6433_tnelem;
          _6395_nnz1 = _6434_tnnz;
          _6398_ptr1 = _6435_tptr;
          _6399_sp1 = _6436_tsp;
          _6400_nidxs1 = _6437_tnidxs;
          _6396_ncodeatom1 = _6438_tncodeatom;
          _6403_codeptr1 = _6439_tcodeptr;
          _6402_code1 = _6440_tcode;
          _6404_cconst1 = _6441_tcconst;
          _6401_cof1 = _6442_tcof;
        }
      }
      {}
      double _11830_;
      bool _11831_ = (!_6397_hassp1);
      if (_11831_)
      {
        _11830_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _11830_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _6443_m1 = _11830_;
      double _11832_;
      bool _11833_ = (!_6397_hassp1);
      if (_11833_)
      {
        _11832_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _11832_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _6444_m2 = _11832_;
      int32_t _6445_rnelem = _6394_nelem1;
      int32_t _6446_rnnz = safe_add( _6395_nnz1,_6382_nnz2 );
      int32_t _6447_rnd = _6392_nd1;
      int32_t _6448_rncodeatom = safe_add( _6396_ncodeatom1,_6383_ncodeatom2 );
      if (_6408_parameterized)
      {
        {
          int32_t _11834_;
          bool _11835_ = (_6396_ncodeatom1 > (int)0);
          if (_11835_)
          {
            _11834_ = safe_mul( (int)2,_6395_nnz1 );
          }
          else
          {
            _11834_ = _6395_nnz1;
          }
          _6448_rncodeatom += _11834_;
          int32_t _11836_;
          bool _11837_ = (_6383_ncodeatom2 > (int)0);
          if (_11837_)
          {
            _11836_ = safe_mul( (int)2,_6382_nnz2 );
          }
          else
          {
            _11836_ = _6382_nnz2;
          }
          _6448_rncodeatom += _11836_;
        }
      }
      {}
      _6376_rs->alloc_expr(_6447_rnd,_6445_rnelem,_6446_rnnz,false,_6448_rncodeatom);
      int32_t _6449_rshape = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->shape_base;
      int32_t _6450_rptr = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->ptr_base;
      int32_t _6451_rsp = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->sp_base;
      int32_t _6452_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->nidxs_base;
      int32_t _6453_rcof = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->cof_base;
      int32_t _6454_rcode = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->code_base;
      int32_t _6455_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->codeptr_base;
      int32_t _6456_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6457_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6457_ri32(_6457_ri32 ? _6457_ri32->raw() : nullptr,_6457_ri32 ? _6457_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6458_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6458_ri64(_6458_ri64 ? _6458_ri64->raw() : nullptr,_6458_ri64 ? _6458_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6459_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->f64;
      _checked_ptr_1<double> _ptr__6459_rf64(_6459_rf64 ? _6459_rf64->raw() : nullptr,_6459_rf64 ? _6459_rf64->size(0) : 0);
      {
        int32_t _6460_codei = (int)0;
        int32_t _6461_elmi = (int)0;
        int32_t _6462_nzi = (int)0;
        int32_t _11838_ = (int)0;
        int32_t _11839_ = _6447_rnd;
        for (int32_t _6463_i = _11838_; _6463_i < _11839_; ++_6463_i)
        {
          {
            _ptr__6457_ri32[safe_add( _6449_rshape,_6463_i )] = _ptr__6405_wi32[safe_add( _6393_shape1,_6463_i )];
          }
        }
        _ptr__6457_ri32[_6450_rptr] = (int)0;
        if ((_6448_rncodeatom > (int)0))
        {
          {
            _ptr__6457_ri32[_6455_rcodeptr] = (int)0;
          }
        }
        {}
        int32_t _6464_ii2 = (int)0;
        int32_t _6465_i1 = (int)0;
        while ( ((_6465_i1 < _6394_nelem1) || (_6464_ii2 < _6381_nelem2)) )
        {
          {
            if (((_6465_i1 < _6394_nelem1) && ((_6464_ii2 >= _6381_nelem2) || (_6465_i1 < _ptr__6406_wi64[safe_add( _6386_sp2,_6464_ii2 )]))))
            {
              {
                int32_t _11840_ = _ptr__6405_wi32[safe_add( _6398_ptr1,_6465_i1 )];
                int32_t _11841_ = _ptr__6405_wi32[safe_add( safe_add( _6398_ptr1,_6465_i1 ),(int)1 )];
                for (int32_t _6466_j = _11840_; _6466_j < _11841_; ++_6466_j)
                {
                  {
                    _ptr__6458_ri64[safe_add( _6452_rnidxs,_6462_nzi )] = _ptr__6406_wi64[safe_add( _6400_nidxs1,_6466_j )];
                    _ptr__6459_rf64[safe_add( _6453_rcof,_6462_nzi )] = (_ptr__6407_wf64[safe_add( _6401_cof1,_6466_j )] * _6443_m1);
                    if ((_6396_ncodeatom1 > (int)0))
                    {
                      {
                        int32_t _11842_ = _ptr__6405_wi32[safe_add( _6403_codeptr1,_6466_j )];
                        int32_t _11843_ = _ptr__6405_wi32[safe_add( safe_add( _6403_codeptr1,_6466_j ),(int)1 )];
                        for (int32_t _6467_k = _11842_; _6467_k < _11843_; ++_6467_k)
                        {
                          {
                            _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = _ptr__6405_wi32[safe_add( _6402_code1,_6467_k )];
                            _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = _ptr__6407_wf64[safe_add( _6404_cconst1,_6467_k )];
                            ++ _6460_codei;
                          }
                        }
                        _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 2;
                        _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = _6443_m1;
                        ++ _6460_codei;
                        _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 5;
                        ++ _6460_codei;
                        _ptr__6457_ri32[safe_add( safe_add( _6455_rcodeptr,_6462_nzi ),(int)1 )] = _6460_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6448_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 2;
                            _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = 0.0;
                            ++ _6460_codei;
                            _ptr__6457_ri32[safe_add( safe_add( _6455_rcodeptr,_6462_nzi ),(int)1 )] = _6460_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6462_nzi;
                  }
                }
                _ptr__6457_ri32[safe_add( safe_add( _6450_rptr,_6461_elmi ),(int)1 )] = _6462_nzi;
                ++ _6465_i1;
              }
            }
            else if(((_6464_ii2 < _6381_nelem2) && ((_6465_i1 >= _6394_nelem1) || (_6465_i1 > _ptr__6406_wi64[safe_add( _6386_sp2,_6464_ii2 )]))))
            {
              {
                int32_t _11844_ = _ptr__6405_wi32[safe_add( _6385_ptr2,_6464_ii2 )];
                int32_t _11845_ = _ptr__6405_wi32[safe_add( safe_add( _6385_ptr2,_6464_ii2 ),(int)1 )];
                for (int32_t _6468_j = _11844_; _6468_j < _11845_; ++_6468_j)
                {
                  {
                    _ptr__6458_ri64[safe_add( _6452_rnidxs,_6462_nzi )] = _ptr__6406_wi64[safe_add( _6387_nidxs2,_6468_j )];
                    _ptr__6459_rf64[safe_add( _6453_rcof,_6462_nzi )] = (_ptr__6407_wf64[safe_add( _6388_cof2,_6468_j )] * _6444_m2);
                    if ((_6383_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _11846_ = _ptr__6405_wi32[safe_add( _6390_codeptr2,_6468_j )];
                        int32_t _11847_ = _ptr__6405_wi32[safe_add( safe_add( _6390_codeptr2,_6468_j ),(int)1 )];
                        for (int32_t _6469_k = _11846_; _6469_k < _11847_; ++_6469_k)
                        {
                          {
                            _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = _ptr__6405_wi32[safe_add( _6389_code2,_6469_k )];
                            _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = _ptr__6407_wf64[safe_add( _6391_cconst2,_6469_k )];
                            ++ _6460_codei;
                          }
                        }
                        _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 2;
                        _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = _6444_m2;
                        ++ _6460_codei;
                        _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 5;
                        ++ _6460_codei;
                        _ptr__6457_ri32[safe_add( safe_add( _6455_rcodeptr,_6462_nzi ),(int)1 )] = _6460_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6448_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 2;
                            _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = 0.0;
                            ++ _6460_codei;
                            _ptr__6457_ri32[safe_add( safe_add( _6455_rcodeptr,_6462_nzi ),(int)1 )] = _6460_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6462_nzi;
                  }
                }
                _ptr__6457_ri32[safe_add( safe_add( _6450_rptr,_6461_elmi ),(int)1 )] = _6462_nzi;
                ++ _6464_ii2;
              }
            }
            else
            {
              {
                int32_t _11848_ = _ptr__6405_wi32[safe_add( _6398_ptr1,_6465_i1 )];
                int32_t _11849_ = _ptr__6405_wi32[safe_add( safe_add( _6398_ptr1,_6465_i1 ),(int)1 )];
                for (int32_t _6470_j = _11848_; _6470_j < _11849_; ++_6470_j)
                {
                  {
                    _ptr__6458_ri64[safe_add( _6452_rnidxs,_6462_nzi )] = _ptr__6406_wi64[safe_add( _6400_nidxs1,_6470_j )];
                    _ptr__6459_rf64[safe_add( _6453_rcof,_6462_nzi )] = (_ptr__6407_wf64[safe_add( _6401_cof1,_6470_j )] * _6443_m1);
                    if ((_6396_ncodeatom1 > (int)0))
                    {
                      {
                        int32_t _11850_ = _ptr__6405_wi32[safe_add( _6403_codeptr1,_6470_j )];
                        int32_t _11851_ = _ptr__6405_wi32[safe_add( safe_add( _6403_codeptr1,_6470_j ),(int)1 )];
                        for (int32_t _6471_k = _11850_; _6471_k < _11851_; ++_6471_k)
                        {
                          {
                            _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = _ptr__6405_wi32[safe_add( _6402_code1,_6471_k )];
                            _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = _ptr__6407_wf64[safe_add( _6404_cconst1,_6471_k )];
                            ++ _6460_codei;
                          }
                        }
                        _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 2;
                        _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = _6443_m1;
                        ++ _6460_codei;
                        _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 5;
                        ++ _6460_codei;
                        _ptr__6457_ri32[safe_add( safe_add( _6455_rcodeptr,_6462_nzi ),(int)1 )] = _6460_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6448_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 2;
                            _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = 0.0;
                            ++ _6460_codei;
                            _ptr__6457_ri32[safe_add( safe_add( _6455_rcodeptr,_6462_nzi ),(int)1 )] = _6460_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6462_nzi;
                  }
                }
                int32_t _11852_ = _ptr__6405_wi32[safe_add( _6385_ptr2,_6464_ii2 )];
                int32_t _11853_ = _ptr__6405_wi32[safe_add( safe_add( _6385_ptr2,_6464_ii2 ),(int)1 )];
                for (int32_t _6472_j = _11852_; _6472_j < _11853_; ++_6472_j)
                {
                  {
                    _ptr__6458_ri64[safe_add( _6452_rnidxs,_6462_nzi )] = _ptr__6406_wi64[safe_add( _6387_nidxs2,_6472_j )];
                    _ptr__6459_rf64[safe_add( _6453_rcof,_6462_nzi )] = (_ptr__6407_wf64[safe_add( _6388_cof2,_6472_j )] * _6444_m2);
                    if ((_6383_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _11854_ = _ptr__6405_wi32[safe_add( _6390_codeptr2,_6472_j )];
                        int32_t _11855_ = _ptr__6405_wi32[safe_add( safe_add( _6390_codeptr2,_6472_j ),(int)1 )];
                        for (int32_t _6473_k = _11854_; _6473_k < _11855_; ++_6473_k)
                        {
                          {
                            _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = _ptr__6405_wi32[safe_add( _6389_code2,_6473_k )];
                            _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = _ptr__6407_wf64[safe_add( _6391_cconst2,_6473_k )];
                            ++ _6460_codei;
                          }
                        }
                        _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 2;
                        _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = _6444_m2;
                        ++ _6460_codei;
                        _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 5;
                        ++ _6460_codei;
                        _ptr__6457_ri32[safe_add( safe_add( _6455_rcodeptr,_6462_nzi ),(int)1 )] = _6460_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6448_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6457_ri32[safe_add( _6454_rcode,_6460_codei )] = 2;
                            _ptr__6459_rf64[safe_add( _6456_rcconst,_6460_codei )] = 0.0;
                            ++ _6460_codei;
                            _ptr__6457_ri32[safe_add( safe_add( _6455_rcodeptr,_6462_nzi ),(int)1 )] = _6460_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6462_nzi;
                  }
                }
                _ptr__6457_ri32[safe_add( safe_add( _6450_rptr,_6461_elmi ),(int)1 )] = _6462_nzi;
                ++ _6465_i1;
                ++ _6464_ii2;
              }
            }
            ++ _6461_elmi;
          }
        }
        if ((_6462_nzi != _6446_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
          }
        }
        {}
        if ((_6460_codei != _6448_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      int32_t _6474_rnnz = safe_add( _6395_nnz1,_6382_nnz2 );
      int32_t _6475_rnelem = (int)0;
      int32_t _6476_rnd = _6392_nd1;
      int32_t _6477_rncodeatom = safe_add( _6396_ncodeatom1,_6383_ncodeatom2 );
      if (_6408_parameterized)
      {
        {
          int32_t _11856_;
          bool _11857_ = (_6396_ncodeatom1 > (int)0);
          if (_11857_)
          {
            _11856_ = safe_mul( (int)2,_6395_nnz1 );
          }
          else
          {
            _11856_ = _6395_nnz1;
          }
          _6477_rncodeatom += _11856_;
          int32_t _11858_;
          bool _11859_ = (_6383_ncodeatom2 > (int)0);
          if (_11859_)
          {
            _11858_ = safe_mul( (int)2,_6382_nnz2 );
          }
          else
          {
            _11858_ = _6382_nnz2;
          }
          _6477_rncodeatom += _11858_;
        }
      }
      {}
      int64_t _6478_size = (int64_t)1;
      int32_t _11860_ = (int)0;
      int32_t _11861_ = _6476_rnd;
      for (int32_t _6479_i = _11860_; _6479_i < _11861_; ++_6479_i)
      {
        {
          _6478_size *= _ptr__6405_wi32[safe_add( _6393_shape1,_6479_i )];
        }
      }
      {
        int32_t _6480_i2 = (int)0;
        int32_t _6481_i1 = (int)0;
        while ( ((_6481_i1 < _6394_nelem1) && (_6480_i2 < _6381_nelem2)) )
        {
          {
            if ((_ptr__6406_wi64[safe_add( _6399_sp1,_6481_i1 )] < _ptr__6406_wi64[safe_add( _6386_sp2,_6480_i2 )]))
            {
              {
                ++ _6475_rnelem;
                ++ _6481_i1;
              }
            }
            else if((_ptr__6406_wi64[safe_add( _6399_sp1,_6481_i1 )] > _ptr__6406_wi64[safe_add( _6386_sp2,_6480_i2 )]))
            {
              {
                ++ _6475_rnelem;
                ++ _6480_i2;
              }
            }
            else
            {
              {
                ++ _6475_rnelem;
                ++ _6481_i1;
                ++ _6480_i2;
              }
            }
          }
        }
        _6475_rnelem += (safe_add( (_6394_nelem1 - _6481_i1),_6381_nelem2 ) - _6480_i2);
      }
      bool _6482_rhassp = (_6475_rnelem < _6478_size);
      _6376_rs->alloc_expr(_6476_rnd,_6475_rnelem,_6474_rnnz,_6482_rhassp,_6477_rncodeatom);
      int32_t _6483_rshape = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->shape_base;
      int32_t _6484_rptr = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->ptr_base;
      int32_t _11862_;
      bool _11863_ = _6482_rhassp;
      if (_11863_)
      {
        _11862_ = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->sp_base;
      }
      else
      {
        _11862_ = _6376_rs->alloci64(_6475_rnelem);
      }
      int32_t _6485_rsp = _11862_;
      int32_t _6486_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->nidxs_base;
      int32_t _6487_rcof = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->cof_base;
      int32_t _6488_rcode = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->code_base;
      int32_t _6489_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->codeptr_base;
      int32_t _6490_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6491_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6491_ri32(_6491_ri32 ? _6491_ri32->raw() : nullptr,_6491_ri32 ? _6491_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6492_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6492_ri64(_6492_ri64 ? _6492_ri64->raw() : nullptr,_6492_ri64 ? _6492_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6493_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6376_rs)->f64;
      _checked_ptr_1<double> _ptr__6493_rf64(_6493_rf64 ? _6493_rf64->raw() : nullptr,_6493_rf64 ? _6493_rf64->size(0) : 0);
      int32_t _11864_ = (int)0;
      int32_t _11865_ = _6476_rnd;
      for (int32_t _6494_i = _11864_; _6494_i < _11865_; ++_6494_i)
      {
        {
          _ptr__6491_ri32[safe_add( _6483_rshape,_6494_i )] = _ptr__6405_wi32[safe_add( _6393_shape1,_6494_i )];
        }
      }
      {
        _ptr__6491_ri32[_6484_rptr] = (int)0;
        if ((_6477_rncodeatom > (int)0))
        {
          {
            _ptr__6491_ri32[_6489_rcodeptr] = (int)0;
          }
        }
        {}
        int32_t _6495_codei = (int)0;
        int32_t _6496_pe = (int)0;
        int32_t _6497_p = (int)0;
        int32_t _6498_i2 = (int)0;
        int32_t _6499_i1 = (int)0;
        while ( ((_6499_i1 < _6394_nelem1) && (_6498_i2 < _6381_nelem2)) )
        {
          {
            if ((_ptr__6406_wi64[safe_add( _6399_sp1,_6499_i1 )] < _ptr__6406_wi64[safe_add( _6386_sp2,_6498_i2 )]))
            {
              {
                int32_t _11866_ = _ptr__6405_wi32[safe_add( _6398_ptr1,_6499_i1 )];
                int32_t _11867_ = _ptr__6405_wi32[safe_add( safe_add( _6398_ptr1,_6499_i1 ),(int)1 )];
                for (int32_t _6500_j = _11866_; _6500_j < _11867_; ++_6500_j)
                {
                  {
                    _ptr__6492_ri64[safe_add( _6486_rnidxs,_6497_p )] = _ptr__6406_wi64[safe_add( _6400_nidxs1,_6500_j )];
                    _ptr__6493_rf64[safe_add( _6487_rcof,_6497_p )] = (m1 * _ptr__6407_wf64[safe_add( _6401_cof1,_6500_j )]);
                    if ((_6396_ncodeatom1 > (int)0))
                    {
                      {
                        int32_t _11868_ = _ptr__6405_wi32[safe_add( _6403_codeptr1,_6500_j )];
                        int32_t _11869_ = _ptr__6405_wi32[safe_add( safe_add( _6403_codeptr1,_6500_j ),(int)1 )];
                        for (int32_t _6501_k = _11868_; _6501_k < _11869_; ++_6501_k)
                        {
                          {
                            _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = _ptr__6405_wi32[safe_add( _6402_code1,_6501_k )];
                            _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = _ptr__6407_wf64[safe_add( _6404_cconst1,_6501_k )];
                            ++ _6495_codei;
                          }
                        }
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                        _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = m1;
                        ++ _6495_codei;
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 5;
                        ++ _6495_codei;
                        _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6477_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                            _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = (int)0;
                            ++ _6495_codei;
                            _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6497_p;
                  }
                }
                _ptr__6492_ri64[safe_add( _6485_rsp,_6496_pe )] = _ptr__6406_wi64[safe_add( _6399_sp1,_6499_i1 )];
                _ptr__6491_ri32[safe_add( safe_add( _6484_rptr,_6496_pe ),(int)1 )] = _6497_p;
                ++ _6496_pe;
                ++ _6499_i1;
              }
            }
            else if((_ptr__6406_wi64[safe_add( _6386_sp2,_6498_i2 )] < _ptr__6406_wi64[safe_add( _6399_sp1,_6499_i1 )]))
            {
              {
                int32_t _11870_ = _ptr__6405_wi32[safe_add( _6385_ptr2,_6498_i2 )];
                int32_t _11871_ = _ptr__6405_wi32[safe_add( safe_add( _6385_ptr2,_6498_i2 ),(int)1 )];
                for (int32_t _6502_j = _11870_; _6502_j < _11871_; ++_6502_j)
                {
                  {
                    _ptr__6492_ri64[safe_add( _6486_rnidxs,_6497_p )] = _ptr__6406_wi64[safe_add( _6387_nidxs2,_6502_j )];
                    _ptr__6493_rf64[safe_add( _6487_rcof,_6497_p )] = (m2 * _ptr__6407_wf64[safe_add( _6388_cof2,_6502_j )]);
                    if ((_6383_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _11872_ = _ptr__6405_wi32[safe_add( _6390_codeptr2,_6502_j )];
                        int32_t _11873_ = _ptr__6405_wi32[safe_add( safe_add( _6390_codeptr2,_6502_j ),(int)1 )];
                        for (int32_t _6503_k = _11872_; _6503_k < _11873_; ++_6503_k)
                        {
                          {
                            _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = _ptr__6405_wi32[safe_add( _6389_code2,_6503_k )];
                            _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = _ptr__6407_wf64[safe_add( _6391_cconst2,_6503_k )];
                            ++ _6495_codei;
                          }
                        }
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                        _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = m2;
                        ++ _6495_codei;
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 5;
                        ++ _6495_codei;
                        _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6477_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                            _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = (int)0;
                            ++ _6495_codei;
                            _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6497_p;
                  }
                }
                _ptr__6492_ri64[safe_add( _6485_rsp,_6496_pe )] = _ptr__6406_wi64[safe_add( _6386_sp2,_6498_i2 )];
                _ptr__6491_ri32[safe_add( safe_add( _6484_rptr,_6496_pe ),(int)1 )] = _6497_p;
                ++ _6496_pe;
                ++ _6498_i2;
              }
            }
            else
            {
              {
                int32_t _11874_ = _ptr__6405_wi32[safe_add( _6398_ptr1,_6499_i1 )];
                int32_t _11875_ = _ptr__6405_wi32[safe_add( safe_add( _6398_ptr1,_6499_i1 ),(int)1 )];
                for (int32_t _6504_j = _11874_; _6504_j < _11875_; ++_6504_j)
                {
                  {
                    _ptr__6492_ri64[safe_add( _6486_rnidxs,_6497_p )] = _ptr__6406_wi64[safe_add( _6400_nidxs1,_6504_j )];
                    _ptr__6493_rf64[safe_add( _6487_rcof,_6497_p )] = (m1 * _ptr__6407_wf64[safe_add( _6401_cof1,_6504_j )]);
                    if ((_6396_ncodeatom1 > (int)0))
                    {
                      {
                        int32_t _11876_ = _ptr__6405_wi32[safe_add( _6403_codeptr1,_6504_j )];
                        int32_t _11877_ = _ptr__6405_wi32[safe_add( safe_add( _6403_codeptr1,_6504_j ),(int)1 )];
                        for (int32_t _6505_k = _11876_; _6505_k < _11877_; ++_6505_k)
                        {
                          {
                            _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = _ptr__6405_wi32[safe_add( _6402_code1,_6505_k )];
                            _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = _ptr__6407_wf64[safe_add( _6404_cconst1,_6505_k )];
                            ++ _6495_codei;
                          }
                        }
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                        _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = m1;
                        ++ _6495_codei;
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 5;
                        ++ _6495_codei;
                        _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6477_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                            _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = (int)0;
                            ++ _6495_codei;
                            _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6497_p;
                  }
                }
                int32_t _11878_ = _ptr__6405_wi32[safe_add( _6385_ptr2,_6498_i2 )];
                int32_t _11879_ = _ptr__6405_wi32[safe_add( safe_add( _6385_ptr2,_6498_i2 ),(int)1 )];
                for (int32_t _6506_j = _11878_; _6506_j < _11879_; ++_6506_j)
                {
                  {
                    _ptr__6492_ri64[safe_add( _6486_rnidxs,_6497_p )] = _ptr__6406_wi64[safe_add( _6387_nidxs2,_6506_j )];
                    _ptr__6493_rf64[safe_add( _6487_rcof,_6497_p )] = (m2 * _ptr__6407_wf64[safe_add( _6388_cof2,_6506_j )]);
                    if ((_6383_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _11880_ = _ptr__6405_wi32[safe_add( _6390_codeptr2,_6506_j )];
                        int32_t _11881_ = _ptr__6405_wi32[safe_add( safe_add( _6390_codeptr2,_6506_j ),(int)1 )];
                        for (int32_t _6507_k = _11880_; _6507_k < _11881_; ++_6507_k)
                        {
                          {
                            _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = _ptr__6405_wi32[safe_add( _6389_code2,_6507_k )];
                            _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = _ptr__6407_wf64[safe_add( _6391_cconst2,_6507_k )];
                            ++ _6495_codei;
                          }
                        }
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                        _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = m2;
                        ++ _6495_codei;
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 5;
                        ++ _6495_codei;
                        _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6477_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                            _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = (int)0;
                            ++ _6495_codei;
                            _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6497_p;
                  }
                }
                _ptr__6492_ri64[safe_add( _6485_rsp,_6496_pe )] = _ptr__6406_wi64[safe_add( _6399_sp1,_6499_i1 )];
                _ptr__6491_ri32[safe_add( safe_add( _6484_rptr,_6496_pe ),(int)1 )] = _6497_p;
                ++ _6496_pe;
                ++ _6499_i1;
                ++ _6498_i2;
              }
            }
          }
        }
        while ( (_6499_i1 < _6394_nelem1) )
        {
          {
            int32_t _11882_ = _ptr__6405_wi32[safe_add( _6398_ptr1,_6499_i1 )];
            int32_t _11883_ = _ptr__6405_wi32[safe_add( safe_add( _6398_ptr1,_6499_i1 ),(int)1 )];
            for (int32_t _6508_j = _11882_; _6508_j < _11883_; ++_6508_j)
            {
              {
                _ptr__6492_ri64[safe_add( _6486_rnidxs,_6497_p )] = _ptr__6406_wi64[safe_add( _6400_nidxs1,_6508_j )];
                _ptr__6493_rf64[safe_add( _6487_rcof,_6497_p )] = (m1 * _ptr__6407_wf64[safe_add( _6401_cof1,_6508_j )]);
                if ((_6396_ncodeatom1 > (int)0))
                {
                  {
                    int32_t _11884_ = _ptr__6405_wi32[safe_add( _6403_codeptr1,_6508_j )];
                    int32_t _11885_ = _ptr__6405_wi32[safe_add( safe_add( _6403_codeptr1,_6508_j ),(int)1 )];
                    for (int32_t _6509_k = _11884_; _6509_k < _11885_; ++_6509_k)
                    {
                      {
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = _ptr__6405_wi32[safe_add( _6402_code1,_6509_k )];
                        _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = _ptr__6407_wf64[safe_add( _6404_cconst1,_6509_k )];
                        ++ _6495_codei;
                      }
                    }
                    _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                    _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = m1;
                    ++ _6495_codei;
                    _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 5;
                    ++ _6495_codei;
                    _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                  }
                }
                else
                {
                  {
                    if ((_6477_rncodeatom > (int)0))
                    {
                      {
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                        _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = (int)0;
                        ++ _6495_codei;
                        _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                      }
                    }
                    {}
                  }
                }
                ++ _6497_p;
              }
            }
            _ptr__6492_ri64[safe_add( _6485_rsp,_6496_pe )] = _ptr__6406_wi64[safe_add( _6399_sp1,_6499_i1 )];
            _ptr__6491_ri32[safe_add( safe_add( _6484_rptr,_6496_pe ),(int)1 )] = _6497_p;
            ++ _6496_pe;
            ++ _6499_i1;
          }
        }
        while ( (_6498_i2 < _6381_nelem2) )
        {
          {
            int32_t _11886_ = _ptr__6405_wi32[safe_add( _6385_ptr2,_6498_i2 )];
            int32_t _11887_ = _ptr__6405_wi32[safe_add( safe_add( _6385_ptr2,_6498_i2 ),(int)1 )];
            for (int32_t _6510_j = _11886_; _6510_j < _11887_; ++_6510_j)
            {
              {
                _ptr__6492_ri64[safe_add( _6486_rnidxs,_6497_p )] = _ptr__6406_wi64[safe_add( _6387_nidxs2,_6510_j )];
                _ptr__6493_rf64[safe_add( _6487_rcof,_6497_p )] = (m2 * _ptr__6407_wf64[safe_add( _6388_cof2,_6510_j )]);
                if ((_6383_ncodeatom2 > (int)0))
                {
                  {
                    int32_t _11888_ = _ptr__6405_wi32[safe_add( _6390_codeptr2,_6510_j )];
                    int32_t _11889_ = _ptr__6405_wi32[safe_add( safe_add( _6390_codeptr2,_6510_j ),(int)1 )];
                    for (int32_t _6511_k = _11888_; _6511_k < _11889_; ++_6511_k)
                    {
                      {
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = _ptr__6405_wi32[safe_add( _6389_code2,_6511_k )];
                        _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = _ptr__6407_wf64[safe_add( _6391_cconst2,_6511_k )];
                        ++ _6495_codei;
                      }
                    }
                    _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                    _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = m2;
                    ++ _6495_codei;
                    _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 5;
                    ++ _6495_codei;
                    _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                  }
                }
                else
                {
                  {
                    if ((_6477_rncodeatom > (int)0))
                    {
                      {
                        _ptr__6491_ri32[safe_add( _6488_rcode,_6495_codei )] = 2;
                        _ptr__6493_rf64[safe_add( _6490_rcconst,_6495_codei )] = (int)0;
                        ++ _6495_codei;
                        _ptr__6491_ri32[safe_add( safe_add( _6489_rcodeptr,_6497_p ),(int)1 )] = _6495_codei;
                      }
                    }
                    {}
                  }
                }
                ++ _6497_p;
              }
            }
            _ptr__6492_ri64[safe_add( _6485_rsp,_6496_pe )] = _ptr__6406_wi64[safe_add( _6386_sp2,_6498_i2 )];
            _ptr__6491_ri32[safe_add( safe_add( _6484_rptr,_6496_pe ),(int)1 )] = _6497_p;
            ++ _6496_pe;
            ++ _6498_i2;
          }
        }
      }
      if ((!_6482_rhassp))
      {
        {
          _6376_rs->popi64(_6475_rnelem);
        }
      }
      {}
    }
  }
}
// End mosek.fusion.ExprAdd.eval

// Begin mosek.fusion.ExprAdd.toString
// Method mosek.fusion.ExprAdd.toString @ src/fusion/ExprAdd.monty:603:6-605:7
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprAdd::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("; "))->__mosek_2fusion_2Utils_2StringBuffer__a(m1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(m2)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprAdd.toString

void mosek::fusion::p_ExprAdd::destroy()
{
  e2.reset();
  e1.reset();
}
void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }
// } class ExprAdd
// class ExprWSum { // @ src/fusion/ExprAdd.monty:240:4-594:5
mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }
mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprWSum::p_ExprWSum
  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprWSum.ctor @ src/fusion/ExprAdd.monty:254:6-275:7
mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6512_es,
    std::shared_ptr< monty::ndarray< double,1 > > _6513_w)
{ return new mosek::fusion::ExprWSum(_6512_es,_6513_w); }
mosek::fusion::ExprWSum::ExprWSum
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6512_es,
    std::shared_ptr< monty::ndarray< double,1 > > _6513_w) : 
   ExprWSum(new mosek::fusion::p_ExprWSum(this))
{ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_6512_es,_6513_w); }
void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6512_es,
    std::shared_ptr< monty::ndarray< double,1 > > _6513_w)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__6513_w(_6513_w ? _6513_w->raw() : nullptr, _6513_w ? _6513_w->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(((*_6512_es)((int)0))->getShape());
    if (((int)((_6513_w)->size(0)) != (int)((_6512_es)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_6513_w);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6514_shape = ((*_6512_es)((int)0))->getShape();
    _checked_ptr_1<int32_t> _ptr__6514_shape(_6514_shape ? _6514_shape->raw() : nullptr,_6514_shape ? _6514_shape->size(0) : 0);
    int32_t _6515_nd = (int)((_6514_shape)->size(0));
    int32_t _11890_ = (int)1;
    int32_t _11891_ = (int)((_6512_es)->size(0));
    for (int32_t _6516_i = _11890_; _6516_i < _11891_; ++_6516_i)
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _6517_eshape = ((*_6512_es)(_6516_i))->getShape();
        _checked_ptr_1<int32_t> _ptr__6517_eshape(_6517_eshape ? _6517_eshape->raw() : nullptr,_6517_eshape ? _6517_eshape->size(0) : 0);
        if ((_6515_nd != (int)((_6517_eshape)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int32_t _11892_ = (int)0;
            int32_t _11893_ = _6515_nd;
            for (int32_t _6518_j = _11892_; _6518_j < _11893_; ++_6518_j)
            {
              {
                if ((_ptr__6514_shape[_6518_j] != _ptr__6517_eshape[_6518_j]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _11894_;
    for (int32_t _6519_i = (int)0, _11895_ = (int)((_6512_es)->size(0)); _6519_i < _11895_ ; ++_6519_i)
    {
      _11894_.push_back(((*_6512_es)(_6519_i)));
    }
    auto _11896_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_11894_.size()),_11894_.begin(),_11894_.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _11896_;
  }
}
// mosek.fusion.ExprWSum.ctor

// Begin mosek.fusion.ExprWSum.eval
// Method mosek.fusion.ExprWSum.eval @ src/fusion/ExprAdd.monty:277:6-593:7
void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6520_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6521_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6522_xs) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_6520_rs,_6521_ws,_6522_xs); }
void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6520_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6521_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6522_xs)
{
  int32_t _6523_n = (int)((es)->size(0));
  int32_t _11897_ = (int)0;
  int32_t _11898_ = _6523_n;
  for (int32_t _6524_i = _11897_; _6524_i < _11898_; ++_6524_i)
  {
    {
      ((*es)(_6524_i))->eval(_6521_ws,_6520_rs,_6522_xs);
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6525_nd = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6525_nd(_6525_nd ? _6525_nd->raw() : nullptr,_6525_nd ? _6525_nd->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6526_nelem = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6526_nelem(_6526_nelem ? _6526_nelem->raw() : nullptr,_6526_nelem ? _6526_nelem->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6527_nnz = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6527_nnz(_6527_nnz ? _6527_nnz->raw() : nullptr,_6527_nnz ? _6527_nnz->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6528_ncodeatom = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6528_ncodeatom(_6528_ncodeatom ? _6528_ncodeatom->raw() : nullptr,_6528_ncodeatom ? _6528_ncodeatom->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6529_ptr_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6529_ptr_base(_6529_ptr_base ? _6529_ptr_base->raw() : nullptr,_6529_ptr_base ? _6529_ptr_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6530_nidxs_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6530_nidxs_base(_6530_nidxs_base ? _6530_nidxs_base->raw() : nullptr,_6530_nidxs_base ? _6530_nidxs_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6531_sp_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6531_sp_base(_6531_sp_base ? _6531_sp_base->raw() : nullptr,_6531_sp_base ? _6531_sp_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6532_cof_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6532_cof_base(_6532_cof_base ? _6532_cof_base->raw() : nullptr,_6532_cof_base ? _6532_cof_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6533_shape_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6533_shape_base(_6533_shape_base ? _6533_shape_base->raw() : nullptr,_6533_shape_base ? _6533_shape_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6534_code = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6534_code(_6534_code ? _6534_code->raw() : nullptr,_6534_code ? _6534_code->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6535_codeptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6535_codeptr(_6535_codeptr ? _6535_codeptr->raw() : nullptr,_6535_codeptr ? _6535_codeptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6536_cconst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
  _checked_ptr_1<int32_t> _ptr__6536_cconst(_6536_cconst ? _6536_cconst->raw() : nullptr,_6536_cconst ? _6536_cconst->size(0) : 0);
  std::shared_ptr< monty::ndarray< bool,1 > > _6537_hassp = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6523_n)));
  int32_t _11899_ = (int)0;
  int32_t _11900_ = _6523_n;
  for (int32_t _6538_i = _11899_; _6538_i < _11900_; ++_6538_i)
  {
    {
      _6521_ws->pop_expr();
      _ptr__6525_nd[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->nd;
      _ptr__6526_nelem[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->nelem;
      _ptr__6527_nnz[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->nnz;
      _ptr__6528_ncodeatom[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->ncodeatom;
      _ptr__6529_ptr_base[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->ptr_base;
      _ptr__6531_sp_base[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->sp_base;
      _ptr__6530_nidxs_base[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->nidxs_base;
      _ptr__6532_cof_base[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->cof_base;
      _ptr__6533_shape_base[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->shape_base;
      _ptr__6534_code[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->code_base;
      _ptr__6535_codeptr[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->codeptr_base;
      _ptr__6536_cconst[((_6523_n - (int)1) - _6538_i)] = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->cconst_base;
      ((*_6537_hassp)(((_6523_n - (int)1) - _6538_i))) = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->hassp;
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6539_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6539_wi32(_6539_wi32 ? _6539_wi32->raw() : nullptr,_6539_wi32 ? _6539_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6540_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6540_wi64(_6540_wi64 ? _6540_wi64->raw() : nullptr,_6540_wi64 ? _6540_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6541_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6521_ws)->f64;
  _checked_ptr_1<double> _ptr__6541_wf64(_6541_wf64 ? _6541_wf64->raw() : nullptr,_6541_wf64 ? _6541_wf64->size(0) : 0);
  {
    bool _6542_ok = true;
    int32_t _11901_ = (int)1;
    int32_t _11902_ = _6523_n;
    for (int32_t _6543_i = _11901_; _6543_i < _11902_; ++_6543_i)
    {
      {
        _6542_ok = (_6542_ok && (_ptr__6525_nd[(int)0] == _ptr__6525_nd[_6543_i]));
        int32_t _11903_ = (int)0;
        int32_t _11904_ = _ptr__6525_nd[(int)0];
        for (int32_t _6544_j = _11903_; _6544_j < _11904_; ++_6544_j)
        {
          {
            _6542_ok = (_6542_ok && (_ptr__6539_wi32[safe_add( _ptr__6533_shape_base[(int)0],_6544_j )] == _ptr__6539_wi32[safe_add( _ptr__6533_shape_base[_6543_i],_6544_j )]));
          }
        }
      }
    }
    if ((!_6542_ok))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
  }
  std::vector<int32_t> _11905_;
  for (int32_t _6546_j = (int)0, _11906_ = _ptr__6525_nd[(int)0]; _6546_j < _11906_ ; ++_6546_j)
  {
    _11905_.push_back(_ptr__6539_wi32[safe_add( _ptr__6533_shape_base[(int)0],_6546_j )]);
  }
  auto _11907_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11905_.size()),_11905_.begin(),_11905_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6545_wshape = _11907_;
  _checked_ptr_1<int32_t> _ptr__6545_wshape(_6545_wshape ? _6545_wshape->raw() : nullptr,_6545_wshape ? _6545_wshape->size(0) : 0);
  bool _6547_anydense = false;
  int32_t _11908_ = (int)0;
  int32_t _11909_ = _6523_n;
  for (int32_t _6548_i = _11908_; _6548_i < _11909_; ++_6548_i)
  {
    {
      if ((!((*_6537_hassp)(_6548_i))))
      {
        {
          _6547_anydense = true;
        }
      }
      {}
    }
  }
  bool _6549_anycodeatom = false;
  int32_t _11910_ = (int)0;
  int32_t _11911_ = _6523_n;
  for (int32_t _6550_i = _11910_; _6550_i < _11911_; ++_6550_i)
  {
    {
      if ((_ptr__6528_ncodeatom[_6550_i] > (int)0))
      {
        {
          _6549_anycodeatom = true;
        }
      }
      {}
    }
  }
  int32_t _6551_rncodeatom = (int)0;
  int32_t _6552_rnelem = (int)0;
  int32_t _6553_rnnz = (int)0;
  if (_6547_anydense)
  {
    {
      _6552_rnelem = (int32_t)::mosek::fusion::p_Set::size(_6545_wshape);
      int32_t _11912_ = (int)0;
      int32_t _11913_ = _6523_n;
      for (int32_t _6554_i = _11912_; _6554_i < _11913_; ++_6554_i)
      {
        {
          _6553_rnnz += _ptr__6527_nnz[_6554_i];
          if (_6549_anycodeatom)
          {
            {
              int32_t _11914_;
              bool _11915_ = (_ptr__6528_ncodeatom[_6554_i] > (int)0);
              if (_11915_)
              {
                _11914_ = safe_add( _ptr__6528_ncodeatom[_6554_i],safe_mul( (int)2,_ptr__6527_nnz[_6554_i] ) );
              }
              else
              {
                _11914_ = _ptr__6527_nnz[_6554_i];
              }
              _6551_rncodeatom += _11914_;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      bool _6555_done = false;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6556_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
      _checked_ptr_1<int32_t> _ptr__6556_ii(_6556_ii ? _6556_ii->raw() : nullptr,_6556_ii ? _6556_ii->size(0) : 0);
      int32_t _11916_ = (int)0;
      int32_t _11917_ = _6523_n;
      for (int32_t _6557_i = _11916_; _6557_i < _11917_; ++_6557_i)
      {
        {
          _6553_rnnz += _ptr__6527_nnz[_6557_i];
          if (_6549_anycodeatom)
          {
            {
              int32_t _11918_;
              bool _11919_ = (_ptr__6528_ncodeatom[_6557_i] > (int)0);
              if (_11919_)
              {
                _11918_ = safe_add( _ptr__6528_ncodeatom[_6557_i],safe_mul( (int)2,_ptr__6527_nnz[_6557_i] ) );
              }
              else
              {
                _11918_ = _ptr__6527_nnz[_6557_i];
              }
              _6551_rncodeatom += _11918_;
            }
          }
          {}
        }
      }
      while ( (!_6555_done) )
      {
        {
          int64_t _6558_min_i = (-(int)1);
          int32_t _11920_ = (int)0;
          int32_t _11921_ = _6523_n;
          for (int32_t _6559_j = _11920_; _6559_j < _11921_; ++_6559_j)
          {
            {
              if (((_ptr__6556_ii[_6559_j] < _ptr__6526_nelem[_6559_j]) && ((_6558_min_i < (int)0) || (_ptr__6540_wi64[safe_add( _ptr__6531_sp_base[_6559_j],_ptr__6556_ii[_6559_j] )] < _6558_min_i))))
              {
                {
                  _6558_min_i = _ptr__6540_wi64[safe_add( _ptr__6531_sp_base[_6559_j],_ptr__6556_ii[_6559_j] )];
                }
              }
              {}
            }
          }
          if ((_6558_min_i < (int)0))
          {
            {
              _6555_done = true;
            }
          }
          else
          {
            {
              int32_t _11922_ = (int)0;
              int32_t _11923_ = _6523_n;
              for (int32_t _6560_j = _11922_; _6560_j < _11923_; ++_6560_j)
              {
                {
                  if (((_ptr__6556_ii[_6560_j] < _ptr__6526_nelem[_6560_j]) && (_6558_min_i == _ptr__6540_wi64[safe_add( _ptr__6531_sp_base[_6560_j],_ptr__6556_ii[_6560_j] )])))
                  {
                    {
                      ++ _ptr__6556_ii[_6560_j];
                    }
                  }
                  {}
                }
              }
              ++ _6552_rnelem;
            }
          }
        }
      }
    }
  }
  _6520_rs->alloc_expr(_ptr__6525_nd[(int)0],_6552_rnelem,_6553_rnnz,(!_6547_anydense),_6551_rncodeatom);
  int32_t _6561_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->ptr_base;
  int32_t _6562_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->nidxs_base;
  int32_t _6563_rsp_base = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->sp_base;
  int32_t _6564_rshape = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->shape_base;
  int32_t _6565_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->cof_base;
  int32_t _6566_rcode = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->code_base;
  int32_t _6567_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->codeptr_base;
  int32_t _6568_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6569_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6569_ri32(_6569_ri32 ? _6569_ri32->raw() : nullptr,_6569_ri32 ? _6569_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6570_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6570_ri64(_6570_ri64 ? _6570_ri64->raw() : nullptr,_6570_ri64 ? _6570_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6571_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6520_rs)->f64;
  _checked_ptr_1<double> _ptr__6571_rf64(_6571_rf64 ? _6571_rf64->raw() : nullptr,_6571_rf64 ? _6571_rf64->size(0) : 0);
  int32_t _11924_ = (int)0;
  int32_t _11925_ = _ptr__6525_nd[(int)0];
  for (int32_t _6572_i = _11924_; _6572_i < _11925_; ++_6572_i)
  {
    {
      _ptr__6569_ri32[safe_add( _6564_rshape,_6572_i )] = _ptr__6539_wi32[safe_add( _ptr__6533_shape_base[(int)0],_6572_i )];
    }
  }
  if ((_6551_rncodeatom > (int)0))
  {
    {
      _ptr__6569_ri32[_6567_rcodeptr] = (int)0;
    }
  }
  {}
  int32_t _11926_ = (int)0;
  int32_t _11927_ = safe_add( _6552_rnelem,(int)1 );
  for (int32_t _6573_i = _11926_; _6573_i < _11927_; ++_6573_i)
  {
    {
      _ptr__6569_ri32[safe_add( _6561_rptr_base,_6573_i )] = (int)0;
    }
  }
  if (_6547_anydense)
  {
    {
      int32_t _6574_xcodeptr = (-(int)9999);
      if ((_6551_rncodeatom > (int)0))
      {
        {
          _6574_xcodeptr = _6522_xs->alloci32(safe_add( _6552_rnelem,(int)1 ));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6575_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6522_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__6575_xi32(_6575_xi32 ? _6575_xi32->raw() : nullptr,_6575_xi32 ? _6575_xi32->size(0) : 0);
      if ((_6551_rncodeatom > (int)0))
      {
        {
          int32_t _11928_ = (int)0;
          int32_t _11929_ = safe_add( _6552_rnelem,(int)1 );
          for (int32_t _6576_i = _11928_; _6576_i < _11929_; ++_6576_i)
          {
            {
              _ptr__6575_xi32[safe_add( _6574_xcodeptr,_6576_i )] = (int)0;
            }
          }
        }
      }
      {}
      int32_t _11930_ = (int)0;
      int32_t _11931_ = _6523_n;
      for (int32_t _6577_i = _11930_; _6577_i < _11931_; ++_6577_i)
      {
        {
          if (((*_6537_hassp)(_6577_i)))
          {
            {
              int32_t _11932_ = (int)0;
              int32_t _11933_ = _ptr__6526_nelem[_6577_i];
              for (int32_t _6578_j = _11932_; _6578_j < _11933_; ++_6578_j)
              {
                {
                  _ptr__6569_ri32[safe_add( safe_add( _6561_rptr_base,_ptr__6540_wi64[safe_add( _ptr__6531_sp_base[_6577_i],_6578_j )] ),(int)1 )] += (_ptr__6539_wi32[safe_add( safe_add( _ptr__6529_ptr_base[_6577_i],_6578_j ),(int)1 )] - _ptr__6539_wi32[safe_add( _ptr__6529_ptr_base[_6577_i],_6578_j )]);
                }
              }
              if ((_ptr__6528_ncodeatom[_6577_i] > (int)0))
              {
                {
                  int32_t _11934_ = (int)0;
                  int32_t _11935_ = _ptr__6526_nelem[_6577_i];
                  for (int32_t _6579_j = _11934_; _6579_j < _11935_; ++_6579_j)
                  {
                    {
                      _ptr__6575_xi32[safe_add( safe_add( _6574_xcodeptr,_ptr__6540_wi64[safe_add( _ptr__6531_sp_base[_6577_i],_6579_j )] ),(int)1 )] += safe_add( (_ptr__6539_wi32[safe_add( _ptr__6535_codeptr[_6577_i],_ptr__6539_wi32[safe_add( safe_add( _ptr__6529_ptr_base[_6577_i],_6579_j ),(int)1 )] )] - _ptr__6539_wi32[safe_add( _ptr__6535_codeptr[_6577_i],_ptr__6539_wi32[safe_add( _ptr__6529_ptr_base[_6577_i],_6579_j )] )]),safe_mul( (int)2,(_ptr__6539_wi32[safe_add( safe_add( _ptr__6529_ptr_base[_6577_i],_6579_j ),(int)1 )] - _ptr__6539_wi32[safe_add( _ptr__6529_ptr_base[_6577_i],_6579_j )]) ) );
                    }
                  }
                }
              }
              else if(_6549_anycodeatom)
              {
                {
                  int32_t _11936_ = (int)0;
                  int32_t _11937_ = _ptr__6526_nelem[_6577_i];
                  for (int32_t _6580_j = _11936_; _6580_j < _11937_; ++_6580_j)
                  {
                    {
                      _ptr__6575_xi32[safe_add( safe_add( _6574_xcodeptr,_ptr__6540_wi64[safe_add( _ptr__6531_sp_base[_6577_i],_6580_j )] ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
          else
          {
            {
              int32_t _11938_ = (int)0;
              int32_t _11939_ = _ptr__6526_nelem[_6577_i];
              for (int32_t _6581_j = _11938_; _6581_j < _11939_; ++_6581_j)
              {
                {
                  _ptr__6569_ri32[safe_add( safe_add( _6561_rptr_base,_6581_j ),(int)1 )] += (_ptr__6539_wi32[safe_add( safe_add( _ptr__6529_ptr_base[_6577_i],_6581_j ),(int)1 )] - _ptr__6539_wi32[safe_add( _ptr__6529_ptr_base[_6577_i],_6581_j )]);
                }
              }
              if ((_ptr__6528_ncodeatom[_6577_i] > (int)0))
              {
                {
                  int32_t _11940_ = (int)0;
                  int32_t _11941_ = _ptr__6526_nelem[_6577_i];
                  for (int32_t _6582_j = _11940_; _6582_j < _11941_; ++_6582_j)
                  {
                    {
                      _ptr__6575_xi32[safe_add( safe_add( _6574_xcodeptr,_6582_j ),(int)1 )] += safe_add( (_ptr__6539_wi32[safe_add( _ptr__6535_codeptr[_6577_i],_ptr__6539_wi32[safe_add( safe_add( _ptr__6529_ptr_base[_6577_i],_6582_j ),(int)1 )] )] - _ptr__6539_wi32[safe_add( _ptr__6535_codeptr[_6577_i],_ptr__6539_wi32[safe_add( _ptr__6529_ptr_base[_6577_i],_6582_j )] )]),safe_mul( (int)2,(_ptr__6539_wi32[safe_add( safe_add( _ptr__6529_ptr_base[_6577_i],_6582_j ),(int)1 )] - _ptr__6539_wi32[safe_add( _ptr__6529_ptr_base[_6577_i],_6582_j )]) ) );
                    }
                  }
                }
              }
              else if(_6549_anycodeatom)
              {
                {
                  int32_t _11942_ = (int)0;
                  int32_t _11943_ = _ptr__6526_nelem[_6577_i];
                  for (int32_t _6583_j = _11942_; _6583_j < _11943_; ++_6583_j)
                  {
                    {
                      _ptr__6575_xi32[safe_add( safe_add( _6574_xcodeptr,_6583_j ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
        }
      }
      int32_t _11944_ = (int)0;
      int32_t _11945_ = _6552_rnelem;
      for (int32_t _6584_i = _11944_; _6584_i < _11945_; ++_6584_i)
      {
        {
          _ptr__6569_ri32[safe_add( safe_add( _6561_rptr_base,_6584_i ),(int)1 )] += _ptr__6569_ri32[safe_add( _6561_rptr_base,_6584_i )];
        }
      }
      if ((_6551_rncodeatom > (int)0))
      {
        {
          int32_t _11946_ = (int)0;
          int32_t _11947_ = _6552_rnelem;
          for (int32_t _6585_i = _11946_; _6585_i < _11947_; ++_6585_i)
          {
            {
              _ptr__6575_xi32[safe_add( safe_add( _6574_xcodeptr,_6585_i ),(int)1 )] += _ptr__6575_xi32[safe_add( _6574_xcodeptr,_6585_i )];
            }
          }
        }
      }
      {}
      int32_t _11948_ = (int)0;
      int32_t _11949_ = _6523_n;
      for (int32_t _6586_i = _11948_; _6586_i < _11949_; ++_6586_i)
      {
        {
          if (((*_6537_hassp)(_6586_i)))
          {
            {
              int32_t _11950_ = (int)0;
              int32_t _11951_ = _ptr__6526_nelem[_6586_i];
              for (int32_t _6587_j = _11950_; _6587_j < _11951_; ++_6587_j)
              {
                {
                  int32_t _6588_p0 = _ptr__6539_wi32[safe_add( _ptr__6529_ptr_base[_6586_i],_6587_j )];
                  int32_t _6589_p1 = _ptr__6539_wi32[safe_add( safe_add( _ptr__6529_ptr_base[_6586_i],_6587_j ),(int)1 )];
                  int64_t _6590_rii = _ptr__6540_wi64[safe_add( _ptr__6531_sp_base[_6586_i],_6587_j )];
                  int32_t _6591_b = _ptr__6569_ri32[safe_add( _6561_rptr_base,_6590_rii )];
                  int32_t _11952_;
                  bool _11953_ = _6549_anycodeatom;
                  if (_11953_)
                  {
                    _11952_ = _ptr__6575_xi32[safe_add( _6574_xcodeptr,_6590_rii )];
                  }
                  else
                  {
                    _11952_ = (-(int)10000);
                  }
                  int32_t _6592_codei = _11952_;
                  int32_t _11954_ = _6588_p0;
                  int32_t _11955_ = _6589_p1;
                  for (int32_t _6593_k = _11954_; _6593_k < _11955_; ++_6593_k)
                  {
                    {
                      _ptr__6570_ri64[safe_add( _6562_rnidxs_base,_6591_b )] = _ptr__6540_wi64[safe_add( _ptr__6530_nidxs_base[_6586_i],_6593_k )];
                      _ptr__6571_rf64[safe_add( _6565_rcof_base,_6591_b )] = (((*w)(_6586_i)) * _ptr__6541_wf64[safe_add( _ptr__6532_cof_base[_6586_i],_6593_k )]);
                      if (_6549_anycodeatom)
                      {
                        {
                          if ((_ptr__6528_ncodeatom[_6586_i] > (int)0))
                          {
                            {
                              int32_t _11956_ = _ptr__6539_wi32[safe_add( _ptr__6535_codeptr[_6586_i],_6593_k )];
                              int32_t _11957_ = _ptr__6539_wi32[safe_add( safe_add( _ptr__6535_codeptr[_6586_i],_6593_k ),(int)1 )];
                              for (int32_t _6594_l = _11956_; _6594_l < _11957_; ++_6594_l)
                              {
                                {
                                  _ptr__6569_ri32[safe_add( _6566_rcode,_6592_codei )] = _ptr__6539_wi32[safe_add( _ptr__6534_code[_6586_i],_6594_l )];
                                  _ptr__6571_rf64[safe_add( _6568_rcconst,_6592_codei )] = _ptr__6541_wf64[safe_add( _ptr__6536_cconst[_6586_i],_6594_l )];
                                  ++ _6592_codei;
                                }
                              }
                              _ptr__6569_ri32[safe_add( _6566_rcode,_6592_codei )] = 2;
                              _ptr__6571_rf64[safe_add( _6568_rcconst,_6592_codei )] = ((*w)(_6586_i));
                              ++ _6592_codei;
                              _ptr__6569_ri32[safe_add( _6566_rcode,_6592_codei )] = 5;
                              ++ _6592_codei;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6569_ri32[safe_add( _6566_rcode,_6592_codei )] = 2;
                              _ptr__6571_rf64[safe_add( _6568_rcconst,_6592_codei )] = 0.0;
                              ++ _6592_codei;
                            }
                          }
                          _ptr__6569_ri32[safe_add( safe_add( _6567_rcodeptr,_6591_b ),(int)1 )] = _6592_codei;
                        }
                      }
                      {}
                      ++ _6591_b;
                    }
                  }
                  if (_6549_anycodeatom)
                  {
                    {
                      _ptr__6575_xi32[safe_add( _6574_xcodeptr,_6590_rii )] = _6592_codei;
                    }
                  }
                  {}
                  _ptr__6569_ri32[safe_add( _6561_rptr_base,_6590_rii )] += (_6589_p1 - _6588_p0);
                }
              }
            }
          }
          else
          {
            {
              int32_t _11958_ = (int)0;
              int32_t _11959_ = _ptr__6526_nelem[_6586_i];
              for (int32_t _6595_j = _11958_; _6595_j < _11959_; ++_6595_j)
              {
                {
                  int32_t _6596_p0 = _ptr__6539_wi32[safe_add( _ptr__6529_ptr_base[_6586_i],_6595_j )];
                  int32_t _6597_p1 = _ptr__6539_wi32[safe_add( safe_add( _ptr__6529_ptr_base[_6586_i],_6595_j ),(int)1 )];
                  int32_t _6598_rii = _6595_j;
                  int32_t _6599_b = _ptr__6569_ri32[safe_add( _6561_rptr_base,_6598_rii )];
                  int32_t _11960_;
                  bool _11961_ = _6549_anycodeatom;
                  if (_11961_)
                  {
                    _11960_ = _ptr__6575_xi32[safe_add( _6574_xcodeptr,_6598_rii )];
                  }
                  else
                  {
                    _11960_ = (-(int)10000);
                  }
                  int32_t _6600_codei = _11960_;
                  int32_t _11962_ = _6596_p0;
                  int32_t _11963_ = _6597_p1;
                  for (int32_t _6601_k = _11962_; _6601_k < _11963_; ++_6601_k)
                  {
                    {
                      _ptr__6570_ri64[safe_add( _6562_rnidxs_base,_6599_b )] = _ptr__6540_wi64[safe_add( _ptr__6530_nidxs_base[_6586_i],_6601_k )];
                      _ptr__6571_rf64[safe_add( _6565_rcof_base,_6599_b )] = (((*w)(_6586_i)) * _ptr__6541_wf64[safe_add( _ptr__6532_cof_base[_6586_i],_6601_k )]);
                      if (_6549_anycodeatom)
                      {
                        {
                          if ((_ptr__6528_ncodeatom[_6586_i] > (int)0))
                          {
                            {
                              int32_t _11964_ = _ptr__6539_wi32[safe_add( _ptr__6535_codeptr[_6586_i],_6601_k )];
                              int32_t _11965_ = _ptr__6539_wi32[safe_add( safe_add( _ptr__6535_codeptr[_6586_i],_6601_k ),(int)1 )];
                              for (int32_t _6602_l = _11964_; _6602_l < _11965_; ++_6602_l)
                              {
                                {
                                  _ptr__6569_ri32[safe_add( _6566_rcode,_6600_codei )] = _ptr__6539_wi32[safe_add( _ptr__6534_code[_6586_i],_6602_l )];
                                  _ptr__6571_rf64[safe_add( _6568_rcconst,_6600_codei )] = _ptr__6541_wf64[safe_add( _ptr__6536_cconst[_6586_i],_6602_l )];
                                  ++ _6600_codei;
                                }
                              }
                              _ptr__6569_ri32[safe_add( _6566_rcode,_6600_codei )] = 2;
                              _ptr__6571_rf64[safe_add( _6568_rcconst,_6600_codei )] = ((*w)(_6586_i));
                              ++ _6600_codei;
                              _ptr__6569_ri32[safe_add( _6566_rcode,_6600_codei )] = 5;
                              ++ _6600_codei;
                              _ptr__6569_ri32[safe_add( safe_add( _6567_rcodeptr,_6599_b ),(int)1 )] = _6600_codei;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6569_ri32[safe_add( _6566_rcode,_6600_codei )] = 2;
                              _ptr__6571_rf64[safe_add( _6568_rcconst,_6600_codei )] = 0.0;
                              ++ _6600_codei;
                            }
                          }
                          _ptr__6569_ri32[safe_add( safe_add( _6567_rcodeptr,_6599_b ),(int)1 )] = _6600_codei;
                        }
                      }
                      {}
                      ++ _6599_b;
                    }
                  }
                  if (_6549_anycodeatom)
                  {
                    {
                      _ptr__6575_xi32[safe_add( _6574_xcodeptr,_6598_rii )] = _6600_codei;
                    }
                  }
                  {}
                  _ptr__6569_ri32[safe_add( _6561_rptr_base,_6598_rii )] += (_6597_p1 - _6596_p0);
                }
              }
            }
          }
        }
      }
      int32_t _11966_ = (int)0;
      int32_t _11967_ = _6552_rnelem;
      for (int32_t _6603_i = _11966_; _6603_i < _11967_; ++_6603_i)
      {
        {
          _ptr__6569_ri32[(safe_add( _6561_rptr_base,_6552_rnelem ) - _6603_i)] = _ptr__6569_ri32[((safe_add( _6561_rptr_base,_6552_rnelem ) - _6603_i) - (int)1)];
        }
      }
      _ptr__6569_ri32[_6561_rptr_base] = (int)0;
    }
  }
  else
  {
    {
      bool _6604_done = false;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6605_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6523_n)));
      _checked_ptr_1<int32_t> _ptr__6605_ii(_6605_ii ? _6605_ii->raw() : nullptr,_6605_ii ? _6605_ii->size(0) : 0);
      int32_t _6606_codei = (int)0;
      int32_t _6607_kelm = (int)0;
      int32_t _6608_knz = (int)0;
      while ( (!_6604_done) )
      {
        {
          int64_t _6609_idx = (-(int)1);
          int32_t _11968_ = (int)0;
          int32_t _11969_ = _6523_n;
          for (int32_t _6610_j = _11968_; _6610_j < _11969_; ++_6610_j)
          {
            {
              if (((_ptr__6605_ii[_6610_j] < _ptr__6526_nelem[_6610_j]) && ((_6609_idx < (int)0) || (_ptr__6540_wi64[safe_add( _ptr__6531_sp_base[_6610_j],_ptr__6605_ii[_6610_j] )] < _6609_idx))))
              {
                {
                  _6609_idx = _ptr__6540_wi64[safe_add( _ptr__6531_sp_base[_6610_j],_ptr__6605_ii[_6610_j] )];
                }
              }
              {}
            }
          }
          if ((_6609_idx < (int)0))
          {
            {
              _6604_done = true;
            }
          }
          else
          {
            {
              int32_t _11970_ = (int)0;
              int32_t _11971_ = _6523_n;
              for (int32_t _6611_j = _11970_; _6611_j < _11971_; ++_6611_j)
              {
                {
                  if (((_ptr__6605_ii[_6611_j] < _ptr__6526_nelem[_6611_j]) && (_6609_idx == _ptr__6540_wi64[safe_add( _ptr__6531_sp_base[_6611_j],_ptr__6605_ii[_6611_j] )])))
                  {
                    {
                      int32_t _11972_ = _ptr__6539_wi32[safe_add( _ptr__6529_ptr_base[_6611_j],_ptr__6605_ii[_6611_j] )];
                      int32_t _11973_ = _ptr__6539_wi32[safe_add( safe_add( _ptr__6529_ptr_base[_6611_j],_ptr__6605_ii[_6611_j] ),(int)1 )];
                      for (int32_t _6612_k = _11972_; _6612_k < _11973_; ++_6612_k)
                      {
                        {
                          _ptr__6570_ri64[safe_add( _6562_rnidxs_base,_6608_knz )] = _ptr__6540_wi64[safe_add( _ptr__6530_nidxs_base[_6611_j],_6612_k )];
                          _ptr__6571_rf64[safe_add( _6565_rcof_base,_6608_knz )] = (((*w)(_6611_j)) * _ptr__6541_wf64[safe_add( _ptr__6532_cof_base[_6611_j],_6612_k )]);
                          if (_6549_anycodeatom)
                          {
                            {
                              if ((_ptr__6528_ncodeatom[_6611_j] > (int)0))
                              {
                                {
                                  int32_t _11974_ = _ptr__6539_wi32[safe_add( _ptr__6535_codeptr[_6611_j],_6612_k )];
                                  int32_t _11975_ = _ptr__6539_wi32[safe_add( safe_add( _ptr__6535_codeptr[_6611_j],_6612_k ),(int)1 )];
                                  for (int32_t _6613_l = _11974_; _6613_l < _11975_; ++_6613_l)
                                  {
                                    {
                                      _ptr__6569_ri32[safe_add( _6566_rcode,_6606_codei )] = _ptr__6539_wi32[safe_add( _ptr__6534_code[_6611_j],_6613_l )];
                                      _ptr__6571_rf64[safe_add( _6568_rcconst,_6606_codei )] = _ptr__6541_wf64[safe_add( _ptr__6536_cconst[_6611_j],_6613_l )];
                                      ++ _6606_codei;
                                    }
                                  }
                                  _ptr__6569_ri32[safe_add( _6566_rcode,_6606_codei )] = 2;
                                  _ptr__6571_rf64[safe_add( _6568_rcconst,_6606_codei )] = ((*w)(_6611_j));
                                  ++ _6606_codei;
                                  _ptr__6569_ri32[safe_add( _6566_rcode,_6606_codei )] = 5;
                                  ++ _6606_codei;
                                }
                              }
                              else
                              {
                                {
                                  _ptr__6569_ri32[safe_add( _6566_rcode,_6606_codei )] = 2;
                                  _ptr__6571_rf64[safe_add( _6568_rcconst,_6606_codei )] = 0.0;
                                  ++ _6606_codei;
                                }
                              }
                              _ptr__6569_ri32[safe_add( safe_add( _6567_rcodeptr,_6608_knz ),(int)1 )] = _6606_codei;
                            }
                          }
                          {}
                          ++ _6608_knz;
                        }
                      }
                      ++ _ptr__6605_ii[_6611_j];
                    }
                  }
                  {}
                }
              }
              _ptr__6569_ri32[safe_add( safe_add( _6561_rptr_base,_6607_kelm ),(int)1 )] = _6608_knz;
              _ptr__6570_ri64[safe_add( _6563_rsp_base,_6607_kelm )] = _6609_idx;
            }
          }
          ++ _6607_kelm;
        }
      }
    }
  }
  _6522_xs->clear();
}
// End mosek.fusion.ExprWSum.eval

// Begin mosek.fusion.ExprWSum.toString
// Method mosek.fusion.ExprWSum.toString @ src/fusion/ExprAdd.monty:244:6-253:7
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprWSum::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6614_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprWSum(["));
  _6614_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)((int)0))->toString());
  int32_t _11976_ = (int)1;
  int32_t _11977_ = (int)((es)->size(0));
  for (int32_t _6615_i = _11976_; _6615_i < _11977_; ++_6615_i)
  {
    {
      _6614_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)(_6615_i))->toString());
    }
  }
  _6614_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _6614_sb->toString();
}
// End mosek.fusion.ExprWSum.toString

void mosek::fusion::p_ExprWSum::destroy()
{
  w.reset();
  es.reset();
}
void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }
// } class ExprWSum
// class ExprSumReduce { // @ src/fusion/ExprAdd.monty:4:4-233:5
mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }
mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprSumReduce::p_ExprSumReduce
  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprSumReduce.ctor @ src/fusion/ExprAdd.monty:17:6-25:7
mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce
  (int32_t _6616_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6617_expr)
{ return new mosek::fusion::ExprSumReduce(_6616_dim,_6617_expr); }
mosek::fusion::ExprSumReduce::ExprSumReduce
  (int32_t _6616_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6617_expr) : 
   ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this))
{ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_6616_dim,_6617_expr); }
void mosek::fusion::p_ExprSumReduce::_initialize  (int32_t _6616_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6617_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSumReduce::computeShape(_6616_dim,_6617_expr->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _6617_expr;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _6616_dim;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6618_shape = _6617_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__6618_shape(_6618_shape ? _6618_shape->raw() : nullptr,_6618_shape ? _6618_shape->size(0) : 0);
    if (((int)((_6618_shape)->size(0)) <= _6616_dim))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprSumReduce.ctor

// Begin mosek.fusion.ExprSumReduce.eval
// Method mosek.fusion.ExprSumReduce.eval @ src/fusion/ExprAdd.monty:27:6-232:7
void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6619_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6620_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6621_xs) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_6619_rs,_6620_ws,_6621_xs); }
void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6619_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6620_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6621_xs)
{
  expr->eval(_6620_ws,_6619_rs,_6621_xs);
  _6620_ws->pop_expr();
  int32_t _6622_nd = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->nd;
  int32_t _6623_shape_base = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->shape_base;
  int32_t _6624_nelem = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->nelem;
  int32_t _6625_nnz = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->nnz;
  int32_t _6626_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->ncodeatom;
  bool _6627_hassp = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->hassp;
  int32_t _6628_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->ptr_base;
  int32_t _6629_sp_base = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->sp_base;
  int32_t _6630_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->nidxs_base;
  int32_t _6631_cof_base = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->cof_base;
  int32_t _6632_code = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->code_base;
  int32_t _6633_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->codeptr_base;
  int32_t _6634_cconst = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6635_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6635_wi32(_6635_wi32 ? _6635_wi32->raw() : nullptr,_6635_wi32 ? _6635_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6636_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6636_wi64(_6636_wi64 ? _6636_wi64->raw() : nullptr,_6636_wi64 ? _6636_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6637_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6620_ws)->f64;
  _checked_ptr_1<double> _ptr__6637_wf64(_6637_wf64 ? _6637_wf64->raw() : nullptr,_6637_wf64 ? _6637_wf64->size(0) : 0);
  int32_t _6638_ptr = (int)99999;
  int32_t _6639_perm1 = (int)99999;
  int32_t _6640_perm2 = (int)99999;
  if (_6627_hassp)
  {
    {
      int32_t _6641_dimmax = (int)0;
      int32_t _11978_ = (int)0;
      int32_t _11979_ = _6622_nd;
      for (int32_t _6642_i = _11978_; _6642_i < _11979_; ++_6642_i)
      {
        {
          if ((_6641_dimmax < _ptr__6635_wi32[safe_add( _6623_shape_base,_6642_i )]))
          {
            {
              _6641_dimmax = _ptr__6635_wi32[safe_add( _6623_shape_base,_6642_i )];
            }
          }
          {}
        }
      }
      _6638_ptr = _6621_xs->alloci32(safe_add( _6641_dimmax,(int)1 ));
      _6639_perm1 = _6621_xs->alloci32(_6624_nelem);
      _6640_perm2 = _6621_xs->alloci32(_6624_nelem);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6643_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6621_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__6643_xi32(_6643_xi32 ? _6643_xi32->raw() : nullptr,_6643_xi32 ? _6643_xi32->size(0) : 0);
  if (_6627_hassp)
  {
    {
      int32_t _6644_curperm = _6639_perm1;
      int32_t _6645_tgtperm = _6640_perm2;
      int32_t _11980_ = (int)0;
      int32_t _11981_ = _6624_nelem;
      for (int32_t _6646_i = _11980_; _6646_i < _11981_; ++_6646_i)
      {
        {
          _ptr__6643_xi32[safe_add( _6644_curperm,_6646_i )] = _6646_i;
        }
      }
      if ((dim < (_6622_nd - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6647_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_6622_nd)));
          _checked_ptr_1<int64_t> _ptr__6647_s(_6647_s ? _6647_s->raw() : nullptr,_6647_s ? _6647_s->size(0) : 0);
          _ptr__6647_s[(_6622_nd - (int)1)] = (int)1;
          int32_t _11982_ = (int)1;
          int32_t _11983_ = _6622_nd;
          for (int32_t _6648_i = _11982_; _6648_i < _11983_; ++_6648_i)
          {
            {
              _ptr__6647_s[((_6622_nd - _6648_i) - (int)1)] = safe_mul( _ptr__6647_s[(_6622_nd - _6648_i)],_ptr__6635_wi32[(safe_add( _6623_shape_base,_6622_nd ) - _6648_i)] );
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _6649_sortdims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((_6622_nd - (int)1))));
          _checked_ptr_1<int32_t> _ptr__6649_sortdims(_6649_sortdims ? _6649_sortdims->raw() : nullptr,_6649_sortdims ? _6649_sortdims->size(0) : 0);
          int32_t _11984_ = (int)0;
          int32_t _11985_ = dim;
          for (int32_t _6650_i = _11984_; _6650_i < _11985_; ++_6650_i)
          {
            {
              _ptr__6649_sortdims[((_6622_nd - _6650_i) - (int)2)] = _6650_i;
            }
          }
          int32_t _11986_ = safe_add( dim,(int)1 );
          int32_t _11987_ = _6622_nd;
          for (int32_t _6651_i = _11986_; _6651_i < _11987_; ++_6651_i)
          {
            {
              _ptr__6649_sortdims[((_6622_nd - _6651_i) - (int)1)] = _6651_i;
            }
          }
          int32_t _11988_ = (int)0;
          int32_t _11989_ = (_6622_nd - (int)1);
          for (int32_t _6652_ii = _11988_; _6652_ii < _11989_; ++_6652_ii)
          {
            {
              int32_t _6653_k = _ptr__6649_sortdims[_6652_ii];
              int32_t _6654_dk = _ptr__6635_wi32[safe_add( _6623_shape_base,_6653_k )];
              int32_t _11990_ = (int)0;
              int32_t _11991_ = safe_add( _6654_dk,(int)1 );
              for (int32_t _6655_i = _11990_; _6655_i < _11991_; ++_6655_i)
              {
                {
                  _ptr__6643_xi32[safe_add( _6638_ptr,_6655_i )] = (int)0;
                }
              }
              int32_t _11992_ = (int)0;
              int32_t _11993_ = _6624_nelem;
              for (int32_t _6656_i = _11992_; _6656_i < _11993_; ++_6656_i)
              {
                {
                  ++ _ptr__6643_xi32[safe_add( safe_add( _6638_ptr,(int)1 ),((_ptr__6636_wi64[safe_add( _6629_sp_base,_6656_i )] / _ptr__6647_s[_6653_k]) % _6654_dk) )];
                }
              }
              int32_t _11994_ = (int)0;
              int32_t _11995_ = _6654_dk;
              for (int32_t _6657_i = _11994_; _6657_i < _11995_; ++_6657_i)
              {
                {
                  _ptr__6643_xi32[safe_add( safe_add( _6638_ptr,_6657_i ),(int)1 )] += _ptr__6643_xi32[safe_add( _6638_ptr,_6657_i )];
                }
              }
              int32_t _11996_ = (int)0;
              int32_t _11997_ = _6624_nelem;
              for (int32_t _6658_ii = _11996_; _6658_ii < _11997_; ++_6658_ii)
              {
                {
                  int32_t _6659_i = _ptr__6643_xi32[safe_add( _6644_curperm,_6658_ii )];
                  int64_t _6660_sub = ((_ptr__6636_wi64[safe_add( _6629_sp_base,_6659_i )] / _ptr__6647_s[_6653_k]) % _6654_dk);
                  _ptr__6643_xi32[safe_add( _6645_tgtperm,_ptr__6643_xi32[safe_add( _6638_ptr,_6660_sub )] )] = _6659_i;
                  ++ _ptr__6643_xi32[safe_add( _6638_ptr,_6660_sub )];
                }
              }
              int32_t _6661_tmp = _6645_tgtperm;
              _6645_tgtperm = _6644_curperm;
              _6644_curperm = _6661_tmp;
            }
          }
        }
      }
      {}
      int32_t _6662_d0 = (int)1;
      int32_t _11998_ = (int)0;
      int32_t _11999_ = dim;
      for (int32_t _6663_i = _11998_; _6663_i < _11999_; ++_6663_i)
      {
        {
          _6662_d0 *= _ptr__6635_wi32[safe_add( _6623_shape_base,_6663_i )];
        }
      }
      int32_t _6664_d1 = _ptr__6635_wi32[safe_add( _6623_shape_base,dim )];
      int32_t _6665_d2 = (int)1;
      int32_t _12000_ = safe_add( dim,(int)1 );
      int32_t _12001_ = _6622_nd;
      for (int32_t _6666_i = _12000_; _6666_i < _12001_; ++_6666_i)
      {
        {
          _6665_d2 *= _ptr__6635_wi32[safe_add( _6623_shape_base,_6666_i )];
        }
      }
      int32_t _6667_s0 = safe_mul( _6665_d2,_6664_d1 );
      int32_t _6668_s1 = _6665_d2;
      int32_t _6669_s2 = (int)1;
      int32_t _6670_rnelem = (int)0;
      int64_t _6671_p2 = (-(int)1);
      int64_t _6672_p0 = (-(int)1);
      int32_t _12002_ = (int)0;
      int32_t _12003_ = _6624_nelem;
      for (int32_t _6673_ii = _12002_; _6673_ii < _12003_; ++_6673_ii)
      {
        {
          int32_t _6674_i = _ptr__6643_xi32[safe_add( _6644_curperm,_6673_ii )];
          int64_t _6675_k0 = ((_ptr__6636_wi64[safe_add( _6629_sp_base,_6674_i )] / _6667_s0) % _6662_d0);
          int64_t _6676_k2 = (_ptr__6636_wi64[safe_add( _6629_sp_base,_6674_i )] % _6665_d2);
          if (((_6672_p0 != _6675_k0) || (_6671_p2 != _6676_k2)))
          {
            {
              _6672_p0 = _6675_k0;
              _6671_p2 = _6676_k2;
              ++ _6670_rnelem;
            }
          }
          {}
        }
      }
      int32_t _6677_rnd = (_6622_nd - (int)1);
      bool _6678_rhassp = (_6670_rnelem < safe_mul( _6662_d0,_6665_d2 ));
      int32_t _6679_rnnz = _6625_nnz;
      int32_t _6680_rncodeatom = _6626_ncodeatom;
      _6619_rs->alloc_expr(_6677_rnd,_6670_rnelem,_6679_rnnz,_6678_rhassp,_6680_rncodeatom);
      int32_t _6681_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->ptr_base;
      int32_t _6682_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->nidxs_base;
      int32_t _12004_;
      bool _12005_ = _6678_rhassp;
      if (_12005_)
      {
        _12004_ = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->sp_base;
      }
      else
      {
        _12004_ = _6619_rs->alloci64(_6670_rnelem);
      }
      int32_t _6683_rsp_base = _12004_;
      int32_t _6684_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->cof_base;
      int32_t _6685_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->shape_base;
      int32_t _6686_rcode = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->code_base;
      int32_t _6687_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->codeptr_base;
      int32_t _6688_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6689_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6689_ri32(_6689_ri32 ? _6689_ri32->raw() : nullptr,_6689_ri32 ? _6689_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6690_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6690_ri64(_6690_ri64 ? _6690_ri64->raw() : nullptr,_6690_ri64 ? _6690_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6691_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->f64;
      _checked_ptr_1<double> _ptr__6691_rf64(_6691_rf64 ? _6691_rf64->raw() : nullptr,_6691_rf64 ? _6691_rf64->size(0) : 0);
      int32_t _12006_ = (int)0;
      int32_t _12007_ = dim;
      for (int32_t _6692_i = _12006_; _6692_i < _12007_; ++_6692_i)
      {
        {
          _ptr__6689_ri32[safe_add( _6685_rshape_base,_6692_i )] = _ptr__6635_wi32[safe_add( _6623_shape_base,_6692_i )];
        }
      }
      int32_t _12008_ = safe_add( dim,(int)1 );
      int32_t _12009_ = _6622_nd;
      for (int32_t _6693_i = _12008_; _6693_i < _12009_; ++_6693_i)
      {
        {
          _ptr__6689_ri32[(safe_add( _6685_rshape_base,_6693_i ) - (int)1)] = _ptr__6635_wi32[safe_add( _6623_shape_base,_6693_i )];
        }
      }
      _ptr__6689_ri32[_6681_rptr_base] = (int)0;
      if ((_6680_rncodeatom > (int)0))
      {
        {
          _ptr__6689_ri32[_6687_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _6694_codei = (int)0;
      int32_t _6695_kelm = (int)0;
      int32_t _6696_knz = (int)0;
      int32_t _6697_ii = (int)0;
      while ( (_6697_ii < _6624_nelem) )
      {
        {
          int32_t _6698_b = _6697_ii;
          int64_t _6699_p0 = ((_ptr__6636_wi64[safe_add( _6629_sp_base,_ptr__6643_xi32[safe_add( _6644_curperm,_6698_b )] )] / _6667_s0) % _6662_d0);
          int64_t _6700_p2 = (_ptr__6636_wi64[safe_add( _6629_sp_base,_ptr__6643_xi32[safe_add( _6644_curperm,_6698_b )] )] % _6665_d2);
          ++ _6697_ii;
          while ( ((_6697_ii < _6624_nelem) && ((_6699_p0 == ((_ptr__6636_wi64[safe_add( _6629_sp_base,_ptr__6643_xi32[safe_add( _6644_curperm,_6697_ii )] )] / _6667_s0) % _6662_d0)) && (_6700_p2 == (_ptr__6636_wi64[safe_add( _6629_sp_base,_ptr__6643_xi32[safe_add( _6644_curperm,_6697_ii )] )] % _6665_d2)))) )
          {
            {
              ++ _6697_ii;
            }
          }
          int32_t _12010_ = _6698_b;
          int32_t _12011_ = _6697_ii;
          for (int32_t _6701_kk = _12010_; _6701_kk < _12011_; ++_6701_kk)
          {
            {
              int32_t _6702_k = _ptr__6643_xi32[safe_add( _6644_curperm,_6701_kk )];
              int32_t _12012_ = _ptr__6635_wi32[safe_add( _6628_ptr_base,_6702_k )];
              int32_t _12013_ = _ptr__6635_wi32[safe_add( safe_add( _6628_ptr_base,_6702_k ),(int)1 )];
              for (int32_t _6703_j = _12012_; _6703_j < _12013_; ++_6703_j)
              {
                {
                  _ptr__6690_ri64[safe_add( _6682_rnidxs_base,_6696_knz )] = _ptr__6636_wi64[safe_add( _6630_nidxs_base,_6703_j )];
                  _ptr__6691_rf64[safe_add( _6684_rcof_base,_6696_knz )] = _ptr__6637_wf64[safe_add( _6631_cof_base,_6703_j )];
                  if ((_6680_rncodeatom > (int)0))
                  {
                    {
                      int32_t _12014_ = _ptr__6635_wi32[safe_add( _6633_codeptr,_6703_j )];
                      int32_t _12015_ = _ptr__6635_wi32[safe_add( safe_add( _6633_codeptr,_6703_j ),(int)1 )];
                      for (int32_t _6704_l = _12014_; _6704_l < _12015_; ++_6704_l)
                      {
                        {
                          _ptr__6689_ri32[safe_add( _6686_rcode,_6694_codei )] = _ptr__6635_wi32[safe_add( _6632_code,_6704_l )];
                          _ptr__6691_rf64[safe_add( _6688_rcconst,_6694_codei )] = _ptr__6637_wf64[safe_add( _6634_cconst,_6704_l )];
                          ++ _6694_codei;
                        }
                      }
                      _ptr__6689_ri32[safe_add( safe_add( _6687_rcodeptr,_6696_knz ),(int)1 )] = _6694_codei;
                    }
                  }
                  {}
                  ++ _6696_knz;
                }
              }
            }
          }
          _ptr__6690_ri64[safe_add( _6683_rsp_base,_6695_kelm )] = safe_add( safe_mul( _6699_p0,_6665_d2 ),_6700_p2 );
          _ptr__6689_ri32[safe_add( safe_add( _6681_rptr_base,_6695_kelm ),(int)1 )] = _6696_knz;
          ++ _6695_kelm;
        }
      }
      if ((!_6678_rhassp))
      {
        {
          _6619_rs->popi64(_6670_rnelem);
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _6705_d0 = (int)1;
      int32_t _12016_ = (int)0;
      int32_t _12017_ = dim;
      for (int32_t _6706_i = _12016_; _6706_i < _12017_; ++_6706_i)
      {
        {
          _6705_d0 *= _ptr__6635_wi32[safe_add( _6623_shape_base,_6706_i )];
        }
      }
      int32_t _6707_d1 = _ptr__6635_wi32[safe_add( _6623_shape_base,dim )];
      int32_t _6708_d2 = (int)1;
      int32_t _12018_ = safe_add( dim,(int)1 );
      int32_t _12019_ = _6622_nd;
      for (int32_t _6709_i = _12018_; _6709_i < _12019_; ++_6709_i)
      {
        {
          _6708_d2 *= _ptr__6635_wi32[safe_add( _6623_shape_base,_6709_i )];
        }
      }
      int32_t _6710_s0 = safe_mul( _6708_d2,_6707_d1 );
      int32_t _6711_s1 = _6708_d2;
      int32_t _6712_s2 = (int)1;
      int32_t _6713_rnelem = safe_mul( _6705_d0,_6708_d2 );
      int32_t _6714_rnnz = _6625_nnz;
      int32_t _6715_rncodeatom = _6626_ncodeatom;
      _6619_rs->alloc_expr((_6622_nd - (int)1),_6713_rnelem,_6714_rnnz,false,_6715_rncodeatom);
      int32_t _6716_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->ptr_base;
      int32_t _6717_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->nidxs_base;
      int32_t _6718_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->cof_base;
      int32_t _6719_rshape = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->shape_base;
      int32_t _6720_rcode = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->code_base;
      int32_t _6721_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->codeptr_base;
      int32_t _6722_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6723_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6723_ri32(_6723_ri32 ? _6723_ri32->raw() : nullptr,_6723_ri32 ? _6723_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6724_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6724_ri64(_6724_ri64 ? _6724_ri64->raw() : nullptr,_6724_ri64 ? _6724_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6725_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6619_rs)->f64;
      _checked_ptr_1<double> _ptr__6725_rf64(_6725_rf64 ? _6725_rf64->raw() : nullptr,_6725_rf64 ? _6725_rf64->size(0) : 0);
      int32_t _12020_ = (int)0;
      int32_t _12021_ = dim;
      for (int32_t _6726_i = _12020_; _6726_i < _12021_; ++_6726_i)
      {
        {
          _ptr__6723_ri32[safe_add( _6719_rshape,_6726_i )] = _ptr__6635_wi32[safe_add( _6623_shape_base,_6726_i )];
        }
      }
      int32_t _12022_ = safe_add( dim,(int)1 );
      int32_t _12023_ = _6622_nd;
      for (int32_t _6727_i = _12022_; _6727_i < _12023_; ++_6727_i)
      {
        {
          _ptr__6723_ri32[(safe_add( _6719_rshape,_6727_i ) - (int)1)] = _ptr__6635_wi32[safe_add( _6623_shape_base,_6727_i )];
        }
      }
      int32_t _6728_kelm = (int)0;
      int32_t _6729_knz = (int)0;
      _ptr__6723_ri32[_6716_rptr_base] = (int)0;
      if ((_6715_rncodeatom > (int)0))
      {
        {
          _ptr__6723_ri32[_6721_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _6730_codei = (int)0;
      int32_t _12024_ = (int)0;
      int32_t _12025_ = _6705_d0;
      for (int32_t _6731_i0 = _12024_; _6731_i0 < _12025_; ++_6731_i0)
      {
        {
          int32_t _12026_ = (int)0;
          int32_t _12027_ = _6708_d2;
          for (int32_t _6732_i2 = _12026_; _6732_i2 < _12027_; ++_6732_i2)
          {
            {
              int32_t _12028_ = (int)0;
              int32_t _12029_ = _6707_d1;
              for (int32_t _6733_i1 = _12028_; _6733_i1 < _12029_; ++_6733_i1)
              {
                {
                  int32_t _6734_i = safe_add( safe_add( safe_mul( _6731_i0,_6710_s0 ),safe_mul( _6733_i1,_6711_s1 ) ),_6732_i2 );
                  int32_t _12030_ = _ptr__6635_wi32[safe_add( _6628_ptr_base,_6734_i )];
                  int32_t _12031_ = _ptr__6635_wi32[safe_add( safe_add( _6628_ptr_base,_6734_i ),(int)1 )];
                  for (int32_t _6735_k = _12030_; _6735_k < _12031_; ++_6735_k)
                  {
                    {
                      _ptr__6724_ri64[safe_add( _6717_rnidxs_base,_6729_knz )] = _ptr__6636_wi64[safe_add( _6630_nidxs_base,_6735_k )];
                      _ptr__6725_rf64[safe_add( _6718_rcof_base,_6729_knz )] = _ptr__6637_wf64[safe_add( _6631_cof_base,_6735_k )];
                      if ((_6715_rncodeatom > (int)0))
                      {
                        {
                          int32_t _12032_ = _ptr__6635_wi32[safe_add( _6633_codeptr,_6735_k )];
                          int32_t _12033_ = _ptr__6635_wi32[safe_add( safe_add( _6633_codeptr,_6735_k ),(int)1 )];
                          for (int32_t _6736_l = _12032_; _6736_l < _12033_; ++_6736_l)
                          {
                            {
                              _ptr__6723_ri32[safe_add( _6720_rcode,_6730_codei )] = _ptr__6635_wi32[safe_add( _6632_code,_6736_l )];
                              _ptr__6725_rf64[safe_add( _6722_rcconst,_6730_codei )] = _ptr__6637_wf64[safe_add( _6634_cconst,_6736_l )];
                              ++ _6730_codei;
                            }
                          }
                          _ptr__6723_ri32[safe_add( safe_add( _6721_rcodeptr,_6729_knz ),(int)1 )] = _6730_codei;
                        }
                      }
                      {}
                      ++ _6729_knz;
                    }
                  }
                }
              }
              _ptr__6723_ri32[safe_add( safe_add( _6716_rptr_base,_6728_kelm ),(int)1 )] = _6729_knz;
              ++ _6728_kelm;
            }
          }
        }
      }
    }
  }
  _6621_xs->clear();
}
// End mosek.fusion.ExprSumReduce.eval

// Begin mosek.fusion.ExprSumReduce.computeShape
// Method mosek.fusion.ExprSumReduce.computeShape @ src/fusion/ExprAdd.monty:10:6-15:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int32_t _6737_dim,std::shared_ptr< monty::ndarray< int32_t,1 > > _6738_shape)
{
  _checked_ptr_1<int32_t> _ptr__6738_shape(_6738_shape ? _6738_shape->raw() : nullptr, _6738_shape ? _6738_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6739_r = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_6738_shape)->size(0)) - (int)1))));
  _checked_ptr_1<int32_t> _ptr__6739_r(_6739_r ? _6739_r->raw() : nullptr,_6739_r ? _6739_r->size(0) : 0);
  int32_t _12034_ = (int)0;
  int32_t _12035_ = _6737_dim;
  for (int32_t _6740_i = _12034_; _6740_i < _12035_; ++_6740_i)
  {
    {
      _ptr__6739_r[_6740_i] = _ptr__6738_shape[_6740_i];
    }
  }
  int32_t _12036_ = safe_add( _6737_dim,(int)1 );
  int32_t _12037_ = (int)((_6738_shape)->size(0));
  for (int32_t _6741_i = _12036_; _6741_i < _12037_; ++_6741_i)
  {
    {
      _ptr__6739_r[(_6741_i - (int)1)] = _ptr__6738_shape[_6741_i];
    }
  }
  return _6739_r;
}
// End mosek.fusion.ExprSumReduce.computeShape

// Begin mosek.fusion.ExprSumReduce.toString
// Method mosek.fusion.ExprSumReduce.toString @ src/fusion/ExprAdd.monty:8:6-146
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprSumReduce::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSumReduce("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprSumReduce.toString

void mosek::fusion::p_ExprSumReduce::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }
// } class ExprSumReduce
// class ExprScaleVecPSD { // @ src/fusion/ExprShape.monty:1042:4-1222:5
mosek::fusion::ExprScaleVecPSD::ExprScaleVecPSD(mosek::fusion::p_ExprScaleVecPSD *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScaleVecPSD()" << this << std::endl; */ }
mosek::fusion::ExprScaleVecPSD::~ExprScaleVecPSD() {  /* std::cout << "~ExprScaleVecPSD()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprScaleVecPSD::p_ExprScaleVecPSD
  (::mosek::fusion::ExprScaleVecPSD * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprScaleVecPSD.ctor @ src/fusion/ExprShape.monty:1047:6-1054:7
mosek::fusion::ExprScaleVecPSD::t mosek::fusion::p_ExprScaleVecPSD::_new_ExprScaleVecPSD
  (int32_t _6742_dim0,
    int32_t _6743_dim1,
    monty::rc_ptr< ::mosek::fusion::BaseExpression > _6744_expr)
{ return new mosek::fusion::ExprScaleVecPSD(_6742_dim0,_6743_dim1,_6744_expr); }
mosek::fusion::ExprScaleVecPSD::ExprScaleVecPSD
  (int32_t _6742_dim0,
    int32_t _6743_dim1,
    monty::rc_ptr< ::mosek::fusion::BaseExpression > _6744_expr) : 
   ExprScaleVecPSD(new mosek::fusion::p_ExprScaleVecPSD(this))
{ mosek::fusion::p_ExprScaleVecPSD::_get_impl(this)->_initialize(_6742_dim0,_6743_dim1,_6744_expr); }
void mosek::fusion::p_ExprScaleVecPSD::_initialize  (int32_t _6742_dim0,
    int32_t _6743_dim1,
    monty::rc_ptr< ::mosek::fusion::BaseExpression > _6744_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6744_expr->getShape());
    mosek::fusion::p_ExprScaleVecPSD::_get_impl(::mosek::fusion::ExprScaleVecPSD::t(_pubthis))->expr = (_6744_expr).as<::mosek::fusion::Expression>();
    mosek::fusion::p_ExprScaleVecPSD::_get_impl(::mosek::fusion::ExprScaleVecPSD::t(_pubthis))->dim0 = _6742_dim0;
    mosek::fusion::p_ExprScaleVecPSD::_get_impl(::mosek::fusion::ExprScaleVecPSD::t(_pubthis))->dim1 = _6743_dim1;
    if (((_6742_dim0 < (int)0) || ((_6743_dim1 < (int)0) || (_6742_dim0 == _6743_dim1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprScaleVecPSD.ctor

// Begin mosek.fusion.ExprScaleVecPSD.eval
// Method mosek.fusion.ExprScaleVecPSD.eval @ src/fusion/ExprShape.monty:1056:6-1221:7
void mosek::fusion::ExprScaleVecPSD :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6745_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6746_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6747_xs) { mosek::fusion::p_ExprScaleVecPSD::_get_impl(this)->eval(_6745_rs,_6746_ws,_6747_xs); }
void mosek::fusion::p_ExprScaleVecPSD::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6745_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6746_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6747_xs)
{
  expr->eval(_6746_ws,_6745_rs,_6747_xs);
  _6746_ws->pop_expr();
  int32_t _6748_nd = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->nd;
  int32_t _6749_nnz = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->nnz;
  int32_t _6750_nelem = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->nelem;
  int32_t _6751_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->ncodeatom;
  bool _6752_hassp = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->hassp;
  int32_t _6753_shape = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->shape_base;
  int32_t _6754_ptr = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->ptr_base;
  int32_t _6755_code = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->code_base;
  int32_t _6756_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->codeptr_base;
  int32_t _6757_cconst = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->cconst_base;
  int32_t _6758_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->nidxs_base;
  int32_t _6759_sp = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->sp_base;
  int32_t _6760_cof = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6761_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6761_wi32(_6761_wi32 ? _6761_wi32->raw() : nullptr,_6761_wi32 ? _6761_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6762_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6762_wi64(_6762_wi64 ? _6762_wi64->raw() : nullptr,_6762_wi64 ? _6762_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6763_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6746_ws)->f64;
  _checked_ptr_1<double> _ptr__6763_wf64(_6763_wf64 ? _6763_wf64->raw() : nullptr,_6763_wf64 ? _6763_wf64->size(0) : 0);
  if (((dim0 >= _6748_nd) || (dim1 >= _6748_nd)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
    }
  }
  else if((_ptr__6761_wi32[safe_add( _6753_shape,dim0 )] != _ptr__6761_wi32[safe_add( _6753_shape,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Not symmetric in given dimensions"));
    }
  }
  {}
  int64_t _6764_d4 = (int)1;
  int64_t _6765_d3 = (int)1;
  int64_t _6766_d2 = (int)1;
  int64_t _6767_d1 = (int)1;
  int64_t _6768_d0 = (int)1;
  int32_t _12038_;
  bool _12039_ = (dim0 < dim1);
  if (_12039_)
  {
    _12038_ = dim0;
  }
  else
  {
    _12038_ = dim1;
  }
  int32_t _6769_xdim0 = _12038_;
  int32_t _12040_;
  bool _12041_ = (dim0 < dim1);
  if (_12041_)
  {
    _12040_ = dim1;
  }
  else
  {
    _12040_ = dim0;
  }
  int32_t _6770_xdim1 = _12040_;
  int32_t _12042_ = (int)0;
  int32_t _12043_ = _6769_xdim0;
  for (int32_t _6771_i = _12042_; _6771_i < _12043_; ++_6771_i)
  {
    {
      _6768_d0 *= _ptr__6761_wi32[safe_add( _6753_shape,_6771_i )];
    }
  }
  int32_t _12044_ = safe_add( _6769_xdim0,(int)1 );
  int32_t _12045_ = _6770_xdim1;
  for (int32_t _6772_i = _12044_; _6772_i < _12045_; ++_6772_i)
  {
    {
      _6766_d2 *= _ptr__6761_wi32[safe_add( _6753_shape,_6772_i )];
    }
  }
  int32_t _12046_ = safe_add( _6770_xdim1,(int)1 );
  int32_t _12047_ = _6748_nd;
  for (int32_t _6773_i = _12046_; _6773_i < _12047_; ++_6773_i)
  {
    {
      _6764_d4 *= _ptr__6761_wi32[safe_add( _6753_shape,_6773_i )];
    }
  }
  _6767_d1 = _ptr__6761_wi32[safe_add( _6753_shape,dim0 )];
  _6765_d3 = _6767_d1;
  if ((_6751_ncodeatom == (int)0))
  {
    {
      _6745_rs->alloc_expr(_6748_nd,_6750_nelem,_6749_nnz,_6752_hassp,(int)0);
    }
  }
  else
  {
    {
      _6745_rs->alloc_expr(_6748_nd,_6750_nelem,_6749_nnz,_6752_hassp,safe_add( _6751_ncodeatom,safe_mul( _6749_nnz,(int)2 ) ));
    }
  }
  int32_t _6774_rptr = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->ptr_base;
  int32_t _6775_rshape = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->shape_base;
  int32_t _6776_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->nidxs_base;
  int32_t _6777_rsp = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->sp_base;
  int32_t _6778_rcof = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->cof_base;
  int32_t _6779_rcode = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->code_base;
  int32_t _6780_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->codeptr_base;
  int32_t _6781_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6782_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6782_ri32(_6782_ri32 ? _6782_ri32->raw() : nullptr,_6782_ri32 ? _6782_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6783_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6783_ri64(_6783_ri64 ? _6783_ri64->raw() : nullptr,_6783_ri64 ? _6783_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6784_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6745_rs)->f64;
  _checked_ptr_1<double> _ptr__6784_rf64(_6784_rf64 ? _6784_rf64->raw() : nullptr,_6784_rf64 ? _6784_rf64->size(0) : 0);
  {
    ::mosek::fusion::Utils::Tools::arraycopy(_6761_wi32,_6754_ptr,_6782_ri32,_6774_rptr,safe_add( _6750_nelem,(int)1 ));
    ::mosek::fusion::Utils::Tools::arraycopy(_6761_wi32,_6753_shape,_6782_ri32,_6775_rshape,_6748_nd);
    ::mosek::fusion::Utils::Tools::arraycopy(_6762_wi64,_6758_nidxs,_6783_ri64,_6776_rnidxs,_6749_nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_6763_wf64,_6760_cof,_6784_rf64,_6778_rcof,_6749_nnz);
    if (_6752_hassp)
    {
      {
        ::mosek::fusion::Utils::Tools::arraycopy(_6762_wi64,_6759_sp,_6783_ri64,_6777_rsp,_6750_nelem);
      }
    }
    {}
  }
  double _6785_scale = ::mosek::fusion::Utils::Tools::sqrt((double)((int)2));
  if ((!_6752_hassp))
  {
    {
      int32_t _6786_k = (int)0;
      int32_t _12048_ = (int)0;
      int64_t _12049_ = _6768_d0;
      for (int64_t _6787_i0 = _12048_; _6787_i0 < _12049_; ++_6787_i0)
      {
        {
          int32_t _12050_ = (int)0;
          int64_t _12051_ = _6767_d1;
          for (int64_t _6788_i1 = _12050_; _6788_i1 < _12051_; ++_6788_i1)
          {
            {
              int32_t _12052_ = (int)0;
              int64_t _12053_ = _6766_d2;
              for (int64_t _6789_i2 = _12052_; _6789_i2 < _12053_; ++_6789_i2)
              {
                {
                  int32_t _12054_ = (int)0;
                  int64_t _12055_ = _6765_d3;
                  for (int64_t _6790_i3 = _12054_; _6790_i3 < _12055_; ++_6790_i3)
                  {
                    {
                      int32_t _12056_ = (int)0;
                      int64_t _12057_ = _6764_d4;
                      for (int64_t _6791_i4 = _12056_; _6791_i4 < _12057_; ++_6791_i4)
                      {
                        {
                          if ((_6788_i1 != _6790_i3))
                          {
                            {
                              int32_t _12058_ = _ptr__6782_ri32[safe_add( _6774_rptr,_6786_k )];
                              int32_t _12059_ = _ptr__6782_ri32[safe_add( safe_add( _6774_rptr,_6786_k ),(int)1 )];
                              for (int32_t _6792_j = _12058_; _6792_j < _12059_; ++_6792_j)
                              {
                                {
                                  _ptr__6784_rf64[safe_add( _6778_rcof,_6792_j )] *= _6785_scale;
                                }
                              }
                            }
                          }
                          {}
                          ++ _6786_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _6793_k = (int)0;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6794_d = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)5)));
      _checked_ptr_1<int64_t> _ptr__6794_d(_6794_d ? _6794_d->raw() : nullptr,_6794_d ? _6794_d->size(0) : 0);
      _ptr__6794_d[(int)4] = (int)1;
      _ptr__6794_d[(int)3] = safe_mul( _ptr__6794_d[(int)4],_6764_d4 );
      _ptr__6794_d[(int)2] = safe_mul( _ptr__6794_d[(int)3],_6765_d3 );
      _ptr__6794_d[(int)1] = safe_mul( _ptr__6794_d[(int)2],_6766_d2 );
      _ptr__6794_d[(int)0] = safe_mul( _ptr__6794_d[(int)1],_6767_d1 );
      int32_t _12060_ = (int)0;
      int32_t _12061_ = _6750_nelem;
      for (int32_t _6795_k = _12060_; _6795_k < _12061_; ++_6795_k)
      {
        {
          int64_t _6796_idx = _ptr__6762_wi64[safe_add( _6759_sp,_6795_k )];
          int64_t _6797_d3 = ((_6796_idx / _ptr__6794_d[(int)3]) % _6765_d3);
          int64_t _6798_d1 = ((_6796_idx / _ptr__6794_d[(int)1]) % _6767_d1);
          if ((_6798_d1 != _6797_d3))
          {
            {
              int32_t _12062_ = _ptr__6782_ri32[safe_add( _6774_rptr,_6795_k )];
              int32_t _12063_ = _ptr__6782_ri32[safe_add( safe_add( _6774_rptr,_6795_k ),(int)1 )];
              for (int32_t _6799_j = _12062_; _6799_j < _12063_; ++_6799_j)
              {
                {
                  _ptr__6784_rf64[safe_add( _6778_rcof,_6799_j )] *= _6785_scale;
                }
              }
            }
          }
          {}
        }
      }
    }
  }
  if ((_6751_ncodeatom != (int)0))
  {
    {
      int32_t _6800_nzi = (int)0;
      int32_t _6801_codei = (int)0;
      _ptr__6782_ri32[_6780_rcodeptr] = (int)0;
      if ((!_6752_hassp))
      {
        {
          int32_t _6802_k = (int)0;
          int32_t _12064_ = (int)0;
          int64_t _12065_ = _6768_d0;
          for (int64_t _6803_i0 = _12064_; _6803_i0 < _12065_; ++_6803_i0)
          {
            {
              int32_t _12066_ = (int)0;
              int64_t _12067_ = _6767_d1;
              for (int64_t _6804_i1 = _12066_; _6804_i1 < _12067_; ++_6804_i1)
              {
                {
                  int32_t _12068_ = (int)0;
                  int64_t _12069_ = _6766_d2;
                  for (int64_t _6805_i2 = _12068_; _6805_i2 < _12069_; ++_6805_i2)
                  {
                    {
                      int32_t _12070_ = (int)0;
                      int64_t _12071_ = _6765_d3;
                      for (int64_t _6806_i3 = _12070_; _6806_i3 < _12071_; ++_6806_i3)
                      {
                        {
                          int32_t _12072_ = (int)0;
                          int64_t _12073_ = _6764_d4;
                          for (int64_t _6807_i4 = _12072_; _6807_i4 < _12073_; ++_6807_i4)
                          {
                            {
                              double _12074_;
                              bool _12075_ = (_6804_i1 != _6806_i3);
                              if (_12075_)
                              {
                                _12074_ = _6785_scale;
                              }
                              else
                              {
                                _12074_ = 1.0;
                              }
                              double _6808_s = _12074_;
                              int32_t _12076_ = _ptr__6761_wi32[safe_add( _6754_ptr,_6802_k )];
                              int32_t _12077_ = _ptr__6782_ri32[safe_add( safe_add( _6754_ptr,_6802_k ),(int)1 )];
                              for (int32_t _6809_j = _12076_; _6809_j < _12077_; ++_6809_j)
                              {
                                {
                                  int32_t _12078_ = _ptr__6761_wi32[safe_add( _6756_codeptr,_6809_j )];
                                  int32_t _12079_ = _ptr__6761_wi32[safe_add( safe_add( _6756_codeptr,_6809_j ),(int)1 )];
                                  for (int32_t _6810_l = _12078_; _6810_l < _12079_; ++_6810_l)
                                  {
                                    {
                                      _ptr__6782_ri32[safe_add( _6779_rcode,_6801_codei )] = _ptr__6761_wi32[safe_add( _6755_code,_6810_l )];
                                      _ptr__6784_rf64[safe_add( _6781_rcconst,_6801_codei )] = _ptr__6763_wf64[safe_add( _6757_cconst,_6810_l )];
                                      ++ _6801_codei;
                                    }
                                  }
                                  _ptr__6782_ri32[safe_add( _6779_rcode,_6801_codei )] = 2;
                                  _ptr__6784_rf64[safe_add( _6781_rcconst,_6801_codei )] = _6808_s;
                                  ++ _6801_codei;
                                  _ptr__6782_ri32[safe_add( _6779_rcode,_6801_codei )] = 5;
                                  ++ _6801_codei;
                                  _ptr__6782_ri32[safe_add( safe_add( _6780_rcodeptr,_6800_nzi ),(int)1 )] = _6801_codei;
                                  ++ _6800_nzi;
                                }
                              }
                              ++ _6802_k;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _6811_k = (int)0;
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6812_d = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)5)));
          _checked_ptr_1<int64_t> _ptr__6812_d(_6812_d ? _6812_d->raw() : nullptr,_6812_d ? _6812_d->size(0) : 0);
          _ptr__6812_d[(int)4] = (int)1;
          _ptr__6812_d[(int)3] = safe_mul( _ptr__6812_d[(int)4],_6764_d4 );
          _ptr__6812_d[(int)2] = safe_mul( _ptr__6812_d[(int)3],_6765_d3 );
          _ptr__6812_d[(int)1] = safe_mul( _ptr__6812_d[(int)2],_6766_d2 );
          _ptr__6812_d[(int)0] = safe_mul( _ptr__6812_d[(int)1],_6767_d1 );
          int32_t _12080_ = (int)0;
          int32_t _12081_ = _6750_nelem;
          for (int32_t _6813_k = _12080_; _6813_k < _12081_; ++_6813_k)
          {
            {
              int64_t _6814_idx = _ptr__6762_wi64[safe_add( _6759_sp,_6813_k )];
              int64_t _6815_i3 = ((_6814_idx / _ptr__6812_d[(int)3]) % _6765_d3);
              int64_t _6816_i1 = ((_6814_idx / _ptr__6812_d[(int)1]) % _6767_d1);
              double _12082_;
              bool _12083_ = (_6816_i1 != _6815_i3);
              if (_12083_)
              {
                _12082_ = _6785_scale;
              }
              else
              {
                _12082_ = 1.0;
              }
              double _6817_s = _12082_;
              int32_t _12084_ = _ptr__6761_wi32[safe_add( _6754_ptr,_6813_k )];
              int32_t _12085_ = _ptr__6761_wi32[safe_add( safe_add( _6754_ptr,_6813_k ),(int)1 )];
              for (int32_t _6818_j = _12084_; _6818_j < _12085_; ++_6818_j)
              {
                {
                  int32_t _12086_ = _ptr__6761_wi32[safe_add( _6756_codeptr,_6818_j )];
                  int32_t _12087_ = _ptr__6761_wi32[safe_add( safe_add( _6756_codeptr,_6818_j ),(int)1 )];
                  for (int32_t _6819_l = _12086_; _6819_l < _12087_; ++_6819_l)
                  {
                    {
                      _ptr__6782_ri32[safe_add( _6779_rcode,_6801_codei )] = _ptr__6761_wi32[safe_add( _6755_code,_6819_l )];
                      _ptr__6784_rf64[safe_add( _6781_rcconst,_6801_codei )] = _ptr__6763_wf64[safe_add( _6757_cconst,_6819_l )];
                      ++ _6801_codei;
                    }
                  }
                  _ptr__6782_ri32[safe_add( _6779_rcode,_6801_codei )] = 2;
                  _ptr__6784_rf64[safe_add( _6781_rcconst,_6801_codei )] = _6817_s;
                  ++ _6801_codei;
                  _ptr__6782_ri32[safe_add( _6779_rcode,_6801_codei )] = 5;
                  ++ _6801_codei;
                  _ptr__6782_ri32[safe_add( safe_add( _6780_rcodeptr,_6800_nzi ),(int)1 )] = _6801_codei;
                  ++ _6800_nzi;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
}
// End mosek.fusion.ExprScaleVecPSD.eval

void mosek::fusion::p_ExprScaleVecPSD::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprScaleVecPSD::destroy() { mosek::fusion::p_ExprScaleVecPSD::_get_impl(this)->destroy(); }
// } class ExprScaleVecPSD
// class ExprDenseTril { // @ src/fusion/ExprShape.monty:778:4-1036:5
mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }
mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprDenseTril::p_ExprDenseTril
  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprDenseTril.ctor @ src/fusion/ExprShape.monty:798:6-805:7
mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril
  (int32_t _6820_dim0,
    int32_t _6821_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6822_expr,
    int32_t _6823_unchecked_)
{ return new mosek::fusion::ExprDenseTril(_6820_dim0,_6821_dim1,_6822_expr,_6823_unchecked_); }
mosek::fusion::ExprDenseTril::ExprDenseTril
  (int32_t _6820_dim0,
    int32_t _6821_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6822_expr,
    int32_t _6823_unchecked_) : 
   ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this))
{ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6820_dim0,_6821_dim1,_6822_expr,_6823_unchecked_); }
void mosek::fusion::p_ExprDenseTril::_initialize  (int32_t _6820_dim0,
    int32_t _6821_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6822_expr,
    int32_t _6823_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6822_expr->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _6822_expr;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _6820_dim0;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _6821_dim1;
  }
}
// mosek.fusion.ExprDenseTril.ctor

// mosek.fusion.ExprDenseTril.ctor @ src/fusion/ExprShape.monty:785:6-796:7
mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril
  (int32_t _6824_dim0_,
    int32_t _6825_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6826_expr)
{ return new mosek::fusion::ExprDenseTril(_6824_dim0_,_6825_dim1_,_6826_expr); }
mosek::fusion::ExprDenseTril::ExprDenseTril
  (int32_t _6824_dim0_,
    int32_t _6825_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6826_expr) : 
   ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this))
{ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6824_dim0_,_6825_dim1_,_6826_expr); }
void mosek::fusion::p_ExprDenseTril::_initialize  (int32_t _6824_dim0_,
    int32_t _6825_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6826_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ExprDenseTril::_initialize(_6824_dim0_,_6825_dim1_,_6826_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6827_shape = _6826_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__6827_shape(_6827_shape ? _6827_shape->raw() : nullptr,_6827_shape ? _6827_shape->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_6827_shape)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_6827_shape)->size(0))) || (_ptr__6827_shape[dim0] != _ptr__6827_shape[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprDenseTril.ctor

// Begin mosek.fusion.ExprDenseTril.eval
// Method mosek.fusion.ExprDenseTril.eval @ src/fusion/ExprShape.monty:807:6-1035:7
void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6828_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6829_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6830_xs) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_6828_rs,_6829_ws,_6830_xs); }
void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6828_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6829_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6830_xs)
{
  expr->eval(_6829_ws,_6828_rs,_6830_xs);
  _6829_ws->pop_expr();
  int32_t _6831_nd = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->nd;
  int32_t _6832_nnz = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->nnz;
  int32_t _6833_nelem = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->nelem;
  int32_t _6834_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->ncodeatom;
  bool _6835_hassp = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->hassp;
  int32_t _6836_shape = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->shape_base;
  int32_t _6837_ptr = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->ptr_base;
  int32_t _6838_code = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->code_base;
  int32_t _6839_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->codeptr_base;
  int32_t _6840_cconst = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->cconst_base;
  int32_t _6841_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->nidxs_base;
  int32_t _6842_sp = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->sp_base;
  int32_t _6843_cof = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6844_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6844_wi32(_6844_wi32 ? _6844_wi32->raw() : nullptr,_6844_wi32 ? _6844_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6845_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6845_wi64(_6845_wi64 ? _6845_wi64->raw() : nullptr,_6845_wi64 ? _6845_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6846_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6829_ws)->f64;
  _checked_ptr_1<double> _ptr__6846_wf64(_6846_wf64 ? _6846_wf64->raw() : nullptr,_6846_wf64 ? _6846_wf64->size(0) : 0);
  int32_t _12088_;
  bool _12089_ = (dim0 < dim1);
  if (_12089_)
  {
    _12088_ = dim0;
  }
  else
  {
    _12088_ = dim1;
  }
  int32_t _6847_xdim0 = _12088_;
  int32_t _12090_;
  bool _12091_ = (dim0 > dim1);
  if (_12091_)
  {
    _12090_ = dim0;
  }
  else
  {
    _12090_ = dim1;
  }
  int32_t _6848_xdim1 = _12090_;
  bool _6849_tril = (dim0 < dim1);
  if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= _6831_nd) || ((dim1 < (int)0) || (dim1 >= _6831_nd))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
    }
  }
  else if((_ptr__6844_wi32[safe_add( _6836_shape,dim0 )] != _ptr__6844_wi32[safe_add( _6836_shape,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Not symmetric in given dimensions"));
    }
  }
  {}
  std::vector<int32_t> _12092_;
  for (int32_t _6851_i = (int)0, _12093_ = (int)5; _6851_i < _12093_ ; ++_6851_i)
  {
    _12092_.push_back((int)1);
  }
  auto _12094_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12092_.size()),_12092_.begin(),_12092_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6850_dim = _12094_;
  _checked_ptr_1<int32_t> _ptr__6850_dim(_6850_dim ? _6850_dim->raw() : nullptr,_6850_dim ? _6850_dim->size(0) : 0);
  int32_t _12095_ = (int)0;
  int32_t _12096_ = _6847_xdim0;
  for (int32_t _6852_i = _12095_; _6852_i < _12096_; ++_6852_i)
  {
    {
      _ptr__6850_dim[(int)0] *= _ptr__6844_wi32[safe_add( _6836_shape,_6852_i )];
    }
  }
  _ptr__6850_dim[(int)1] = _ptr__6844_wi32[safe_add( _6836_shape,dim0 )];
  int32_t _12097_ = safe_add( _6847_xdim0,(int)1 );
  int32_t _12098_ = _6848_xdim1;
  for (int32_t _6853_i = _12097_; _6853_i < _12098_; ++_6853_i)
  {
    {
      _ptr__6850_dim[(int)2] *= _ptr__6844_wi32[safe_add( _6836_shape,_6853_i )];
    }
  }
  _ptr__6850_dim[(int)3] = _ptr__6844_wi32[safe_add( _6836_shape,dim1 )];
  int32_t _12099_ = safe_add( _6848_xdim1,(int)1 );
  int32_t _12100_ = _6831_nd;
  for (int32_t _6854_i = _12099_; _6854_i < _12100_; ++_6854_i)
  {
    {
      _ptr__6850_dim[(int)4] *= _ptr__6844_wi32[safe_add( _6836_shape,_6854_i )];
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6855_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)5)));
  _checked_ptr_1<int32_t> _ptr__6855_stride(_6855_stride ? _6855_stride->raw() : nullptr,_6855_stride ? _6855_stride->size(0) : 0);
  _ptr__6855_stride[(int)4] = (int)1;
  int32_t _12101_ = (int)1;
  int32_t _12102_ = (int)5;
  for (int32_t _6856_i = _12101_; _6856_i < _12102_; ++_6856_i)
  {
    {
      _ptr__6855_stride[(((int)5 - _6856_i) - (int)1)] = safe_mul( _ptr__6855_stride[((int)5 - _6856_i)],_ptr__6850_dim[((int)5 - _6856_i)] );
    }
  }
  int32_t _6857_rnnz = (int)0;
  int32_t _6858_rnelem = safe_mul( safe_mul( safe_mul( _ptr__6850_dim[(int)0],_ptr__6850_dim[(int)2] ),_ptr__6850_dim[(int)4] ),(safe_mul( _ptr__6850_dim[(int)1],safe_add( _ptr__6850_dim[(int)1],(int)1 ) ) / (int)2) );
  int32_t _6859_rncodeatom = (int)0;
  {
    if (_6835_hassp)
    {
      {
        int32_t _6860_d = _ptr__6850_dim[(int)1];
        if (_6849_tril)
        {
          {
            int32_t _12103_ = (int)0;
            int32_t _12104_ = _6833_nelem;
            for (int32_t _6861_i = _12103_; _6861_i < _12104_; ++_6861_i)
            {
              {
                int64_t _6862_subi = ((_ptr__6845_wi64[safe_add( _6842_sp,_6861_i )] / _ptr__6855_stride[(int)1]) % _6860_d);
                int64_t _6863_subj = ((_ptr__6845_wi64[safe_add( _6842_sp,_6861_i )] / _ptr__6855_stride[(int)3]) % _6860_d);
                if ((_6862_subi >= _6863_subj))
                {
                  {
                    _6857_rnnz += (_ptr__6844_wi32[safe_add( safe_add( _6837_ptr,_6861_i ),(int)1 )] - _ptr__6844_wi32[safe_add( _6837_ptr,_6861_i )]);
                    if ((_6834_ncodeatom > (int)0))
                    {
                      {
                        _6859_rncodeatom += (_ptr__6844_wi32[safe_add( _6839_codeptr,_ptr__6844_wi32[safe_add( safe_add( _6837_ptr,_6861_i ),(int)1 )] )] - _ptr__6844_wi32[safe_add( _6839_codeptr,_ptr__6844_wi32[safe_add( _6837_ptr,_6861_i )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int32_t _12105_ = (int)0;
            int32_t _12106_ = _6833_nelem;
            for (int32_t _6864_i = _12105_; _6864_i < _12106_; ++_6864_i)
            {
              {
                int64_t _6865_subi = ((_ptr__6845_wi64[safe_add( _6842_sp,_6864_i )] / _ptr__6855_stride[(int)1]) % _ptr__6850_dim[(int)1]);
                int64_t _6866_subj = ((_ptr__6845_wi64[safe_add( _6842_sp,_6864_i )] / _ptr__6855_stride[(int)3]) % _ptr__6850_dim[(int)3]);
                if ((_6865_subi <= _6866_subj))
                {
                  {
                    _6857_rnnz += (_ptr__6844_wi32[safe_add( safe_add( _6837_ptr,_6864_i ),(int)1 )] - _ptr__6844_wi32[safe_add( _6837_ptr,_6864_i )]);
                    if ((_6834_ncodeatom > (int)0))
                    {
                      {
                        _6859_rncodeatom += (_ptr__6844_wi32[safe_add( _6839_codeptr,_ptr__6844_wi32[safe_add( safe_add( _6837_ptr,_6864_i ),(int)1 )] )] - _ptr__6844_wi32[safe_add( _6839_codeptr,_ptr__6844_wi32[safe_add( _6837_ptr,_6864_i )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        if (_6849_tril)
        {
          {
            int32_t _12107_ = (int)0;
            int32_t _12108_ = _ptr__6850_dim[(int)0];
            for (int32_t _6867_i0 = _12107_; _6867_i0 < _12108_; ++_6867_i0)
            {
              {
                int32_t _12109_ = (int)0;
                int32_t _12110_ = _ptr__6850_dim[(int)1];
                for (int32_t _6868_i1 = _12109_; _6868_i1 < _12110_; ++_6868_i1)
                {
                  {
                    int32_t _12111_ = (int)0;
                    int32_t _12112_ = _ptr__6850_dim[(int)2];
                    for (int32_t _6869_i2 = _12111_; _6869_i2 < _12112_; ++_6869_i2)
                    {
                      {
                        int32_t _12113_ = (int)0;
                        int32_t _12114_ = safe_add( _6868_i1,(int)1 );
                        for (int32_t _6870_i3 = _12113_; _6870_i3 < _12114_; ++_6870_i3)
                        {
                          {
                            int32_t _12115_ = (int)0;
                            int32_t _12116_ = _ptr__6850_dim[(int)4];
                            for (int32_t _6871_i4 = _12115_; _6871_i4 < _12116_; ++_6871_i4)
                            {
                              {
                                int32_t _6872_p = safe_add( safe_add( safe_add( safe_add( safe_mul( _6867_i0,_ptr__6855_stride[(int)0] ),safe_mul( _6868_i1,_ptr__6855_stride[(int)1] ) ),safe_mul( _6869_i2,_ptr__6855_stride[(int)2] ) ),safe_mul( _6870_i3,_ptr__6855_stride[(int)3] ) ),safe_mul( _6871_i4,_ptr__6855_stride[(int)4] ) );
                                _6857_rnnz += (_ptr__6844_wi32[safe_add( safe_add( _6837_ptr,_6872_p ),(int)1 )] - _ptr__6844_wi32[safe_add( _6837_ptr,_6872_p )]);
                                if ((_6834_ncodeatom > (int)0))
                                {
                                  {
                                    _6859_rncodeatom += (_ptr__6844_wi32[safe_add( _6839_codeptr,_ptr__6844_wi32[safe_add( safe_add( _6837_ptr,_6872_p ),(int)1 )] )] - _ptr__6844_wi32[safe_add( _6839_codeptr,_ptr__6844_wi32[safe_add( _6837_ptr,_6872_p )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int32_t _12117_ = (int)0;
            int32_t _12118_ = _ptr__6850_dim[(int)0];
            for (int32_t _6873_i0 = _12117_; _6873_i0 < _12118_; ++_6873_i0)
            {
              {
                int32_t _12119_ = (int)0;
                int32_t _12120_ = _ptr__6850_dim[(int)1];
                for (int32_t _6874_i1 = _12119_; _6874_i1 < _12120_; ++_6874_i1)
                {
                  {
                    int32_t _12121_ = (int)0;
                    int32_t _12122_ = _ptr__6850_dim[(int)2];
                    for (int32_t _6875_i2 = _12121_; _6875_i2 < _12122_; ++_6875_i2)
                    {
                      {
                        int32_t _12123_ = _6874_i1;
                        int32_t _12124_ = _ptr__6850_dim[(int)3];
                        for (int32_t _6876_i3 = _12123_; _6876_i3 < _12124_; ++_6876_i3)
                        {
                          {
                            int32_t _12125_ = (int)0;
                            int32_t _12126_ = _ptr__6850_dim[(int)4];
                            for (int32_t _6877_i4 = _12125_; _6877_i4 < _12126_; ++_6877_i4)
                            {
                              {
                                int32_t _6878_p = safe_add( safe_add( safe_add( safe_add( safe_mul( _6873_i0,_ptr__6855_stride[(int)0] ),safe_mul( _6874_i1,_ptr__6855_stride[(int)1] ) ),safe_mul( _6875_i2,_ptr__6855_stride[(int)2] ) ),safe_mul( _6876_i3,_ptr__6855_stride[(int)3] ) ),safe_mul( _6877_i4,_ptr__6855_stride[(int)4] ) );
                                _6857_rnnz += (_ptr__6844_wi32[safe_add( safe_add( _6837_ptr,_6878_p ),(int)1 )] - _ptr__6844_wi32[safe_add( _6837_ptr,_6878_p )]);
                                if ((_6834_ncodeatom > (int)0))
                                {
                                  {
                                    _6859_rncodeatom += (_ptr__6844_wi32[safe_add( _6839_codeptr,_ptr__6844_wi32[safe_add( safe_add( _6837_ptr,_6878_p ),(int)1 )] )] - _ptr__6844_wi32[safe_add( _6839_codeptr,_ptr__6844_wi32[safe_add( _6837_ptr,_6878_p )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int32_t _6879_fullnelem = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__6850_dim[(int)0],_ptr__6850_dim[(int)2] ),_ptr__6850_dim[(int)4] ),_ptr__6850_dim[(int)1] ),safe_add( _ptr__6850_dim[(int)1],(int)1 ) ) / (int)2);
  _6828_rs->alloc_expr(_6831_nd,_6858_rnelem,_6857_rnnz,true,_6859_rncodeatom);
  int32_t _6880_rptr = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->ptr_base;
  int32_t _6881_rshape = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->shape_base;
  int32_t _6882_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->nidxs_base;
  int32_t _6883_rsp = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->sp_base;
  int32_t _6884_rcof = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->cof_base;
  int32_t _6885_rcode = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->code_base;
  int32_t _6886_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->codeptr_base;
  int32_t _6887_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6888_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6888_ri32(_6888_ri32 ? _6888_ri32->raw() : nullptr,_6888_ri32 ? _6888_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6889_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6889_ri64(_6889_ri64 ? _6889_ri64->raw() : nullptr,_6889_ri64 ? _6889_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6890_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6828_rs)->f64;
  _checked_ptr_1<double> _ptr__6890_rf64(_6890_rf64 ? _6890_rf64->raw() : nullptr,_6890_rf64 ? _6890_rf64->size(0) : 0);
  _ptr__6888_ri32[_6880_rptr] = (int)0;
  if ((_6859_rncodeatom > (int)0))
  {
    {
      _ptr__6888_ri32[_6886_rcodeptr] = (int)0;
    }
  }
  {}
  int32_t _12127_ = (int)0;
  int32_t _12128_ = _6831_nd;
  for (int32_t _6891_i = _12127_; _6891_i < _12128_; ++_6891_i)
  {
    {
      _ptr__6888_ri32[safe_add( _6881_rshape,_6891_i )] = _ptr__6844_wi32[safe_add( _6836_shape,_6891_i )];
    }
  }
  if (_6849_tril)
  {
    {
      int32_t _6892_k = (int)0;
      int32_t _12129_ = (int)0;
      int32_t _12130_ = _ptr__6850_dim[(int)0];
      for (int32_t _6893_i0 = _12129_; _6893_i0 < _12130_; ++_6893_i0)
      {
        {
          int32_t _12131_ = (int)0;
          int32_t _12132_ = _ptr__6850_dim[(int)1];
          for (int32_t _6894_i1 = _12131_; _6894_i1 < _12132_; ++_6894_i1)
          {
            {
              int32_t _12133_ = (int)0;
              int32_t _12134_ = _ptr__6850_dim[(int)2];
              for (int32_t _6895_i2 = _12133_; _6895_i2 < _12134_; ++_6895_i2)
              {
                {
                  int32_t _12135_ = (int)0;
                  int32_t _12136_ = safe_add( _6894_i1,(int)1 );
                  for (int32_t _6896_i3 = _12135_; _6896_i3 < _12136_; ++_6896_i3)
                  {
                    {
                      int32_t _12137_ = (int)0;
                      int32_t _12138_ = _ptr__6850_dim[(int)4];
                      for (int32_t _6897_i4 = _12137_; _6897_i4 < _12138_; ++_6897_i4)
                      {
                        {
                          _ptr__6889_ri64[safe_add( _6883_rsp,_6892_k )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6893_i0,_ptr__6855_stride[(int)0] ),safe_mul( _6894_i1,_ptr__6855_stride[(int)1] ) ),safe_mul( _6895_i2,_ptr__6855_stride[(int)2] ) ),safe_mul( _6896_i3,_ptr__6855_stride[(int)3] ) ),safe_mul( _6897_i4,_ptr__6855_stride[(int)4] ) );
                          ++ _6892_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6892_k != _6858_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _6898_k = (int)0;
      int32_t _12139_ = (int)0;
      int32_t _12140_ = _ptr__6850_dim[(int)0];
      for (int32_t _6899_i0 = _12139_; _6899_i0 < _12140_; ++_6899_i0)
      {
        {
          int32_t _12141_ = (int)0;
          int32_t _12142_ = _ptr__6850_dim[(int)1];
          for (int32_t _6900_i1 = _12141_; _6900_i1 < _12142_; ++_6900_i1)
          {
            {
              int32_t _12143_ = (int)0;
              int32_t _12144_ = _ptr__6850_dim[(int)2];
              for (int32_t _6901_i2 = _12143_; _6901_i2 < _12144_; ++_6901_i2)
              {
                {
                  int32_t _12145_ = _6900_i1;
                  int32_t _12146_ = _ptr__6850_dim[(int)3];
                  for (int32_t _6902_i3 = _12145_; _6902_i3 < _12146_; ++_6902_i3)
                  {
                    {
                      int32_t _12147_ = (int)0;
                      int32_t _12148_ = _ptr__6850_dim[(int)4];
                      for (int32_t _6903_i4 = _12147_; _6903_i4 < _12148_; ++_6903_i4)
                      {
                        {
                          _ptr__6889_ri64[safe_add( _6883_rsp,_6898_k )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6899_i0,_ptr__6855_stride[(int)0] ),safe_mul( _6900_i1,_ptr__6855_stride[(int)1] ) ),safe_mul( _6901_i2,_ptr__6855_stride[(int)2] ) ),safe_mul( _6902_i3,_ptr__6855_stride[(int)3] ) ),safe_mul( _6903_i4,_ptr__6855_stride[(int)4] ) );
                          ++ _6898_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6898_k != _6858_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  {
    int32_t _6904_nzi = (int)0;
    int32_t _6905_codei = (int)0;
    if (_6835_hassp)
    {
      {
        int32_t _6906_i1 = (int)0;
        int32_t _6907_i0 = (int)0;
        while ( ((_6907_i0 < _6833_nelem) && (_6906_i1 < _6879_fullnelem)) )
        {
          {
            if ((_ptr__6845_wi64[safe_add( _6842_sp,_6907_i0 )] < _ptr__6889_ri64[safe_add( _6883_rsp,_6906_i1 )]))
            {
              {
                ++ _6907_i0;
              }
            }
            else if((_ptr__6845_wi64[safe_add( _6842_sp,_6907_i0 )] > _ptr__6889_ri64[safe_add( _6883_rsp,_6906_i1 )]))
            {
              {
                _ptr__6888_ri32[safe_add( safe_add( _6880_rptr,_6906_i1 ),(int)1 )] = _6904_nzi;
                ++ _6906_i1;
              }
            }
            else
            {
              {
                int32_t _12149_ = _ptr__6844_wi32[safe_add( _6837_ptr,_6907_i0 )];
                int32_t _12150_ = _ptr__6844_wi32[safe_add( safe_add( _6837_ptr,_6907_i0 ),(int)1 )];
                for (int32_t _6908_j = _12149_; _6908_j < _12150_; ++_6908_j)
                {
                  {
                    _ptr__6889_ri64[safe_add( _6882_rnidxs,_6904_nzi )] = _ptr__6845_wi64[safe_add( _6841_nidxs,_6908_j )];
                    _ptr__6890_rf64[safe_add( _6884_rcof,_6904_nzi )] = _ptr__6846_wf64[safe_add( _6843_cof,_6908_j )];
                    if ((_6859_rncodeatom > (int)0))
                    {
                      {
                        int32_t _12151_ = _ptr__6844_wi32[safe_add( _6839_codeptr,_6908_j )];
                        int32_t _12152_ = _ptr__6844_wi32[safe_add( safe_add( _6839_codeptr,_6908_j ),(int)1 )];
                        for (int32_t _6909_k = _12151_; _6909_k < _12152_; ++_6909_k)
                        {
                          {
                            _ptr__6888_ri32[safe_add( _6885_rcode,_6905_codei )] = _ptr__6844_wi32[safe_add( _6838_code,_6909_k )];
                            _ptr__6890_rf64[safe_add( _6887_rcconst,_6905_codei )] = _ptr__6846_wf64[safe_add( _6840_cconst,_6909_k )];
                            ++ _6905_codei;
                          }
                        }
                        _ptr__6888_ri32[safe_add( safe_add( _6886_rcodeptr,_6904_nzi ),(int)1 )] = _6905_codei;
                      }
                    }
                    {}
                    ++ _6904_nzi;
                  }
                }
                _ptr__6888_ri32[safe_add( safe_add( _6880_rptr,_6906_i1 ),(int)1 )] = _6904_nzi;
                ++ _6907_i0;
                ++ _6906_i1;
              }
            }
          }
        }
        while ( (_6906_i1 < _6879_fullnelem) )
        {
          {
            _ptr__6888_ri32[safe_add( safe_add( _6880_rptr,_6906_i1 ),(int)1 )] = _6904_nzi;
            ++ _6906_i1;
          }
        }
      }
    }
    else
    {
      {
        int32_t _12153_ = (int)0;
        int32_t _12154_ = _6879_fullnelem;
        for (int32_t _6910_i = _12153_; _6910_i < _12154_; ++_6910_i)
        {
          {
            int64_t _6911_i0 = _ptr__6889_ri64[safe_add( _6883_rsp,_6910_i )];
            int32_t _12155_ = _ptr__6844_wi32[safe_add( _6837_ptr,_6911_i0 )];
            int32_t _12156_ = _ptr__6844_wi32[safe_add( safe_add( _6837_ptr,_6911_i0 ),(int)1 )];
            for (int32_t _6912_j = _12155_; _6912_j < _12156_; ++_6912_j)
            {
              {
                _ptr__6889_ri64[safe_add( _6882_rnidxs,_6904_nzi )] = _ptr__6845_wi64[safe_add( _6841_nidxs,_6912_j )];
                _ptr__6890_rf64[safe_add( _6884_rcof,_6904_nzi )] = _ptr__6846_wf64[safe_add( _6843_cof,_6912_j )];
                if ((_6859_rncodeatom > (int)0))
                {
                  {
                    int32_t _12157_ = _ptr__6844_wi32[safe_add( _6839_codeptr,_6912_j )];
                    int32_t _12158_ = _ptr__6844_wi32[safe_add( safe_add( _6839_codeptr,_6912_j ),(int)1 )];
                    for (int32_t _6913_k = _12157_; _6913_k < _12158_; ++_6913_k)
                    {
                      {
                        _ptr__6888_ri32[safe_add( _6885_rcode,_6905_codei )] = _ptr__6844_wi32[safe_add( _6838_code,_6913_k )];
                        _ptr__6890_rf64[safe_add( _6887_rcconst,_6905_codei )] = _ptr__6846_wf64[safe_add( _6840_cconst,_6913_k )];
                        ++ _6905_codei;
                      }
                    }
                    _ptr__6888_ri32[safe_add( safe_add( _6886_rcodeptr,_6904_nzi ),(int)1 )] = _6905_codei;
                  }
                }
                {}
                ++ _6904_nzi;
              }
            }
            _ptr__6888_ri32[safe_add( safe_add( _6880_rptr,_6910_i ),(int)1 )] = _6904_nzi;
          }
        }
      }
    }
    if ((_6904_nzi != _6857_rnnz))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
      }
    }
    {}
  }
}
// End mosek.fusion.ExprDenseTril.eval

// Begin mosek.fusion.ExprDenseTril.toString
// Method mosek.fusion.ExprDenseTril.toString @ src/fusion/ExprShape.monty:782:6-784:7
std::string mosek::fusion::ExprDenseTril :: toString() { return mosek::fusion::p_ExprDenseTril::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprDenseTril::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDenseTril(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprDenseTril.toString

void mosek::fusion::p_ExprDenseTril::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }
// } class ExprDenseTril
// class ExprDense { // @ src/fusion/ExprShape.monty:691:4-770:5
mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }
mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprDense::p_ExprDense
  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprDense.ctor @ src/fusion/ExprShape.monty:694:6-697:7
mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense
  (monty::rc_ptr< ::mosek::fusion::Expression > _6914_expr)
{ return new mosek::fusion::ExprDense(_6914_expr); }
mosek::fusion::ExprDense::ExprDense
  (monty::rc_ptr< ::mosek::fusion::Expression > _6914_expr) : 
   ExprDense(new mosek::fusion::p_ExprDense(this))
{ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_6914_expr); }
void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6914_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6914_expr->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _6914_expr;
  }
}
// mosek.fusion.ExprDense.ctor

// Begin mosek.fusion.ExprDense.eval
// Method mosek.fusion.ExprDense.eval @ src/fusion/ExprShape.monty:701:6-769:7
void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6915_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6916_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6917_xs) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_6915_rs,_6916_ws,_6917_xs); }
void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6915_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6916_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6917_xs)
{
  expr->eval(_6916_ws,_6915_rs,_6917_xs);
  _6916_ws->pop_expr();
  int32_t _6918_nd = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->nd;
  int32_t _6919_nnz = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->nnz;
  int32_t _6920_nelem = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->nelem;
  int32_t _6921_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->ncodeatom;
  bool _6922_hassp = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->hassp;
  int32_t _6923_shape = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->shape_base;
  int32_t _6924_ptr = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->ptr_base;
  int32_t _6925_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->nidxs_base;
  int32_t _6926_cof = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->cof_base;
  int32_t _6927_sp = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->sp_base;
  int32_t _6928_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->codeptr_base;
  int32_t _6929_code = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->code_base;
  int32_t _6930_cconst = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6931_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6931_wi32(_6931_wi32 ? _6931_wi32->raw() : nullptr,_6931_wi32 ? _6931_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6932_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6932_wi64(_6932_wi64 ? _6932_wi64->raw() : nullptr,_6932_wi64 ? _6932_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6933_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6916_ws)->f64;
  _checked_ptr_1<double> _ptr__6933_wf64(_6933_wf64 ? _6933_wf64->raw() : nullptr,_6933_wf64 ? _6933_wf64->size(0) : 0);
  int32_t _6934_rnelem = (int)1;
  if (_6922_hassp)
  {
    {
      bool _6935_ok = true;
      int32_t _12159_ = (int)0;
      int32_t _12160_ = _6918_nd;
      for (int32_t _6936_i = _12159_; _6936_i < _12160_; ++_6936_i)
      {
        {
          int32_t _6937_szx = safe_mul( _6934_rnelem,_ptr__6931_wi32[safe_add( _6923_shape,_6936_i )] );
          _6935_ok = (_6935_ok && ((_ptr__6931_wi32[safe_add( _6923_shape,_6936_i )] == (int)0) || ((_6937_szx / _ptr__6931_wi32[safe_add( _6923_shape,_6936_i )]) == _6934_rnelem)));
          _6934_rnelem = _6937_szx;
        }
      }
      if ((!_6935_ok))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("The domain is too large"));
        }
      }
      {}
    }
  }
  else
  {
    {
      _6934_rnelem = _6920_nelem;
    }
  }
  _6915_rs->alloc_expr(_6918_nd,_6934_rnelem,_6919_nnz,false,_6921_ncodeatom);
  int32_t _6938_rshape = mosek::fusion::p_WorkStack::_get_impl(_6915_rs)->shape_base;
  int32_t _6939_rptr = mosek::fusion::p_WorkStack::_get_impl(_6915_rs)->ptr_base;
  int32_t _6940_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6915_rs)->nidxs_base;
  int32_t _6941_rcof = mosek::fusion::p_WorkStack::_get_impl(_6915_rs)->cof_base;
  int32_t _6942_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6915_rs)->codeptr_base;
  int32_t _6943_rcode = mosek::fusion::p_WorkStack::_get_impl(_6915_rs)->code_base;
  int32_t _6944_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6915_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6945_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6915_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6945_ri32(_6945_ri32 ? _6945_ri32->raw() : nullptr,_6945_ri32 ? _6945_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6946_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6915_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6946_ri64(_6946_ri64 ? _6946_ri64->raw() : nullptr,_6946_ri64 ? _6946_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6947_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6915_rs)->f64;
  _checked_ptr_1<double> _ptr__6947_rf64(_6947_rf64 ? _6947_rf64->raw() : nullptr,_6947_rf64 ? _6947_rf64->size(0) : 0);
  {
    int32_t _12161_ = (int)0;
    int32_t _12162_ = _6918_nd;
    for (int32_t _6948_i = _12161_; _6948_i < _12162_; ++_6948_i)
    {
      {
        _ptr__6945_ri32[safe_add( _6938_rshape,_6948_i )] = _ptr__6931_wi32[safe_add( _6923_shape,_6948_i )];
      }
    }
    int32_t _12163_ = (int)0;
    int32_t _12164_ = _6919_nnz;
    for (int32_t _6949_i = _12163_; _6949_i < _12164_; ++_6949_i)
    {
      {
        _ptr__6946_ri64[safe_add( _6940_rnidxs,_6949_i )] = _ptr__6932_wi64[safe_add( _6925_nidxs,_6949_i )];
      }
    }
    int32_t _12165_ = (int)0;
    int32_t _12166_ = _6919_nnz;
    for (int32_t _6950_i = _12165_; _6950_i < _12166_; ++_6950_i)
    {
      {
        _ptr__6947_rf64[safe_add( _6941_rcof,_6950_i )] = _ptr__6933_wf64[safe_add( _6926_cof,_6950_i )];
      }
    }
    if ((_6921_ncodeatom > (int)0))
    {
      {
        int32_t _12167_ = (int)0;
        int32_t _12168_ = safe_add( _6919_nnz,(int)1 );
        for (int32_t _6951_i = _12167_; _6951_i < _12168_; ++_6951_i)
        {
          {
            _ptr__6945_ri32[safe_add( _6942_rcodeptr,_6951_i )] = _ptr__6931_wi32[safe_add( _6928_codeptr,_6951_i )];
          }
        }
        int32_t _12169_ = (int)0;
        int32_t _12170_ = _6921_ncodeatom;
        for (int32_t _6952_i = _12169_; _6952_i < _12170_; ++_6952_i)
        {
          {
            _ptr__6945_ri32[safe_add( _6943_rcode,_6952_i )] = _ptr__6931_wi32[safe_add( _6929_code,_6952_i )];
          }
        }
        int32_t _12171_ = (int)0;
        int32_t _12172_ = _6921_ncodeatom;
        for (int32_t _6953_i = _12171_; _6953_i < _12172_; ++_6953_i)
        {
          {
            _ptr__6947_rf64[safe_add( _6944_rcconst,_6953_i )] = _ptr__6933_wf64[safe_add( _6930_cconst,_6953_i )];
          }
        }
      }
    }
    {}
    if ((!_6922_hassp))
    {
      {
        int32_t _12173_ = (int)0;
        int32_t _12174_ = safe_add( _6934_rnelem,(int)1 );
        for (int32_t _6954_i = _12173_; _6954_i < _12174_; ++_6954_i)
        {
          {
            _ptr__6945_ri32[safe_add( _6939_rptr,_6954_i )] = _ptr__6931_wi32[safe_add( _6924_ptr,_6954_i )];
          }
        }
      }
    }
    else
    {
      {
        int32_t _12175_ = (int)0;
        int32_t _12176_ = safe_add( _6934_rnelem,(int)1 );
        for (int32_t _6955_i = _12175_; _6955_i < _12176_; ++_6955_i)
        {
          {
            _ptr__6945_ri32[safe_add( _6939_rptr,_6955_i )] = (int)0;
          }
        }
        int32_t _12177_ = (int)0;
        int32_t _12178_ = _6920_nelem;
        for (int32_t _6956_i = _12177_; _6956_i < _12178_; ++_6956_i)
        {
          {
            _ptr__6945_ri32[safe_add( safe_add( _6939_rptr,_ptr__6932_wi64[safe_add( _6927_sp,_6956_i )] ),(int)1 )] = (_ptr__6931_wi32[safe_add( safe_add( _6924_ptr,_6956_i ),(int)1 )] - _ptr__6931_wi32[safe_add( _6924_ptr,_6956_i )]);
          }
        }
        int32_t _12179_ = (int)0;
        int32_t _12180_ = _6934_rnelem;
        for (int32_t _6957_i = _12179_; _6957_i < _12180_; ++_6957_i)
        {
          {
            _ptr__6945_ri32[safe_add( safe_add( _6939_rptr,_6957_i ),(int)1 )] += _ptr__6945_ri32[safe_add( _6939_rptr,_6957_i )];
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprDense.eval

// Begin mosek.fusion.ExprDense.toString
// Method mosek.fusion.ExprDense.toString @ src/fusion/ExprShape.monty:699:6-127
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprDense::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprDense.toString

void mosek::fusion::p_ExprDense::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }
// } class ExprDense
// class ExprSymmetrize { // @ src/fusion/ExprShape.monty:148:4-684:5
mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }
mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize
  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprSymmetrize.ctor @ src/fusion/ExprShape.monty:165:6-178:7
mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize
  (int32_t _6958_dim0,
    int32_t _6959_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6960_expr,
    int32_t _6961_unchecked_)
{ return new mosek::fusion::ExprSymmetrize(_6958_dim0,_6959_dim1,_6960_expr,_6961_unchecked_); }
mosek::fusion::ExprSymmetrize::ExprSymmetrize
  (int32_t _6958_dim0,
    int32_t _6959_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6960_expr,
    int32_t _6961_unchecked_) : 
   ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this))
{ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6958_dim0,_6959_dim1,_6960_expr,_6961_unchecked_); }
void mosek::fusion::p_ExprSymmetrize::_initialize  (int32_t _6958_dim0,
    int32_t _6959_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6960_expr,
    int32_t _6961_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6960_expr->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _6960_expr;
    if ((_6958_dim0 < _6959_dim1))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6958_dim0;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6959_dim1;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6959_dim1;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6958_dim0;
      }
    }
  }
}
// mosek.fusion.ExprSymmetrize.ctor

// mosek.fusion.ExprSymmetrize.ctor @ src/fusion/ExprShape.monty:157:6-163:7
mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize
  (int32_t _6962_dim0_,
    int32_t _6963_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6964_expr)
{ return new mosek::fusion::ExprSymmetrize(_6962_dim0_,_6963_dim1_,_6964_expr); }
mosek::fusion::ExprSymmetrize::ExprSymmetrize
  (int32_t _6962_dim0_,
    int32_t _6963_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6964_expr) : 
   ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this))
{ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6962_dim0_,_6963_dim1_,_6964_expr); }
void mosek::fusion::p_ExprSymmetrize::_initialize  (int32_t _6962_dim0_,
    int32_t _6963_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6964_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ExprSymmetrize::_initialize(_6962_dim0_,_6963_dim1_,_6964_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6965_shape = _6964_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__6965_shape(_6965_shape ? _6965_shape->raw() : nullptr,_6965_shape ? _6965_shape->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_6965_shape)->size(0))) || (_ptr__6965_shape[dim0] != _ptr__6965_shape[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprSymmetrize.ctor

// Begin mosek.fusion.ExprSymmetrize.eval
// Method mosek.fusion.ExprSymmetrize.eval @ src/fusion/ExprShape.monty:180:6-683:7
void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6966_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6967_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6968_xs) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_6966_rs,_6967_ws,_6968_xs); }
void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6966_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6967_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6968_xs)
{
  expr->eval(_6967_ws,_6966_rs,_6968_xs);
  _6967_ws->pop_expr();
  int32_t _6969_dimmax = (int)0;
  int32_t _6970_nd = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->nd;
  int32_t _6971_nnz = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->nnz;
  int32_t _6972_nelem = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->nelem;
  int32_t _6973_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->ncodeatom;
  bool _6974_hassp = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->hassp;
  int32_t _6975_shape = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->shape_base;
  int32_t _6976_ptr = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->ptr_base;
  int32_t _6977_code = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->code_base;
  int32_t _6978_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->codeptr_base;
  int32_t _6979_cconst = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->cconst_base;
  int32_t _6980_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->nidxs_base;
  int32_t _6981_sp = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->sp_base;
  int32_t _6982_cof = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6983_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6983_wi32(_6983_wi32 ? _6983_wi32->raw() : nullptr,_6983_wi32 ? _6983_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6984_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6984_wi64(_6984_wi64 ? _6984_wi64->raw() : nullptr,_6984_wi64 ? _6984_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6985_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6967_ws)->f64;
  _checked_ptr_1<double> _ptr__6985_wf64(_6985_wf64 ? _6985_wf64->raw() : nullptr,_6985_wf64 ? _6985_wf64->size(0) : 0);
  int32_t _12181_ = (int)0;
  int32_t _12182_ = _6970_nd;
  for (int32_t _6986_i = _12181_; _6986_i < _12182_; ++_6986_i)
  {
    {
      int32_t _6987_d = _ptr__6983_wi32[safe_add( _6975_shape,_6986_i )];
      if ((_6987_d > _6969_dimmax))
      {
        {
          _6969_dimmax = _6987_d;
        }
      }
      {}
    }
  }
  int32_t _6988_xperm1 = _6968_xs->alloci32(_6972_nelem);
  int32_t _6989_xperm2 = _6968_xs->alloci32(_6972_nelem);
  int32_t _6990_xptr = _6968_xs->alloci32(safe_add( _6969_dimmax,(int)1 ));
  int32_t _6991_xsp = _6968_xs->alloci64(_6972_nelem);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6992_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6968_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__6992_xi32(_6992_xi32 ? _6992_xi32->raw() : nullptr,_6992_xi32 ? _6992_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6993_xi64 = mosek::fusion::p_WorkStack::_get_impl(_6968_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__6993_xi64(_6993_xi64 ? _6993_xi64->raw() : nullptr,_6993_xi64 ? _6993_xi64->size(0) : 0);
  int32_t _6994_rnelem = (int)0;
  int32_t _6995_rnnz = (int)0;
  int32_t _6996_rncodeatom = (int)0;
  std::vector<int32_t> _12183_;
  for (int32_t _6998_i = (int)0, _12184_ = (int)5; _6998_i < _12184_ ; ++_6998_i)
  {
    _12183_.push_back((int)1);
  }
  auto _12185_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12183_.size()),_12183_.begin(),_12183_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6997_dim = _12185_;
  _checked_ptr_1<int32_t> _ptr__6997_dim(_6997_dim ? _6997_dim->raw() : nullptr,_6997_dim ? _6997_dim->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6999_stride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)5)));
  _checked_ptr_1<int64_t> _ptr__6999_stride(_6999_stride ? _6999_stride->raw() : nullptr,_6999_stride ? _6999_stride->size(0) : 0);
  int32_t _12186_ = (int)0;
  int32_t _12187_ = dim0;
  for (int32_t _7000_i = _12186_; _7000_i < _12187_; ++_7000_i)
  {
    {
      _ptr__6997_dim[(int)0] *= _ptr__6983_wi32[safe_add( _6975_shape,_7000_i )];
    }
  }
  _ptr__6997_dim[(int)1] = _ptr__6983_wi32[safe_add( _6975_shape,dim0 )];
  int32_t _12188_ = safe_add( dim0,(int)1 );
  int32_t _12189_ = dim1;
  for (int32_t _7001_i = _12188_; _7001_i < _12189_; ++_7001_i)
  {
    {
      _ptr__6997_dim[(int)2] *= _ptr__6983_wi32[safe_add( _6975_shape,_7001_i )];
    }
  }
  _ptr__6997_dim[(int)3] = _ptr__6983_wi32[safe_add( _6975_shape,dim1 )];
  int32_t _12190_ = safe_add( dim1,(int)1 );
  int32_t _12191_ = _6970_nd;
  for (int32_t _7002_i = _12190_; _7002_i < _12191_; ++_7002_i)
  {
    {
      _ptr__6997_dim[(int)4] *= _ptr__6983_wi32[safe_add( _6975_shape,_7002_i )];
    }
  }
  _ptr__6999_stride[(int)4] = (int)1;
  int32_t _12192_ = (int)1;
  int32_t _12193_ = (int)5;
  for (int32_t _7003_i = _12192_; _7003_i < _12193_; ++_7003_i)
  {
    {
      _ptr__6999_stride[(((int)5 - _7003_i) - (int)1)] = safe_mul( _ptr__6999_stride[((int)5 - _7003_i)],_ptr__6997_dim[((int)5 - _7003_i)] );
    }
  }
  if (_6974_hassp)
  {
    {
      int32_t _7004_curperm = _6988_xperm1;
      int32_t _12194_ = (int)0;
      int32_t _12195_ = _6972_nelem;
      for (int32_t _7005_i = _12194_; _7005_i < _12195_; ++_7005_i)
      {
        {
          _ptr__6992_xi32[safe_add( _7004_curperm,_7005_i )] = _7005_i;
        }
      }
      int32_t _7006_tgtperm = _6989_xperm2;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7007_sortidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)2),(int32_t)((int)3),(int32_t)((int)0)});
      _checked_ptr_1<int32_t> _ptr__7007_sortidx(_7007_sortidx ? _7007_sortidx->raw() : nullptr,_7007_sortidx ? _7007_sortidx->size(0) : 0);
      int32_t _12196_ = (int)0;
      int32_t _12197_ = (int)4;
      for (int32_t _7008_k = _12196_; _7008_k < _12197_; ++_7008_k)
      {
        {
          int64_t _7009_s = _ptr__6999_stride[_ptr__7007_sortidx[_7008_k]];
          int32_t _7010_d = _ptr__6997_dim[_ptr__7007_sortidx[_7008_k]];
          if ((_7010_d > (int)1))
          {
            {
              int32_t _12198_ = (int)0;
              int32_t _12199_ = safe_add( _7010_d,(int)1 );
              for (int32_t _7011_i = _12198_; _7011_i < _12199_; ++_7011_i)
              {
                {
                  _ptr__6992_xi32[safe_add( _6990_xptr,_7011_i )] = (int)0;
                }
              }
              int32_t _12200_ = (int)0;
              int32_t _12201_ = _6972_nelem;
              for (int32_t _7012_i = _12200_; _7012_i < _12201_; ++_7012_i)
              {
                {
                  ++ _ptr__6992_xi32[safe_add( safe_add( _6990_xptr,((_ptr__6984_wi64[safe_add( _6981_sp,_ptr__6992_xi32[safe_add( _7004_curperm,_7012_i )] )] / _7009_s) % _7010_d) ),(int)1 )];
                }
              }
              int32_t _12202_ = (int)0;
              int32_t _12203_ = _ptr__6997_dim[(int)3];
              for (int32_t _7013_i = _12202_; _7013_i < _12203_; ++_7013_i)
              {
                {
                  _ptr__6992_xi32[safe_add( safe_add( _6990_xptr,_7013_i ),(int)1 )] += _ptr__6992_xi32[safe_add( _6990_xptr,_7013_i )];
                }
              }
              int32_t _12204_ = (int)0;
              int32_t _12205_ = _6972_nelem;
              for (int32_t _7014_i = _12204_; _7014_i < _12205_; ++_7014_i)
              {
                {
                  int32_t _7015_ii = _ptr__6992_xi32[safe_add( _7004_curperm,_7014_i )];
                  int64_t _7016_idx = ((_ptr__6984_wi64[safe_add( _6981_sp,_7015_ii )] / _7009_s) % _7010_d);
                  _ptr__6992_xi32[safe_add( _7006_tgtperm,_ptr__6992_xi32[safe_add( _6990_xptr,_7016_idx )] )] = _7015_ii;
                  ++ _ptr__6992_xi32[safe_add( _6990_xptr,_7016_idx )];
                }
              }
              int32_t _7017_tmpperm = _7004_curperm;
              _7004_curperm = _7006_tgtperm;
              _7006_tgtperm = _7017_tmpperm;
            }
          }
          {}
        }
      }
      int32_t _12206_ = (int)0;
      int32_t _12207_ = _6972_nelem;
      for (int32_t _7018_i = _12206_; _7018_i < _12207_; ++_7018_i)
      {
        {
          _ptr__6993_xi64[safe_add( _6991_xsp,_7018_i )] = safe_add( safe_add( safe_add( safe_add( safe_mul( ((_ptr__6984_wi64[safe_add( _6981_sp,_7018_i )] / _ptr__6999_stride[(int)0]) % _ptr__6997_dim[(int)0]),_ptr__6999_stride[(int)0] ),safe_mul( ((_ptr__6984_wi64[safe_add( _6981_sp,_7018_i )] / _ptr__6999_stride[(int)1]) % _ptr__6997_dim[(int)1]),_ptr__6999_stride[(int)3] ) ),safe_mul( ((_ptr__6984_wi64[safe_add( _6981_sp,_7018_i )] / _ptr__6999_stride[(int)2]) % _ptr__6997_dim[(int)2]),_ptr__6999_stride[(int)2] ) ),safe_mul( ((_ptr__6984_wi64[safe_add( _6981_sp,_7018_i )] / _ptr__6999_stride[(int)3]) % _ptr__6997_dim[(int)3]),_ptr__6999_stride[(int)1] ) ),safe_mul( ((_ptr__6984_wi64[safe_add( _6981_sp,_7018_i )] / _ptr__6999_stride[(int)4]) % _ptr__6997_dim[(int)4]),_ptr__6999_stride[(int)4] ) );
        }
      }
      {
        int32_t _7019_ii1 = (int)0;
        int32_t _7020_i0 = (int)0;
        while ( ((_7020_i0 < _6972_nelem) || (_7019_ii1 < _6972_nelem)) )
        {
          {
            int32_t _7021_i1 = _ptr__6992_xi32[safe_add( _7004_curperm,_7019_ii1 )];
            if (((_7020_i0 < _6972_nelem) && ((_7019_ii1 == _6972_nelem) || (_ptr__6984_wi64[safe_add( _6981_sp,_7020_i0 )] < _ptr__6993_xi64[safe_add( _6991_xsp,_7021_i1 )]))))
            {
              {
                _6995_rnnz += (_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7020_i0 ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7020_i0 )]);
                if ((_6973_ncodeatom > (int)0))
                {
                  {
                    _6996_rncodeatom += safe_add( (_ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7020_i0 ),(int)1 )] )] - _ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( _6976_ptr,_7020_i0 )] )]),safe_mul( (int)2,(_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7020_i0 ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7020_i0 )]) ) );
                  }
                }
                {}
                ++ _6994_rnelem;
                ++ _7020_i0;
              }
            }
            else if(((_7019_ii1 < _6972_nelem) && ((_7020_i0 == _6972_nelem) || (_ptr__6984_wi64[safe_add( _6981_sp,_7020_i0 )] > _ptr__6993_xi64[safe_add( _6991_xsp,_7021_i1 )]))))
            {
              {
                _6995_rnnz += (_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7021_i1 ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7021_i1 )]);
                if ((_6973_ncodeatom > (int)0))
                {
                  {
                    _6996_rncodeatom += safe_add( (_ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7021_i1 ),(int)1 )] )] - _ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( _6976_ptr,_7021_i1 )] )]),safe_mul( (int)2,(_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7021_i1 ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7021_i1 )]) ) );
                  }
                }
                {}
                ++ _6994_rnelem;
                ++ _7019_ii1;
              }
            }
            else if((_ptr__6984_wi64[safe_add( _6981_sp,_7020_i0 )] != _ptr__6993_xi64[safe_add( _6991_xsp,_7021_i1 )]))
            {
              {
                _6995_rnnz += (_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7020_i0 ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7020_i0 )]);
                _6995_rnnz += (_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7021_i1 ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7021_i1 )]);
                if ((_6973_ncodeatom > (int)0))
                {
                  {
                    _6996_rncodeatom += safe_add( (_ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7020_i0 ),(int)1 )] )] - _ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( _6976_ptr,_7020_i0 )] )]),safe_mul( (int)2,(_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7020_i0 ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7020_i0 )]) ) );
                    _6996_rncodeatom += safe_add( (_ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7021_i1 ),(int)1 )] )] - _ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( _6976_ptr,_7021_i1 )] )]),safe_mul( (int)2,(_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7021_i1 ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7021_i1 )]) ) );
                  }
                }
                {}
                ++ _6994_rnelem;
                ++ _7019_ii1;
                ++ _7020_i0;
              }
            }
            else
            {
              {
                _6995_rnnz += (_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7020_i0 ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7020_i0 )]);
                if ((_6973_ncodeatom > (int)0))
                {
                  {
                    _6996_rncodeatom += (_ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7020_i0 ),(int)1 )] )] - _ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( _6976_ptr,_7020_i0 )] )]);
                  }
                }
                {}
                ++ _6994_rnelem;
                ++ _7019_ii1;
                ++ _7020_i0;
              }
            }
          }
        }
      }
      _6966_rs->alloc_expr(_6970_nd,_6994_rnelem,_6995_rnnz,true,_6996_rncodeatom);
      int32_t _7022_rnd = _6970_nd;
      int32_t _7023_rptr = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->ptr_base;
      int32_t _7024_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->nidxs_base;
      int32_t _7025_rshape = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->shape_base;
      int32_t _7026_rsp = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->sp_base;
      int32_t _7027_rcof = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->cof_base;
      int32_t _7028_rcode = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->code_base;
      int32_t _7029_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->codeptr_base;
      int32_t _7030_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7031_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__7031_ri32(_7031_ri32 ? _7031_ri32->raw() : nullptr,_7031_ri32 ? _7031_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7032_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__7032_ri64(_7032_ri64 ? _7032_ri64->raw() : nullptr,_7032_ri64 ? _7032_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7033_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->f64;
      _checked_ptr_1<double> _ptr__7033_rf64(_7033_rf64 ? _7033_rf64->raw() : nullptr,_7033_rf64 ? _7033_rf64->size(0) : 0);
      int32_t _12208_ = (int)0;
      int32_t _12209_ = _6970_nd;
      for (int32_t _7034_i = _12208_; _7034_i < _12209_; ++_7034_i)
      {
        {
          _ptr__7031_ri32[safe_add( _7025_rshape,_7034_i )] = _ptr__6983_wi32[safe_add( _6975_shape,_7034_i )];
        }
      }
      _ptr__7031_ri32[_7023_rptr] = (int)0;
      if ((_6996_rncodeatom > (int)0))
      {
        {
          _ptr__7031_ri32[_7029_rcodeptr] = (int)0;
        }
      }
      {}
      {
        int32_t _7035_nzi = (int)0;
        int32_t _7036_codei = (int)0;
        int32_t _7037_elmi = (int)0;
        int32_t _7038_ii1 = (int)0;
        int32_t _7039_i0 = (int)0;
        _ptr__7031_ri32[_7023_rptr] = (int)0;
        while ( ((_7039_i0 < _6972_nelem) || (_7038_ii1 < _6972_nelem)) )
        {
          {
            int32_t _7040_i1 = _ptr__6992_xi32[safe_add( _7004_curperm,_7038_ii1 )];
            if (((_7039_i0 < _6972_nelem) && ((_7038_ii1 == _6972_nelem) || (_ptr__6984_wi64[safe_add( _6981_sp,_7039_i0 )] < _ptr__6993_xi64[safe_add( _6991_xsp,_7040_i1 )]))))
            {
              {
                if ((_6996_rncodeatom == (int)0))
                {
                  {
                    int32_t _12210_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7039_i0 )];
                    int32_t _12211_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7039_i0 ),(int)1 )];
                    for (int32_t _7041_j = _12210_; _7041_j < _12211_; ++_7041_j)
                    {
                      {
                        _ptr__7032_ri64[safe_add( _7024_rnidxs,_7035_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7041_j )];
                        _ptr__7033_rf64[safe_add( _7027_rcof,_7035_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7041_j )] * 0.5);
                        ++ _7035_nzi;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int32_t _12212_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7039_i0 )];
                    int32_t _12213_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7039_i0 ),(int)1 )];
                    for (int32_t _7042_j = _12212_; _7042_j < _12213_; ++_7042_j)
                    {
                      {
                        _ptr__7032_ri64[safe_add( _7024_rnidxs,_7035_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7042_j )];
                        _ptr__7033_rf64[safe_add( _7027_rcof,_7035_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7042_j )] * 0.5);
                        int32_t _12214_ = _ptr__6983_wi32[safe_add( _6978_codeptr,_7042_j )];
                        int32_t _12215_ = _ptr__6983_wi32[safe_add( safe_add( _6978_codeptr,_7042_j ),(int)1 )];
                        for (int32_t _7043_k = _12214_; _7043_k < _12215_; ++_7043_k)
                        {
                          {
                            _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = _ptr__6983_wi32[safe_add( _6977_code,_7043_k )];
                            _ptr__7033_rf64[safe_add( _7030_rcconst,_7036_codei )] = _ptr__6985_wf64[safe_add( _6979_cconst,_7043_k )];
                            ++ _7036_codei;
                          }
                        }
                        _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = 2;
                        _ptr__7033_rf64[safe_add( _7030_rcconst,_7036_codei )] = 0.5;
                        ++ _7036_codei;
                        _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = 5;
                        ++ _7036_codei;
                        _ptr__7031_ri32[safe_add( safe_add( _7029_rcodeptr,_7035_nzi ),(int)1 )] = _7036_codei;
                        ++ _7035_nzi;
                      }
                    }
                  }
                }
                _ptr__7032_ri64[safe_add( _7026_rsp,_7037_elmi )] = _ptr__6984_wi64[safe_add( _6981_sp,_7039_i0 )];
                _ptr__7031_ri32[safe_add( safe_add( _7023_rptr,_7037_elmi ),(int)1 )] = _7035_nzi;
                ++ _7037_elmi;
                ++ _7039_i0;
              }
            }
            else if(((_7038_ii1 < _6972_nelem) && ((_7039_i0 == _6972_nelem) || (_ptr__6984_wi64[safe_add( _6981_sp,_7039_i0 )] > _ptr__6993_xi64[safe_add( _6991_xsp,_7040_i1 )]))))
            {
              {
                if ((_6996_rncodeatom == (int)0))
                {
                  {
                    int32_t _12216_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7040_i1 )];
                    int32_t _12217_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7040_i1 ),(int)1 )];
                    for (int32_t _7044_j = _12216_; _7044_j < _12217_; ++_7044_j)
                    {
                      {
                        _ptr__7032_ri64[safe_add( _7024_rnidxs,_7035_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7044_j )];
                        _ptr__7033_rf64[safe_add( _7027_rcof,_7035_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7044_j )] * 0.5);
                        ++ _7035_nzi;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int32_t _12218_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7040_i1 )];
                    int32_t _12219_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7040_i1 ),(int)1 )];
                    for (int32_t _7045_j = _12218_; _7045_j < _12219_; ++_7045_j)
                    {
                      {
                        _ptr__7032_ri64[safe_add( _7024_rnidxs,_7035_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7045_j )];
                        _ptr__7033_rf64[safe_add( _7027_rcof,_7035_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7045_j )] * 0.5);
                        int32_t _12220_ = _ptr__6983_wi32[safe_add( _6978_codeptr,_7045_j )];
                        int32_t _12221_ = _ptr__6983_wi32[safe_add( safe_add( _6978_codeptr,_7045_j ),(int)1 )];
                        for (int32_t _7046_k = _12220_; _7046_k < _12221_; ++_7046_k)
                        {
                          {
                            _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = _ptr__6983_wi32[safe_add( _6977_code,_7046_k )];
                            _ptr__7033_rf64[safe_add( _7030_rcconst,_7036_codei )] = _ptr__6985_wf64[safe_add( _6979_cconst,_7046_k )];
                            ++ _7036_codei;
                          }
                        }
                        _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = 2;
                        _ptr__7033_rf64[safe_add( _7030_rcconst,_7036_codei )] = 0.5;
                        ++ _7036_codei;
                        _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = 5;
                        ++ _7036_codei;
                        _ptr__7031_ri32[safe_add( safe_add( _7029_rcodeptr,_7035_nzi ),(int)1 )] = _7036_codei;
                        ++ _7035_nzi;
                      }
                    }
                  }
                }
                _ptr__7032_ri64[safe_add( _7026_rsp,_7037_elmi )] = _ptr__6984_wi64[safe_add( _6991_xsp,_7040_i1 )];
                _ptr__7031_ri32[safe_add( safe_add( _7023_rptr,_7037_elmi ),(int)1 )] = _7035_nzi;
                ++ _7037_elmi;
                ++ _7038_ii1;
              }
            }
            else if((_ptr__6984_wi64[safe_add( _6981_sp,_7039_i0 )] != _ptr__6993_xi64[safe_add( _6991_xsp,_7040_i1 )]))
            {
              {
                if ((_6996_rncodeatom == (int)0))
                {
                  {
                    int32_t _12222_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7039_i0 )];
                    int32_t _12223_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7039_i0 ),(int)1 )];
                    for (int32_t _7047_j = _12222_; _7047_j < _12223_; ++_7047_j)
                    {
                      {
                        _ptr__7032_ri64[safe_add( _7024_rnidxs,_7035_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7047_j )];
                        _ptr__7033_rf64[safe_add( _7027_rcof,_7035_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7047_j )] * 0.5);
                        ++ _7035_nzi;
                      }
                    }
                    int32_t _12224_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7040_i1 )];
                    int32_t _12225_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7040_i1 ),(int)1 )];
                    for (int32_t _7048_j = _12224_; _7048_j < _12225_; ++_7048_j)
                    {
                      {
                        _ptr__7032_ri64[safe_add( _7024_rnidxs,_7035_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7048_j )];
                        _ptr__7033_rf64[safe_add( _7027_rcof,_7035_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7048_j )] * 0.5);
                        ++ _7035_nzi;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int32_t _12226_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7039_i0 )];
                    int32_t _12227_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7039_i0 ),(int)1 )];
                    for (int32_t _7049_j = _12226_; _7049_j < _12227_; ++_7049_j)
                    {
                      {
                        _ptr__7032_ri64[safe_add( _7024_rnidxs,_7035_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7049_j )];
                        _ptr__7033_rf64[safe_add( _7027_rcof,_7035_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7049_j )] * 0.5);
                        int32_t _12228_ = _ptr__6983_wi32[safe_add( _6978_codeptr,_7049_j )];
                        int32_t _12229_ = _ptr__6983_wi32[safe_add( safe_add( _6978_codeptr,_7049_j ),(int)1 )];
                        for (int32_t _7050_k = _12228_; _7050_k < _12229_; ++_7050_k)
                        {
                          {
                            _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = _ptr__6983_wi32[safe_add( _6977_code,_7050_k )];
                            _ptr__7033_rf64[safe_add( _7030_rcconst,_7036_codei )] = _ptr__6985_wf64[safe_add( _6979_cconst,_7050_k )];
                            ++ _7036_codei;
                          }
                        }
                        _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = 2;
                        _ptr__7033_rf64[safe_add( _7030_rcconst,_7036_codei )] = 0.5;
                        ++ _7036_codei;
                        _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = 5;
                        ++ _7036_codei;
                        _ptr__7031_ri32[safe_add( safe_add( _7029_rcodeptr,_7035_nzi ),(int)1 )] = _7036_codei;
                        ++ _7035_nzi;
                      }
                    }
                    int32_t _12230_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7040_i1 )];
                    int32_t _12231_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7040_i1 ),(int)1 )];
                    for (int32_t _7051_j = _12230_; _7051_j < _12231_; ++_7051_j)
                    {
                      {
                        _ptr__7032_ri64[safe_add( _7024_rnidxs,_7035_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7051_j )];
                        _ptr__7033_rf64[safe_add( _7027_rcof,_7035_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7051_j )] * 0.5);
                        int32_t _12232_ = _ptr__6983_wi32[safe_add( _6978_codeptr,_7051_j )];
                        int32_t _12233_ = _ptr__6983_wi32[safe_add( safe_add( _6978_codeptr,_7051_j ),(int)1 )];
                        for (int32_t _7052_k = _12232_; _7052_k < _12233_; ++_7052_k)
                        {
                          {
                            _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = _ptr__6983_wi32[safe_add( _6977_code,_7052_k )];
                            _ptr__7033_rf64[safe_add( _7030_rcconst,_7036_codei )] = _ptr__6985_wf64[safe_add( _6979_cconst,_7052_k )];
                            ++ _7036_codei;
                          }
                        }
                        _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = 2;
                        _ptr__7033_rf64[safe_add( _7030_rcconst,_7036_codei )] = 0.5;
                        ++ _7036_codei;
                        _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = 5;
                        ++ _7036_codei;
                        _ptr__7031_ri32[safe_add( safe_add( _7029_rcodeptr,_7035_nzi ),(int)1 )] = _7036_codei;
                        ++ _7035_nzi;
                      }
                    }
                  }
                }
                _ptr__7032_ri64[safe_add( _7026_rsp,_7037_elmi )] = _ptr__6984_wi64[safe_add( _6981_sp,_7039_i0 )];
                _ptr__7031_ri32[safe_add( safe_add( _7023_rptr,_7037_elmi ),(int)1 )] = _7035_nzi;
                ++ _7037_elmi;
                ++ _7038_ii1;
                ++ _7039_i0;
              }
            }
            else
            {
              {
                if ((_6996_rncodeatom == (int)0))
                {
                  {
                    int32_t _12234_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7039_i0 )];
                    int32_t _12235_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7039_i0 ),(int)1 )];
                    for (int32_t _7053_j = _12234_; _7053_j < _12235_; ++_7053_j)
                    {
                      {
                        _ptr__7032_ri64[safe_add( _7024_rnidxs,_7035_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7053_j )];
                        _ptr__7033_rf64[safe_add( _7027_rcof,_7035_nzi )] = _ptr__6985_wf64[safe_add( _6982_cof,_7053_j )];
                        ++ _7035_nzi;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int32_t _12236_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7039_i0 )];
                    int32_t _12237_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7039_i0 ),(int)1 )];
                    for (int32_t _7054_j = _12236_; _7054_j < _12237_; ++_7054_j)
                    {
                      {
                        _ptr__7032_ri64[safe_add( _7024_rnidxs,_7035_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7054_j )];
                        _ptr__7033_rf64[safe_add( _7027_rcof,_7035_nzi )] = _ptr__6985_wf64[safe_add( _6982_cof,_7054_j )];
                        int32_t _12238_ = _ptr__6983_wi32[safe_add( _6978_codeptr,_7054_j )];
                        int32_t _12239_ = _ptr__6983_wi32[safe_add( safe_add( _6978_codeptr,_7054_j ),(int)1 )];
                        for (int32_t _7055_k = _12238_; _7055_k < _12239_; ++_7055_k)
                        {
                          {
                            _ptr__7031_ri32[safe_add( _7028_rcode,_7036_codei )] = _ptr__6983_wi32[safe_add( _6977_code,_7055_k )];
                            _ptr__7033_rf64[safe_add( _7030_rcconst,_7036_codei )] = _ptr__6985_wf64[safe_add( _6979_cconst,_7055_k )];
                            ++ _7036_codei;
                          }
                        }
                        _ptr__7031_ri32[safe_add( safe_add( _7029_rcodeptr,_7035_nzi ),(int)1 )] = _7036_codei;
                        ++ _7035_nzi;
                      }
                    }
                  }
                }
                _ptr__7032_ri64[safe_add( _7026_rsp,_7037_elmi )] = _ptr__6984_wi64[safe_add( _6981_sp,_7039_i0 )];
                _ptr__7031_ri32[safe_add( safe_add( _7023_rptr,_7037_elmi ),(int)1 )] = _7035_nzi;
                ++ _7037_elmi;
                ++ _7038_ii1;
                ++ _7039_i0;
              }
            }
          }
        }
        if ((_7035_nzi != _6995_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nzi"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      _6994_rnelem = _6972_nelem;
      _6995_rnnz = safe_mul( _6971_nnz,(int)2 );
      int32_t _12240_;
      bool _12241_ = (_6973_ncodeatom > (int)0);
      if (_12241_)
      {
        _12240_ = safe_add( safe_mul( (int)2,_6973_ncodeatom ),safe_mul( safe_mul( (int)2,(int)2 ),_6971_nnz ) );
      }
      else
      {
        _12240_ = (int)0;
      }
      _6996_rncodeatom = _12240_;
      int32_t _12242_ = (int)0;
      int32_t _12243_ = _ptr__6997_dim[(int)0];
      for (int32_t _7056_i0 = _12242_; _7056_i0 < _12243_; ++_7056_i0)
      {
        {
          int32_t _12244_ = (int)0;
          int32_t _12245_ = _ptr__6997_dim[(int)2];
          for (int32_t _7057_i2 = _12244_; _7057_i2 < _12245_; ++_7057_i2)
          {
            {
              int32_t _12246_ = (int)0;
              int32_t _12247_ = _ptr__6997_dim[(int)4];
              for (int32_t _7058_i4 = _12246_; _7058_i4 < _12247_; ++_7058_i4)
              {
                {
                  int32_t _12248_ = (int)0;
                  int32_t _12249_ = _ptr__6997_dim[(int)1];
                  for (int32_t _7059_i = _12248_; _7059_i < _12249_; ++_7059_i)
                  {
                    {
                      int64_t _7060_p = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__6999_stride[(int)0],_7056_i0 ),safe_mul( _ptr__6999_stride[(int)1],_7059_i ) ),safe_mul( _ptr__6999_stride[(int)2],_7057_i2 ) ),safe_mul( _ptr__6999_stride[(int)3],_7059_i ) ),safe_mul( _ptr__6999_stride[(int)4],_7058_i4 ) );
                      _6995_rnnz -= (_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7060_p ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7060_p )]);
                      if ((_6973_ncodeatom > (int)0))
                      {
                        {
                          _6996_rncodeatom -= safe_add( (_ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7060_p ),(int)1 )] )] - _ptr__6983_wi32[safe_add( _6978_codeptr,_ptr__6983_wi32[safe_add( _6976_ptr,_7060_p )] )]),safe_mul( safe_mul( (int)2,(int)2 ),(_ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7060_p ),(int)1 )] - _ptr__6983_wi32[safe_add( _6976_ptr,_7060_p )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
      _6966_rs->alloc_expr(_6970_nd,_6994_rnelem,_6995_rnnz,false,_6996_rncodeatom);
      int32_t _7061_rptr = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->ptr_base;
      int32_t _7062_rshape = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->shape_base;
      int32_t _7063_rcode = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->code_base;
      int32_t _7064_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->codeptr_base;
      int32_t _7065_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->nidxs_base;
      int32_t _7066_rsp = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->sp_base;
      int32_t _7067_rcof = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->cof_base;
      int32_t _7068_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7069_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__7069_ri32(_7069_ri32 ? _7069_ri32->raw() : nullptr,_7069_ri32 ? _7069_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7070_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__7070_ri64(_7070_ri64 ? _7070_ri64->raw() : nullptr,_7070_ri64 ? _7070_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7071_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->f64;
      _checked_ptr_1<double> _ptr__7071_rf64(_7071_rf64 ? _7071_rf64->raw() : nullptr,_7071_rf64 ? _7071_rf64->size(0) : 0);
      int32_t _7072_nzi = (int)0;
      int32_t _7073_relmi = (int)0;
      int32_t _7074_codei = (int)0;
      int32_t _12250_ = (int)0;
      int32_t _12251_ = _6970_nd;
      for (int32_t _7075_i = _12250_; _7075_i < _12251_; ++_7075_i)
      {
        {
          _ptr__7069_ri32[safe_add( _7062_rshape,_7075_i )] = _ptr__6983_wi32[safe_add( _6975_shape,_7075_i )];
        }
      }
      _ptr__7069_ri32[_7061_rptr] = (int)0;
      if ((_6996_rncodeatom > (int)0))
      {
        {
          _ptr__7069_ri32[_7064_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _7076_k = (int)0;
      int32_t _12252_ = (int)0;
      int32_t _12253_ = _ptr__6997_dim[(int)0];
      for (int32_t _7077_i0 = _12252_; _7077_i0 < _12253_; ++_7077_i0)
      {
        {
          int32_t _12254_ = (int)0;
          int32_t _12255_ = _ptr__6997_dim[(int)1];
          for (int32_t _7078_i1 = _12254_; _7078_i1 < _12255_; ++_7078_i1)
          {
            {
              int32_t _12256_ = (int)0;
              int32_t _12257_ = _ptr__6997_dim[(int)2];
              for (int32_t _7079_i2 = _12256_; _7079_i2 < _12257_; ++_7079_i2)
              {
                {
                  int32_t _12258_ = (int)0;
                  int32_t _12259_ = _ptr__6997_dim[(int)3];
                  for (int32_t _7080_i3 = _12258_; _7080_i3 < _12259_; ++_7080_i3)
                  {
                    {
                      int32_t _12260_ = (int)0;
                      int32_t _12261_ = _ptr__6997_dim[(int)4];
                      for (int32_t _7081_i4 = _12260_; _7081_i4 < _12261_; ++_7081_i4)
                      {
                        {
                          if ((_7078_i1 == _7080_i3))
                          {
                            {
                              if ((_6996_rncodeatom == (int)0))
                              {
                                {
                                  int32_t _12262_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7076_k )];
                                  int32_t _12263_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7076_k ),(int)1 )];
                                  for (int32_t _7082_j = _12262_; _7082_j < _12263_; ++_7082_j)
                                  {
                                    {
                                      _ptr__7070_ri64[safe_add( _7065_rnidxs,_7072_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7082_j )];
                                      _ptr__7071_rf64[safe_add( _7067_rcof,_7072_nzi )] = _ptr__6985_wf64[safe_add( _6982_cof,_7082_j )];
                                      ++ _7072_nzi;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int32_t _12264_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7076_k )];
                                  int32_t _12265_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7076_k ),(int)1 )];
                                  for (int32_t _7083_j = _12264_; _7083_j < _12265_; ++_7083_j)
                                  {
                                    {
                                      _ptr__7070_ri64[safe_add( _7065_rnidxs,_7072_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7083_j )];
                                      _ptr__7071_rf64[safe_add( _7067_rcof,_7072_nzi )] = _ptr__6985_wf64[safe_add( _6982_cof,_7083_j )];
                                      int32_t _12266_ = _ptr__6983_wi32[safe_add( _6978_codeptr,_7083_j )];
                                      int32_t _12267_ = _ptr__6983_wi32[safe_add( safe_add( _6978_codeptr,_7083_j ),(int)1 )];
                                      for (int32_t _7084_l = _12266_; _7084_l < _12267_; ++_7084_l)
                                      {
                                        {
                                          _ptr__7069_ri32[safe_add( _7063_rcode,_7074_codei )] = _ptr__6983_wi32[safe_add( _6977_code,_7084_l )];
                                          _ptr__7071_rf64[safe_add( _7068_rcconst,_7074_codei )] = _ptr__6985_wf64[safe_add( _6979_cconst,_7084_l )];
                                          ++ _7074_codei;
                                        }
                                      }
                                      _ptr__7069_ri32[safe_add( safe_add( _7064_rcodeptr,_7072_nzi ),(int)1 )] = _7074_codei;
                                      ++ _7072_nzi;
                                    }
                                  }
                                }
                              }
                              _ptr__7069_ri32[safe_add( safe_add( _7061_rptr,_7073_relmi ),(int)1 )] = _7072_nzi;
                              ++ _7076_k;
                            }
                          }
                          else
                          {
                            {
                              int64_t _7085_k2 = safe_add( safe_add( safe_add( safe_add( safe_mul( _7077_i0,_ptr__6999_stride[(int)0] ),safe_mul( _7080_i3,_ptr__6999_stride[(int)1] ) ),safe_mul( _7079_i2,_ptr__6999_stride[(int)2] ) ),safe_mul( _7078_i1,_ptr__6999_stride[(int)3] ) ),_7081_i4 );
                              if ((_6996_rncodeatom == (int)0))
                              {
                                {
                                  int32_t _12268_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7076_k )];
                                  int32_t _12269_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7076_k ),(int)1 )];
                                  for (int32_t _7086_j = _12268_; _7086_j < _12269_; ++_7086_j)
                                  {
                                    {
                                      _ptr__7070_ri64[safe_add( _7065_rnidxs,_7072_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7086_j )];
                                      _ptr__7071_rf64[safe_add( _7067_rcof,_7072_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7086_j )] * 0.5);
                                      ++ _7072_nzi;
                                    }
                                  }
                                  int32_t _12270_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7085_k2 )];
                                  int32_t _12271_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7085_k2 ),(int)1 )];
                                  for (int32_t _7087_j = _12270_; _7087_j < _12271_; ++_7087_j)
                                  {
                                    {
                                      _ptr__7070_ri64[safe_add( _7065_rnidxs,_7072_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7087_j )];
                                      _ptr__7071_rf64[safe_add( _7067_rcof,_7072_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7087_j )] * 0.5);
                                      ++ _7072_nzi;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int32_t _12272_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7076_k )];
                                  int32_t _12273_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7076_k ),(int)1 )];
                                  for (int32_t _7088_j = _12272_; _7088_j < _12273_; ++_7088_j)
                                  {
                                    {
                                      _ptr__7070_ri64[safe_add( _7065_rnidxs,_7072_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7088_j )];
                                      _ptr__7071_rf64[safe_add( _7067_rcof,_7072_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7088_j )] * 0.5);
                                      int32_t _12274_ = _ptr__6983_wi32[safe_add( _6978_codeptr,_7088_j )];
                                      int32_t _12275_ = _ptr__6983_wi32[safe_add( safe_add( _6978_codeptr,_7088_j ),(int)1 )];
                                      for (int32_t _7089_l = _12274_; _7089_l < _12275_; ++_7089_l)
                                      {
                                        {
                                          _ptr__7069_ri32[safe_add( _7063_rcode,_7074_codei )] = _ptr__6983_wi32[safe_add( _6977_code,_7089_l )];
                                          _ptr__7071_rf64[safe_add( _7068_rcconst,_7074_codei )] = _ptr__6985_wf64[safe_add( _6979_cconst,_7089_l )];
                                          ++ _7074_codei;
                                        }
                                      }
                                      _ptr__7069_ri32[safe_add( _7063_rcode,_7074_codei )] = 2;
                                      _ptr__7071_rf64[safe_add( _7068_rcconst,_7074_codei )] = 0.5;
                                      ++ _7074_codei;
                                      _ptr__7069_ri32[safe_add( _7063_rcode,_7074_codei )] = 5;
                                      ++ _7074_codei;
                                      _ptr__7069_ri32[safe_add( safe_add( _7064_rcodeptr,_7072_nzi ),(int)1 )] = _7074_codei;
                                      ++ _7072_nzi;
                                    }
                                  }
                                  int32_t _12276_ = _ptr__6983_wi32[safe_add( _6976_ptr,_7085_k2 )];
                                  int32_t _12277_ = _ptr__6983_wi32[safe_add( safe_add( _6976_ptr,_7085_k2 ),(int)1 )];
                                  for (int32_t _7090_j = _12276_; _7090_j < _12277_; ++_7090_j)
                                  {
                                    {
                                      _ptr__7070_ri64[safe_add( _7065_rnidxs,_7072_nzi )] = _ptr__6984_wi64[safe_add( _6980_nidxs,_7090_j )];
                                      _ptr__7071_rf64[safe_add( _7067_rcof,_7072_nzi )] = (_ptr__6985_wf64[safe_add( _6982_cof,_7090_j )] * 0.5);
                                      int32_t _12278_ = _ptr__6983_wi32[safe_add( _6978_codeptr,_7090_j )];
                                      int32_t _12279_ = _ptr__6983_wi32[safe_add( safe_add( _6978_codeptr,_7090_j ),(int)1 )];
                                      for (int32_t _7091_l = _12278_; _7091_l < _12279_; ++_7091_l)
                                      {
                                        {
                                          _ptr__7069_ri32[safe_add( _7063_rcode,_7074_codei )] = _ptr__6983_wi32[safe_add( _6977_code,_7091_l )];
                                          _ptr__7071_rf64[safe_add( _7068_rcconst,_7074_codei )] = _ptr__6985_wf64[safe_add( _6979_cconst,_7091_l )];
                                          ++ _7074_codei;
                                        }
                                      }
                                      _ptr__7069_ri32[safe_add( _7063_rcode,_7074_codei )] = 2;
                                      _ptr__7071_rf64[safe_add( _7068_rcconst,_7074_codei )] = 0.5;
                                      ++ _7074_codei;
                                      _ptr__7069_ri32[safe_add( _7063_rcode,_7074_codei )] = 5;
                                      ++ _7074_codei;
                                      _ptr__7069_ri32[safe_add( safe_add( _7064_rcodeptr,_7072_nzi ),(int)1 )] = _7074_codei;
                                      ++ _7072_nzi;
                                    }
                                  }
                                }
                              }
                              _ptr__7069_ri32[safe_add( safe_add( _7061_rptr,_7073_relmi ),(int)1 )] = _7072_nzi;
                              ++ _7076_k;
                            }
                          }
                          ++ _7073_relmi;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_7072_nzi != _6995_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
        }
      }
      {}
      if ((_7073_relmi != _6994_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  _6968_xs->clear();
  _6966_rs->peek_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->nnz != ((*mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->ptr_base,mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->nelem )))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
  if ((((*mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6966_rs)->ptr_base)) != (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
}
// End mosek.fusion.ExprSymmetrize.eval

// Begin mosek.fusion.ExprSymmetrize.toString
// Method mosek.fusion.ExprSymmetrize.toString @ src/fusion/ExprShape.monty:153:6-155:7
std::string mosek::fusion::ExprSymmetrize :: toString() { return mosek::fusion::p_ExprSymmetrize::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprSymmetrize::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSymmetrize(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprSymmetrize.toString

void mosek::fusion::p_ExprSymmetrize::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }
// } class ExprSymmetrize
// class ExprCondense { // @ src/fusion/ExprShape.monty:102:4-135:5
mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }
mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprCondense::p_ExprCondense
  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprCondense.ctor @ src/fusion/ExprShape.monty:104:6-107:7
mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense
  (monty::rc_ptr< ::mosek::fusion::Expression > _7092_expr)
{ return new mosek::fusion::ExprCondense(_7092_expr); }
mosek::fusion::ExprCondense::ExprCondense
  (monty::rc_ptr< ::mosek::fusion::Expression > _7092_expr) : 
   ExprCondense(new mosek::fusion::p_ExprCondense(this))
{ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_7092_expr); }
void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _7092_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_7092_expr->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _7092_expr;
  }
}
// mosek.fusion.ExprCondense.ctor

// Begin mosek.fusion.ExprCondense.eval
// Method mosek.fusion.ExprCondense.eval @ src/fusion/ExprShape.monty:113:6-134:7
void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7093_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7094_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7095_xs) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_7093_rs,_7094_ws,_7095_xs); }
void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7093_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7094_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7095_xs)
{
  expr->eval(_7093_rs,_7094_ws,_7095_xs);
  _7093_rs->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_7093_rs)->hassp)
  {
    {
      int32_t _7096_nd = _7093_rs->popi32();
      _7093_rs->popi32(_7096_nd);
      int32_t _7097_nelem = _7093_rs->popi32();
      int32_t _7098_nnz = _7093_rs->popi32();
      _7093_rs->popi32();
      _7093_rs->popi64(_7097_nelem);
      _7093_rs->pushi32((int)0);
      _7093_rs->pushi32(_7098_nnz);
      _7093_rs->pushi32(_7097_nelem);
      _7093_rs->pushi32(_7097_nelem);
      _7093_rs->pushi32((int)1);
      _7093_rs->peek_expr();
    }
  }
  {}
}
// End mosek.fusion.ExprCondense.eval

// Begin mosek.fusion.ExprCondense.toString
// Method mosek.fusion.ExprCondense.toString @ src/fusion/ExprShape.monty:109:6-111:7
std::string mosek::fusion::ExprCondense :: toString() { return mosek::fusion::p_ExprCondense::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprCondense::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCondense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprCondense.toString

void mosek::fusion::p_ExprCondense::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }
// } class ExprCondense
// class ExprFromVar { // @ src/fusion/ExprShape.monty:51:4-91:5
mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }
mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprFromVar::p_ExprFromVar
  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprFromVar.ctor @ src/fusion/ExprShape.monty:53:6-56:7
mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar
  (monty::rc_ptr< ::mosek::fusion::Variable > _7099_x)
{ return new mosek::fusion::ExprFromVar(_7099_x); }
mosek::fusion::ExprFromVar::ExprFromVar
  (monty::rc_ptr< ::mosek::fusion::Variable > _7099_x) : 
   ExprFromVar(new mosek::fusion::p_ExprFromVar(this))
{ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_7099_x); }
void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _7099_x)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_7099_x->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _7099_x;
  }
}
// mosek.fusion.ExprFromVar.ctor

// Begin mosek.fusion.ExprFromVar.eval
// Method mosek.fusion.ExprFromVar.eval @ src/fusion/ExprShape.monty:62:6-90:7
void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7100_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7101_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7102_xs) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_7100_rs,_7101_ws,_7102_xs); }
void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7100_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7101_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7102_xs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7103_shape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__7103_shape(_7103_shape ? _7103_shape->raw() : nullptr,_7103_shape ? _7103_shape->size(0) : 0);
  int64_t _7104_size = ::mosek::fusion::p_Set::size(_7103_shape);
  int32_t _7105_nelm = x->numInst();
  int32_t _7106_nnz = _7105_nelm;
  bool _7107_hassp = (_7104_size > _7105_nelm);
  _7100_rs->alloc_expr((int)((_7103_shape)->size(0)),_7105_nelm,_7106_nnz,_7107_hassp);
  int32_t _7108_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_7100_rs)->ptr_base;
  int32_t _7109_nidx_base = mosek::fusion::p_WorkStack::_get_impl(_7100_rs)->nidxs_base;
  int32_t _7110_nsp_base = mosek::fusion::p_WorkStack::_get_impl(_7100_rs)->sp_base;
  int32_t _7111_cof_base = mosek::fusion::p_WorkStack::_get_impl(_7100_rs)->cof_base;
  int32_t _7112_shape_base = mosek::fusion::p_WorkStack::_get_impl(_7100_rs)->shape_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7113_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7100_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__7113_ri32(_7113_ri32 ? _7113_ri32->raw() : nullptr,_7113_ri32 ? _7113_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7114_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7100_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__7114_ri64(_7114_ri64 ? _7114_ri64->raw() : nullptr,_7114_ri64 ? _7114_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7115_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7100_rs)->f64;
  _checked_ptr_1<double> _ptr__7115_rf64(_7115_rf64 ? _7115_rf64->raw() : nullptr,_7115_rf64 ? _7115_rf64->size(0) : 0);
  int32_t _12280_ = (int)0;
  int32_t _12281_ = (int)((_7103_shape)->size(0));
  for (int32_t _7116_i = _12280_; _7116_i < _12281_; ++_7116_i)
  {
    {
      _ptr__7113_ri32[safe_add( _7112_shape_base,_7116_i )] = _ptr__7103_shape[_7116_i];
    }
  }
  {
    int32_t _12282_ = (int)0;
    int32_t _12283_ = safe_add( _7105_nelm,(int)1 );
    for (int32_t _7117_i = _12282_; _7117_i < _12283_; ++_7117_i)
    {
      {
        _ptr__7113_ri32[safe_add( _7108_ptr_base,_7117_i )] = _7117_i;
      }
    }
    int32_t _12284_ = (int)0;
    int32_t _12285_ = _7106_nnz;
    for (int32_t _7118_i = _12284_; _7118_i < _12285_; ++_7118_i)
    {
      {
        _ptr__7115_rf64[safe_add( _7111_cof_base,_7118_i )] = 1.0;
      }
    }
  }
  if (_7107_hassp)
  {
    {
      x->inst(_7110_nsp_base,_7114_ri64,_7109_nidx_base,_7114_ri64);
    }
  }
  else
  {
    {
      x->inst(_7109_nidx_base,_7114_ri64);
    }
  }
}
// End mosek.fusion.ExprFromVar.eval

// Begin mosek.fusion.ExprFromVar.toString
// Method mosek.fusion.ExprFromVar.toString @ src/fusion/ExprShape.monty:58:6-60:7
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprFromVar::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprFromVar.toString

void mosek::fusion::p_ExprFromVar::destroy()
{
  x.reset();
}
void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }
// } class ExprFromVar
// class ExprReshape { // @ src/fusion/ExprShape.monty:5:4-43:5
mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }
mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprReshape::p_ExprReshape
  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprReshape.ctor @ src/fusion/ExprShape.monty:7:6-14:7
mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7119_shape,
    monty::rc_ptr< ::mosek::fusion::Expression > _7120_e)
{ return new mosek::fusion::ExprReshape(_7119_shape,_7120_e); }
mosek::fusion::ExprReshape::ExprReshape
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7119_shape,
    monty::rc_ptr< ::mosek::fusion::Expression > _7120_e) : 
   ExprReshape(new mosek::fusion::p_ExprReshape(this))
{ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_7119_shape,_7120_e); }
void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7119_shape,
    monty::rc_ptr< ::mosek::fusion::Expression > _7120_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7119_shape(_7119_shape ? _7119_shape->raw() : nullptr, _7119_shape ? _7119_shape->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_7119_shape));
    int64_t _7121_esize = _7120_e->getSize();
    if ((::mosek::fusion::p_Set::size(_7119_shape) != _7120_e->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _7120_e;
  }
}
// mosek.fusion.ExprReshape.ctor

// Begin mosek.fusion.ExprReshape.eval
// Method mosek.fusion.ExprReshape.eval @ src/fusion/ExprShape.monty:27:6-42:7
void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7122_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7123_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7124_xs) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_7122_rs,_7123_ws,_7124_xs); }
void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7122_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7123_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7124_xs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7125_eshape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__7125_eshape(_7125_eshape ? _7125_eshape->raw() : nullptr,_7125_eshape ? _7125_eshape->size(0) : 0);
  e->eval(_7122_rs,_7123_ws,_7124_xs);
  _7122_rs->peek_expr();
  int32_t _7126_nd = _7122_rs->popi32();
  int64_t _7127_sz = (int)1;
  int32_t _12286_ = (int)0;
  int32_t _12287_ = _7126_nd;
  for (int32_t _7128_i = _12286_; _7128_i < _12287_; ++_7128_i)
  {
    {
      _7127_sz *= _7122_rs->popi32();
    }
  }
  if ((_7127_sz != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int32_t _12288_ = (int)0;
  int32_t _12289_ = (int)((_7125_eshape)->size(0));
  for (int32_t _7129_i = _12288_; _7129_i < _12289_; ++_7129_i)
  {
    {
      _7122_rs->pushi32(_ptr__7125_eshape[_7129_i]);
    }
  }
  _7122_rs->pushi32((int)((_7125_eshape)->size(0)));
}
// End mosek.fusion.ExprReshape.eval

// Begin mosek.fusion.ExprReshape.toString
// Method mosek.fusion.ExprReshape.toString @ src/fusion/ExprShape.monty:16:6-25:7
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprReshape::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7130_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _7130_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int32_t _12290_ = (int)1;
      int32_t _12291_ = _pubthis->getND();
      for (int32_t _7131_i = _12290_; _7131_i < _12291_; ++_7131_i)
      {
        {
          _7130_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_7131_i));
        }
      }
    }
  }
  {}
  _7130_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _7130_sb->toString();
}
// End mosek.fusion.ExprReshape.toString

void mosek::fusion::p_ExprReshape::destroy()
{
  e.reset();
}
void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }
// } class ExprReshape
// class BaseExpression { // @ src/fusion/BaseExpression.monty:400:4-485:5
mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }
mosek::fusion::p_BaseExpression::p_BaseExpression
  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.BaseExpression.ctor @ src/fusion/BaseExpression.monty:403:6-405:7
void mosek::fusion::p_BaseExpression::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7132_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7132_shape(_7132_shape ? _7132_shape->raw() : nullptr, _7132_shape ? _7132_shape->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _7132_shape;
  }
}
// mosek.fusion.BaseExpression.ctor

// Begin mosek.fusion.BaseExpression.toString
// Method mosek.fusion.BaseExpression.toString @ src/fusion/BaseExpression.monty:484:6-64
std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }
std::string mosek::fusion::p_BaseExpression::toString()
{
  return std::string ("Expression()");
}
// End mosek.fusion.BaseExpression.toString

// Begin mosek.fusion.BaseExpression.printStack
// Method mosek.fusion.BaseExpression.printStack @ src/fusion/BaseExpression.monty:437:6-482:7
void mosek::fusion::p_BaseExpression::printStack(monty::rc_ptr< ::mosek::fusion::WorkStack > _7133_rs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7134_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__7134_ri32(_7134_ri32 ? _7134_ri32->raw() : nullptr,_7134_ri32 ? _7134_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7135_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__7135_ri64(_7135_ri64 ? _7135_ri64->raw() : nullptr,_7135_ri64 ? _7135_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7136_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->f64;
  _checked_ptr_1<double> _ptr__7136_rf64(_7136_rf64 ? _7136_rf64->raw() : nullptr,_7136_rf64 ? _7136_rf64->size(0) : 0);
  int32_t _7137_rptr = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->ptr_base;
  int32_t _7138_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->nidxs_base;
  int32_t _7139_rcof = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->cof_base;
  int32_t _7140_rshape = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->shape_base;
  int32_t _7141_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->codeptr_base;
  int32_t _7142_rcode = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->code_base;
  int32_t _7143_rcconst = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->cconst_base;
  int32_t _7144_rsp = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->sp_base;
  int32_t _7145_rnelem = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->nelem;
  int32_t _7146_rnnz = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->nnz;
  int32_t _7147_rncodeatom = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->ncodeatom;
  int32_t _7148_rnd = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->nd;
  bool _7149_rhassp = mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->hassp;
  std::vector<int32_t> _12292_;
  for (int32_t _7150_i = (int)0, _12293_ = _7148_rnd; _7150_i < _12293_ ; ++_7150_i)
  {
    _12292_.push_back(_ptr__7134_ri32[safe_add( _7140_rshape,_7150_i )]);
  }
  auto _12294_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12292_.size()),_12292_.begin(),_12292_.end()));
  std::vector<int32_t> _12295_;
  for (int32_t _7151_i = (int)0, _12296_ = safe_add( _7145_rnelem,(int)1 ); _7151_i < _12296_ ; ++_7151_i)
  {
    _12295_.push_back(_ptr__7134_ri32[safe_add( _7137_rptr,_7151_i )]);
  }
  auto _12297_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12295_.size()),_12295_.begin(),_12295_.end()));
  ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("### "))->__mosek_2fusion_2Debug__p(_pubthis->toString())->__mosek_2fusion_2Debug__p(std::string (" ###"))->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nelem     = "))->__mosek_2fusion_2Debug__p(_7145_rnelem)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nnz       = "))->__mosek_2fusion_2Debug__p(_7146_rnnz)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  hassp     = "))->__mosek_2fusion_2Debug__p(_7149_rhassp)->__mosek_2fusion_2Debug__p(std::string (" / "))->__mosek_2fusion_2Debug__p(_ptr__7134_ri32[((mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->pi32 - _7148_rnd) - (int)4)])->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  shape     = "))->__mosek_2fusion_2Debug__p(_12294_)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  ptr       = "))->__mosek_2fusion_2Debug__p(_12297_)->__mosek_2fusion_2Debug__lf();
  if (mosek::fusion::p_WorkStack::_get_impl(_7133_rs)->hassp)
  {
    {
      std::vector<int64_t> _12298_;
      for (int32_t _7152_i = (int)0, _12299_ = _7145_rnelem; _7152_i < _12299_ ; ++_7152_i)
      {
        _12298_.push_back(_ptr__7135_ri64[safe_add( _7144_rsp,_7152_i )]);
      }
      auto _12300_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12298_.size()),_12298_.begin(),_12298_.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  sp       = "))->__mosek_2fusion_2Debug__p(_12300_)->__mosek_2fusion_2Debug__lf();
    }
  }
  {}
  int32_t _12301_ = (int)0;
  int32_t _12302_ = _7145_rnelem;
  for (int32_t _7153_i = _12301_; _7153_i < _12302_; ++_7153_i)
  {
    {
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  row["))->__mosek_2fusion_2Debug__p(_7153_i)->__mosek_2fusion_2Debug__p(std::string ("]"))->__mosek_2fusion_2Debug__lf();
      std::vector<int64_t> _12303_;
      for (int32_t _7154_j = _ptr__7134_ri32[safe_add( _7137_rptr,_7153_i )], _12304_ = _ptr__7134_ri32[safe_add( safe_add( _7137_rptr,_7153_i ),(int)1 )]; _7154_j < _12304_ ; ++_7154_j)
      {
        _12303_.push_back(_ptr__7135_ri64[safe_add( _7138_rnidxs,_7154_j )]);
      }
      auto _12305_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12303_.size()),_12303_.begin(),_12303_.end()));
      std::vector<double> _12306_;
      for (int32_t _7155_j = _ptr__7134_ri32[safe_add( _7137_rptr,_7153_i )], _12307_ = _ptr__7134_ri32[safe_add( safe_add( _7137_rptr,_7153_i ),(int)1 )]; _7155_j < _12307_ ; ++_7155_j)
      {
        _12306_.push_back(_ptr__7136_rf64[safe_add( _7139_rcof,_7155_j )]);
      }
      auto _12308_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12306_.size()),_12306_.begin(),_12306_.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("    nidx : "))->__mosek_2fusion_2Debug__p(_12305_)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("    cof  : "))->__mosek_2fusion_2Debug__p(_12308_)->__mosek_2fusion_2Debug__lf();
      if ((_7147_rncodeatom > (int)0))
      {
        {
          int32_t _12309_ = _ptr__7134_ri32[safe_add( _7137_rptr,_7153_i )];
          int32_t _12310_ = _ptr__7134_ri32[safe_add( safe_add( _7137_rptr,_7153_i ),(int)1 )];
          for (int32_t _7156_j = _12309_; _7156_j < _12310_; ++_7156_j)
          {
            {
              std::vector<int32_t> _12311_;
              for (int32_t _7157_k = _ptr__7134_ri32[safe_add( _7141_rcodeptr,_7156_j )], _12312_ = _ptr__7134_ri32[safe_add( safe_add( _7141_rcodeptr,_7156_j ),(int)1 )]; _7157_k < _12312_ ; ++_7157_k)
              {
                _12311_.push_back(_ptr__7134_ri32[safe_add( _7142_rcode,_7157_k )]);
              }
              auto _12313_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12311_.size()),_12311_.begin(),_12311_.end()));
              std::vector<double> _12314_;
              for (int32_t _7158_k = _ptr__7134_ri32[safe_add( _7141_rcodeptr,_7156_j )], _12315_ = _ptr__7134_ri32[safe_add( safe_add( _7141_rcodeptr,_7156_j ),(int)1 )]; _7158_k < _12315_ ; ++_7158_k)
              {
                _12314_.push_back(_ptr__7136_rf64[safe_add( _7143_rcconst,_7158_k )]);
              }
              auto _12316_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12314_.size()),_12314_.begin(),_12314_.end()));
              ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("      code["))->__mosek_2fusion_2Debug__p(_ptr__7135_ri64[safe_add( _7138_rnidxs,_7156_j )])->__mosek_2fusion_2Debug__p(std::string ("] "))->__mosek_2fusion_2Debug__p(_12313_)->__mosek_2fusion_2Debug__p(_12316_)->__mosek_2fusion_2Debug__lf();
            }
          }
        }
      }
      {}
    }
  }
}
// End mosek.fusion.BaseExpression.printStack

// Begin mosek.fusion.BaseExpression.eval
// End mosek.fusion.BaseExpression.eval

// Begin mosek.fusion.BaseExpression.pick
// Method mosek.fusion.BaseExpression.pick @ src/fusion/BaseExpression.monty:430:6-432:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7162_indexrows) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_7162_indexrows); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7162_indexrows) { return __mosek_2fusion_2BaseExpression__pick(_7162_indexrows); }
/* override: mosek.fusion.Expression.pick*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7162_indexrows) { return __mosek_2fusion_2BaseExpression__pick(_7162_indexrows); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7162_indexrows)
{
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7162_indexrows)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.pick

// Begin mosek.fusion.BaseExpression.pick
// Method mosek.fusion.BaseExpression.pick @ src/fusion/BaseExpression.monty:426:6-429:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7163_indexes) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_7163_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7163_indexes) { return __mosek_2fusion_2BaseExpression__pick(_7163_indexes); }
/* override: mosek.fusion.Expression.pick*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7163_indexes) { return __mosek_2fusion_2BaseExpression__pick(_7163_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7163_indexes)
{
  _checked_ptr_1<int32_t> _ptr__7163_indexes(_7163_indexes ? _7163_indexes->raw() : nullptr, _7163_indexes ? _7163_indexes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7164_idxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_7163_indexes)->size(0)),(int)1)));
  int32_t _12317_ = (int)0;
  int32_t _12318_ = (int)((_7163_indexes)->size(0));
  for (int32_t _7165_i = _12317_; _7165_i < _12318_; ++_7165_i)
  {
    {
      ((*_7164_idxs)(_7165_i,(int)0)) = _ptr__7163_indexes[_7165_i];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7164_idxs)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.pick

// Begin mosek.fusion.BaseExpression.index
// Method mosek.fusion.BaseExpression.index @ src/fusion/BaseExpression.monty:422:6-425:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7166_indexes) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_7166_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7166_indexes) { return __mosek_2fusion_2BaseExpression__index(_7166_indexes); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7166_indexes) { return __mosek_2fusion_2BaseExpression__index(_7166_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7166_indexes)
{
  _checked_ptr_1<int32_t> _ptr__7166_indexes(_7166_indexes ? _7166_indexes->raw() : nullptr, _7166_indexes ? _7166_indexes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7167_idxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)1,(int)((_7166_indexes)->size(0)))));
  int32_t _12319_ = (int)0;
  int32_t _12320_ = (int)((_7166_indexes)->size(0));
  for (int32_t _7168_i = _12319_; _7168_i < _12320_; ++_7168_i)
  {
    {
      ((*_7167_idxs)((int)0,_7168_i)) = _ptr__7166_indexes[_7168_i];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7167_idxs)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.index

// Begin mosek.fusion.BaseExpression.index
// Method mosek.fusion.BaseExpression.index @ src/fusion/BaseExpression.monty:418:6-421:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int32_t _7169_i) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_7169_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int32_t _7169_i) { return __mosek_2fusion_2BaseExpression__index(_7169_i); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int32_t _7169_i) { return __mosek_2fusion_2BaseExpression__index(_7169_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int32_t _7169_i)
{
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7170_idxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)1,(int)1)));
  ((*_7170_idxs)((int)0,(int)0)) = _7169_i;
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7170_idxs)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.index

// Begin mosek.fusion.BaseExpression.slice
// Method mosek.fusion.BaseExpression.slice @ src/fusion/BaseExpression.monty:415:6-417:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7171_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7172_lasta) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_7171_firsta,_7172_lasta); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7171_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7172_lasta) { return __mosek_2fusion_2BaseExpression__slice(_7171_firsta,_7172_lasta); }
/* override: mosek.fusion.Expression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7171_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7172_lasta) { return __mosek_2fusion_2BaseExpression__slice(_7171_firsta,_7172_lasta); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7171_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7172_lasta)
{
  _checked_ptr_1<int32_t> _ptr__7171_firsta(_7171_firsta ? _7171_firsta->raw() : nullptr, _7171_firsta ? _7171_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7172_lasta(_7172_lasta ? _7172_lasta->raw() : nullptr, _7172_lasta ? _7172_lasta->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7171_firsta,_7172_lasta)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.slice

// Begin mosek.fusion.BaseExpression.slice
// Method mosek.fusion.BaseExpression.slice @ src/fusion/BaseExpression.monty:412:6-414:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int32_t _7173_first,int32_t _7174_last) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_7173_first,_7174_last); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int32_t _7173_first,int32_t _7174_last) { return __mosek_2fusion_2BaseExpression__slice(_7173_first,_7174_last); }
/* override: mosek.fusion.Expression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int32_t _7173_first,int32_t _7174_last) { return __mosek_2fusion_2BaseExpression__slice(_7173_first,_7174_last); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int32_t _7173_first,int32_t _7174_last)
{
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7173_first)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7174_last)}))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.slice

// Begin mosek.fusion.BaseExpression.getSize
// Method mosek.fusion.BaseExpression.getSize @ src/fusion/BaseExpression.monty:410:6-64
int64_t mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }
int64_t mosek::fusion::p_BaseExpression::getSize()
{
  return ::mosek::fusion::p_Set::size(shape);
}
// End mosek.fusion.BaseExpression.getSize

// Begin mosek.fusion.BaseExpression.getND
// Method mosek.fusion.BaseExpression.getND @ src/fusion/BaseExpression.monty:409:6-59
int32_t mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_BaseExpression::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.BaseExpression.getND

// Begin mosek.fusion.BaseExpression.getDim
// Method mosek.fusion.BaseExpression.getDim @ src/fusion/BaseExpression.monty:408:6-64
int32_t mosek::fusion::BaseExpression :: getDim(int32_t _7175_d) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_7175_d); }
int32_t mosek::fusion::p_BaseExpression::getDim(int32_t _7175_d)
{
  return ((*shape)(_7175_d));
}
// End mosek.fusion.BaseExpression.getDim

// Begin mosek.fusion.BaseExpression.getShape
// Method mosek.fusion.BaseExpression.getShape @ src/fusion/BaseExpression.monty:407:6-79
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_BaseExpression::getShape()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
// End mosek.fusion.BaseExpression.getShape

void mosek::fusion::p_BaseExpression::destroy()
{
  shape.reset();
}
void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }
// } class BaseExpression
// class WorkStack { // @ src/fusion/BaseExpression.monty:46:4-395:5
mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }
mosek::fusion::p_WorkStack::p_WorkStack
  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis)
{}
int32_t mosek::fusion::WorkStack::get_code_base() { return _impl->code_base; }
void mosek::fusion::WorkStack::set_code_base(int32_t _val) { _impl->code_base = _val; }
int32_t mosek::fusion::WorkStack::get_cconst_base() { return _impl->cconst_base; }
void mosek::fusion::WorkStack::set_cconst_base(int32_t _val) { _impl->cconst_base = _val; }
int32_t mosek::fusion::WorkStack::get_codeptr_base() { return _impl->codeptr_base; }
void mosek::fusion::WorkStack::set_codeptr_base(int32_t _val) { _impl->codeptr_base = _val; }
int32_t mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int32_t _val) { _impl->cof_base = _val; }
int32_t mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int32_t _val) { _impl->nidxs_base = _val; }
int32_t mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int32_t _val) { _impl->sp_base = _val; }
int32_t mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int32_t _val) { _impl->shape_base = _val; }
int32_t mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int32_t _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int32_t mosek::fusion::WorkStack::get_ncodeatom() { return _impl->ncodeatom; }
void mosek::fusion::WorkStack::set_ncodeatom(int32_t _val) { _impl->ncodeatom = _val; }
int32_t mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int32_t _val) { _impl->nelem = _val; }
int32_t mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int32_t _val) { _impl->nnz = _val; }
int32_t mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int32_t _val) { _impl->nd = _val; }
int32_t mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int32_t _val) { _impl->pf64 = _val; }
int32_t mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int32_t _val) { _impl->pi64 = _val; }
int32_t mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int32_t _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< int64_t,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->i32 = _val; }
// mosek.fusion.WorkStack.ctor @ src/fusion/BaseExpression.monty:212:6-236:7
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack
  ()
{ return new mosek::fusion::WorkStack(); }
mosek::fusion::WorkStack::WorkStack
  () : 
   WorkStack(new mosek::fusion::p_WorkStack(this))
{ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }
void mosek::fusion::p_WorkStack::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    i32 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)256)));
    i64 = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)256)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)256)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ncodeatom = (int)0;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    cof_base = (int)0;
    cconst_base = (int)0;
    code_base = (int)0;
    codeptr_base = (int)0;
  }
}
// mosek.fusion.WorkStack.ctor

// Begin mosek.fusion.WorkStack.formatCurrent
// Method mosek.fusion.WorkStack.formatCurrent @ src/fusion/BaseExpression.monty:366:6-394:7
std::string mosek::fusion::WorkStack :: formatCurrent() { return mosek::fusion::p_WorkStack::_get_impl(this)->formatCurrent(); }
std::string mosek::fusion::p_WorkStack::formatCurrent()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7176_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  std::vector<int32_t> _12321_;
  for (int32_t _7177_i = (int)0, _12322_ = nd; _7177_i < _12322_ ; ++_7177_i)
  {
    _12321_.push_back(((*i32)(safe_add( shape_base,_7177_i ))));
  }
  auto _12323_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12321_.size()),_12321_.begin(),_12321_.end()));
  std::vector<int32_t> _12324_;
  for (int32_t _7178_i = (int)0, _12325_ = safe_add( nelem,(int)1 ); _7178_i < _12325_ ; ++_7178_i)
  {
    _12324_.push_back(((*i32)(safe_add( ptr_base,_7178_i ))));
  }
  auto _12326_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12324_.size()),_12324_.begin(),_12324_.end()));
  _7176_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nelem     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nelem)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nnz       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nnz)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  hassp     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" / "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  shape     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12323_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  ptr       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12326_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
  if ((ncodeatom > (int)0))
  {
    {
      std::vector<int32_t> _12327_;
      for (int32_t _7179_i = (int)0, _12328_ = safe_add( nnz,(int)1 ); _7179_i < _12328_ ; ++_7179_i)
      {
        _12327_.push_back(((*i32)(safe_add( codeptr_base,_7179_i ))));
      }
      auto _12329_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12327_.size()),_12327_.begin(),_12327_.end()));
      _7176_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  codeptr   = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12329_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  if (hassp)
  {
    {
      std::vector<int64_t> _12330_;
      for (int32_t _7180_i = (int)0, _12331_ = nelem; _7180_i < _12331_ ; ++_7180_i)
      {
        _12330_.push_back(((*i64)(safe_add( sp_base,_7180_i ))));
      }
      auto _12332_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12330_.size()),_12330_.begin(),_12330_.end()));
      _7176_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  sp        = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12332_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  int32_t _12333_ = (int)0;
  int32_t _12334_ = nelem;
  for (int32_t _7181_i = _12333_; _7181_i < _12334_; ++_7181_i)
  {
    {
      std::vector<int64_t> _12335_;
      for (int32_t _7182_j = ((*i32)(safe_add( ptr_base,_7181_i ))), _12336_ = ((*i32)(safe_add( safe_add( ptr_base,_7181_i ),(int)1 ))); _7182_j < _12336_ ; ++_7182_j)
      {
        _12335_.push_back(((*i64)(safe_add( nidxs_base,_7182_j ))));
      }
      auto _12337_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12335_.size()),_12335_.begin(),_12335_.end()));
      std::vector<double> _12338_;
      for (int32_t _7183_j = ((*i32)(safe_add( ptr_base,_7181_i ))), _12339_ = ((*i32)(safe_add( safe_add( ptr_base,_7181_i ),(int)1 ))); _7183_j < _12339_ ; ++_7183_j)
      {
        _12338_.push_back(((*f64)(safe_add( cof_base,_7183_j ))));
      }
      auto _12340_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12338_.size()),_12338_.begin(),_12338_.end()));
      _7176_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  row["))->__mosek_2fusion_2Utils_2StringBuffer__a(_7181_i)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    nidx : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12337_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    cof  : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12340_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
      if ((ncodeatom > (int)0))
      {
        {
          int32_t _12341_ = ((*i32)(safe_add( ptr_base,_7181_i )));
          int32_t _12342_ = ((*i32)(safe_add( safe_add( ptr_base,_7181_i ),(int)1 )));
          for (int32_t _7184_j = _12341_; _7184_j < _12342_; ++_7184_j)
          {
            {
              std::vector<int32_t> _12343_;
              for (int32_t _7185_k = ((*i32)(safe_add( codeptr_base,_7184_j ))), _12344_ = ((*i32)(safe_add( safe_add( codeptr_base,_7184_j ),(int)1 ))); _7185_k < _12344_ ; ++_7185_k)
              {
                _12343_.push_back(((*i32)(safe_add( code_base,_7185_k ))));
              }
              auto _12345_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12343_.size()),_12343_.begin(),_12343_.end()));
              std::vector<double> _12346_;
              for (int32_t _7186_k = ((*i32)(safe_add( codeptr_base,_7184_j ))), _12347_ = ((*i32)(safe_add( safe_add( codeptr_base,_7184_j ),(int)1 ))); _7186_k < _12347_ ; ++_7186_k)
              {
                _12346_.push_back(((*f64)(safe_add( cconst_base,_7186_k ))));
              }
              auto _12348_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12346_.size()),_12346_.begin(),_12346_.end()));
              _7176_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("      code["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*i64)(safe_add( nidxs_base,_7184_j ))))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12345_)->__mosek_2fusion_2Utils_2StringBuffer__a(_12348_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
            }
          }
        }
      }
      {}
    }
  }
  return _7176_sb->toString();
}
// End mosek.fusion.WorkStack.formatCurrent

// Begin mosek.fusion.WorkStack.peek_hassp
// Method mosek.fusion.WorkStack.peek_hassp @ src/fusion/BaseExpression.monty:364:6-77
bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }
bool mosek::fusion::p_WorkStack::peek_hassp()
{
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
// End mosek.fusion.WorkStack.peek_hassp

// Begin mosek.fusion.WorkStack.peek_nnz
// Method mosek.fusion.WorkStack.peek_nnz @ src/fusion/BaseExpression.monty:362:6-72
int32_t mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }
int32_t mosek::fusion::p_WorkStack::peek_nnz()
{
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
// End mosek.fusion.WorkStack.peek_nnz

// Begin mosek.fusion.WorkStack.peek_nelem
// Method mosek.fusion.WorkStack.peek_nelem @ src/fusion/BaseExpression.monty:360:6-72
int32_t mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }
int32_t mosek::fusion::p_WorkStack::peek_nelem()
{
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
// End mosek.fusion.WorkStack.peek_nelem

// Begin mosek.fusion.WorkStack.peek_dim
// Method mosek.fusion.WorkStack.peek_dim @ src/fusion/BaseExpression.monty:358:6-71
int32_t mosek::fusion::WorkStack :: peek_dim(int32_t _7187_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_7187_i); }
int32_t mosek::fusion::p_WorkStack::peek_dim(int32_t _7187_i)
{
  return _pubthis->peeki32(safe_add( _7187_i,(int)1 ));
}
// End mosek.fusion.WorkStack.peek_dim

// Begin mosek.fusion.WorkStack.peek_nd
// Method mosek.fusion.WorkStack.peek_nd @ src/fusion/BaseExpression.monty:356:6-68
int32_t mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }
int32_t mosek::fusion::p_WorkStack::peek_nd()
{
  return _pubthis->peeki32();
}
// End mosek.fusion.WorkStack.peek_nd

// Begin mosek.fusion.WorkStack.alloc_expr
// Method mosek.fusion.WorkStack.alloc_expr @ src/fusion/BaseExpression.monty:351:6-353:7
void mosek::fusion::WorkStack :: alloc_expr(int32_t _7188_nd,int32_t _7189_nelem,int32_t _7190_nnz,bool _7191_hassp) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_7188_nd,_7189_nelem,_7190_nnz,_7191_hassp); }
void mosek::fusion::p_WorkStack::alloc_expr(int32_t _7188_nd,int32_t _7189_nelem,int32_t _7190_nnz,bool _7191_hassp)
{
  _pubthis->alloc_expr(_7188_nd,_7189_nelem,_7190_nnz,_7191_hassp,(int)0);
}
// End mosek.fusion.WorkStack.alloc_expr

// Begin mosek.fusion.WorkStack.alloc_expr
// Method mosek.fusion.WorkStack.alloc_expr @ src/fusion/BaseExpression.monty:323:6-348:7
void mosek::fusion::WorkStack :: alloc_expr(int32_t _7192_nd,int32_t _7193_nelem,int32_t _7194_nnz,bool _7195_hassp,int32_t _7196_ncodeatom) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_7192_nd,_7193_nelem,_7194_nnz,_7195_hassp,_7196_ncodeatom); }
void mosek::fusion::p_WorkStack::alloc_expr(int32_t _7192_nd,int32_t _7193_nelem,int32_t _7194_nnz,bool _7195_hassp,int32_t _7196_ncodeatom)
{
  cof_base = _pubthis->allocf64(_7194_nnz);
  cconst_base = _pubthis->allocf64(_7196_ncodeatom);
  nidxs_base = _pubthis->alloci64(_7194_nnz);
  int32_t _12349_;
  bool _12350_ = _7195_hassp;
  if (_12350_)
  {
    _12349_ = _pubthis->alloci64(_7193_nelem);
  }
  else
  {
    _12349_ = (-(int)9999);
  }
  sp_base = _12349_;
  code_base = _pubthis->alloci32(_7196_ncodeatom);
  int32_t _12351_;
  bool _12352_ = (_7196_ncodeatom > (int)0);
  if (_12352_)
  {
    _12351_ = _pubthis->alloci32(safe_add( _7194_nnz,(int)1 ));
  }
  else
  {
    _12351_ = (-(int)9999);
  }
  codeptr_base = _12351_;
  ptr_base = _pubthis->alloci32(safe_add( _7193_nelem,(int)1 ));
  _pubthis->pushi32(_7196_ncodeatom);
  int32_t _12353_;
  bool _12354_ = _7195_hassp;
  if (_12354_)
  {
    _12353_ = (int)1;
  }
  else
  {
    _12353_ = (int)0;
  }
  _pubthis->pushi32(_12353_);
  _pubthis->pushi32(_7194_nnz);
  _pubthis->pushi32(_7193_nelem);
  shape_base = _pubthis->alloci32(_7192_nd);
  _pubthis->pushi32(_7192_nd);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->ncodeatom = _7196_ncodeatom;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _7192_nd;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _7193_nelem;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _7194_nnz;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _7195_hassp;
}
// End mosek.fusion.WorkStack.alloc_expr

// Begin mosek.fusion.WorkStack.pop_expr
// Method mosek.fusion.WorkStack.pop_expr @ src/fusion/BaseExpression.monty:301:6-320:7
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }
void mosek::fusion::p_WorkStack::pop_expr()
{
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ncodeatom = _pubthis->popi32();
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int32_t _12355_;
  bool _12356_ = (ncodeatom > (int)0);
  if (_12356_)
  {
    _12355_ = _pubthis->popi32(safe_add( nnz,(int)1 ));
  }
  else
  {
    _12355_ = (-(int)9999);
  }
  codeptr_base = _12355_;
  code_base = _pubthis->popi32(ncodeatom);
  int32_t _12357_;
  bool _12358_ = hassp;
  if (_12358_)
  {
    _12357_ = _pubthis->popi64(nelem);
  }
  else
  {
    _12357_ = (-(int)9999);
  }
  sp_base = _12357_;
  nidxs_base = _pubthis->popi64(nnz);
  cconst_base = _pubthis->popf64(ncodeatom);
  cof_base = _pubthis->popf64(nnz);
}
// End mosek.fusion.WorkStack.pop_expr

// Begin mosek.fusion.WorkStack.move_expr
// Method mosek.fusion.WorkStack.move_expr @ src/fusion/BaseExpression.monty:284:6-298:7
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _7197_to) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_7197_to); }
void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _7197_to)
{
  int32_t _7198_tmp_pi32 = pi32;
  int32_t _7199_tmp_pi64 = pi64;
  int32_t _7200_tmp_pf64 = pf64;
  _pubthis->pop_expr();
  int32_t _7201_ti32 = _7197_to->alloci32((_7198_tmp_pi32 - pi32));
  int32_t _7202_ti64 = _7197_to->alloci64((_7199_tmp_pi64 - pi64));
  int32_t _7203_tf64 = _7197_to->allocf64((_7200_tmp_pf64 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_7197_to)->i32,_7201_ti32,(_7198_tmp_pi32 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_7197_to)->i64,_7202_ti64,(_7199_tmp_pi64 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_7197_to)->f64,_7203_tf64,(_7200_tmp_pf64 - pf64));
}
// End mosek.fusion.WorkStack.move_expr

// Begin mosek.fusion.WorkStack.peek_expr
// Method mosek.fusion.WorkStack.peek_expr @ src/fusion/BaseExpression.monty:272:6-281:7
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }
void mosek::fusion::p_WorkStack::peek_expr()
{
  int32_t _7204_tmp_pi32 = pi32;
  int32_t _7205_tmp_pi64 = pi64;
  int32_t _7206_tmp_pf64 = pf64;
  _pubthis->pop_expr();
  pi32 = _7204_tmp_pi32;
  pi64 = _7205_tmp_pi64;
  pf64 = _7206_tmp_pf64;
}
// End mosek.fusion.WorkStack.peek_expr

// Begin mosek.fusion.WorkStack.ensure_sparsity
// Method mosek.fusion.WorkStack.ensure_sparsity @ src/fusion/BaseExpression.monty:258:6-268:7
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }
void mosek::fusion::p_WorkStack::ensure_sparsity()
{
  int32_t _7207_nd = ((*i32)((pi32 - (int)1)));
  bool _7208_hassp = (((*i32)(((pi32 - _7207_nd) - (int)3))) != (int)0);
  int32_t _7209_nelem = ((*i32)(((pi32 - _7207_nd) - (int)1)));
  if ((!_7208_hassp))
  {
    {
      ((*i32)(((pi32 - _7207_nd) - (int)3))) = (int)1;
      int32_t _7210_sp = _pubthis->alloci64(_7209_nelem);
      int32_t _12359_ = (int)0;
      int32_t _12360_ = _7209_nelem;
      for (int32_t _7211_i = _12359_; _7211_i < _12360_; ++_7211_i)
      {
        {
          ((*i64)(_7210_sp)) = _7211_i;
        }
      }
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensure_sparsity

// Begin mosek.fusion.WorkStack.clear
// Method mosek.fusion.WorkStack.clear @ src/fusion/BaseExpression.monty:210:6-61
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }
void mosek::fusion::p_WorkStack::clear()
{
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
// End mosek.fusion.WorkStack.clear

// Begin mosek.fusion.WorkStack.allocf64
// Method mosek.fusion.WorkStack.allocf64 @ src/fusion/BaseExpression.monty:201:6-207:7
int32_t mosek::fusion::WorkStack :: allocf64(int32_t _7212_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_7212_n); }
int32_t mosek::fusion::p_WorkStack::allocf64(int32_t _7212_n)
{
  _pubthis->ensuref64(_7212_n);
  int32_t _7213_r = pf64;
  int32_t _12361_ = pf64;
  int32_t _12362_ = safe_add( pf64,_7212_n );
  for (int32_t _7214_i = _12361_; _7214_i < _12362_; ++_7214_i)
  {
    {
      ((*f64)(_7214_i)) = (int)99997;
    }
  }
  pf64 += _7212_n;
  return _7213_r;
}
// End mosek.fusion.WorkStack.allocf64

// Begin mosek.fusion.WorkStack.alloci64
// Method mosek.fusion.WorkStack.alloci64 @ src/fusion/BaseExpression.monty:191:6-197:7
int32_t mosek::fusion::WorkStack :: alloci64(int32_t _7215_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_7215_n); }
int32_t mosek::fusion::p_WorkStack::alloci64(int32_t _7215_n)
{
  _pubthis->ensurei64(_7215_n);
  int32_t _7216_r = pi64;
  int32_t _12363_ = pi64;
  int32_t _12364_ = safe_add( pi64,_7215_n );
  for (int32_t _7217_i = _12363_; _7217_i < _12364_; ++_7217_i)
  {
    {
      ((*i64)(_7217_i)) = (int)99998;
    }
  }
  pi64 += _7215_n;
  return _7216_r;
}
// End mosek.fusion.WorkStack.alloci64

// Begin mosek.fusion.WorkStack.alloci32
// Method mosek.fusion.WorkStack.alloci32 @ src/fusion/BaseExpression.monty:177:6-187:7
int32_t mosek::fusion::WorkStack :: alloci32(int32_t _7218_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_7218_n); }
int32_t mosek::fusion::p_WorkStack::alloci32(int32_t _7218_n)
{
  if ((_7218_n > (int)0))
  {
    {
      _pubthis->ensurei32(_7218_n);
      int32_t _7219_r = pi32;
      int32_t _12365_ = pi32;
      int32_t _12366_ = safe_add( pi32,_7218_n );
      for (int32_t _7220_i = _12365_; _7220_i < _12366_; ++_7220_i)
      {
        {
          ((*i32)(_7220_i)) = (int)99999;
        }
      }
      pi32 += _7218_n;
      return _7219_r;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
// End mosek.fusion.WorkStack.alloci32

// Begin mosek.fusion.WorkStack.pushf64
// Method mosek.fusion.WorkStack.pushf64 @ src/fusion/BaseExpression.monty:168:6-172:7
void mosek::fusion::WorkStack :: pushf64(double _7221_v) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_7221_v); }
void mosek::fusion::p_WorkStack::pushf64(double _7221_v)
{
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _7221_v;
  ++ pf64;
}
// End mosek.fusion.WorkStack.pushf64

// Begin mosek.fusion.WorkStack.pushi64
// Method mosek.fusion.WorkStack.pushi64 @ src/fusion/BaseExpression.monty:160:6-164:7
void mosek::fusion::WorkStack :: pushi64(int64_t _7222_v) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_7222_v); }
void mosek::fusion::p_WorkStack::pushi64(int64_t _7222_v)
{
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _7222_v;
  ++ pi64;
}
// End mosek.fusion.WorkStack.pushi64

// Begin mosek.fusion.WorkStack.pushi32
// Method mosek.fusion.WorkStack.pushi32 @ src/fusion/BaseExpression.monty:152:6-156:7
void mosek::fusion::WorkStack :: pushi32(int32_t _7223_v) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_7223_v); }
void mosek::fusion::p_WorkStack::pushi32(int32_t _7223_v)
{
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _7223_v;
  ++ pi32;
}
// End mosek.fusion.WorkStack.pushi32

// Begin mosek.fusion.WorkStack.ensuref64
// Method mosek.fusion.WorkStack.ensuref64 @ src/fusion/BaseExpression.monty:141:6-147:7
void mosek::fusion::WorkStack :: ensuref64(int32_t _7224_n) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_7224_n); }
void mosek::fusion::p_WorkStack::ensuref64(int32_t _7224_n)
{
  if ((safe_add( pf64,_7224_n ) > (int)((f64)->size(0))))
  {
    {
      int32_t _12367_;
      bool _12368_ = ((_7224_n < (int)((f64)->size(0))) && ((int)((f64)->size(0)) < (int)0x3FFFFFFF));
      if (_12368_)
      {
        _12367_ = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _12367_ = safe_add( (int)((f64)->size(0)),_7224_n );
      }
      int32_t _7225_newsz = _12367_;
      std::shared_ptr< monty::ndarray< double,1 > > _7226_tmp = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7225_newsz)));
      _checked_ptr_1<double> _ptr__7226_tmp(_7226_tmp ? _7226_tmp->raw() : nullptr,_7226_tmp ? _7226_tmp->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_7226_tmp,(int)0,pf64);
      f64 = _7226_tmp;
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensuref64

// Begin mosek.fusion.WorkStack.ensurei64
// Method mosek.fusion.WorkStack.ensurei64 @ src/fusion/BaseExpression.monty:131:6-137:7
void mosek::fusion::WorkStack :: ensurei64(int32_t _7227_n) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_7227_n); }
void mosek::fusion::p_WorkStack::ensurei64(int32_t _7227_n)
{
  if ((safe_add( pi64,_7227_n ) > (int)((i64)->size(0))))
  {
    {
      int32_t _12369_;
      bool _12370_ = ((_7227_n < (int)((i64)->size(0))) && ((int)((i64)->size(0)) < (int)0x3FFFFFFF));
      if (_12370_)
      {
        _12369_ = (int)((i64)->size(0));
      }
      else
      {
        _12369_ = _7227_n;
      }
      int32_t _7228_newsz = safe_add( (int)((i64)->size(0)),_12369_ );
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7229_tmp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7228_newsz)));
      _checked_ptr_1<int64_t> _ptr__7229_tmp(_7229_tmp ? _7229_tmp->raw() : nullptr,_7229_tmp ? _7229_tmp->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_7229_tmp,(int)0,pi64);
      i64 = _7229_tmp;
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensurei64

// Begin mosek.fusion.WorkStack.ensurei32
// Method mosek.fusion.WorkStack.ensurei32 @ src/fusion/BaseExpression.monty:121:6-127:7
void mosek::fusion::WorkStack :: ensurei32(int32_t _7230_n) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_7230_n); }
void mosek::fusion::p_WorkStack::ensurei32(int32_t _7230_n)
{
  if ((safe_add( pi32,_7230_n ) > (int)((i32)->size(0))))
  {
    {
      int32_t _12371_;
      bool _12372_ = ((_7230_n < (int)((i32)->size(0))) && ((int)((i32)->size(0)) < (int)0x3FFFFFFF));
      if (_12372_)
      {
        _12371_ = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _12371_ = safe_add( (int)((i32)->size(0)),_7230_n );
      }
      int32_t _7231_newsz = _12371_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7232_tmp = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7231_newsz)));
      _checked_ptr_1<int32_t> _ptr__7232_tmp(_7232_tmp ? _7232_tmp->raw() : nullptr,_7232_tmp ? _7232_tmp->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_7232_tmp,(int)0,pi32);
      i32 = _7232_tmp;
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensurei32

// Begin mosek.fusion.WorkStack.popf64
// Method mosek.fusion.WorkStack.popf64 @ src/fusion/BaseExpression.monty:112:6-116:7
int32_t mosek::fusion::WorkStack :: popf64(int32_t _7233_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_7233_n); }
int32_t mosek::fusion::p_WorkStack::popf64(int32_t _7233_n)
{
  pf64 -= _7233_n;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pf64;
}
// End mosek.fusion.WorkStack.popf64

// Begin mosek.fusion.WorkStack.popi64
// Method mosek.fusion.WorkStack.popi64 @ src/fusion/BaseExpression.monty:107:6-111:7
int32_t mosek::fusion::WorkStack :: popi64(int32_t _7234_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_7234_n); }
int32_t mosek::fusion::p_WorkStack::popi64(int32_t _7234_n)
{
  pi64 -= _7234_n;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi64;
}
// End mosek.fusion.WorkStack.popi64

// Begin mosek.fusion.WorkStack.popi32
// Method mosek.fusion.WorkStack.popi32 @ src/fusion/BaseExpression.monty:102:6-106:7
int32_t mosek::fusion::WorkStack :: popi32(int32_t _7235_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_7235_n); }
int32_t mosek::fusion::p_WorkStack::popi32(int32_t _7235_n)
{
  pi32 -= _7235_n;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi32;
}
// End mosek.fusion.WorkStack.popi32

// Begin mosek.fusion.WorkStack.popf64
// Method mosek.fusion.WorkStack.popf64 @ src/fusion/BaseExpression.monty:97:6-101:7
void mosek::fusion::WorkStack :: popf64(int32_t _7236_n,std::shared_ptr< monty::ndarray< double,1 > > _7237_r,int32_t _7238_ofs) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_7236_n,_7237_r,_7238_ofs); }
void mosek::fusion::p_WorkStack::popf64(int32_t _7236_n,std::shared_ptr< monty::ndarray< double,1 > > _7237_r,int32_t _7238_ofs)
{
  _checked_ptr_1<double> _ptr__7237_r(_7237_r ? _7237_r->raw() : nullptr, _7237_r ? _7237_r->size(0) : 0);
  pf64 -= _7236_n;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_7237_r,_7238_ofs,_7236_n);
}
// End mosek.fusion.WorkStack.popf64

// Begin mosek.fusion.WorkStack.popi64
// Method mosek.fusion.WorkStack.popi64 @ src/fusion/BaseExpression.monty:92:6-96:7
void mosek::fusion::WorkStack :: popi64(int32_t _7239_n,std::shared_ptr< monty::ndarray< int64_t,1 > > _7240_r,int32_t _7241_ofs) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_7239_n,_7240_r,_7241_ofs); }
void mosek::fusion::p_WorkStack::popi64(int32_t _7239_n,std::shared_ptr< monty::ndarray< int64_t,1 > > _7240_r,int32_t _7241_ofs)
{
  _checked_ptr_1<int64_t> _ptr__7240_r(_7240_r ? _7240_r->raw() : nullptr, _7240_r ? _7240_r->size(0) : 0);
  pi64 -= _7239_n;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_7240_r,_7241_ofs,_7239_n);
}
// End mosek.fusion.WorkStack.popi64

// Begin mosek.fusion.WorkStack.popi32
// Method mosek.fusion.WorkStack.popi32 @ src/fusion/BaseExpression.monty:87:6-91:7
void mosek::fusion::WorkStack :: popi32(int32_t _7242_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _7243_r,int32_t _7244_ofs) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_7242_n,_7243_r,_7244_ofs); }
void mosek::fusion::p_WorkStack::popi32(int32_t _7242_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _7243_r,int32_t _7244_ofs)
{
  _checked_ptr_1<int32_t> _ptr__7243_r(_7243_r ? _7243_r->raw() : nullptr, _7243_r ? _7243_r->size(0) : 0);
  pi32 -= _7242_n;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_7243_r,_7244_ofs,_7242_n);
}
// End mosek.fusion.WorkStack.popi32

// Begin mosek.fusion.WorkStack.popf64
// Method mosek.fusion.WorkStack.popf64 @ src/fusion/BaseExpression.monty:82:6-86:7
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }
double mosek::fusion::p_WorkStack::popf64()
{
  -- pf64;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*f64)(pf64));
}
// End mosek.fusion.WorkStack.popf64

// Begin mosek.fusion.WorkStack.popi64
// Method mosek.fusion.WorkStack.popi64 @ src/fusion/BaseExpression.monty:77:6-81:7
int64_t mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }
int64_t mosek::fusion::p_WorkStack::popi64()
{
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  -- pi64;
  return ((*i64)(pi64));
}
// End mosek.fusion.WorkStack.popi64

// Begin mosek.fusion.WorkStack.popi32
// Method mosek.fusion.WorkStack.popi32 @ src/fusion/BaseExpression.monty:72:6-76:7
int32_t mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }
int32_t mosek::fusion::p_WorkStack::popi32()
{
  -- pi32;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*i32)(pi32));
}
// End mosek.fusion.WorkStack.popi32

// Begin mosek.fusion.WorkStack.peekf64
// Method mosek.fusion.WorkStack.peekf64 @ src/fusion/BaseExpression.monty:70:6-61
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }
double mosek::fusion::p_WorkStack::peekf64()
{
  return ((*f64)((pf64 - (int)1)));
}
// End mosek.fusion.WorkStack.peekf64

// Begin mosek.fusion.WorkStack.peeki64
// Method mosek.fusion.WorkStack.peeki64 @ src/fusion/BaseExpression.monty:69:6-61
int64_t mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }
int64_t mosek::fusion::p_WorkStack::peeki64()
{
  return ((*i64)((pi64 - (int)1)));
}
// End mosek.fusion.WorkStack.peeki64

// Begin mosek.fusion.WorkStack.peeki32
// Method mosek.fusion.WorkStack.peeki32 @ src/fusion/BaseExpression.monty:68:6-61
int32_t mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }
int32_t mosek::fusion::p_WorkStack::peeki32()
{
  return ((*i32)((pi32 - (int)1)));
}
// End mosek.fusion.WorkStack.peeki32

// Begin mosek.fusion.WorkStack.peekf64
// Method mosek.fusion.WorkStack.peekf64 @ src/fusion/BaseExpression.monty:66:6-70
double mosek::fusion::WorkStack :: peekf64(int32_t _7245_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_7245_i); }
double mosek::fusion::p_WorkStack::peekf64(int32_t _7245_i)
{
  return ((*f64)(((pf64 - _7245_i) - (int)1)));
}
// End mosek.fusion.WorkStack.peekf64

// Begin mosek.fusion.WorkStack.peeki64
// Method mosek.fusion.WorkStack.peeki64 @ src/fusion/BaseExpression.monty:65:6-70
int64_t mosek::fusion::WorkStack :: peeki64(int32_t _7246_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_7246_i); }
int64_t mosek::fusion::p_WorkStack::peeki64(int32_t _7246_i)
{
  return ((*i64)(((pi64 - _7246_i) - (int)1)));
}
// End mosek.fusion.WorkStack.peeki64

// Begin mosek.fusion.WorkStack.peeki32
// Method mosek.fusion.WorkStack.peeki32 @ src/fusion/BaseExpression.monty:64:6-70
int32_t mosek::fusion::WorkStack :: peeki32(int32_t _7247_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_7247_i); }
int32_t mosek::fusion::p_WorkStack::peeki32(int32_t _7247_i)
{
  return ((*i32)(((pi32 - _7247_i) - (int)1)));
}
// End mosek.fusion.WorkStack.peeki32

void mosek::fusion::p_WorkStack::destroy()
{
  f64.reset();
  i64.reset();
  i32.reset();
}
void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }
// } class WorkStack
// class Expr { // @ src/fusion/Expr.mbi:342:4-1708:5
mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }
mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }
mosek::fusion::p_Expr::p_Expr
  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.Expr.ctor @ src/fusion/Expr.mbi:568:6-609:7
mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7248_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7249_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7250_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7251_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7252_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7253_inst)
{ return new mosek::fusion::Expr(_7248_ptrb,_7249_subj,_7250_cof,_7251_bfix,_7252_shape,_7253_inst); }
mosek::fusion::Expr::Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7248_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7249_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7250_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7251_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7252_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7253_inst) : 
   Expr(new mosek::fusion::p_Expr(this))
{ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_7248_ptrb,_7249_subj,_7250_cof,_7251_bfix,_7252_shape,_7253_inst); }
void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7248_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7249_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7250_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7251_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7252_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7253_inst)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__7248_ptrb(_7248_ptrb ? _7248_ptrb->raw() : nullptr, _7248_ptrb ? _7248_ptrb->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7249_subj(_7249_subj ? _7249_subj->raw() : nullptr, _7249_subj ? _7249_subj->size(0) : 0);
    _checked_ptr_1<double> _ptr__7250_cof(_7250_cof ? _7250_cof->raw() : nullptr, _7250_cof ? _7250_cof->size(0) : 0);
    _checked_ptr_1<double> _ptr__7251_bfix(_7251_bfix ? _7251_bfix->raw() : nullptr, _7251_bfix ? _7251_bfix->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7252_shape(_7252_shape ? _7252_shape->raw() : nullptr, _7252_shape ? _7252_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7253_inst(_7253_inst ? _7253_inst->raw() : nullptr, _7253_inst ? _7253_inst->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _12373_;
    bool _12374_ = (NULL != _7252_shape.get());
    if (_12374_)
    {
      _12373_ = ::mosek::fusion::Utils::Tools::arraycopy(_7252_shape);
    }
    else
    {
      _12373_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((int)((_7248_ptrb)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< int64_t,1 > > _12375_;
    bool _12376_ = (NULL != _7253_inst.get());
    if (_12376_)
    {
      _12375_ = ::mosek::fusion::Utils::Tools::arraycopy(_7253_inst);
    }
    else
    {
      _12375_ = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_7248_ptrb),::mosek::fusion::Utils::Tools::arraycopy(_7249_subj),::mosek::fusion::Utils::Tools::arraycopy(_7250_cof),::mosek::fusion::Utils::Tools::arraycopy(_7251_bfix),_12373_,_12375_,(int)1);
    int32_t _7254_nelem = ((int)((_7248_ptrb)->size(0)) - (int)1);
    if ((_7254_nelem < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    int64_t _7255_nnz = _ptr__7248_ptrb[_7254_nelem];
    if (((_7255_nnz < (int)0) || ((_7255_nnz != (int)((_7250_cof)->size(0))) || (_7255_nnz != (int)((_7249_subj)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _7256_ptrb_ok = true;
    bool _7257_shape_ok = true;
    bool _7258_inst_ok = true;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7259_thisshape = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int32_t> _ptr__7259_thisshape(_7259_thisshape ? _7259_thisshape->raw() : nullptr,_7259_thisshape ? _7259_thisshape->size(0) : 0);
    int64_t _7260_sz = ::mosek::fusion::p_Set::size(_7259_thisshape);
    {
      int32_t _12377_ = (int)0;
      int32_t _12378_ = (int)((_7259_thisshape)->size(0));
      for (int32_t _7261_i = _12377_; _7261_i < _12378_; ++_7261_i)
      {
        {
          _7257_shape_ok = (_7257_shape_ok && (_ptr__7259_thisshape[_7261_i] >= (int)0));
        }
      }
      int32_t _12379_ = (int)0;
      int32_t _12380_ = _7254_nelem;
      for (int32_t _7262_i = _12379_; _7262_i < _12380_; ++_7262_i)
      {
        {
          _7256_ptrb_ok = (_7256_ptrb_ok && (_ptr__7248_ptrb[_7262_i] <= _ptr__7248_ptrb[safe_add( _7262_i,(int)1 )]));
        }
      }
      if (((NULL != _7253_inst.get()) && ((int)((_7253_inst)->size(0)) > (int)0)))
      {
        {
          _7258_inst_ok = ((_ptr__7253_inst[(int)0] >= (int)0) && (_ptr__7253_inst[(_7254_nelem - (int)1)] < _7260_sz));
          int32_t _12381_ = (int)0;
          int32_t _12382_ = (_7254_nelem - (int)1);
          for (int32_t _7263_i = _12381_; _7263_i < _12382_; ++_7263_i)
          {
            {
              _7258_inst_ok = (_7258_inst_ok && (_ptr__7253_inst[_7263_i] < _ptr__7253_inst[safe_add( _7263_i,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_7257_shape_ok))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_7256_ptrb_ok))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_7258_inst_ok))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}
// mosek.fusion.Expr.ctor

// mosek.fusion.Expr.ctor @ src/fusion/Expr.mbi:504:6-524:7
mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7264_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7265_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7266_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7267_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7268_shp,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7269_inst,
    int32_t _7270_unchecked_)
{ return new mosek::fusion::Expr(_7264_ptrb,_7265_subj,_7266_cof,_7267_bfix,_7268_shp,_7269_inst,_7270_unchecked_); }
mosek::fusion::Expr::Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7264_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7265_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7266_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7267_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7268_shp,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7269_inst,
    int32_t _7270_unchecked_) : 
   Expr(new mosek::fusion::p_Expr(this))
{ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_7264_ptrb,_7265_subj,_7266_cof,_7267_bfix,_7268_shp,_7269_inst,_7270_unchecked_); }
void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7264_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7265_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7266_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7267_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7268_shp,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7269_inst,
    int32_t _7270_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__7264_ptrb(_7264_ptrb ? _7264_ptrb->raw() : nullptr, _7264_ptrb ? _7264_ptrb->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7265_subj(_7265_subj ? _7265_subj->raw() : nullptr, _7265_subj ? _7265_subj->size(0) : 0);
    _checked_ptr_1<double> _ptr__7266_cof(_7266_cof ? _7266_cof->raw() : nullptr, _7266_cof ? _7266_cof->size(0) : 0);
    _checked_ptr_1<double> _ptr__7267_bfix(_7267_bfix ? _7267_bfix->raw() : nullptr, _7267_bfix ? _7267_bfix->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7268_shp(_7268_shp ? _7268_shp->raw() : nullptr, _7268_shp ? _7268_shp->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7269_inst(_7269_inst ? _7269_inst->raw() : nullptr, _7269_inst ? _7269_inst->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_7268_shp);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _7268_shp;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _7264_ptrb;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _7265_subj;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _7266_cof;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _7267_bfix;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _7269_inst;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}
// mosek.fusion.Expr.ctor

// mosek.fusion.Expr.ctor @ src/fusion/Expr.mbi:380:6-426:7
mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr
  (monty::rc_ptr< ::mosek::fusion::Expression > _7271_e)
{ return new mosek::fusion::Expr(_7271_e); }
mosek::fusion::Expr::Expr
  (monty::rc_ptr< ::mosek::fusion::Expression > _7271_e) : 
   Expr(new mosek::fusion::p_Expr(this))
{ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_7271_e); }
void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _7271_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_7271_e->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _12383_ = _7271_e;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_12383_.get()))
    {
      ::mosek::fusion::Expr::t _7272_ee (dynamic_cast<::mosek::fusion::Expr*>(_12383_.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_7272_ee)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_7272_ee)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_7272_ee)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_7272_ee)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_7272_ee)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_7272_ee)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _7273_ee = _12383_;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _7274_xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _7275_ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _7276_rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _7273_ee->eval(_7276_rs,_7275_ws,_7274_xs);
        int32_t _7277_nd = _7276_rs->popi32();
        int32_t _7278_shape_base = _7276_rs->popi32(_7277_nd);
        int32_t _7279_nelem = _7276_rs->popi32();
        int32_t _7280_nnz = _7276_rs->popi32();
        bool _7281_hassp = (_7276_rs->popi32() != (int)0);
        int32_t _7282_ptr_base = _7276_rs->popi32(safe_add( _7279_nelem,(int)1 ));
        int32_t _12384_;
        bool _12385_ = _7281_hassp;
        if (_12385_)
        {
          _12384_ = _7276_rs->popi64(_7279_nelem);
        }
        else
        {
          _12384_ = (int)0;
        }
        int32_t _7283_sp_base = _12384_;
        int32_t _7284_nidxs_base = _7276_rs->popi64(_7280_nnz);
        int32_t _7285_bfix_base = _7276_rs->popf64(_7279_nelem);
        int32_t _7286_cof_base = _7276_rs->popf64(_7280_nnz);
        std::shared_ptr< monty::ndarray< int32_t,1 > > _7287_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7276_rs)->i32;
        _checked_ptr_1<int32_t> _ptr__7287_ri32(_7287_ri32 ? _7287_ri32->raw() : nullptr,_7287_ri32 ? _7287_ri32->size(0) : 0);
        std::shared_ptr< monty::ndarray< int64_t,1 > > _7288_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7276_rs)->i64;
        _checked_ptr_1<int64_t> _ptr__7288_ri64(_7288_ri64 ? _7288_ri64->raw() : nullptr,_7288_ri64 ? _7288_ri64->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _7289_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7276_rs)->f64;
        _checked_ptr_1<double> _ptr__7289_rf64(_7289_rf64 ? _7289_rf64->raw() : nullptr,_7289_rf64 ? _7289_rf64->size(0) : 0);
        std::vector<int32_t> _12386_;
        for (int32_t _7290_i = (int)0, _12387_ = _7277_nd; _7290_i < _12387_ ; ++_7290_i)
        {
          _12386_.push_back(_ptr__7287_ri32[safe_add( _7278_shape_base,_7290_i )]);
        }
        auto _12388_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12386_.size()),_12386_.begin(),_12386_.end()));
        shape = _12388_;
        std::vector<int64_t> _12389_;
        for (int32_t _7291_i = (int)0, _12390_ = safe_add( _7279_nelem,(int)1 ); _7291_i < _12390_ ; ++_7291_i)
        {
          _12389_.push_back(_ptr__7287_ri32[safe_add( _7282_ptr_base,_7291_i )]);
        }
        auto _12391_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12389_.size()),_12389_.begin(),_12389_.end()));
        ptrb = _12391_;
        std::vector<int64_t> _12392_;
        for (int32_t _7292_i = (int)0, _12393_ = _7280_nnz; _7292_i < _12393_ ; ++_7292_i)
        {
          _12392_.push_back(_ptr__7288_ri64[safe_add( _7284_nidxs_base,_7292_i )]);
        }
        auto _12394_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12392_.size()),_12392_.begin(),_12392_.end()));
        subj = _12394_;
        std::vector<double> _12395_;
        for (int32_t _7293_i = (int)0, _12396_ = _7280_nnz; _7293_i < _12396_ ; ++_7293_i)
        {
          _12395_.push_back(_ptr__7289_rf64[safe_add( _7286_cof_base,_7293_i )]);
        }
        auto _12397_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12395_.size()),_12395_.begin(),_12395_.end()));
        cof_v = _12397_;
        std::vector<double> _12398_;
        for (int32_t _7294_i = (int)0, _12399_ = _7280_nnz; _7294_i < _12399_ ; ++_7294_i)
        {
          _12398_.push_back(_ptr__7289_rf64[safe_add( _7285_bfix_base,_7294_i )]);
        }
        auto _12400_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12398_.size()),_12398_.begin(),_12398_.end()));
        bfix = _12400_;
        std::shared_ptr< monty::ndarray< int64_t,1 > > _12401_;
        bool _12402_ = _7281_hassp;
        if (_12402_)
        {
          std::vector<int64_t> _12403_;
          for (int32_t _7295_i = (int)0, _12404_ = _7280_nnz; _7295_i < _12404_ ; ++_7295_i)
          {
            _12403_.push_back(_ptr__7288_ri64[safe_add( _7283_sp_base,_7295_i )]);
          }
          auto _12405_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12403_.size()),_12403_.begin(),_12403_.end()));
          _12401_ = _12405_;
        }
        else
        {
          _12401_ = nullptr;
        }
        inst = _12401_;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}
// mosek.fusion.Expr.ctor

// Begin mosek.fusion.Expr.prod
// Method mosek.fusion.Expr.prod @ src/fusion/Expr.mbi:1707:6-110
int64_t mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int32_t,1 > > _7296_vals)
{
  _checked_ptr_1<int32_t> _ptr__7296_vals(_7296_vals ? _7296_vals->raw() : nullptr, _7296_vals ? _7296_vals->size(0) : 0);
  int32_t _7297_r = (int)1;
  int32_t _12406_ = (int)0;
  int32_t _12407_ = (int)((_7296_vals)->size(0));
  for (int32_t _7298_i = _12406_; _7298_i < _12407_; ++_7298_i)
  {
    {
      _7297_r *= _ptr__7296_vals[_7298_i];
    }
  }
  return _7297_r;
}
// End mosek.fusion.Expr.prod

// Begin mosek.fusion.Expr.varstack
// Method mosek.fusion.Expr.varstack @ src/fusion/Expr.mbi:1702:6-1705:7
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _7299_vs)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _12408_;
  for (int32_t _7300_i = (int)0, _12409_ = (int)((_7299_vs)->size(0)); _7300_i < _12409_ ; ++_7300_i)
  {
    for (int32_t _7301_j = (int)0, _12410_ = (int)((((*_7299_vs)(_7300_i)))->size(0)); _7301_j < _12410_ ; ++_7301_j)
    {
      _12408_.push_back(((*((*_7299_vs)(_7300_i)))(_7301_j)));
    }
  }
  auto _12411_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_12408_.size()),_12408_.begin(),_12408_.end()));
  return _12411_;
}
// End mosek.fusion.Expr.varstack

// Begin mosek.fusion.Expr.varstack
// Method mosek.fusion.Expr.varstack @ src/fusion/Expr.mbi:1689:6-1700:7
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7302_v1,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7303_v2)
{
  if ((NULL == _7302_v1.get()))
  {
    {
      return _7303_v2;
    }
  }
  else if((NULL == _7303_v2.get()))
  {
    {
      return _7302_v1;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7304_r = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_7302_v1)->size(0)),(int)((_7303_v2)->size(0)) ))));
      int32_t _12412_ = (int)0;
      int32_t _12413_ = (int)((_7302_v1)->size(0));
      for (int32_t _7305_i = _12412_; _7305_i < _12413_; ++_7305_i)
      {
        {
          ((*_7304_r)(_7305_i)) = ((*_7302_v1)(_7305_i));
        }
      }
      int32_t _12414_ = (int)0;
      int32_t _12415_ = (int)((_7303_v2)->size(0));
      for (int32_t _7306_i = _12414_; _7306_i < _12415_; ++_7306_i)
      {
        {
          ((*_7304_r)(safe_add( _7306_i,(int)((_7302_v1)->size(0)) ))) = ((*_7303_v2)(_7306_i));
        }
      }
      return _7304_r;
    }
  }
}
// End mosek.fusion.Expr.varstack

// Begin mosek.fusion.Expr.condense
// Method mosek.fusion.Expr.condense @ src/fusion/Expr.mbi:1686:6-93
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7307_e) { return mosek::fusion::p_Expr::condense(_7307_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _7307_e)
{
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_7307_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.condense

// Begin mosek.fusion.Expr.flatten
// Method mosek.fusion.Expr.flatten @ src/fusion/Expr.mbi:1673:6-1681:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7308_e) { return mosek::fusion::p_Expr::flatten(_7308_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _7308_e)
{
  if ((NULL == _7308_e.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  int64_t _7309_sz = _7308_e->getSize();
  if ((!(_7309_sz <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum dimension size exceeded"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_7308_e,(int32_t)_7309_sz);
}
// End mosek.fusion.Expr.flatten

// Begin mosek.fusion.Expr.reshape
// Method mosek.fusion.Expr.reshape @ src/fusion/Expr.mbi:1664:6-1668:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7310_e,
    int32_t _7311_dimi,
    int32_t _7312_dimj) { return mosek::fusion::p_Expr::reshape(_7310_e,_7311_dimi,_7312_dimj); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _7310_e,int32_t _7311_dimi,int32_t _7312_dimj)
{
  if ((NULL == _7310_e.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_7310_e,::mosek::fusion::p_Set::make(_7311_dimi,_7312_dimj));
}
// End mosek.fusion.Expr.reshape

// Begin mosek.fusion.Expr.reshape
// Method mosek.fusion.Expr.reshape @ src/fusion/Expr.mbi:1654:6-1658:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7313_e,
    int32_t _7314_size) { return mosek::fusion::p_Expr::reshape(_7313_e,_7314_size); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _7313_e,int32_t _7314_size)
{
  if ((NULL == _7313_e.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_7313_e,::mosek::fusion::p_Set::make(_7314_size));
}
// End mosek.fusion.Expr.reshape

// Begin mosek.fusion.Expr.reshape
// Method mosek.fusion.Expr.reshape @ src/fusion/Expr.mbi:1653:6-118
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7315_e,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7316_newshape) { return mosek::fusion::p_Expr::reshape(_7315_e,_7316_newshape); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _7315_e,std::shared_ptr< monty::ndarray< int32_t,1 > > _7316_newshape)
{
  _checked_ptr_1<int32_t> _ptr__7316_newshape(_7316_newshape ? _7316_newshape->raw() : nullptr, _7316_newshape ? _7316_newshape->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7316_newshape,_7315_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.reshape

// Begin mosek.fusion.Expr.zeros
// Method mosek.fusion.Expr.zeros @ src/fusion/Expr.mbi:1639:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7317_shp) { return mosek::fusion::p_Expr::zeros(_7317_shp); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int32_t,1 > > _7317_shp)
{
  _checked_ptr_1<int32_t> _ptr__7317_shp(_7317_shp ? _7317_shp->raw() : nullptr, _7317_shp ? _7317_shp->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_7317_shp,(double)((int)0));
}
// End mosek.fusion.Expr.zeros

// Begin mosek.fusion.Expr.zeros
// Method mosek.fusion.Expr.zeros @ src/fusion/Expr.mbi:1638:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros
  ( int32_t _7318_size) { return mosek::fusion::p_Expr::zeros(_7318_size); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int32_t _7318_size)
{
  return ::mosek::fusion::p_Expr::constTerm(_7318_size,(double)((int)0));
}
// End mosek.fusion.Expr.zeros

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ src/fusion/Expr.mbi:1636:6-70
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( ) { return mosek::fusion::p_Expr::ones(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones()
{
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ src/fusion/Expr.mbi:1635:6-113
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7319_shp,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7320_sparsity) { return mosek::fusion::p_Expr::ones(_7319_shp,_7320_sparsity); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int32_t,1 > > _7319_shp,std::shared_ptr< monty::ndarray< int32_t,2 > > _7320_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__7319_shp(_7319_shp ? _7319_shp->raw() : nullptr, _7319_shp ? _7319_shp->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_7319_shp,_7320_sparsity,(double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ src/fusion/Expr.mbi:1634:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7321_shp) { return mosek::fusion::p_Expr::ones(_7321_shp); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int32_t,1 > > _7321_shp)
{
  _checked_ptr_1<int32_t> _ptr__7321_shp(_7321_shp ? _7321_shp->raw() : nullptr, _7321_shp ? _7321_shp->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_7321_shp,(double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ src/fusion/Expr.mbi:1633:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( int32_t _7322_size) { return mosek::fusion::p_Expr::ones(_7322_size); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int32_t _7322_size)
{
  return ::mosek::fusion::p_Expr::constTerm(_7322_size,(double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1627:6-1630:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7323_nda) { return mosek::fusion::p_Expr::constTerm(_7323_nda); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7323_nda)
{
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_7323_nda)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_7323_nda)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_7323_nda)->cof)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1606:6-1625:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7324_m) { return mosek::fusion::p_Expr::constTerm(_7324_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _7324_m)
{
  int32_t _7325_dim0 = _7324_m->numRows();
  int32_t _7326_dim1 = _7324_m->numColumns();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7327_shape = ::mosek::fusion::p_Set::make(_7325_dim0,_7326_dim1);
  _checked_ptr_1<int32_t> _ptr__7327_shape(_7327_shape ? _7327_shape->raw() : nullptr,_7327_shape ? _7327_shape->size(0) : 0);
  if (_7324_m->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _7328_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7324_m->numNonzeros())));
      _checked_ptr_1<double> _ptr__7328_mval(_7328_mval ? _7328_mval->raw() : nullptr,_7328_mval ? _7328_mval->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7329_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7324_m->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__7329_msubj(_7329_msubj ? _7329_msubj->raw() : nullptr,_7329_msubj ? _7329_msubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7330_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7324_m->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__7330_msubi(_7330_msubi ? _7330_msubi->raw() : nullptr,_7330_msubi ? _7330_msubi->size(0) : 0);
      _7324_m->getDataAsTriplets(_7330_msubi,_7329_msubj,_7328_mval);
      std::vector<int64_t> _12416_;
      for (int32_t _7332_i = (int)0, _12417_ = (int)((_7329_msubj)->size(0)); _7332_i < _12417_ ; ++_7332_i)
      {
        _12416_.push_back(safe_add( safe_mul( _ptr__7330_msubi[_7332_i],_7326_dim1 ),_ptr__7329_msubj[_7332_i] ));
      }
      auto _12418_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12416_.size()),_12416_.begin(),_12416_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7331_sp = _12418_;
      _checked_ptr_1<int64_t> _ptr__7331_sp(_7331_sp ? _7331_sp->raw() : nullptr,_7331_sp ? _7331_sp->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7327_shape,_7331_sp,_7328_mval)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7327_shape,nullptr,_7324_m->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1601:6-1604:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( double _7333_val) { return mosek::fusion::p_Expr::constTerm(_7333_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _7333_val)
{
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,_7333_val)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1590:6-1599:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7334_shp,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7335_sparsity,
    double _7336_val) { return mosek::fusion::p_Expr::constTerm(_7334_shp,_7335_sparsity,_7336_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int32_t,1 > > _7334_shp,std::shared_ptr< monty::ndarray< int32_t,2 > > _7335_sparsity,double _7336_val)
{
  _checked_ptr_1<int32_t> _ptr__7334_shp(_7334_shp ? _7334_shp->raw() : nullptr, _7334_shp ? _7334_shp->size(0) : 0);
  int32_t _7337_n = (int)((_7335_sparsity)->size(0));
  int32_t _7338_nd = (int)((_7334_shp)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7339_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7337_n)));
  _checked_ptr_1<int64_t> _ptr__7339_sp(_7339_sp ? _7339_sp->raw() : nullptr,_7339_sp ? _7339_sp->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7340_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7338_nd)));
  _checked_ptr_1<int64_t> _ptr__7340_s(_7340_s ? _7340_s->raw() : nullptr,_7340_s ? _7340_s->size(0) : 0);
  _ptr__7340_s[(_7338_nd - (int)1)] = (int)1;
  int32_t _12419_ = (int)1;
  int32_t _12420_ = _7338_nd;
  for (int32_t _7341_i = _12419_; _7341_i < _12420_; ++_7341_i)
  {
    {
      _ptr__7340_s[((_7338_nd - _7341_i) - (int)1)] = safe_mul( _ptr__7340_s[(_7338_nd - _7341_i)],_ptr__7334_shp[(_7338_nd - _7341_i)] );
    }
  }
  int32_t _12421_ = (int)0;
  int32_t _12422_ = _7337_n;
  for (int32_t _7342_i = _12421_; _7342_i < _12422_; ++_7342_i)
  {
    {
      int32_t _12423_ = (int)0;
      int32_t _12424_ = _7338_nd;
      for (int32_t _7343_j = _12423_; _7343_j < _12424_; ++_7343_j)
      {
        {
          _ptr__7339_sp[_7342_i] += safe_mul( _ptr__7340_s[_7343_j],((*_7335_sparsity)(_7342_i,_7343_j)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7334_shp,_7339_sp,_7336_val)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1579:6-1589:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7344_shp,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7345_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _7346_vals1) { return mosek::fusion::p_Expr::constTerm(_7344_shp,_7345_sparsity,_7346_vals1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int32_t,1 > > _7344_shp,std::shared_ptr< monty::ndarray< int32_t,2 > > _7345_sparsity,std::shared_ptr< monty::ndarray< double,1 > > _7346_vals1)
{
  _checked_ptr_1<int32_t> _ptr__7344_shp(_7344_shp ? _7344_shp->raw() : nullptr, _7344_shp ? _7344_shp->size(0) : 0);
  _checked_ptr_1<double> _ptr__7346_vals1(_7346_vals1 ? _7346_vals1->raw() : nullptr, _7346_vals1 ? _7346_vals1->size(0) : 0);
  int32_t _7347_n = (int)((_7345_sparsity)->size(0));
  int32_t _7348_nd = (int)((_7344_shp)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7349_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7347_n)));
  _checked_ptr_1<int64_t> _ptr__7349_sp(_7349_sp ? _7349_sp->raw() : nullptr,_7349_sp ? _7349_sp->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7350_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7348_nd)));
  _checked_ptr_1<int64_t> _ptr__7350_s(_7350_s ? _7350_s->raw() : nullptr,_7350_s ? _7350_s->size(0) : 0);
  _ptr__7350_s[(_7348_nd - (int)1)] = (int)1;
  int32_t _12425_ = (int)1;
  int32_t _12426_ = _7348_nd;
  for (int32_t _7351_i = _12425_; _7351_i < _12426_; ++_7351_i)
  {
    {
      _ptr__7350_s[((_7348_nd - _7351_i) - (int)1)] = safe_mul( _ptr__7350_s[(_7348_nd - _7351_i)],_ptr__7344_shp[(_7348_nd - _7351_i)] );
    }
  }
  int32_t _12427_ = (int)0;
  int32_t _12428_ = _7347_n;
  for (int32_t _7352_i = _12427_; _7352_i < _12428_; ++_7352_i)
  {
    {
      int32_t _12429_ = (int)0;
      int32_t _12430_ = _7348_nd;
      for (int32_t _7353_j = _12429_; _7353_j < _12430_; ++_7353_j)
      {
        {
          _ptr__7349_sp[_7352_i] += safe_mul( _ptr__7350_s[_7353_j],((*_7345_sparsity)(_7352_i,_7353_j)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7344_shp,_7349_sp,_7346_vals1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1574:6-1577:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7354_shp,
    double _7355_val) { return mosek::fusion::p_Expr::constTerm(_7354_shp,_7355_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int32_t,1 > > _7354_shp,double _7355_val)
{
  _checked_ptr_1<int32_t> _ptr__7354_shp(_7354_shp ? _7354_shp->raw() : nullptr, _7354_shp ? _7354_shp->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7354_shp,nullptr,_7355_val)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1570:6-1572:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( int32_t _7356_size,
    double _7357_val) { return mosek::fusion::p_Expr::constTerm(_7356_size,_7357_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int32_t _7356_size,double _7357_val)
{
  std::vector<double> _12431_;
  for (int32_t _7358_i = (int)0, _12432_ = _7356_size; _7358_i < _12432_ ; ++_7358_i)
  {
    _12431_.push_back(_7357_val);
  }
  auto _12433_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12431_.size()),_12431_.begin(),_12431_.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7356_size)}),nullptr,_12433_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1563:6-1565:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< double,2 > > _7359_vals2) { return mosek::fusion::p_Expr::constTerm(_7359_vals2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _7359_vals2)
{
  std::vector<double> _12434_;
  for (int32_t _7360_i = (int)0, _12435_ = (int)((_7359_vals2)->size(0)); _7360_i < _12435_ ; ++_7360_i)
  {
    for (int32_t _7361_j = (int)0, _12436_ = (int)((_7359_vals2)->size(1)); _7361_j < _12436_ ; ++_7361_j)
    {
      _12434_.push_back(((*_7359_vals2)(_7360_i,_7361_j)));
    }
  }
  auto _12437_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12434_.size()),_12434_.begin(),_12434_.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_7359_vals2)->size(0))),(int32_t)((int)((_7359_vals2)->size(1)))}),nullptr,_12437_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1556:6-1558:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< double,1 > > _7362_vals1) { return mosek::fusion::p_Expr::constTerm(_7362_vals1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _7362_vals1)
{
  _checked_ptr_1<double> _ptr__7362_vals1(_7362_vals1 ? _7362_vals1->raw() : nullptr, _7362_vals1 ? _7362_vals1->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_7362_vals1)->size(0)))}),nullptr,_7362_vals1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.sum
// Method mosek.fusion.Expr.sum @ src/fusion/Expr.mbi:1541:6-110
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7363_expr,
    int32_t _7364_dim) { return mosek::fusion::p_Expr::sum(_7363_expr,_7364_dim); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7363_expr,int32_t _7364_dim)
{
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_7364_dim,_7363_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.sum

// Begin mosek.fusion.Expr.sum
// Method mosek.fusion.Expr.sum @ src/fusion/Expr.mbi:1540:6-117
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7365_expr) { return mosek::fusion::p_Expr::sum(_7365_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7365_expr)
{
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_7365_expr))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.sum

// Begin mosek.fusion.Expr.neg
// Method mosek.fusion.Expr.neg @ src/fusion/Expr.mbi:1539:6-98
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7366_e) { return mosek::fusion::p_Expr::neg(_7366_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _7366_e)
{
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_7366_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.neg

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1524:6-1537:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _7367_left,monty::rc_ptr< ::mosek::fusion::Matrix > _7368_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7369_expr)
{
  int64_t _7370_nnz = _7368_mx->numNonzeros();
  int32_t _7371_dimi = _7368_mx->numRows();
  int32_t _7372_dimj = _7368_mx->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7373_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7370_nnz)));
  _checked_ptr_1<double> _ptr__7373_mcof(_7373_mcof ? _7373_mcof->raw() : nullptr,_7373_mcof ? _7373_mcof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7374_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7370_nnz)));
  _checked_ptr_1<int32_t> _ptr__7374_msubj(_7374_msubj ? _7374_msubj->raw() : nullptr,_7374_msubj ? _7374_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7375_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7370_nnz)));
  _checked_ptr_1<int32_t> _ptr__7375_msubi(_7375_msubi ? _7375_msubi->raw() : nullptr,_7375_msubi ? _7375_msubi->size(0) : 0);
  _7368_mx->getDataAsTriplets(_7375_msubi,_7374_msubj,_7373_mcof);
  if (_7367_left)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_7371_dimi,_7372_dimj,_7375_msubi,_7374_msubj,_7373_mcof,_7369_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_7371_dimi,_7372_dimj,_7375_msubi,_7374_msubj,_7373_mcof,_7369_expr)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1521:6-140
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7376_v,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7377_p) { return mosek::fusion::p_Expr::mulDiag(_7376_v,_7377_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7376_v,monty::rc_ptr< ::mosek::fusion::Parameter > _7377_p)
{
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7376_v->__mosek_2fusion_2Variable__asExpr(),_7377_p)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1520:6-139
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7378_p,
    monty::rc_ptr< ::mosek::fusion::Variable > _7379_v) { return mosek::fusion::p_Expr::mulDiag(_7378_p,_7379_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7378_p,monty::rc_ptr< ::mosek::fusion::Variable > _7379_v)
{
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7378_p,_7379_v->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1519:6-134
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7380_expr,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7381_p) { return mosek::fusion::p_Expr::mulDiag(_7380_expr,_7381_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7380_expr,monty::rc_ptr< ::mosek::fusion::Parameter > _7381_p)
{
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7380_expr,_7381_p)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1518:6-133
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7382_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7383_expr) { return mosek::fusion::p_Expr::mulDiag(_7382_p,_7383_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7382_p,monty::rc_ptr< ::mosek::fusion::Expression > _7383_expr)
{
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7382_p,_7383_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1516:6-129
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7384_v,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7385_mx) { return mosek::fusion::p_Expr::mulDiag(_7384_v,_7385_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7384_v,monty::rc_ptr< ::mosek::fusion::Matrix > _7385_mx)
{
  return ::mosek::fusion::p_Expr::mulDiag(false,_7385_mx,_7384_v->__mosek_2fusion_2Variable__asExpr());
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1515:6-128
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7386_mx,
    monty::rc_ptr< ::mosek::fusion::Variable > _7387_v) { return mosek::fusion::p_Expr::mulDiag(_7386_mx,_7387_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7386_mx,monty::rc_ptr< ::mosek::fusion::Variable > _7387_v)
{
  return ::mosek::fusion::p_Expr::mulDiag(true,_7386_mx,_7387_v->__mosek_2fusion_2Variable__asExpr());
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1514:6-123
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7388_expr,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7389_mx) { return mosek::fusion::p_Expr::mulDiag(_7388_expr,_7389_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7388_expr,monty::rc_ptr< ::mosek::fusion::Matrix > _7389_mx)
{
  return ::mosek::fusion::p_Expr::mulDiag(false,_7389_mx,_7388_expr);
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1513:6-122
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7390_mx,
    monty::rc_ptr< ::mosek::fusion::Expression > _7391_expr) { return mosek::fusion::p_Expr::mulDiag(_7390_mx,_7391_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7390_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7391_expr)
{
  return ::mosek::fusion::p_Expr::mulDiag(true,_7390_mx,_7391_expr);
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1512:6-306
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7392_v,
    std::shared_ptr< monty::ndarray< double,2 > > _7393_a) { return mosek::fusion::p_Expr::mulDiag(_7392_v,_7393_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7392_v,std::shared_ptr< monty::ndarray< double,2 > > _7393_a)
{
  std::vector<int32_t> _12438_;
  for (int32_t _7394_i = (int)0, _12439_ = (int)((_7393_a)->size(0)); _7394_i < _12439_ ; ++_7394_i)
  {
    for (int32_t _7395_j = (int)0, _12440_ = (int)((_7393_a)->size(1)); _7395_j < _12440_ ; ++_7395_j)
    {
      _12438_.push_back(_7394_i);
    }
  }
  auto _12441_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12438_.size()),_12438_.begin(),_12438_.end()));
  std::vector<int32_t> _12442_;
  for (int32_t _7396_i = (int)0, _12443_ = (int)((_7393_a)->size(0)); _7396_i < _12443_ ; ++_7396_i)
  {
    for (int32_t _7397_j = (int)0, _12444_ = (int)((_7393_a)->size(1)); _7397_j < _12444_ ; ++_7397_j)
    {
      _12442_.push_back(_7397_j);
    }
  }
  auto _12445_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12442_.size()),_12442_.begin(),_12442_.end()));
  std::vector<double> _12446_;
  for (int32_t _7398_i = (int)0, _12447_ = (int)((_7393_a)->size(0)); _7398_i < _12447_ ; ++_7398_i)
  {
    for (int32_t _7399_j = (int)0, _12448_ = (int)((_7393_a)->size(1)); _7399_j < _12448_ ; ++_7399_j)
    {
      _12446_.push_back(((*_7393_a)(_7398_i,_7399_j)));
    }
  }
  auto _12449_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12446_.size()),_12446_.begin(),_12446_.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7393_a)->size(0)),(int)((_7393_a)->size(1)),_12441_,_12445_,_12449_,_7392_v->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1511:6-300
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7400_expr,
    std::shared_ptr< monty::ndarray< double,2 > > _7401_a) { return mosek::fusion::p_Expr::mulDiag(_7400_expr,_7401_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7400_expr,std::shared_ptr< monty::ndarray< double,2 > > _7401_a)
{
  std::vector<int32_t> _12450_;
  for (int32_t _7402_i = (int)0, _12451_ = (int)((_7401_a)->size(0)); _7402_i < _12451_ ; ++_7402_i)
  {
    for (int32_t _7403_j = (int)0, _12452_ = (int)((_7401_a)->size(1)); _7403_j < _12452_ ; ++_7403_j)
    {
      _12450_.push_back(_7402_i);
    }
  }
  auto _12453_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12450_.size()),_12450_.begin(),_12450_.end()));
  std::vector<int32_t> _12454_;
  for (int32_t _7404_i = (int)0, _12455_ = (int)((_7401_a)->size(0)); _7404_i < _12455_ ; ++_7404_i)
  {
    for (int32_t _7405_j = (int)0, _12456_ = (int)((_7401_a)->size(1)); _7405_j < _12456_ ; ++_7405_j)
    {
      _12454_.push_back(_7405_j);
    }
  }
  auto _12457_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12454_.size()),_12454_.begin(),_12454_.end()));
  std::vector<double> _12458_;
  for (int32_t _7406_i = (int)0, _12459_ = (int)((_7401_a)->size(0)); _7406_i < _12459_ ; ++_7406_i)
  {
    for (int32_t _7407_j = (int)0, _12460_ = (int)((_7401_a)->size(1)); _7407_j < _12460_ ; ++_7407_j)
    {
      _12458_.push_back(((*_7401_a)(_7406_i,_7407_j)));
    }
  }
  auto _12461_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12458_.size()),_12458_.begin(),_12458_.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7401_a)->size(0)),(int)((_7401_a)->size(1)),_12453_,_12457_,_12461_,_7400_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1510:6-306
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( std::shared_ptr< monty::ndarray< double,2 > > _7408_a,
    monty::rc_ptr< ::mosek::fusion::Variable > _7409_v) { return mosek::fusion::p_Expr::mulDiag(_7408_a,_7409_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7408_a,monty::rc_ptr< ::mosek::fusion::Variable > _7409_v)
{
  std::vector<int32_t> _12462_;
  for (int32_t _7410_i = (int)0, _12463_ = (int)((_7408_a)->size(0)); _7410_i < _12463_ ; ++_7410_i)
  {
    for (int32_t _7411_j = (int)0, _12464_ = (int)((_7408_a)->size(1)); _7411_j < _12464_ ; ++_7411_j)
    {
      _12462_.push_back(_7410_i);
    }
  }
  auto _12465_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12462_.size()),_12462_.begin(),_12462_.end()));
  std::vector<int32_t> _12466_;
  for (int32_t _7412_i = (int)0, _12467_ = (int)((_7408_a)->size(0)); _7412_i < _12467_ ; ++_7412_i)
  {
    for (int32_t _7413_j = (int)0, _12468_ = (int)((_7408_a)->size(1)); _7413_j < _12468_ ; ++_7413_j)
    {
      _12466_.push_back(_7413_j);
    }
  }
  auto _12469_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12466_.size()),_12466_.begin(),_12466_.end()));
  std::vector<double> _12470_;
  for (int32_t _7414_i = (int)0, _12471_ = (int)((_7408_a)->size(0)); _7414_i < _12471_ ; ++_7414_i)
  {
    for (int32_t _7415_j = (int)0, _12472_ = (int)((_7408_a)->size(1)); _7415_j < _12472_ ; ++_7415_j)
    {
      _12470_.push_back(((*_7408_a)(_7414_i,_7415_j)));
    }
  }
  auto _12473_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12470_.size()),_12470_.begin(),_12470_.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7408_a)->size(0)),(int)((_7408_a)->size(1)),_12465_,_12469_,_12473_,_7409_v->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1509:6-300
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( std::shared_ptr< monty::ndarray< double,2 > > _7416_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7417_expr) { return mosek::fusion::p_Expr::mulDiag(_7416_a,_7417_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7416_a,monty::rc_ptr< ::mosek::fusion::Expression > _7417_expr)
{
  std::vector<int32_t> _12474_;
  for (int32_t _7418_i = (int)0, _12475_ = (int)((_7416_a)->size(0)); _7418_i < _12475_ ; ++_7418_i)
  {
    for (int32_t _7419_j = (int)0, _12476_ = (int)((_7416_a)->size(1)); _7419_j < _12476_ ; ++_7419_j)
    {
      _12474_.push_back(_7418_i);
    }
  }
  auto _12477_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12474_.size()),_12474_.begin(),_12474_.end()));
  std::vector<int32_t> _12478_;
  for (int32_t _7420_i = (int)0, _12479_ = (int)((_7416_a)->size(0)); _7420_i < _12479_ ; ++_7420_i)
  {
    for (int32_t _7421_j = (int)0, _12480_ = (int)((_7416_a)->size(1)); _7421_j < _12480_ ; ++_7421_j)
    {
      _12478_.push_back(_7421_j);
    }
  }
  auto _12481_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12478_.size()),_12478_.begin(),_12478_.end()));
  std::vector<double> _12482_;
  for (int32_t _7422_i = (int)0, _12483_ = (int)((_7416_a)->size(0)); _7422_i < _12483_ ; ++_7422_i)
  {
    for (int32_t _7423_j = (int)0, _12484_ = (int)((_7416_a)->size(1)); _7423_j < _12484_ ; ++_7423_j)
    {
      _12482_.push_back(((*_7416_a)(_7422_i,_7423_j)));
    }
  }
  auto _12485_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12482_.size()),_12482_.begin(),_12482_.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7416_a)->size(0)),(int)((_7416_a)->size(1)),_12477_,_12481_,_12485_,_7417_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulElm_
// Method mosek.fusion.Expr.mulElm_ @ src/fusion/Expr.mbi:1486:6-1507:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _7424_m,monty::rc_ptr< ::mosek::fusion::Expression > _7425_e)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7426_eshape = _7425_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7426_eshape(_7426_eshape ? _7426_eshape->raw() : nullptr,_7426_eshape ? _7426_eshape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _7427_expr = _7425_e;
  if (((int)((_7426_eshape)->size(0)) == (int)1))
  {
    {
      _7426_eshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7426_eshape[(int)0]),(int32_t)((int)1)});
      _ptr__7426_eshape.update(_7426_eshape ? _7426_eshape->raw() : nullptr, _7426_eshape ? _7426_eshape->size(0) : 0);
      _7427_expr = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7426_eshape,_7425_e)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7426_eshape)->size(0)) != (int)2) || ((_7424_m->numRows() != _ptr__7426_eshape[(int)0]) || (_7424_m->numColumns() != _ptr__7426_eshape[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int32_t _7428_mdim1 = _7424_m->numColumns();
  int64_t _7429_mnnz = _7424_m->numNonzeros();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7430_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7429_mnnz)));
  _checked_ptr_1<int32_t> _ptr__7430_msubi(_7430_msubi ? _7430_msubi->raw() : nullptr,_7430_msubi ? _7430_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7431_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7429_mnnz)));
  _checked_ptr_1<int32_t> _ptr__7431_msubj(_7431_msubj ? _7431_msubj->raw() : nullptr,_7431_msubj ? _7431_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7432_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7429_mnnz)));
  _checked_ptr_1<double> _ptr__7432_mcof(_7432_mcof ? _7432_mcof->raw() : nullptr,_7432_mcof ? _7432_mcof->size(0) : 0);
  _7424_m->getDataAsTriplets(_7430_msubi,_7431_msubj,_7432_mcof);
  std::vector<int64_t> _12486_;
  for (int64_t _7433_i = (int)0, _12487_ = _7429_mnnz; _7433_i < _12487_ ; ++_7433_i)
  {
    _12486_.push_back(safe_add( safe_mul( _ptr__7430_msubi[_7433_i],_7428_mdim1 ),_ptr__7431_msubj[_7433_i] ));
  }
  auto _12488_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12486_.size()),_12486_.begin(),_12486_.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7432_mcof,_12488_,_7427_expr,(int)1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm_

// Begin mosek.fusion.Expr.mulElm_
// Method mosek.fusion.Expr.mulElm_ @ src/fusion/Expr.mbi:1472:6-1483:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _7434_a,monty::rc_ptr< ::mosek::fusion::Expression > _7435_expr)
{
  _checked_ptr_1<double> _ptr__7434_a(_7434_a ? _7434_a->raw() : nullptr, _7434_a ? _7434_a->size(0) : 0);
  if (((NULL == _7434_a.get()) || (NULL == _7435_expr.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_7435_expr->getND() == (int)0) && ((int)((_7434_a)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__7434_a[(int)0],_7435_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7435_expr->getND() != (int)1) || (_7435_expr->getDim((int)0) != (int)((_7434_a)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<int64_t> _12489_;
      for (int32_t _7436_i = (int)0, _12490_ = (int)((_7434_a)->size(0)); _7436_i < _12490_ ; ++_7436_i)
      {
        _12489_.push_back(_7436_i);
      }
      auto _12491_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12489_.size()),_12489_.begin(),_12489_.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7434_a,_12491_,_7435_expr)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.mulElm_

// Begin mosek.fusion.Expr.mulElm_
// Method mosek.fusion.Expr.mulElm_ @ src/fusion/Expr.mbi:1460:6-1470:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7437_spm,monty::rc_ptr< ::mosek::fusion::Expression > _7438_expr)
{
  if (((NULL == _7437_spm.get()) || (NULL == _7438_expr.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7439_eshape = _7438_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__7439_eshape(_7439_eshape ? _7439_eshape->raw() : nullptr,_7439_eshape ? _7439_eshape->size(0) : 0);
  if (((int)((_7439_eshape)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7437_spm)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int32_t _12492_ = (int)0;
  int32_t _12493_ = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7437_spm)->dims)->size(0));
  for (int32_t _7440_i = _12492_; _7440_i < _12493_; ++_7440_i)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_7437_spm)->dims)(_7440_i)) != _ptr__7439_eshape[_7440_i]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_7437_spm)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_7437_spm)->inst,_7438_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm_

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1458:6-118
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7441_expr,
    double _7442_c) { return mosek::fusion::p_Expr::mul(_7441_expr,_7442_c); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7441_expr,double _7442_c)
{
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7442_c,_7441_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1457:6-121
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( double _7443_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _7444_expr) { return mosek::fusion::p_Expr::mul(_7443_c,_7444_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _7443_c,monty::rc_ptr< ::mosek::fusion::Expression > _7444_expr)
{
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7443_c,_7444_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1456:6-105
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7445_expr,
    std::shared_ptr< monty::ndarray< double,1 > > _7446_a) { return mosek::fusion::p_Expr::mul(_7445_expr,_7446_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7445_expr,std::shared_ptr< monty::ndarray< double,1 > > _7446_a)
{
  _checked_ptr_1<double> _ptr__7446_a(_7446_a ? _7446_a->raw() : nullptr, _7446_a ? _7446_a->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_7446_a,_7445_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1455:6-107
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( std::shared_ptr< monty::ndarray< double,1 > > _7447_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7448_expr) { return mosek::fusion::p_Expr::mul(_7447_a,_7448_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _7447_a,monty::rc_ptr< ::mosek::fusion::Expression > _7448_expr)
{
  _checked_ptr_1<double> _ptr__7447_a(_7447_a ? _7447_a->raw() : nullptr, _7447_a ? _7447_a->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_7447_a,_7448_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1454:6-105
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7449_expr,
    std::shared_ptr< monty::ndarray< double,2 > > _7450_a) { return mosek::fusion::p_Expr::mul(_7449_expr,_7450_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7449_expr,std::shared_ptr< monty::ndarray< double,2 > > _7450_a)
{
  return ::mosek::fusion::p_Expr::mul(false,_7450_a,_7449_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1453:6-107
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( std::shared_ptr< monty::ndarray< double,2 > > _7451_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7452_expr) { return mosek::fusion::p_Expr::mul(_7451_a,_7452_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _7451_a,monty::rc_ptr< ::mosek::fusion::Expression > _7452_expr)
{
  return ::mosek::fusion::p_Expr::mul(true,_7451_a,_7452_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1452:6-106
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7453_expr,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7454_mx) { return mosek::fusion::p_Expr::mul(_7453_expr,_7454_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7453_expr,monty::rc_ptr< ::mosek::fusion::Matrix > _7454_mx)
{
  return ::mosek::fusion::p_Expr::mul(false,_7454_mx,_7453_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1451:6-108
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7455_mx,
    monty::rc_ptr< ::mosek::fusion::Expression > _7456_expr) { return mosek::fusion::p_Expr::mul(_7455_mx,_7456_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7455_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7456_expr)
{
  return ::mosek::fusion::p_Expr::mul(true,_7455_mx,_7456_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1429:6-1449:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7457_left,std::shared_ptr< monty::ndarray< double,1 > > _7458_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7459_e)
{
  _checked_ptr_1<double> _ptr__7458_mx(_7458_mx ? _7458_mx->raw() : nullptr, _7458_mx ? _7458_mx->size(0) : 0);
  int32_t _7460_mdim0 = (int)((_7458_mx)->size(0));
  int32_t _7461_nnz = _7460_mdim0;
  std::shared_ptr< monty::ndarray< double,1 > > _7462_mval = ::mosek::fusion::Utils::Tools::arraycopy(_7458_mx);
  _checked_ptr_1<double> _ptr__7462_mval(_7462_mval ? _7462_mval->raw() : nullptr,_7462_mval ? _7462_mval->size(0) : 0);
  int32_t _7463_nd = _7459_e->getND();
  if ((_7463_nd == (int)0))
  {
    {
      std::vector<int32_t> _12494_;
      for (int32_t _7464_i = (int)0, _12495_ = _7460_mdim0; _7464_i < _12495_ ; ++_7464_i)
      {
        _12494_.push_back(_7464_i);
      }
      auto _12496_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12494_.size()),_12494_.begin(),_12494_.end()));
      std::vector<int32_t> _12497_;
      for (int32_t _7465_i = (int)0, _12498_ = _7460_mdim0; _7465_i < _12498_ ; ++_7465_i)
      {
        _12497_.push_back((int)0);
      }
      auto _12499_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12497_.size()),_12497_.begin(),_12497_.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7460_mdim0)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7460_mdim0,(int)1,_12496_,_12499_,_7462_mval,_7459_e,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7463_nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_7457_left && (_7459_e->getDim((int)0) == (int)((_7458_mx)->size(0)))))
  {
    {
      std::vector<int32_t> _12500_;
      for (int32_t _7466_i = (int)0, _12501_ = _7460_mdim0; _7466_i < _12501_ ; ++_7466_i)
      {
        _12500_.push_back((int)0);
      }
      auto _12502_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12500_.size()),_12500_.begin(),_12500_.end()));
      std::vector<int32_t> _12503_;
      for (int32_t _7467_i = (int)0, _12504_ = _7460_mdim0; _7467_i < _12504_ ; ++_7467_i)
      {
        _12503_.push_back(_7467_i);
      }
      auto _12505_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12503_.size()),_12503_.begin(),_12503_.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7459_e->getDim((int)1))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft((int)1,_7460_mdim0,_12502_,_12505_,_7462_mval,_7459_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7457_left && (_7459_e->getDim((int)0) == (int)1)))
  {
    {
      std::vector<int32_t> _12506_;
      for (int32_t _7468_i = (int)0, _12507_ = _7460_mdim0; _7468_i < _12507_ ; ++_7468_i)
      {
        _12506_.push_back(_7468_i);
      }
      auto _12508_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12506_.size()),_12506_.begin(),_12506_.end()));
      std::vector<int32_t> _12509_;
      for (int32_t _7469_i = (int)0, _12510_ = _7460_mdim0; _7469_i < _12510_ ; ++_7469_i)
      {
        _12509_.push_back((int)0);
      }
      auto _12511_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12509_.size()),_12509_.begin(),_12509_.end()));
      return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7460_mdim0,(int)1,_12508_,_12511_,_7462_mval,_7459_e,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7457_left) && (_7459_e->getDim((int)1) == _7460_mdim0)))
  {
    {
      std::vector<int32_t> _12512_;
      for (int32_t _7470_i = (int)0, _12513_ = _7460_mdim0; _7470_i < _12513_ ; ++_7470_i)
      {
        _12512_.push_back(_7470_i);
      }
      auto _12514_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12512_.size()),_12512_.begin(),_12512_.end()));
      std::vector<int32_t> _12515_;
      for (int32_t _7471_i = (int)0, _12516_ = _7460_mdim0; _7471_i < _12516_ ; ++_7471_i)
      {
        _12515_.push_back((int)0);
      }
      auto _12517_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12515_.size()),_12515_.begin(),_12515_.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7459_e->getDim((int)0))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7460_mdim0,(int)1,_12514_,_12517_,_7462_mval,_7459_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7457_left) && (_7459_e->getDim((int)1) == (int)1)))
  {
    {
      std::vector<int32_t> _12518_;
      for (int32_t _7472_i = (int)0, _12519_ = _7460_mdim0; _7472_i < _12519_ ; ++_7472_i)
      {
        _12518_.push_back((int)0);
      }
      auto _12520_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12518_.size()),_12518_.begin(),_12518_.end()));
      std::vector<int32_t> _12521_;
      for (int32_t _7473_i = (int)0, _12522_ = _7460_mdim0; _7473_i < _12522_ ; ++_7473_i)
      {
        _12521_.push_back(_7473_i);
      }
      auto _12523_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12521_.size()),_12521_.begin(),_12521_.end()));
      return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight((int)1,_7460_mdim0,_12520_,_12523_,_7462_mval,_7459_e,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1398:6-1427:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7474_left,std::shared_ptr< monty::ndarray< double,2 > > _7475_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7476_e)
{
  int32_t _7477_mdim0 = (int)((_7475_mx)->size(0));
  int32_t _7478_mdim1 = (int)((_7475_mx)->size(1));
  int32_t _7479_nnz = safe_mul( _7477_mdim0,_7478_mdim1 );
  std::vector<int32_t> _12524_;
  for (int32_t _7481_i = (int)0, _12525_ = _7477_mdim0; _7481_i < _12525_ ; ++_7481_i)
  {
    for (int32_t _7482_j = (int)0, _12526_ = _7478_mdim1; _7482_j < _12526_ ; ++_7482_j)
    {
      _12524_.push_back(_7481_i);
    }
  }
  auto _12527_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12524_.size()),_12524_.begin(),_12524_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7480_msubi = _12527_;
  _checked_ptr_1<int32_t> _ptr__7480_msubi(_7480_msubi ? _7480_msubi->raw() : nullptr,_7480_msubi ? _7480_msubi->size(0) : 0);
  std::vector<int32_t> _12528_;
  for (int32_t _7484_i = (int)0, _12529_ = _7477_mdim0; _7484_i < _12529_ ; ++_7484_i)
  {
    for (int32_t _7485_j = (int)0, _12530_ = _7478_mdim1; _7485_j < _12530_ ; ++_7485_j)
    {
      _12528_.push_back(_7485_j);
    }
  }
  auto _12531_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12528_.size()),_12528_.begin(),_12528_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7483_msubj = _12531_;
  _checked_ptr_1<int32_t> _ptr__7483_msubj(_7483_msubj ? _7483_msubj->raw() : nullptr,_7483_msubj ? _7483_msubj->size(0) : 0);
  std::vector<double> _12532_;
  for (int32_t _7487_i = (int)0, _12533_ = _7477_mdim0; _7487_i < _12533_ ; ++_7487_i)
  {
    for (int32_t _7488_j = (int)0, _12534_ = _7478_mdim1; _7488_j < _12534_ ; ++_7488_j)
    {
      _12532_.push_back(((*_7475_mx)(_7487_i,_7488_j)));
    }
  }
  auto _12535_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12532_.size()),_12532_.begin(),_12532_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7486_mval = _12535_;
  _checked_ptr_1<double> _ptr__7486_mval(_7486_mval ? _7486_mval->raw() : nullptr,_7486_mval ? _7486_mval->size(0) : 0);
  int64_t _7489_esize = _7476_e->getSize();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7490_eshape = _7476_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7490_eshape(_7490_eshape ? _7490_eshape->raw() : nullptr,_7490_eshape ? _7490_eshape->size(0) : 0);
  if (((int)((_7490_eshape)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7477_mdim0,_7478_mdim1,_7480_msubi,_7483_msubj,_7486_mval,_7476_e,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_7474_left)
  {
    {
      if (((int)((_7490_eshape)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_7475_mx)->size(0)))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7477_mdim0,_7478_mdim1,_7480_msubi,_7483_msubj,_7486_mval,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7490_eshape[(int)0]),(int32_t)((int)1)}),_7476_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7490_eshape)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7477_mdim0,_7478_mdim1,_7480_msubi,_7483_msubj,_7486_mval,_7476_e)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_7490_eshape)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_7475_mx)->size(1)))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7477_mdim0,_7478_mdim1,_7480_msubi,_7483_msubj,_7486_mval,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7490_eshape[(int)0])}),_7476_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7490_eshape)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7477_mdim0,_7478_mdim1,_7480_msubi,_7483_msubj,_7486_mval,_7476_e)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1367:6-1396:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7491_left,monty::rc_ptr< ::mosek::fusion::Matrix > _7492_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7493_e)
{
  int64_t _7494_nnz = _7492_mx->numNonzeros();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7495_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7494_nnz)));
  _checked_ptr_1<int32_t> _ptr__7495_msubi(_7495_msubi ? _7495_msubi->raw() : nullptr,_7495_msubi ? _7495_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7496_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7494_nnz)));
  _checked_ptr_1<int32_t> _ptr__7496_msubj(_7496_msubj ? _7496_msubj->raw() : nullptr,_7496_msubj ? _7496_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7497_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7494_nnz)));
  _checked_ptr_1<double> _ptr__7497_mval(_7497_mval ? _7497_mval->raw() : nullptr,_7497_mval ? _7497_mval->size(0) : 0);
  int32_t _7498_mdim0 = _7492_mx->numRows();
  int32_t _7499_mdim1 = _7492_mx->numColumns();
  _7492_mx->getDataAsTriplets(_7495_msubi,_7496_msubj,_7497_mval);
  int32_t _7500_nd = _7493_e->getND();
  if ((_7500_nd == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7498_mdim0,_7499_mdim1,_7495_msubi,_7496_msubj,_7497_mval,_7493_e)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7500_nd == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7501_eshape = _7493_e->getShape();
      _checked_ptr_1<int32_t> _ptr__7501_eshape(_7501_eshape ? _7501_eshape->raw() : nullptr,_7501_eshape ? _7501_eshape->size(0) : 0);
      if (_7491_left)
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7498_mdim0)}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7498_mdim0,_7499_mdim1,_7495_msubi,_7496_msubj,_7497_mval,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7501_eshape[(int)0]),(int32_t)((int)1)}),_7493_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7499_mdim1)}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7498_mdim0,_7499_mdim1,_7495_msubi,_7496_msubj,_7497_mval,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7501_eshape[(int)0])}),_7493_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else if((_7500_nd == (int)2))
  {
    {
      if (_7491_left)
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7498_mdim0,_7499_mdim1,_7495_msubi,_7496_msubj,_7497_mval,_7493_e)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7498_mdim0,_7499_mdim1,_7495_msubi,_7496_msubj,_7497_mval,_7493_e)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1357:6-1365:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7502_v,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7503_mx) { return mosek::fusion::p_Expr::mul(_7502_v,_7503_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _7502_v,monty::rc_ptr< ::mosek::fusion::Matrix > _7503_mx)
{
  int32_t _7504_mdimi = _7503_mx->numRows();
  int32_t _7505_mdimj = _7503_mx->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7506_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7503_mx->numNonzeros())));
  _checked_ptr_1<double> _ptr__7506_mcof(_7506_mcof ? _7506_mcof->raw() : nullptr,_7506_mcof ? _7506_mcof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7507_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7503_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7507_msubj(_7507_msubj ? _7507_msubj->raw() : nullptr,_7507_msubj ? _7507_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7508_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7503_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7508_msubi(_7508_msubi ? _7508_msubi->raw() : nullptr,_7508_msubi ? _7508_msubi->size(0) : 0);
  _7503_mx->getDataAsTriplets(_7508_msubi,_7507_msubj,_7506_mcof);
  return ::mosek::fusion::p_Expr::mul(false,_7504_mdimi,_7505_mdimj,_7508_msubi,_7507_msubj,_7506_mcof,_7502_v);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1347:6-1356:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7509_mx,
    monty::rc_ptr< ::mosek::fusion::Variable > _7510_v) { return mosek::fusion::p_Expr::mul(_7509_mx,_7510_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7509_mx,monty::rc_ptr< ::mosek::fusion::Variable > _7510_v)
{
  int32_t _7511_mdimi = _7509_mx->numRows();
  int32_t _7512_mdimj = _7509_mx->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7513_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7509_mx->numNonzeros())));
  _checked_ptr_1<double> _ptr__7513_mcof(_7513_mcof ? _7513_mcof->raw() : nullptr,_7513_mcof ? _7513_mcof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7514_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7509_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7514_msubj(_7514_msubj ? _7514_msubj->raw() : nullptr,_7514_msubj ? _7514_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7515_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7509_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7515_msubi(_7515_msubi ? _7515_msubi->raw() : nullptr,_7515_msubi ? _7515_msubi->size(0) : 0);
  _7509_mx->getDataAsTriplets(_7515_msubi,_7514_msubj,_7513_mcof);
  return ::mosek::fusion::p_Expr::mul(true,_7511_mdimi,_7512_mdimj,_7515_msubi,_7514_msubj,_7513_mcof,_7510_v);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1333:6-1344:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7516_left,int32_t _7517_mdimi,int32_t _7518_mdimj,std::shared_ptr< monty::ndarray< int32_t,1 > > _7519_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _7520_msubj,std::shared_ptr< monty::ndarray< double,1 > > _7521_mcof,monty::rc_ptr< ::mosek::fusion::Variable > _7522_v)
{
  _checked_ptr_1<int32_t> _ptr__7519_msubi(_7519_msubi ? _7519_msubi->raw() : nullptr, _7519_msubi ? _7519_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7520_msubj(_7520_msubj ? _7520_msubj->raw() : nullptr, _7520_msubj ? _7520_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__7521_mcof(_7521_mcof ? _7521_mcof->raw() : nullptr, _7521_mcof ? _7521_mcof->size(0) : 0);
  if ((_7522_v->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_7517_mdimi,_7518_mdimj,_7519_msubi,_7520_msubj,_7521_mcof,_7522_v)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7522_v->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7523_vshape = _7522_v->getShape();
      _checked_ptr_1<int32_t> _ptr__7523_vshape(_7523_vshape ? _7523_vshape->raw() : nullptr,_7523_vshape ? _7523_vshape->size(0) : 0);
      int32_t _12536_;
      bool _12537_ = _7516_left;
      if (_12537_)
      {
        _12536_ = _7517_mdimi;
      }
      else
      {
        _12536_ = _7518_mdimj;
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _12538_;
      bool _12539_ = _7516_left;
      if (_12539_)
      {
        _12538_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7523_vshape[(int)0]),(int32_t)((int)1)});
      }
      else
      {
        _12538_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7523_vshape[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_12536_)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7516_left,_7517_mdimi,_7518_mdimj,_7519_msubi,_7520_msubj,_7521_mcof,::mosek::fusion::p_Var::reshape(_7522_v,_12538_))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7516_left,_7517_mdimi,_7518_mdimj,_7519_msubi,_7520_msubj,_7521_mcof,_7522_v)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1318:6-1331:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7524_expr,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7525_p) { return mosek::fusion::p_Expr::mul(_7524_expr,_7525_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7524_expr,monty::rc_ptr< ::mosek::fusion::Parameter > _7525_p)
{
  if (((_7525_p->getND() == (int)2) && (_7524_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7524_expr,_7525_p)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7525_p->getND() == (int)1) && (_7524_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7524_expr->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7524_expr,_7525_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7525_p->getDim((int)0)),(int32_t)((int)1)})))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7525_p->getND() == (int)2) && (_7524_expr->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7525_p->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight((::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_7524_expr->getDim((int)0))}),_7524_expr)).as<::mosek::fusion::Expression>(),_7525_p)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7525_p->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7525_p,_7524_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7524_expr->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7525_p,_7524_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1304:6-1317:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7526_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7527_expr) { return mosek::fusion::p_Expr::mul(_7526_p,_7527_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Parameter > _7526_p,monty::rc_ptr< ::mosek::fusion::Expression > _7527_expr)
{
  if (((_7526_p->getND() == (int)2) && (_7527_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7526_p,_7527_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7526_p->getND() == (int)1) && (_7527_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7527_expr->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7526_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_7526_p->getDim((int)0))})),_7527_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7526_p->getND() == (int)2) && (_7527_expr->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7526_p->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7526_p,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7527_expr->getDim((int)0)),(int32_t)((int)1)}),_7527_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7526_p->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7526_p,_7527_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7527_expr->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7526_p,_7527_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1289:6-1302:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7528_e,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7529_m) { return mosek::fusion::p_Expr::dot(_7528_e,_7529_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7528_e,monty::rc_ptr< ::mosek::fusion::Matrix > _7529_m)
{
  int64_t _7530_nnz = _7529_m->numNonzeros();
  if ((!_7529_m->isSparse()))
  {
    {
      std::vector<int64_t> _12540_;
      for (int64_t _7531_i = (int)0, _12541_ = _7530_nnz; _7531_i < _12541_ ; ++_7531_i)
      {
        _12540_.push_back(_7531_i);
      }
      auto _12542_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12540_.size()),_12540_.begin(),_12540_.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7528_e,_12542_,_7529_m->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7532_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7530_nnz)));
      _checked_ptr_1<int32_t> _ptr__7532_subi(_7532_subi ? _7532_subi->raw() : nullptr,_7532_subi ? _7532_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7533_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7530_nnz)));
      _checked_ptr_1<int32_t> _ptr__7533_subj(_7533_subj ? _7533_subj->raw() : nullptr,_7533_subj ? _7533_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7534_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7530_nnz)));
      _checked_ptr_1<double> _ptr__7534_cof(_7534_cof ? _7534_cof->raw() : nullptr,_7534_cof ? _7534_cof->size(0) : 0);
      int32_t _7535_dimj = _7529_m->numColumns();
      _7529_m->getDataAsTriplets(_7532_subi,_7533_subj,_7534_cof);
      std::vector<int64_t> _12543_;
      for (int32_t _7536_i = (int)0, _12544_ = (int)((_7532_subi)->size(0)); _7536_i < _12544_ ; ++_7536_i)
      {
        _12543_.push_back(safe_add( safe_mul( _ptr__7532_subi[_7536_i],_7535_dimj ),_ptr__7533_subj[_7536_i] ));
      }
      auto _12545_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12543_.size()),_12543_.begin(),_12543_.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7528_e,_12545_,_7534_cof)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1288:6-217
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7537_e,
    std::shared_ptr< monty::ndarray< double,2 > > _7538_c2) { return mosek::fusion::p_Expr::dot(_7537_e,_7538_c2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7537_e,std::shared_ptr< monty::ndarray< double,2 > > _7538_c2)
{
  std::vector<int64_t> _12546_;
  for (int32_t _7539_i = (int)0, _12547_ = safe_mul( (int)((_7538_c2)->size(0)),(int)((_7538_c2)->size(1)) ); _7539_i < _12547_ ; ++_7539_i)
  {
    _12546_.push_back(_7539_i);
  }
  auto _12548_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12546_.size()),_12546_.begin(),_12546_.end()));
  std::vector<double> _12549_;
  for (int32_t _7540_i = (int)0, _12550_ = (int)((_7538_c2)->size(0)); _7540_i < _12550_ ; ++_7540_i)
  {
    for (int32_t _7541_j = (int)0, _12551_ = (int)((_7538_c2)->size(1)); _7541_j < _12551_ ; ++_7541_j)
    {
      _12549_.push_back(((*_7538_c2)(_7540_i,_7541_j)));
    }
  }
  auto _12552_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12549_.size()),_12549_.begin(),_12549_.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7537_e,_12548_,_12552_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1287:6-126
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7542_e,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7543_nda) { return mosek::fusion::p_Expr::dot(_7542_e,_7543_nda); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7542_e,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7543_nda)
{
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7542_e,mosek::fusion::p_NDSparseArray::_get_impl(_7543_nda)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_7543_nda)->cof)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1271:6-1286:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7544_e,
    std::shared_ptr< monty::ndarray< double,1 > > _7545_c1) { return mosek::fusion::p_Expr::dot(_7544_e,_7545_c1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7544_e,std::shared_ptr< monty::ndarray< double,1 > > _7545_c1)
{
  _checked_ptr_1<double> _ptr__7545_c1(_7545_c1 ? _7545_c1->raw() : nullptr, _7545_c1 ? _7545_c1->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7546_eshape = _7544_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7546_eshape(_7546_eshape ? _7546_eshape->raw() : nullptr,_7546_eshape ? _7546_eshape->size(0) : 0);
  if (((_7544_e->getSize() == (int)((_7545_c1)->size(0))) && ((int)((_7546_eshape)->size(0)) > (int)1)))
  {
    {
      int32_t _7547_numnotone = (int)0;
      int32_t _12553_ = (int)0;
      int32_t _12554_ = (int)((_7546_eshape)->size(0));
      for (int32_t _7548_i = _12553_; _7548_i < _12554_; ++_7548_i)
      {
        {
          if ((_ptr__7546_eshape[_7548_i] > (int)1))
          {
            {
              ++ _7547_numnotone;
            }
          }
          {}
        }
      }
      if ((_7547_numnotone > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7549_newshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int32_t)_7544_e->getSize())});
          _checked_ptr_1<int32_t> _ptr__7549_newshape(_7549_newshape ? _7549_newshape->raw() : nullptr,_7549_newshape ? _7549_newshape->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7549_newshape,_7544_e)).as<::mosek::fusion::Expression>(),_7545_c1)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7544_e,_7545_c1)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1269:6-99
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7550_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7551_e) { return mosek::fusion::p_Expr::dot(_7550_m,_7551_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _7550_m,monty::rc_ptr< ::mosek::fusion::Expression > _7551_e)
{
  return ::mosek::fusion::p_Expr::dot(_7551_e,_7550_m);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1268:6-101
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7552_nda,
    monty::rc_ptr< ::mosek::fusion::Expression > _7553_e) { return mosek::fusion::p_Expr::dot(_7552_nda,_7553_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7552_nda,monty::rc_ptr< ::mosek::fusion::Expression > _7553_e)
{
  return ::mosek::fusion::p_Expr::dot(_7553_e,_7552_nda);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1267:6-100
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( std::shared_ptr< monty::ndarray< double,2 > > _7554_c2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7555_e) { return mosek::fusion::p_Expr::dot(_7554_c2,_7555_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _7554_c2,monty::rc_ptr< ::mosek::fusion::Expression > _7555_e)
{
  return ::mosek::fusion::p_Expr::dot(_7555_e,_7554_c2);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1266:6-100
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( std::shared_ptr< monty::ndarray< double,1 > > _7556_c1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7557_e) { return mosek::fusion::p_Expr::dot(_7556_c1,_7557_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _7556_c1,monty::rc_ptr< ::mosek::fusion::Expression > _7557_e)
{
  _checked_ptr_1<double> _ptr__7556_c1(_7556_c1 ? _7556_c1->raw() : nullptr, _7556_c1 ? _7556_c1->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_7557_e,_7556_c1);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1264:6-103
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7558_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7559_p) { return mosek::fusion::p_Expr::dot(_7558_e,_7559_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7558_e,monty::rc_ptr< ::mosek::fusion::Parameter > _7559_p)
{
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7559_p,_7558_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1263:6-103
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7560_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7561_e) { return mosek::fusion::p_Expr::dot(_7560_p,_7561_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Parameter > _7560_p,monty::rc_ptr< ::mosek::fusion::Expression > _7561_e)
{
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7560_p,_7561_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1249:6-1261:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7562_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7563_e) { return mosek::fusion::p_Expr::outer(_7562_p,_7563_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Parameter > _7562_p,monty::rc_ptr< ::mosek::fusion::Expression > _7563_e)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7564_vshape = _7563_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7564_vshape(_7564_vshape ? _7564_vshape->raw() : nullptr,_7564_vshape ? _7564_vshape->size(0) : 0);
  if ((!(((int)((_7564_vshape)->size(0)) == (int)1) || (((int)((_7564_vshape)->size(0)) == (int)2) && (_ptr__7564_vshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7565_pshape = _7562_p->getShape();
  _checked_ptr_1<int32_t> _ptr__7565_pshape(_7565_pshape ? _7565_pshape->raw() : nullptr,_7565_pshape ? _7565_pshape->size(0) : 0);
  if ((!((_7562_p->getND() == (int)1) || ((_7562_p->getND() == (int)2) && (_ptr__7565_pshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Parameter argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(_7562_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7565_pshape[(int)0]),(int32_t)((int)1)})),::mosek::fusion::p_Expr::reshape(_7563_e,(int)1,_ptr__7564_vshape[(int)0]));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1235:6-1247:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7566_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7567_p) { return mosek::fusion::p_Expr::outer(_7566_e,_7567_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7566_e,monty::rc_ptr< ::mosek::fusion::Parameter > _7567_p)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7568_shape = _7566_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7568_shape(_7568_shape ? _7568_shape->raw() : nullptr,_7568_shape ? _7568_shape->size(0) : 0);
  if ((!((_7566_e->getND() == (int)1) || ((_7566_e->getND() == (int)2) && (_ptr__7568_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7569_pshape = _7567_p->getShape();
  _checked_ptr_1<int32_t> _ptr__7569_pshape(_7569_pshape ? _7569_pshape->raw() : nullptr,_7569_pshape ? _7569_pshape->size(0) : 0);
  if ((!((_7567_p->getND() == (int)1) || ((_7567_p->getND() == (int)2) && (_ptr__7569_pshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Parameter argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7566_e,_ptr__7568_shape[(int)0],(int)1),_7567_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7569_pshape[(int)0])})));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1223:6-1233:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7570_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7571_e) { return mosek::fusion::p_Expr::outer(_7570_m,_7571_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _7570_m,monty::rc_ptr< ::mosek::fusion::Expression > _7571_e)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7572_vshape = _7571_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7572_vshape(_7572_vshape ? _7572_vshape->raw() : nullptr,_7572_vshape ? _7572_vshape->size(0) : 0);
  if ((!(((int)((_7572_vshape)->size(0)) == (int)1) || (((int)((_7572_vshape)->size(0)) == (int)2) && (_ptr__7572_vshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7570_m)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(_7570_m,::mosek::fusion::p_Expr::reshape(_7571_e,(int)1,_ptr__7572_vshape[(int)0]));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1211:6-1221:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7573_e,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7574_m) { return mosek::fusion::p_Expr::outer(_7573_e,_7574_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7573_e,monty::rc_ptr< ::mosek::fusion::Matrix > _7574_m)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7575_shape = _7573_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7575_shape(_7575_shape ? _7575_shape->raw() : nullptr,_7575_shape ? _7575_shape->size(0) : 0);
  if ((!((_7573_e->getND() == (int)1) || ((_7573_e->getND() == (int)2) && (_ptr__7575_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7574_m)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7573_e,_ptr__7575_shape[(int)0],(int)1),_7574_m->__mosek_2fusion_2Matrix__transpose());
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1201:6-1209:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( std::shared_ptr< monty::ndarray< double,1 > > _7576_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7577_e) { return mosek::fusion::p_Expr::outer(_7576_a,_7577_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _7576_a,monty::rc_ptr< ::mosek::fusion::Expression > _7577_e)
{
  _checked_ptr_1<double> _ptr__7576_a(_7576_a ? _7576_a->raw() : nullptr, _7576_a ? _7576_a->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7578_shape = _7577_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7578_shape(_7578_shape ? _7578_shape->raw() : nullptr,_7578_shape ? _7578_shape->size(0) : 0);
  if ((!((_7577_e->getND() == (int)1) || ((_7577_e->getND() == (int)2) && (_ptr__7578_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Matrix::dense((int)((_7576_a)->size(0)),(int)1,_7576_a),::mosek::fusion::p_Expr::reshape(_7577_e,(int)1,_ptr__7578_shape[(int)0]));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1191:6-1199:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7579_e,
    std::shared_ptr< monty::ndarray< double,1 > > _7580_a) { return mosek::fusion::p_Expr::outer(_7579_e,_7580_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7579_e,std::shared_ptr< monty::ndarray< double,1 > > _7580_a)
{
  _checked_ptr_1<double> _ptr__7580_a(_7580_a ? _7580_a->raw() : nullptr, _7580_a ? _7580_a->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7581_shape = _7579_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7581_shape(_7581_shape ? _7581_shape->raw() : nullptr,_7581_shape ? _7581_shape->size(0) : 0);
  if ((!((_7579_e->getND() == (int)1) || ((_7579_e->getND() == (int)2) && (_ptr__7581_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7579_e,_ptr__7581_shape[(int)0],(int)1),::mosek::fusion::p_Matrix::dense((int)1,(int)((_7580_a)->size(0)),_7580_a));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer_
// Method mosek.fusion.Expr.outer_ @ src/fusion/Expr.mbi:1094:6-1189:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int32_t _7582_edim,std::shared_ptr< monty::ndarray< int64_t,1 > > _7583_eptrb,std::shared_ptr< monty::ndarray< int64_t,1 > > _7584_esubj,std::shared_ptr< monty::ndarray< double,1 > > _7585_ecof,std::shared_ptr< monty::ndarray< double,1 > > _7586_ebfix,std::shared_ptr< monty::ndarray< int64_t,1 > > _7587_einst,std::shared_ptr< monty::ndarray< double,1 > > _7588_a,std::shared_ptr< monty::ndarray< int32_t,1 > > _7589_sub,int32_t _7590_dim,bool _7591_transpose)
{
  _checked_ptr_1<int64_t> _ptr__7583_eptrb(_7583_eptrb ? _7583_eptrb->raw() : nullptr, _7583_eptrb ? _7583_eptrb->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__7584_esubj(_7584_esubj ? _7584_esubj->raw() : nullptr, _7584_esubj ? _7584_esubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__7585_ecof(_7585_ecof ? _7585_ecof->raw() : nullptr, _7585_ecof ? _7585_ecof->size(0) : 0);
  _checked_ptr_1<double> _ptr__7586_ebfix(_7586_ebfix ? _7586_ebfix->raw() : nullptr, _7586_ebfix ? _7586_ebfix->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__7587_einst(_7587_einst ? _7587_einst->raw() : nullptr, _7587_einst ? _7587_einst->size(0) : 0);
  _checked_ptr_1<double> _ptr__7588_a(_7588_a ? _7588_a->raw() : nullptr, _7588_a ? _7588_a->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7589_sub(_7589_sub ? _7589_sub->raw() : nullptr, _7589_sub ? _7589_sub->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _12555_;
  bool _12556_ = (!_7591_transpose);
  if (_12556_)
  {
    _12555_ = ::mosek::fusion::p_Set::make(_7582_edim,_7590_dim);
  }
  else
  {
    _12555_ = ::mosek::fusion::p_Set::make(_7590_dim,_7582_edim);
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7592_shape = _12555_;
  _checked_ptr_1<int32_t> _ptr__7592_shape(_7592_shape ? _7592_shape->raw() : nullptr,_7592_shape ? _7592_shape->size(0) : 0);
  int32_t _7593_nnzelm = safe_mul( (int)((_7588_a)->size(0)),(int)((_7587_einst)->size(0)) );
  int32_t _7594_nnz = safe_mul( (int)((_7588_a)->size(0)),(int)((_7584_esubj)->size(0)) );
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7595_inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7593_nnzelm)));
  _checked_ptr_1<int64_t> _ptr__7595_inst(_7595_inst ? _7595_inst->raw() : nullptr,_7595_inst ? _7595_inst->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12557_;
  bool _12558_ = (NULL != _7586_ebfix.get());
  if (_12558_)
  {
    _12557_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7593_nnzelm)));
  }
  else
  {
    _12557_ = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7596_bfix = _12557_;
  _checked_ptr_1<double> _ptr__7596_bfix(_7596_bfix ? _7596_bfix->raw() : nullptr,_7596_bfix ? _7596_bfix->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7597_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7594_nnz)));
  _checked_ptr_1<double> _ptr__7597_cof(_7597_cof ? _7597_cof->raw() : nullptr,_7597_cof ? _7597_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7598_subj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7594_nnz)));
  _checked_ptr_1<int64_t> _ptr__7598_subj(_7598_subj ? _7598_subj->raw() : nullptr,_7598_subj ? _7598_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7599_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _7593_nnzelm,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__7599_ptrb(_7599_ptrb ? _7599_ptrb->raw() : nullptr,_7599_ptrb ? _7599_ptrb->size(0) : 0);
  int32_t _7600_ennz = (int32_t)_ptr__7599_ptrb[((int)((_7599_ptrb)->size(0)) - (int)1)];
  if ((!_7591_transpose))
  {
    {
      int64_t _7601_k = (int64_t)0;
      int64_t _7602_ptr = (int64_t)0;
      int32_t _12559_ = (int)0;
      int32_t _12560_ = (int)((_7587_einst)->size(0));
      for (int32_t _7603_i = _12559_; _7603_i < _12560_; ++_7603_i)
      {
        {
          int64_t _7604_num = (_ptr__7583_eptrb[safe_add( _7603_i,(int)1 )] - _ptr__7583_eptrb[_7603_i]);
          int32_t _12561_ = (int)0;
          int32_t _12562_ = (int)((_7588_a)->size(0));
          for (int32_t _7605_j = _12561_; _7605_j < _12562_; ++_7605_j)
          {
            {
              _ptr__7587_einst[_7601_k] = safe_add( safe_mul( _ptr__7587_einst[_7603_i],_7590_dim ),_ptr__7589_sub[_7605_j] );
              _ptr__7599_ptrb[safe_add( _7601_k,(int)1 )] = safe_add( _ptr__7599_ptrb[_7601_k],_7604_num );
              ++ _7601_k;
              int64_t _12563_ = _ptr__7583_eptrb[_7603_i];
              int64_t _12564_ = _ptr__7583_eptrb[safe_add( _7603_i,(int)1 )];
              for (int64_t _7606_l = _12563_; _7606_l < _12564_; ++_7606_l)
              {
                {
                  _ptr__7598_subj[_7602_ptr] = _ptr__7584_esubj[_7606_l];
                  _ptr__7597_cof[_7602_ptr] = (_ptr__7585_ecof[_7606_l] * _ptr__7588_a[_7605_j]);
                  ++ _7602_ptr;
                }
              }
            }
          }
        }
      }
      if ((NULL != _7596_bfix.get()))
      {
        {
          int32_t _7607_k = (int)0;
          int32_t _12565_ = (int)0;
          int32_t _12566_ = (int)((_7587_einst)->size(0));
          for (int32_t _7608_i = _12565_; _7608_i < _12566_; ++_7608_i)
          {
            {
              int32_t _12567_ = (int)0;
              int32_t _12568_ = (int)((_7588_a)->size(0));
              for (int32_t _7609_j = _12567_; _7609_j < _12568_; ++_7609_j)
              {
                {
                  _ptr__7596_bfix[_7607_k] = (_ptr__7588_a[_7609_j] * _ptr__7586_ebfix[_7608_i]);
                  ++ _7607_k;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int64_t _7610_k = (int64_t)0;
      int64_t _7611_ptr = (int64_t)0;
      int32_t _12569_ = (int)0;
      int32_t _12570_ = (int)((_7588_a)->size(0));
      for (int32_t _7612_j = _12569_; _7612_j < _12570_; ++_7612_j)
      {
        {
          double _7613_c = _ptr__7588_a[_7612_j];
          ::mosek::fusion::Utils::Tools::arraycopy(_7584_esubj,(int64_t)((int)0),_7598_subj,_7611_ptr,(int64_t)(_7600_ennz));
          int32_t _12571_ = (int)0;
          int32_t _12572_ = _7600_ennz;
          for (int32_t _7614_l = _12571_; _7614_l < _12572_; ++_7614_l)
          {
            {
              _ptr__7597_cof[safe_add( _7611_ptr,_7614_l )] = (_ptr__7585_ecof[_7614_l] * _ptr__7588_a[_7612_j]);
            }
          }
          int32_t _12573_ = (int)0;
          int32_t _12574_ = (int)((_7587_einst)->size(0));
          for (int32_t _7615_i = _12573_; _7615_i < _12574_; ++_7615_i)
          {
            {
              int64_t _7616_num = (_ptr__7583_eptrb[safe_add( _7615_i,(int)1 )] - _ptr__7583_eptrb[_7615_i]);
              _ptr__7587_einst[_7610_k] = safe_add( safe_mul( _ptr__7587_einst[_7615_i],_7590_dim ),_ptr__7589_sub[_7612_j] );
              _ptr__7599_ptrb[safe_add( _7610_k,(int)1 )] = safe_add( _ptr__7599_ptrb[_7610_k],_7616_num );
              ++ _7610_k;
            }
          }
          _7611_ptr += _7600_ennz;
        }
      }
      if ((NULL != _7596_bfix.get()))
      {
        {
          int32_t _7617_k = (int)0;
          int32_t _12575_ = (int)0;
          int32_t _12576_ = (int)((_7588_a)->size(0));
          for (int32_t _7618_j = _12575_; _7618_j < _12576_; ++_7618_j)
          {
            {
              double _7619_c = _ptr__7588_a[_7618_j];
              int32_t _12577_ = (int)0;
              int32_t _12578_ = (int)((_7587_einst)->size(0));
              for (int32_t _7620_i = _12577_; _7620_i < _12578_; ++_7620_i)
              {
                {
                  _ptr__7596_bfix[_7617_k] = (_ptr__7586_ebfix[_7620_i] * _7619_c);
                  ++ _7617_k;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7599_ptrb,_7598_subj,_7597_cof,_7596_bfix,_7592_shape,_7595_inst)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.outer_

// Begin mosek.fusion.Expr.outer_
// Method mosek.fusion.Expr.outer_ @ src/fusion/Expr.mbi:1015:6-1081:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _7621_v,int32_t _7622_vdim,std::shared_ptr< monty::ndarray< double,1 > > _7623_a,std::shared_ptr< monty::ndarray< int32_t,1 > > _7624_sub,int32_t _7625_dim,bool _7626_transpose)
{
  _checked_ptr_1<double> _ptr__7623_a(_7623_a ? _7623_a->raw() : nullptr, _7623_a ? _7623_a->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7624_sub(_7624_sub ? _7624_sub->raw() : nullptr, _7624_sub ? _7624_sub->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _12579_;
  bool _12580_ = (!_7626_transpose);
  if (_12580_)
  {
    _12579_ = ::mosek::fusion::p_Set::make(_7622_vdim,_7625_dim);
  }
  else
  {
    _12579_ = ::mosek::fusion::p_Set::make(_7625_dim,_7622_vdim);
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7627_shape = _12579_;
  _checked_ptr_1<int32_t> _ptr__7627_shape(_7627_shape ? _7627_shape->raw() : nullptr,_7627_shape ? _7627_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _12581_;
  bool _12582_ = (_7625_dim == (int)((_7623_a)->size(0)));
  if (_12582_)
  {
    _12581_ = nullptr;
  }
  else
  {
    _12581_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( (int)((_7623_a)->size(0)),_7622_vdim ))));
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7628_inst = _12581_;
  _checked_ptr_1<int64_t> _ptr__7628_inst(_7628_inst ? _7628_inst->raw() : nullptr,_7628_inst ? _7628_inst->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7629_bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7623_a)->size(0)),_7622_vdim ))));
  _checked_ptr_1<double> _ptr__7629_bfix(_7629_bfix ? _7629_bfix->raw() : nullptr,_7629_bfix ? _7629_bfix->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7630_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7623_a)->size(0)),_7622_vdim ))));
  _checked_ptr_1<double> _ptr__7630_cof(_7630_cof ? _7630_cof->raw() : nullptr,_7630_cof ? _7630_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7631_subj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( (int)((_7623_a)->size(0)),_7622_vdim ))));
  _checked_ptr_1<int64_t> _ptr__7631_subj(_7631_subj ? _7631_subj->raw() : nullptr,_7631_subj ? _7631_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7632_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( safe_mul( (int)((_7623_a)->size(0)),_7622_vdim ),(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__7632_ptrb(_7632_ptrb ? _7632_ptrb->raw() : nullptr,_7632_ptrb ? _7632_ptrb->size(0) : 0);
  if ((_7625_dim == (int)((_7623_a)->size(0))))
  {
    {
      int64_t _7633_k = (int64_t)0;
      if ((!_7626_transpose))
      {
        {
          int32_t _12583_ = (int)0;
          int32_t _12584_ = _7622_vdim;
          for (int32_t _7634_j = _12583_; _7634_j < _12584_; ++_7634_j)
          {
            {
              int32_t _12585_ = (int)0;
              int32_t _12586_ = _7625_dim;
              for (int32_t _7635_i = _12585_; _7635_i < _12586_; ++_7635_i)
              {
                {
                  _ptr__7632_ptrb[safe_add( _7633_k,(int)1 )] = safe_add( _7633_k,(int)1 );
                  _ptr__7631_subj[_7633_k] = (int64_t)_7634_j;
                  _ptr__7630_cof[_7633_k] = _ptr__7623_a[_7635_i];
                  ++ _7633_k;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _12587_ = (int)0;
          int32_t _12588_ = _7625_dim;
          for (int32_t _7636_i = _12587_; _7636_i < _12588_; ++_7636_i)
          {
            {
              int32_t _12589_ = (int)0;
              int32_t _12590_ = _7622_vdim;
              for (int32_t _7637_j = _12589_; _7637_j < _12590_; ++_7637_j)
              {
                {
                  _ptr__7632_ptrb[safe_add( _7633_k,(int)1 )] = safe_add( _7633_k,(int)1 );
                  _ptr__7631_subj[_7633_k] = (int64_t)_7637_j;
                  _ptr__7630_cof[_7633_k] = _ptr__7623_a[_7636_i];
                  ++ _7633_k;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int64_t _7638_k = (int64_t)0;
      if ((!_7626_transpose))
      {
        {
          int32_t _12591_ = (int)0;
          int32_t _12592_ = _7622_vdim;
          for (int32_t _7639_j = _12591_; _7639_j < _12592_; ++_7639_j)
          {
            {
              int32_t _12593_ = (int)0;
              int32_t _12594_ = (int)((_7623_a)->size(0));
              for (int32_t _7640_i = _12593_; _7640_i < _12594_; ++_7640_i)
              {
                {
                  _ptr__7632_ptrb[safe_add( _7638_k,(int)1 )] = safe_add( _7638_k,(int)1 );
                  _ptr__7631_subj[_7638_k] = (int64_t)_7639_j;
                  _ptr__7630_cof[_7638_k] = _ptr__7623_a[_7640_i];
                  _ptr__7628_inst[_7638_k] = safe_add( safe_mul( _7639_j,_7625_dim ),_ptr__7624_sub[_7640_i] );
                  ++ _7638_k;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _12595_ = (int)0;
          int32_t _12596_ = (int)((_7623_a)->size(0));
          for (int32_t _7641_i = _12595_; _7641_i < _12596_; ++_7641_i)
          {
            {
              int32_t _12597_ = (int)0;
              int32_t _12598_ = _7622_vdim;
              for (int32_t _7642_j = _12597_; _7642_j < _12598_; ++_7642_j)
              {
                {
                  _ptr__7632_ptrb[safe_add( _7638_k,(int)1 )] = safe_add( _7638_k,(int)1 );
                  _ptr__7631_subj[_7638_k] = (int64_t)_7642_j;
                  _ptr__7630_cof[_7638_k] = _ptr__7623_a[_7641_i];
                  _ptr__7628_inst[_7638_k] = safe_add( safe_mul( _ptr__7624_sub[_7641_i],_7622_vdim ),_7642_j );
                  ++ _7638_k;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7632_ptrb,_7631_subj,_7630_cof,_7629_bfix,_7627_shape,_7628_inst)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.outer_

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:994:6-1008:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7643_exprs) { return mosek::fusion::p_Expr::stack(_7643_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7643_exprs)
{
  if ((NULL == _7643_exprs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int32_t _12599_ = (int)0;
  int32_t _12600_ = (int)((_7643_exprs)->size(0));
  for (int32_t _7644_i = _12599_; _7644_i < _12600_; ++_7644_i)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7645_es = ((*_7643_exprs)(_7644_i));
      if ((NULL == _7645_es.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int32_t _12601_ = (int)0;
      int32_t _12602_ = (int)((_7645_es)->size(0));
      for (int32_t _7646_j = _12601_; _7646_j < _12602_; ++_7646_j)
      {
        {
          if ((NULL == ((*_7645_es)(_7646_j)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _12603_;
  for (int32_t _7648_i = (int)0, _12604_ = (int)((_7643_exprs)->size(0)); _7648_i < _12604_ ; ++_7648_i)
  {
    _12603_.push_back(::mosek::fusion::p_Expr::stack_(((*_7643_exprs)(_7648_i)),(int)1));
  }
  auto _12605_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_12603_.size()),_12603_.begin(),_12603_.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7647_tmp = _12605_;
  return ::mosek::fusion::p_Expr::stack_(_7647_tmp,(int)0);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:984:6-160
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7649_a1,
    double _7650_a2,
    double _7651_a3) { return mosek::fusion::p_Expr::vstack(_7649_a1,_7650_a2,_7651_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7649_a1,double _7650_a2,double _7651_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7649_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7650_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7651_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:983:6-149
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7652_a1,
    double _7653_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7654_e3) { return mosek::fusion::p_Expr::vstack(_7652_a1,_7653_a2,_7654_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7652_a1,double _7653_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7654_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7652_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7653_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7654_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:982:6-149
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7655_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7656_e2,
    double _7657_a3) { return mosek::fusion::p_Expr::vstack(_7655_a1,_7656_e2,_7657_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7655_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7656_e2,double _7657_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7655_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7656_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7657_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:981:6-138
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7658_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7659_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7660_e3) { return mosek::fusion::p_Expr::vstack(_7658_a1,_7659_e2,_7660_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7658_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7659_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7660_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7658_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7659_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7660_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:979:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7661_e1,
    double _7662_a2,
    double _7663_a3) { return mosek::fusion::p_Expr::vstack(_7661_e1,_7662_a2,_7663_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7661_e1,double _7662_a2,double _7663_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7661_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7662_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7663_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:978:6-142
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7664_e1,
    double _7665_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7666_e3) { return mosek::fusion::p_Expr::vstack(_7664_e1,_7665_a2,_7666_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7664_e1,double _7665_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7666_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7664_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7665_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7666_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:977:6-142
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7667_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7668_e2,
    double _7669_a3) { return mosek::fusion::p_Expr::vstack(_7667_e1,_7668_e2,_7669_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7667_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7668_e2,double _7669_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7667_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7668_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7669_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:976:6-131
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7670_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7671_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7672_e3) { return mosek::fusion::p_Expr::vstack(_7670_e1,_7671_e2,_7672_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7670_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7671_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7672_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7670_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7671_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7672_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:972:6-120
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7673_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7674_e2) { return mosek::fusion::p_Expr::vstack(_7673_a1,_7674_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7673_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7674_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7673_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7674_e2.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:971:6-124
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7675_e1,
    double _7676_a2) { return mosek::fusion::p_Expr::vstack(_7675_e1,_7676_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7675_e1,double _7676_a2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7675_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7676_a2).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:970:6-113
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7677_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7678_e2) { return mosek::fusion::p_Expr::vstack(_7677_e1,_7678_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7677_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7678_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7677_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7678_e2.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:959:6-966:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7679_exprs) { return mosek::fusion::p_Expr::vstack(_7679_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7679_exprs)
{
  if ((NULL == _7679_exprs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int32_t _12606_ = (int)0;
  int32_t _12607_ = (int)((_7679_exprs)->size(0));
  for (int32_t _7680_i = _12606_; _7680_i < _12607_; ++_7680_i)
  {
    {
      if ((NULL == ((*_7679_exprs)(_7680_i)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7679_exprs,(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:951:6-250
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7681_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7682_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7683_e3) { return mosek::fusion::p_Expr::hstack(_7681_e1,_7682_e2,_7683_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7681_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7682_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7683_e3)
{
  if (((NULL == _7681_e1.get()) || ((NULL == _7682_e2.get()) || (NULL == _7683_e3.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7681_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7682_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7683_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:920:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7684_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7685_e2,
    double _7686_a3) { return mosek::fusion::p_Expr::hstack(_7684_e1,_7685_e2,_7686_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7684_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7685_e2,double _7686_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7684_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7685_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7686_a3).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:919:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7687_e1,
    double _7688_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7689_e3) { return mosek::fusion::p_Expr::hstack(_7687_e1,_7688_a2,_7689_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7687_e1,double _7688_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7689_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7687_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7688_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7689_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:918:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7690_e1,
    double _7691_a2,
    double _7692_a3) { return mosek::fusion::p_Expr::hstack(_7690_e1,_7691_a2,_7692_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7690_e1,double _7691_a2,double _7692_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7690_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7691_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7692_a3).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:916:6-164
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7693_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7694_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7695_e3) { return mosek::fusion::p_Expr::hstack(_7693_a1,_7694_e2,_7695_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7693_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7694_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7695_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7693_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7694_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7695_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:915:6-164
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7696_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7697_e2,
    double _7698_a3) { return mosek::fusion::p_Expr::hstack(_7696_a1,_7697_e2,_7698_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7696_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7697_e2,double _7698_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7696_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7697_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7698_a3).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:914:6-164
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7699_a1,
    double _7700_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7701_e3) { return mosek::fusion::p_Expr::hstack(_7699_a1,_7700_a2,_7701_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7699_a1,double _7700_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7701_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7699_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7700_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7701_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:912:6-122
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7702_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7703_e2) { return mosek::fusion::p_Expr::hstack(_7702_a1,_7703_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7702_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7703_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7702_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7703_e2.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:911:6-124
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7704_e1,
    double _7705_a2) { return mosek::fusion::p_Expr::hstack(_7704_e1,_7705_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7704_e1,double _7705_a2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7704_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7705_a2).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:910:6-113
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7706_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7707_e2) { return mosek::fusion::p_Expr::hstack(_7706_e1,_7707_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7706_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7707_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7706_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7707_e2.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:900:6-908:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7708_exprs) { return mosek::fusion::p_Expr::hstack(_7708_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7708_exprs)
{
  if ((NULL == _7708_exprs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int32_t _12608_ = (int)0;
  int32_t _12609_ = (int)((_7708_exprs)->size(0));
  for (int32_t _7709_i = _12608_; _7709_i < _12609_; ++_7709_i)
  {
    {
      if ((NULL == ((*_7708_exprs)(_7709_i)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7708_exprs,(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:897:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7710_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7711_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7712_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7713_e3) { return mosek::fusion::p_Expr::stack(_7710_dim,_7711_e1,_7712_e2,_7713_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7710_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7711_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7712_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7713_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7711_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7712_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7713_e3.get())}),_7710_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:896:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7714_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7715_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7716_e2,
    double _7717_a3) { return mosek::fusion::p_Expr::stack(_7714_dim,_7715_e1,_7716_e2,_7717_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7714_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7715_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7716_e2,double _7717_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7715_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7716_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7717_a3).get())}),_7714_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:895:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7718_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7719_e1,
    double _7720_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7721_e3) { return mosek::fusion::p_Expr::stack(_7718_dim,_7719_e1,_7720_a2,_7721_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7718_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7719_e1,double _7720_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7721_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7719_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7720_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7721_e3.get())}),_7718_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:894:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7722_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7723_e1,
    double _7724_a2,
    double _7725_a3) { return mosek::fusion::p_Expr::stack(_7722_dim,_7723_e1,_7724_a2,_7725_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7722_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7723_e1,double _7724_a2,double _7725_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7723_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7724_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7725_a3).get())}),_7722_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:892:6-176
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7726_dim,
    double _7727_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7728_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7729_e3) { return mosek::fusion::p_Expr::stack(_7726_dim,_7727_a1,_7728_e2,_7729_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7726_dim,double _7727_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7728_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7729_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7727_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7728_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7729_e3.get())}),_7726_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:891:6-176
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7730_dim,
    double _7731_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7732_e2,
    double _7733_a3) { return mosek::fusion::p_Expr::stack(_7730_dim,_7731_a1,_7732_e2,_7733_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7730_dim,double _7731_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7732_e2,double _7733_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7731_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7732_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7733_a3).get())}),_7730_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:890:6-176
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7734_dim,
    double _7735_a1,
    double _7736_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7737_e1) { return mosek::fusion::p_Expr::stack(_7734_dim,_7735_a1,_7736_a2,_7737_e1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7734_dim,double _7735_a1,double _7736_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7737_e1)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7735_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7736_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7737_e1.get())}),_7734_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:889:6-134
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7738_dim,
    double _7739_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7740_e2) { return mosek::fusion::p_Expr::stack(_7738_dim,_7739_a1,_7740_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7738_dim,double _7739_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7740_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7739_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7740_e2.get())}),_7738_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:888:6-136
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7741_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7742_e1,
    double _7743_a2) { return mosek::fusion::p_Expr::stack(_7741_dim,_7742_e1,_7743_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7741_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7742_e1,double _7743_a2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7742_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7743_a2).get())}),_7741_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:887:6-125
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7744_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7745_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7746_e2) { return mosek::fusion::p_Expr::stack(_7744_dim,_7745_e1,_7746_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7744_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7745_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7746_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7745_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7746_e2.get())}),_7744_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:886:6-105
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7747_dim,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7748_exprs) { return mosek::fusion::p_Expr::stack(_7747_dim,_7748_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7747_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7748_exprs)
{
  return ::mosek::fusion::p_Expr::stack_(_7748_exprs,_7747_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack_
// Method mosek.fusion.Expr.stack_ @ src/fusion/Expr.mbi:875:6-884:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7749_exprs,int32_t _7750_dim)
{
  if (((int)((_7749_exprs)->size(0)) == (int)1))
  {
    {
      return ((*_7749_exprs)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_7749_exprs,_7750_dim),_7750_dim)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.stack_

// Begin mosek.fusion.Expr.promote
// Method mosek.fusion.Expr.promote @ src/fusion/Expr.mbi:844:6-873:7
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7751_exprs,int32_t _7752_dim)
{
  int32_t _7753_n = (int)((_7751_exprs)->size(0));
  std::vector<int32_t> _12610_;
  for (int32_t _7755_i = (int)0, _12611_ = _7753_n; _7755_i < _12611_ ; ++_7755_i)
  {
    _12610_.push_back(((*_7751_exprs)(_7755_i))->getND());
  }
  auto _12612_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12610_.size()),_12610_.begin(),_12610_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7754_nds = _12612_;
  _checked_ptr_1<int32_t> _ptr__7754_nds(_7754_nds ? _7754_nds->raw() : nullptr,_7754_nds ? _7754_nds->size(0) : 0);
  int32_t _7756_maxnd = _ptr__7754_nds[(int)0];
  int32_t _7757_minnd = _ptr__7754_nds[(int)0];
  int32_t _12613_ = (int)1;
  int32_t _12614_ = _7753_n;
  for (int32_t _7758_i = _12613_; _7758_i < _12614_; ++_7758_i)
  {
    {
      if ((_ptr__7754_nds[_7758_i] < _7757_minnd))
      {
        {
          _7757_minnd = _ptr__7754_nds[_7758_i];
        }
      }
      {}
      if ((_ptr__7754_nds[_7758_i] > _7756_maxnd))
      {
        {
          _7756_maxnd = _ptr__7754_nds[_7758_i];
        }
      }
      {}
    }
  }
  if ((_7756_maxnd < _7752_dim))
  {
    {
      _7756_maxnd = _7752_dim;
    }
  }
  {}
  if ((_7757_minnd < _7756_maxnd))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7759_rexprs = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_7753_n)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7760_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7756_maxnd)));
      _checked_ptr_1<int32_t> _ptr__7760_shape(_7760_shape ? _7760_shape->raw() : nullptr,_7760_shape ? _7760_shape->size(0) : 0);
      int32_t _12615_ = (int)0;
      int32_t _12616_ = _7753_n;
      for (int32_t _7761_i = _12615_; _7761_i < _12616_; ++_7761_i)
      {
        {
          if ((((*_7751_exprs)(_7761_i))->getND() == _7756_maxnd))
          {
            {
              ((*_7759_rexprs)(_7761_i)) = ((*_7751_exprs)(_7761_i));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7762_s = ((*_7751_exprs)(_7761_i))->getShape();
              _checked_ptr_1<int32_t> _ptr__7762_s(_7762_s ? _7762_s->raw() : nullptr,_7762_s ? _7762_s->size(0) : 0);
              int32_t _12617_ = (int)0;
              int32_t _12618_ = (int)((_7762_s)->size(0));
              for (int32_t _7763_j = _12617_; _7763_j < _12618_; ++_7763_j)
              {
                {
                  _ptr__7760_shape[_7763_j] = _ptr__7762_s[_7763_j];
                }
              }
              int32_t _12619_ = (int)((_7762_s)->size(0));
              int32_t _12620_ = _7756_maxnd;
              for (int32_t _7764_j = _12619_; _7764_j < _12620_; ++_7764_j)
              {
                {
                  _ptr__7760_shape[_7764_j] = (int)1;
                }
              }
              ((*_7759_rexprs)(_7761_i)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7760_shape,((*_7751_exprs)(_7761_i)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _7759_rexprs;
    }
  }
  else
  {
    {
      return _7751_exprs;
    }
  }
}
// End mosek.fusion.Expr.promote

// Begin mosek.fusion.Expr.repeat
// Method mosek.fusion.Expr.repeat @ src/fusion/Expr.mbi:839:6-841:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7765_x,
    int32_t _7766_n,
    int32_t _7767_d) { return mosek::fusion::p_Expr::repeat(_7765_x,_7766_n,_7767_d); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _7765_x,int32_t _7766_n,int32_t _7767_d)
{
  return ::mosek::fusion::p_Expr::repeat(_7765_x->__mosek_2fusion_2Variable__asExpr(),_7766_n,_7767_d);
}
// End mosek.fusion.Expr.repeat

// Begin mosek.fusion.Expr.repeat
// Method mosek.fusion.Expr.repeat @ src/fusion/Expr.mbi:822:6-837:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7768_e,
    int32_t _7769_n,
    int32_t _7770_d) { return mosek::fusion::p_Expr::repeat(_7768_e,_7769_n,_7770_d); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _7768_e,int32_t _7769_n,int32_t _7770_d)
{
  if ((_7769_n <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  if (((_7770_d < (int)0) || (_7770_d > _7768_e->getND())))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  else
  {
    {
      if ((_7770_d == _7768_e->getND()))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7771_s = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _7770_d,(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__7771_s(_7771_s ? _7771_s->raw() : nullptr,_7771_s ? _7771_s->size(0) : 0);
          int32_t _12621_ = (int)0;
          int32_t _12622_ = _7770_d;
          for (int32_t _7772_i = _12621_; _7772_i < _12622_; ++_7772_i)
          {
            {
              _ptr__7771_s[_7772_i] = _7768_e->getDim(_7772_i);
            }
          }
          _ptr__7771_s[_7770_d] = (int)1;
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(::mosek::fusion::p_Expr::reshape(_7768_e,_7771_s),_7770_d,_7769_n)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(_7768_e,_7770_d,_7769_n)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.Expr.repeat

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:815:6-820:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7773_exps) { return mosek::fusion::p_Expr::add(_7773_exps); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7773_exps)
{
  std::vector<double> _12623_;
  for (int32_t _7774_i = (int)0, _12624_ = (int)((_7773_exps)->size(0)); _7774_i < _12624_ ; ++_7774_i)
  {
    _12623_.push_back(1.0);
  }
  auto _12625_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12623_.size()),_12623_.begin(),_12623_.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_7773_exps,_12625_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:745:6-801:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7775_vs) { return mosek::fusion::p_Expr::add(_7775_vs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7775_vs)
{
  if ((NULL == _7775_vs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_7775_vs)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >{(int64_t)((int)0)}),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7775_vs)->size(0)) > (int)0) && (NULL == ((*_7775_vs)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int32_t _7776_nd = ((*_7775_vs)((int)0))->getND();
  int32_t _12626_ = (int)1;
  int32_t _12627_ = (int)((_7775_vs)->size(0));
  for (int32_t _7777_i = _12626_; _7777_i < _12627_; ++_7777_i)
  {
    {
      if ((_7776_nd < ((*_7775_vs)(_7777_i))->getND()))
      {
        {
          _7776_nd = ((*_7775_vs)(_7777_i))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7778_shapes = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_7775_vs)->size(0)),_7776_nd)));
  int32_t _12628_ = (int)0;
  int32_t _12629_ = (int)((_7775_vs)->size(0));
  for (int32_t _7779_i = _12628_; _7779_i < _12629_; ++_7779_i)
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7780_shp = ((*_7775_vs)(_7779_i))->getShape();
      _checked_ptr_1<int32_t> _ptr__7780_shp(_7780_shp ? _7780_shp->raw() : nullptr,_7780_shp ? _7780_shp->size(0) : 0);
      int32_t _12630_ = (int)0;
      int32_t _12631_ = (int)((_7780_shp)->size(0));
      for (int32_t _7781_j = _12630_; _7781_j < _12631_; ++_7781_j)
      {
        {
          ((*_7778_shapes)(_7779_i,_7781_j)) = _ptr__7780_shp[_7781_j];
        }
      }
      int32_t _12632_ = (int)((_7780_shp)->size(0));
      int32_t _12633_ = _7776_nd;
      for (int32_t _7782_j = _12632_; _7782_j < _12633_; ++_7782_j)
      {
        {
          ((*_7778_shapes)(_7779_i,_7782_j)) = (int)1;
        }
      }
    }
  }
  int32_t _12634_ = (int)1;
  int32_t _12635_ = (int)((_7775_vs)->size(0));
  for (int32_t _7783_i = _12634_; _7783_i < _12635_; ++_7783_i)
  {
    {
      int32_t _12636_ = (int)0;
      int32_t _12637_ = _7776_nd;
      for (int32_t _7784_j = _12636_; _7784_j < _12637_; ++_7784_j)
      {
        {
          if ((((*_7778_shapes)((int)0,_7784_j)) != ((*_7778_shapes)(_7783_i,_7784_j))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int32_t> _12638_;
  for (int32_t _7786_j = (int)0, _12639_ = _7776_nd; _7786_j < _12639_ ; ++_7786_j)
  {
    _12638_.push_back(((*_7778_shapes)((int)0,_7786_j)));
  }
  auto _12640_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12638_.size()),_12638_.begin(),_12638_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7785_shape = _12640_;
  _checked_ptr_1<int32_t> _ptr__7785_shape(_7785_shape ? _7785_shape->raw() : nullptr,_7785_shape ? _7785_shape->size(0) : 0);
  int32_t _7787_sz = (int)1;
  int32_t _12641_ = (int)0;
  int32_t _12642_ = _7776_nd;
  for (int32_t _7788_i = _12641_; _7788_i < _12642_; ++_7788_i)
  {
    {
      _7787_sz *= _ptr__7785_shape[_7788_i];
    }
  }
  int32_t _7789_nnz = (int)0;
  int32_t _7790_maxnnz = (int)0;
  int32_t _12643_ = (int)0;
  int32_t _12644_ = (int)((_7775_vs)->size(0));
  for (int32_t _7791_i = _12643_; _7791_i < _12644_; ++_7791_i)
  {
    {
      int32_t _7792_n = ((*_7775_vs)(_7791_i))->numInst();
      _7789_nnz += _7792_n;
      int32_t _12645_;
      bool _12646_ = (_7790_maxnnz > _7792_n);
      if (_12646_)
      {
        _12645_ = _7790_maxnnz;
      }
      else
      {
        _12645_ = _7792_n;
      }
      _7790_maxnnz = _12645_;
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7793_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _7787_sz,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__7793_ptrb(_7793_ptrb ? _7793_ptrb->raw() : nullptr,_7793_ptrb ? _7793_ptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7794_subj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7789_nnz)));
  _checked_ptr_1<int64_t> _ptr__7794_subj(_7794_subj ? _7794_subj->raw() : nullptr,_7794_subj ? _7794_subj->size(0) : 0);
  std::vector<double> _12647_;
  for (int32_t _7796_i = (int)0, _12648_ = _7789_nnz; _7796_i < _12648_ ; ++_7796_i)
  {
    _12647_.push_back(1.0);
  }
  auto _12649_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12647_.size()),_12647_.begin(),_12647_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7795_cof = _12649_;
  _checked_ptr_1<double> _ptr__7795_cof(_7795_cof ? _7795_cof->raw() : nullptr,_7795_cof ? _7795_cof->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7797_ii = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7790_maxnnz)));
    _checked_ptr_1<int64_t> _ptr__7797_ii(_7797_ii ? _7797_ii->raw() : nullptr,_7797_ii ? _7797_ii->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7798_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7790_maxnnz)));
    _checked_ptr_1<int64_t> _ptr__7798_idxs(_7798_idxs ? _7798_idxs->raw() : nullptr,_7798_idxs ? _7798_idxs->size(0) : 0);
    int32_t _12650_ = (int)0;
    int32_t _12651_ = (int)((_7775_vs)->size(0));
    for (int32_t _7799_i = _12650_; _7799_i < _12651_; ++_7799_i)
    {
      {
        int32_t _7800_n = ((*_7775_vs)(_7799_i))->inst((int)0,_7797_ii,(int)0,_7798_idxs);
        int32_t _12652_ = (int)0;
        int32_t _12653_ = _7800_n;
        for (int32_t _7801_j = _12652_; _7801_j < _12653_; ++_7801_j)
        {
          {
            _ptr__7793_ptrb[safe_add( _ptr__7797_ii[_7801_j],(int)1 )] += (int)1;
          }
        }
      }
    }
    int32_t _12654_ = (int)0;
    int32_t _12655_ = _7787_sz;
    for (int32_t _7802_i = _12654_; _7802_i < _12655_; ++_7802_i)
    {
      {
        _ptr__7793_ptrb[safe_add( _7802_i,(int)1 )] += _ptr__7793_ptrb[_7802_i];
      }
    }
    int32_t _12656_ = (int)0;
    int32_t _12657_ = (int)((_7775_vs)->size(0));
    for (int32_t _7803_i = _12656_; _7803_i < _12657_; ++_7803_i)
    {
      {
        int32_t _7804_n = ((*_7775_vs)(_7803_i))->inst((int)0,_7797_ii,(int)0,_7798_idxs);
        int32_t _12658_ = (int)0;
        int32_t _12659_ = _7804_n;
        for (int32_t _7805_j = _12658_; _7805_j < _12659_; ++_7805_j)
        {
          {
            _ptr__7794_subj[_ptr__7793_ptrb[_ptr__7797_ii[_7805_j]]] = _ptr__7798_idxs[_7805_j];
            ++ _ptr__7793_ptrb[_ptr__7797_ii[_7805_j]];
          }
        }
      }
    }
    int32_t _12660_ = (int)0;
    int32_t _12661_ = _7787_sz;
    for (int32_t _7806_i = _12660_; _7806_i < _12661_; ++_7806_i)
    {
      {
        _ptr__7793_ptrb[(_7787_sz - _7806_i)] = _ptr__7793_ptrb[((_7787_sz - _7806_i) - (int)1)];
      }
    }
    _ptr__7793_ptrb[(int)0] = (int)0;
  }
  std::vector<double> _12662_;
  for (int32_t _7807_i = (int)0, _12663_ = _7787_sz; _7807_i < _12663_ ; ++_7807_i)
  {
    _12662_.push_back(0.0);
  }
  auto _12664_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12662_.size()),_12662_.begin(),_12662_.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_7793_ptrb,_7794_subj,_7795_cof,_12664_,_7785_shape,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add_
// Method mosek.fusion.Expr.add_ @ src/fusion/Expr.mbi:702:6-729:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _7808_e1,double _7809_m1,monty::rc_ptr< ::mosek::fusion::Expression > _7810_e2,double _7811_m2)
{
  int32_t _7812_nd1 = _7808_e1->getND();
  int32_t _7813_nd2 = _7810_e2->getND();
  if ((_7812_nd1 == _7813_nd2))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7808_e1,_7810_e2,_7809_m1,_7811_m2)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int32_t _12665_;
      bool _12666_ = (_7812_nd1 > _7813_nd2);
      if (_12666_)
      {
        _12665_ = _7812_nd1;
      }
      else
      {
        _12665_ = _7813_nd2;
      }
      int32_t _7814_nd = _12665_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7815_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7814_nd)));
      _checked_ptr_1<int32_t> _ptr__7815_shape(_7815_shape ? _7815_shape->raw() : nullptr,_7815_shape ? _7815_shape->size(0) : 0);
      if ((_7812_nd1 < _7813_nd2))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7816_sh = _7808_e1->getShape();
          _checked_ptr_1<int32_t> _ptr__7816_sh(_7816_sh ? _7816_sh->raw() : nullptr,_7816_sh ? _7816_sh->size(0) : 0);
          int32_t _12667_ = (int)0;
          int32_t _12668_ = _7812_nd1;
          for (int32_t _7817_i = _12667_; _7817_i < _12668_; ++_7817_i)
          {
            {
              _ptr__7815_shape[_7817_i] = _ptr__7816_sh[_7817_i];
            }
          }
          int32_t _12669_ = _7812_nd1;
          int32_t _12670_ = _7814_nd;
          for (int32_t _7818_i = _12669_; _7818_i < _12670_; ++_7818_i)
          {
            {
              _ptr__7815_shape[_7818_i] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7815_shape,_7808_e1)).as<::mosek::fusion::Expression>(),_7810_e2,_7809_m1,_7811_m2)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7819_sh = _7810_e2->getShape();
          _checked_ptr_1<int32_t> _ptr__7819_sh(_7819_sh ? _7819_sh->raw() : nullptr,_7819_sh ? _7819_sh->size(0) : 0);
          int32_t _12671_ = (int)0;
          int32_t _12672_ = _7813_nd2;
          for (int32_t _7820_i = _12671_; _7820_i < _12672_; ++_7820_i)
          {
            {
              _ptr__7815_shape[_7820_i] = _ptr__7819_sh[_7820_i];
            }
          }
          int32_t _12673_ = _7813_nd2;
          int32_t _12674_ = _7814_nd;
          for (int32_t _7821_i = _12673_; _7821_i < _12674_; ++_7821_i)
          {
            {
              _ptr__7815_shape[_7821_i] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7808_e1,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7815_shape,_7810_e2)).as<::mosek::fusion::Expression>(),_7809_m1,_7811_m2)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.Expr.add_

// Begin mosek.fusion.Expr.transpose
// Method mosek.fusion.Expr.transpose @ src/fusion/Expr.mbi:691:6-700:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7822_e) { return mosek::fusion::p_Expr::transpose(_7822_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _7822_e)
{
  if ((_7822_e->getND() == (int)0))
  {
    {
      return _7822_e;
    }
  }
  else if((_7822_e->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_7822_e->getDim((int)0))}),_7822_e)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7822_e->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_7822_e)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
// End mosek.fusion.Expr.transpose

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:686:6-114
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7823_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7824_expr) { return mosek::fusion::p_Expr::mulElm(_7823_m,_7824_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _7823_m,monty::rc_ptr< ::mosek::fusion::Expression > _7824_expr)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7823_m,_7824_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:685:6-116
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7825_spm,
    monty::rc_ptr< ::mosek::fusion::Expression > _7826_expr) { return mosek::fusion::p_Expr::mulElm(_7825_spm,_7826_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7825_spm,monty::rc_ptr< ::mosek::fusion::Expression > _7826_expr)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7825_spm,_7826_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:684:6-129
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( std::shared_ptr< monty::ndarray< double,2 > > _7827_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7828_expr) { return mosek::fusion::p_Expr::mulElm(_7827_a2,_7828_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _7827_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7828_expr)
{
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7827_a2),_7828_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:683:6-115
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( std::shared_ptr< monty::ndarray< double,1 > > _7829_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7830_expr) { return mosek::fusion::p_Expr::mulElm(_7829_a1,_7830_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _7829_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7830_expr)
{
  _checked_ptr_1<double> _ptr__7829_a1(_7829_a1 ? _7829_a1->raw() : nullptr, _7829_a1 ? _7829_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7829_a1,_7830_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:682:6-114
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7831_expr,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7832_m) { return mosek::fusion::p_Expr::mulElm(_7831_expr,_7832_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7831_expr,monty::rc_ptr< ::mosek::fusion::Matrix > _7832_m)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7832_m,_7831_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:681:6-129
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7833_expr,
    std::shared_ptr< monty::ndarray< double,2 > > _7834_a2) { return mosek::fusion::p_Expr::mulElm(_7833_expr,_7834_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7833_expr,std::shared_ptr< monty::ndarray< double,2 > > _7834_a2)
{
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7834_a2),_7833_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:680:6-115
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7835_expr,
    std::shared_ptr< monty::ndarray< double,1 > > _7836_a1) { return mosek::fusion::p_Expr::mulElm(_7835_expr,_7836_a1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7835_expr,std::shared_ptr< monty::ndarray< double,1 > > _7836_a1)
{
  _checked_ptr_1<double> _ptr__7836_a1(_7836_a1 ? _7836_a1->raw() : nullptr, _7836_a1 ? _7836_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7836_a1,_7835_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:679:6-116
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7837_expr,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7838_spm) { return mosek::fusion::p_Expr::mulElm(_7837_expr,_7838_spm); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7837_expr,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7838_spm)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7838_spm,_7837_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:678:6-127
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7839_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7840_expr) { return mosek::fusion::p_Expr::mulElm(_7839_p,_7840_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Parameter > _7839_p,monty::rc_ptr< ::mosek::fusion::Expression > _7840_expr)
{
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7839_p,_7840_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:677:6-127
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7841_expr,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7842_p) { return mosek::fusion::p_Expr::mulElm(_7841_expr,_7842_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7841_expr,monty::rc_ptr< ::mosek::fusion::Parameter > _7842_p)
{
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7842_p,_7841_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:675:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7843_n,
    monty::rc_ptr< ::mosek::fusion::Expression > _7844_e2) { return mosek::fusion::p_Expr::sub(_7843_n,_7844_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7843_n,monty::rc_ptr< ::mosek::fusion::Expression > _7844_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7843_n),1.0,_7844_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:674:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7845_e1,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7846_n) { return mosek::fusion::p_Expr::sub(_7845_e1,_7846_n); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7845_e1,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7846_n)
{
  return ::mosek::fusion::p_Expr::add_(_7845_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7846_n),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:673:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7847_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7848_e2) { return mosek::fusion::p_Expr::sub(_7847_m,_7848_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _7847_m,monty::rc_ptr< ::mosek::fusion::Expression > _7848_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7847_m),1.0,_7848_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:672:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7849_e1,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7850_m) { return mosek::fusion::p_Expr::sub(_7849_e1,_7850_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7849_e1,monty::rc_ptr< ::mosek::fusion::Matrix > _7850_m)
{
  return ::mosek::fusion::p_Expr::add_(_7849_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7850_m),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:671:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( double _7851_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _7852_e2) { return mosek::fusion::p_Expr::sub(_7851_c,_7852_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _7851_c,monty::rc_ptr< ::mosek::fusion::Expression > _7852_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7852_e2->getShape(),_7851_c),1.0,_7852_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:670:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7853_e1,
    double _7854_c) { return mosek::fusion::p_Expr::sub(_7853_e1,_7854_c); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7853_e1,double _7854_c)
{
  return ::mosek::fusion::p_Expr::add_(_7853_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7853_e1->getShape(),_7854_c),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:669:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( std::shared_ptr< monty::ndarray< double,2 > > _7855_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7856_e2) { return mosek::fusion::p_Expr::sub(_7855_a2,_7856_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _7855_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7856_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7855_a2),1.0,_7856_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:668:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( std::shared_ptr< monty::ndarray< double,1 > > _7857_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7858_e2) { return mosek::fusion::p_Expr::sub(_7857_a1,_7858_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _7857_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7858_e2)
{
  _checked_ptr_1<double> _ptr__7857_a1(_7857_a1 ? _7857_a1->raw() : nullptr, _7857_a1 ? _7857_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7857_a1),1.0,_7858_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:667:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7859_e1,
    std::shared_ptr< monty::ndarray< double,2 > > _7860_a2) { return mosek::fusion::p_Expr::sub(_7859_e1,_7860_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7859_e1,std::shared_ptr< monty::ndarray< double,2 > > _7860_a2)
{
  return ::mosek::fusion::p_Expr::add_(_7859_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7860_a2),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:666:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7861_e1,
    std::shared_ptr< monty::ndarray< double,1 > > _7862_a1) { return mosek::fusion::p_Expr::sub(_7861_e1,_7862_a1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7861_e1,std::shared_ptr< monty::ndarray< double,1 > > _7862_a1)
{
  _checked_ptr_1<double> _ptr__7862_a1(_7862_a1 ? _7862_a1->raw() : nullptr, _7862_a1 ? _7862_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7861_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7862_a1),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:665:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7863_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7864_e2) { return mosek::fusion::p_Expr::sub(_7863_e1,_7864_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7863_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7864_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7863_e1,1.0,_7864_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:661:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7865_n,
    monty::rc_ptr< ::mosek::fusion::Expression > _7866_e2) { return mosek::fusion::p_Expr::add(_7865_n,_7866_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7865_n,monty::rc_ptr< ::mosek::fusion::Expression > _7866_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7866_e2,1.0,::mosek::fusion::p_Expr::constTerm(_7865_n),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:660:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7867_e1,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7868_n) { return mosek::fusion::p_Expr::add(_7867_e1,_7868_n); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7867_e1,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7868_n)
{
  return ::mosek::fusion::p_Expr::add_(_7867_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7868_n),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:659:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7869_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7870_e2) { return mosek::fusion::p_Expr::add(_7869_m,_7870_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _7869_m,monty::rc_ptr< ::mosek::fusion::Expression > _7870_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7870_e2,1.0,::mosek::fusion::p_Expr::constTerm(_7869_m),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:658:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7871_e1,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7872_m) { return mosek::fusion::p_Expr::add(_7871_e1,_7872_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7871_e1,monty::rc_ptr< ::mosek::fusion::Matrix > _7872_m)
{
  return ::mosek::fusion::p_Expr::add_(_7871_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7872_m),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:657:6-169
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( double _7873_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _7874_e2) { return mosek::fusion::p_Expr::add(_7873_c,_7874_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _7873_c,monty::rc_ptr< ::mosek::fusion::Expression > _7874_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7874_e2,1.0,::mosek::fusion::p_Expr::constTerm(_7874_e2->getShape(),_7873_c),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:656:6-169
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7875_e1,
    double _7876_c) { return mosek::fusion::p_Expr::add(_7875_e1,_7876_c); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7875_e1,double _7876_c)
{
  return ::mosek::fusion::p_Expr::add_(_7875_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7875_e1->getShape(),_7876_c),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:655:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< double,2 > > _7877_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7878_e2) { return mosek::fusion::p_Expr::add(_7877_a2,_7878_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _7877_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7878_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7878_e2,1.0,::mosek::fusion::p_Expr::constTerm(_7877_a2),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:654:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< double,1 > > _7879_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7880_e2) { return mosek::fusion::p_Expr::add(_7879_a1,_7880_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _7879_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7880_e2)
{
  _checked_ptr_1<double> _ptr__7879_a1(_7879_a1 ? _7879_a1->raw() : nullptr, _7879_a1 ? _7879_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7880_e2,1.0,::mosek::fusion::p_Expr::constTerm(_7879_a1),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:653:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7881_e1,
    std::shared_ptr< monty::ndarray< double,2 > > _7882_a2) { return mosek::fusion::p_Expr::add(_7881_e1,_7882_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7881_e1,std::shared_ptr< monty::ndarray< double,2 > > _7882_a2)
{
  return ::mosek::fusion::p_Expr::add_(_7881_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7882_a2),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:652:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7883_e1,
    std::shared_ptr< monty::ndarray< double,1 > > _7884_a1) { return mosek::fusion::p_Expr::add(_7883_e1,_7884_a1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7883_e1,std::shared_ptr< monty::ndarray< double,1 > > _7884_a1)
{
  _checked_ptr_1<double> _ptr__7884_a1(_7884_a1 ? _7884_a1->raw() : nullptr, _7884_a1 ? _7884_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7883_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7884_a1),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:651:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7885_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7886_e2) { return mosek::fusion::p_Expr::add(_7885_e1,_7886_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7885_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7886_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7885_e1,1.0,_7886_e2,1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.eval
// Method mosek.fusion.Expr.eval @ src/fusion/Expr.mbi:611:6-644:7
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7887_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7888_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7889_xs) { mosek::fusion::p_Expr::_get_impl(this)->eval(_7887_rs,_7888_ws,_7889_xs); }
void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7887_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7888_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7889_xs)
{
  int32_t _7890_nelem = ((int)((ptrb)->size(0)) - (int)1);
  int32_t _7891_nnz = safe_add( (int32_t)((*ptrb)(_7890_nelem)),_7890_nelem );
  int32_t _7892_nd = (int)((shape)->size(0));
  _7887_rs->alloc_expr(_7892_nd,_7890_nelem,_7891_nnz,(NULL != inst.get()));
  int32_t _7893_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_7887_rs)->ptr_base;
  int32_t _7894_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_7887_rs)->nidxs_base;
  int32_t _7895_sp_base = mosek::fusion::p_WorkStack::_get_impl(_7887_rs)->sp_base;
  int32_t _7896_cof_base = mosek::fusion::p_WorkStack::_get_impl(_7887_rs)->cof_base;
  int32_t _7897_shape_base = mosek::fusion::p_WorkStack::_get_impl(_7887_rs)->shape_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7898_i32 = mosek::fusion::p_WorkStack::_get_impl(_7887_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__7898_i32(_7898_i32 ? _7898_i32->raw() : nullptr,_7898_i32 ? _7898_i32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7899_i64 = mosek::fusion::p_WorkStack::_get_impl(_7887_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__7899_i64(_7899_i64 ? _7899_i64->raw() : nullptr,_7899_i64 ? _7899_i64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7900_f64 = mosek::fusion::p_WorkStack::_get_impl(_7887_rs)->f64;
  _checked_ptr_1<double> _ptr__7900_f64(_7900_f64 ? _7900_f64->raw() : nullptr,_7900_f64 ? _7900_f64->size(0) : 0);
  {
    int32_t _12675_ = (int)0;
    int32_t _12676_ = _7892_nd;
    for (int32_t _7901_i = _12675_; _7901_i < _12676_; ++_7901_i)
    {
      {
        _ptr__7898_i32[safe_add( _7897_shape_base,_7901_i )] = ((*shape)(_7901_i));
      }
    }
    _ptr__7898_i32[_7893_ptr_base] = (int)0;
    int32_t _7902_p = (int)0;
    int32_t _12677_ = (int)0;
    int32_t _12678_ = _7890_nelem;
    for (int32_t _7903_i = _12677_; _7903_i < _12678_; ++_7903_i)
    {
      {
        int64_t _12679_ = ((*ptrb)(_7903_i));
        int64_t _12680_ = ((*ptrb)(safe_add( _7903_i,(int)1 )));
        for (int64_t _7904_j = _12679_; _7904_j < _12680_; ++_7904_j)
        {
          {
            _ptr__7899_i64[safe_add( _7894_nidxs_base,_7902_p )] = ((*subj)(_7904_j));
            _ptr__7900_f64[safe_add( _7896_cof_base,_7902_p )] = ((*cof_v)(_7904_j));
            ++ _7902_p;
          }
        }
        _ptr__7899_i64[safe_add( _7894_nidxs_base,_7902_p )] = (int)0;
        _ptr__7900_f64[safe_add( _7896_cof_base,_7902_p )] = ((*bfix)(_7903_i));
        ++ _7902_p;
        _ptr__7898_i32[safe_add( safe_add( _7893_ptr_base,_7903_i ),(int)1 )] = _7902_p;
      }
    }
  }
}
// End mosek.fusion.Expr.eval

// Begin mosek.fusion.Expr.validateData
// Method mosek.fusion.Expr.validateData @ src/fusion/Expr.mbi:435:6-497:7
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< int64_t,1 > > _7905_ptrb,std::shared_ptr< monty::ndarray< int64_t,1 > > _7906_subj,std::shared_ptr< monty::ndarray< double,1 > > _7907_cof,std::shared_ptr< monty::ndarray< double,1 > > _7908_bfix,std::shared_ptr< monty::ndarray< int32_t,1 > > _7909_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _7910_inst)
{
  _checked_ptr_1<int64_t> _ptr__7905_ptrb(_7905_ptrb ? _7905_ptrb->raw() : nullptr, _7905_ptrb ? _7905_ptrb->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__7906_subj(_7906_subj ? _7906_subj->raw() : nullptr, _7906_subj ? _7906_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__7907_cof(_7907_cof ? _7907_cof->raw() : nullptr, _7907_cof ? _7907_cof->size(0) : 0);
  _checked_ptr_1<double> _ptr__7908_bfix(_7908_bfix ? _7908_bfix->raw() : nullptr, _7908_bfix ? _7908_bfix->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7909_shape(_7909_shape ? _7909_shape->raw() : nullptr, _7909_shape ? _7909_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__7910_inst(_7910_inst ? _7910_inst->raw() : nullptr, _7910_inst ? _7910_inst->size(0) : 0);
  if ((NULL == _7909_shape.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int32_t _7911_exprnume = ((int)((_7905_ptrb)->size(0)) - (int)1);
  int64_t _7912_numelm = _ptr__7905_ptrb[((int)((_7905_ptrb)->size(0)) - (int)1)];
  int32_t _7913_nd = (int)((_7909_shape)->size(0));
  int64_t _7914_size = (int64_t)1;
  int32_t _12681_ = (int)0;
  int32_t _12682_ = _7913_nd;
  for (int32_t _7915_i = _12681_; _7915_i < _12682_; ++_7915_i)
  {
    {
      _7914_size *= _ptr__7909_shape[_7915_i];
    }
  }
  if (((int)((_7905_ptrb)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_7912_numelm != (int)((_7906_subj)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_7912_numelm != (int)((_7907_cof)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _7908_bfix.get()) || (_7911_exprnume != (int)((_7908_bfix)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _7910_inst.get()) && ((int)((_7910_inst)->size(0)) < _7914_size)))
  {
    {
      if (((int)((_7910_inst)->size(0)) != ((int)((_7905_ptrb)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_7910_inst)->size(0)) > (int)0))
      {
        {
          if (((_ptr__7910_inst[(int)0] < (int)0) || (_ptr__7910_inst[(int)0] >= _7914_size)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _7916_sorted_in_range = true;
          int64_t _7917_tot_size = _7914_size;
          int32_t _12683_ = (int)1;
          int32_t _12684_ = (int)((_7910_inst)->size(0));
          for (int32_t _7918_i = _12683_; _7918_i < _12684_; ++_7918_i)
          {
            {
              _7916_sorted_in_range = (_7916_sorted_in_range && ((_ptr__7910_inst[_7918_i] >= (int)0) && ((_ptr__7910_inst[_7918_i] < _7917_tot_size) && (_ptr__7910_inst[_7918_i] > _ptr__7910_inst[(_7918_i - (int)1)]))));
            }
          }
          if ((!_7916_sorted_in_range))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_7914_size != ((int64_t)((_7905_ptrb)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _7919_invalid_ptrb = false;
  bool _7920_invalid_subj = false;
  if ((_ptr__7905_ptrb[(int)0] != (int64_t)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _7921_ptrb_sorted = true;
  int32_t _12685_ = (int)0;
  int32_t _12686_ = _7911_exprnume;
  for (int32_t _7922_i = _12685_; _7922_i < _12686_; ++_7922_i)
  {
    {
      _7921_ptrb_sorted = (_7921_ptrb_sorted && (_ptr__7905_ptrb[_7922_i] <= _ptr__7905_ptrb[safe_add( _7922_i,(int)1 )]));
    }
  }
  if ((!_7921_ptrb_sorted))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
// End mosek.fusion.Expr.validateData

// Begin mosek.fusion.Expr.extractModel
// Method mosek.fusion.Expr.extractModel @ src/fusion/Expr.mbi:434:6-128
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7923_v)
{
  monty::rc_ptr< ::mosek::fusion::Model > _12687_;
  bool _12688_ = ((NULL == _7923_v.get()) || ((int)((_7923_v)->size(0)) == (int)0));
  if (_12688_)
  {
    _12687_ = nullptr;
  }
  else
  {
    _12687_ = ((*_7923_v)((int)0))->__mosek_2fusion_2Variable__getModel();
  }
  return _12687_;
}
// End mosek.fusion.Expr.extractModel

void mosek::fusion::p_Expr::destroy()
{
  inst.reset();
  cof_v.reset();
  subj.reset();
  ptrb.reset();
  bfix.reset();
  shape.reset();
}
void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }
// } class Expr
// class Expression { // @ src/fusion/Expression.mbi:30:4-93:5
// Begin mosek.fusion.Expression.toString
// End mosek.fusion.Expression.toString

// Begin mosek.fusion.Expression.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7924_indexrows) { return __mosek_2fusion_2Expression__pick(_7924_indexrows); }
// End mosek.fusion.Expression.pick

// Begin mosek.fusion.Expression.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7925_indexes) { return __mosek_2fusion_2Expression__pick(_7925_indexes); }
// End mosek.fusion.Expression.pick

// Begin mosek.fusion.Expression.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7926_indexes) { return __mosek_2fusion_2Expression__index(_7926_indexes); }
// End mosek.fusion.Expression.index

// Begin mosek.fusion.Expression.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int32_t _7927_i) { return __mosek_2fusion_2Expression__index(_7927_i); }
// End mosek.fusion.Expression.index

// Begin mosek.fusion.Expression.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7928_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7929_lasta) { return __mosek_2fusion_2Expression__slice(_7928_firsta,_7929_lasta); }
// End mosek.fusion.Expression.slice

// Begin mosek.fusion.Expression.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int32_t _7930_first,int32_t _7931_last) { return __mosek_2fusion_2Expression__slice(_7930_first,_7931_last); }
// End mosek.fusion.Expression.slice

// Begin mosek.fusion.Expression.eval
// End mosek.fusion.Expression.eval

// Begin mosek.fusion.Expression.getND
// End mosek.fusion.Expression.getND

// Begin mosek.fusion.Expression.getDim
// End mosek.fusion.Expression.getDim

// Begin mosek.fusion.Expression.getSize
// End mosek.fusion.Expression.getSize

// Begin mosek.fusion.Expression.getShape
// End mosek.fusion.Expression.getShape

// } class Expression
// class SymmetricMatrix { // @ src/fusion/SymmetricMatrix.monty:16:4-180:5
mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }
mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix
  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.SymmetricMatrix.ctor @ src/fusion/SymmetricMatrix.monty:39:6-60:7
mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix
  (int32_t _7936_dim0,
    int32_t _7937_dim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7938_usubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7939_usubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7940_uval,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7941_vsubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7942_vsubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7943_vval,
    double _7944_scale)
{ return new mosek::fusion::SymmetricMatrix(_7936_dim0,_7937_dim1,_7938_usubi,_7939_usubj,_7940_uval,_7941_vsubi,_7942_vsubj,_7943_vval,_7944_scale); }
mosek::fusion::SymmetricMatrix::SymmetricMatrix
  (int32_t _7936_dim0,
    int32_t _7937_dim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7938_usubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7939_usubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7940_uval,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7941_vsubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7942_vsubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7943_vval,
    double _7944_scale) : 
   SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this))
{ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_7936_dim0,_7937_dim1,_7938_usubi,_7939_usubj,_7940_uval,_7941_vsubi,_7942_vsubj,_7943_vval,_7944_scale); }
void mosek::fusion::p_SymmetricMatrix::_initialize  (int32_t _7936_dim0,
    int32_t _7937_dim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7938_usubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7939_usubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7940_uval,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7941_vsubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7942_vsubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7943_vval,
    double _7944_scale)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7938_usubi(_7938_usubi ? _7938_usubi->raw() : nullptr, _7938_usubi ? _7938_usubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7939_usubj(_7939_usubj ? _7939_usubj->raw() : nullptr, _7939_usubj ? _7939_usubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__7940_uval(_7940_uval ? _7940_uval->raw() : nullptr, _7940_uval ? _7940_uval->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7941_vsubi(_7941_vsubi ? _7941_vsubi->raw() : nullptr, _7941_vsubi ? _7941_vsubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7942_vsubj(_7942_vsubj ? _7942_vsubj->raw() : nullptr, _7942_vsubj ? _7942_vsubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__7943_vval(_7943_vval ? _7943_vval->raw() : nullptr, _7943_vval ? _7943_vval->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _7936_dim0;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _7937_dim1;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _7938_usubi;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _7939_usubj;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _7940_uval;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _7941_vsubi;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _7942_vsubj;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _7943_vval;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _7944_scale;
    nnz = (-(int)1);
  }
}
// mosek.fusion.SymmetricMatrix.ctor

// Begin mosek.fusion.SymmetricMatrix.rankOne
// Method mosek.fusion.SymmetricMatrix.rankOne @ src/fusion/SymmetricMatrix.monty:166:6-179:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne
  ( int32_t _7945_n,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7946_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _7947_v) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7945_n,_7946_sub,_7947_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int32_t _7945_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _7946_sub,std::shared_ptr< monty::ndarray< double,1 > > _7947_v)
{
  _checked_ptr_1<int32_t> _ptr__7946_sub(_7946_sub ? _7946_sub->raw() : nullptr, _7946_sub ? _7946_sub->size(0) : 0);
  _checked_ptr_1<double> _ptr__7947_v(_7947_v ? _7947_v->raw() : nullptr, _7947_v ? _7947_v->size(0) : 0);
  if (((int)((_7946_sub)->size(0)) != (int)((_7947_v)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int32_t _12689_ = (int)0;
  int32_t _12690_ = (int)((_7946_sub)->size(0));
  for (int32_t _7948_i = _12689_; _7948_i < _12690_; ++_7948_i)
  {
    {
      if (((_ptr__7946_sub[_7948_i] < (int)0) || (_ptr__7946_sub[_7948_i] >= _7945_n)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int32_t> _12691_;
  for (int32_t _7950_i = (int)0, _12692_ = (int)((_7946_sub)->size(0)); _7950_i < _12692_ ; ++_7950_i)
  {
    _12691_.push_back(_ptr__7946_sub[_7950_i]);
  }
  auto _12693_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12691_.size()),_12691_.begin(),_12691_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7949_subi = _12693_;
  _checked_ptr_1<int32_t> _ptr__7949_subi(_7949_subi ? _7949_subi->raw() : nullptr,_7949_subi ? _7949_subi->size(0) : 0);
  std::vector<int32_t> _12694_;
  for (int32_t _7952_i = (int)0, _12695_ = (int)((_7946_sub)->size(0)); _7952_i < _12695_ ; ++_7952_i)
  {
    _12694_.push_back((int)1);
  }
  auto _12696_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12694_.size()),_12694_.begin(),_12694_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7951_subj = _12696_;
  _checked_ptr_1<int32_t> _ptr__7951_subj(_7951_subj ? _7951_subj->raw() : nullptr,_7951_subj ? _7951_subj->size(0) : 0);
  std::vector<double> _12697_;
  for (int32_t _7954_i = (int)0, _12698_ = (int)((_7947_v)->size(0)); _7954_i < _12698_ ; ++_7954_i)
  {
    _12697_.push_back(_ptr__7947_v[_7954_i]);
  }
  auto _12699_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12697_.size()),_12697_.begin(),_12697_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7953_val = _12699_;
  _checked_ptr_1<double> _ptr__7953_val(_7953_val ? _7953_val->raw() : nullptr,_7953_val ? _7953_val->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7945_n,(int)1,_7949_subi,_7951_subj,_7953_val,_7949_subi,_7951_subj,_7953_val,1.0);
}
// End mosek.fusion.SymmetricMatrix.rankOne

// Begin mosek.fusion.SymmetricMatrix.rankOne
// Method mosek.fusion.SymmetricMatrix.rankOne @ src/fusion/SymmetricMatrix.monty:157:6-164:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne
  ( std::shared_ptr< monty::ndarray< double,1 > > _7955_v) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7955_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _7955_v)
{
  _checked_ptr_1<double> _ptr__7955_v(_7955_v ? _7955_v->raw() : nullptr, _7955_v ? _7955_v->size(0) : 0);
  int32_t _7956_n = (int)((_7955_v)->size(0));
  std::vector<int32_t> _12700_;
  for (int32_t _7958_i = (int)0, _12701_ = _7956_n; _7958_i < _12701_ ; ++_7958_i)
  {
    _12700_.push_back(_7958_i);
  }
  auto _12702_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12700_.size()),_12700_.begin(),_12700_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7957_subi = _12702_;
  _checked_ptr_1<int32_t> _ptr__7957_subi(_7957_subi ? _7957_subi->raw() : nullptr,_7957_subi ? _7957_subi->size(0) : 0);
  std::vector<int32_t> _12703_;
  for (int32_t _7960_i = (int)0, _12704_ = _7956_n; _7960_i < _12704_ ; ++_7960_i)
  {
    _12703_.push_back((int)1);
  }
  auto _12705_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12703_.size()),_12703_.begin(),_12703_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7959_subj = _12705_;
  _checked_ptr_1<int32_t> _ptr__7959_subj(_7959_subj ? _7959_subj->raw() : nullptr,_7959_subj ? _7959_subj->size(0) : 0);
  std::vector<double> _12706_;
  for (int32_t _7962_i = (int)0, _12707_ = _7956_n; _7962_i < _12707_ ; ++_7962_i)
  {
    _12706_.push_back(_ptr__7955_v[_7962_i]);
  }
  auto _12708_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12706_.size()),_12706_.begin(),_12706_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7961_val = _12708_;
  _checked_ptr_1<double> _ptr__7961_val(_7961_val ? _7961_val->raw() : nullptr,_7961_val ? _7961_val->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7956_n,(int)1,_7957_subi,_7959_subj,_7961_val,_7957_subi,_7959_subj,_7961_val,1.0);
}
// End mosek.fusion.SymmetricMatrix.rankOne

// Begin mosek.fusion.SymmetricMatrix.antiDiag
// Method mosek.fusion.SymmetricMatrix.antiDiag @ src/fusion/SymmetricMatrix.monty:147:6-155:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag
  ( std::shared_ptr< monty::ndarray< double,1 > > _7963_vals) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_7963_vals); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _7963_vals)
{
  _checked_ptr_1<double> _ptr__7963_vals(_7963_vals ? _7963_vals->raw() : nullptr, _7963_vals ? _7963_vals->size(0) : 0);
  int32_t _7964_n = (int)((_7963_vals)->size(0));
  std::vector<int32_t> _12709_;
  for (int32_t _7966_i = (int)0, _12710_ = _7964_n; _7966_i < _12710_ ; ++_7966_i)
  {
    _12709_.push_back(_7966_i);
  }
  auto _12711_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12709_.size()),_12709_.begin(),_12709_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7965_subarr = _12711_;
  _checked_ptr_1<int32_t> _ptr__7965_subarr(_7965_subarr ? _7965_subarr->raw() : nullptr,_7965_subarr ? _7965_subarr->size(0) : 0);
  std::vector<int32_t> _12712_;
  for (int32_t _7967_i = (int)0, _12713_ = _7964_n; _7967_i < _12713_ ; ++_7967_i)
  {
    _12712_.push_back((_7964_n - _7967_i));
  }
  auto _12714_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12712_.size()),_12712_.begin(),_12712_.end()));
  std::vector<double> _12715_;
  for (int32_t _7968_i = (int)0, _12716_ = _7964_n; _7968_i < _12716_ ; ++_7968_i)
  {
    _12715_.push_back(_ptr__7963_vals[_7968_i]);
  }
  auto _12717_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12715_.size()),_12715_.begin(),_12715_.end()));
  std::vector<double> _12718_;
  for (int32_t _7969_i = (int)0, _12719_ = _7964_n; _7969_i < _12719_ ; ++_7969_i)
  {
    _12718_.push_back(1.0);
  }
  auto _12720_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12718_.size()),_12718_.begin(),_12718_.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7964_n,_7964_n,_7965_subarr,_12714_,_12717_,_7965_subarr,_7965_subarr,_12720_,1.0);
}
// End mosek.fusion.SymmetricMatrix.antiDiag

// Begin mosek.fusion.SymmetricMatrix.diag
// Method mosek.fusion.SymmetricMatrix.diag @ src/fusion/SymmetricMatrix.monty:137:6-145:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag
  ( std::shared_ptr< monty::ndarray< double,1 > > _7970_vals) { return mosek::fusion::p_SymmetricMatrix::diag(_7970_vals); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7970_vals)
{
  _checked_ptr_1<double> _ptr__7970_vals(_7970_vals ? _7970_vals->raw() : nullptr, _7970_vals ? _7970_vals->size(0) : 0);
  int32_t _7971_n = (int)((_7970_vals)->size(0));
  std::vector<int32_t> _12721_;
  for (int32_t _7973_i = (int)0, _12722_ = _7971_n; _7973_i < _12722_ ; ++_7973_i)
  {
    _12721_.push_back(_7973_i);
  }
  auto _12723_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12721_.size()),_12721_.begin(),_12721_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7972_subarr = _12723_;
  _checked_ptr_1<int32_t> _ptr__7972_subarr(_7972_subarr ? _7972_subarr->raw() : nullptr,_7972_subarr ? _7972_subarr->size(0) : 0);
  std::vector<double> _12724_;
  for (int32_t _7974_i = (int)0, _12725_ = _7971_n; _7974_i < _12725_ ; ++_7974_i)
  {
    _12724_.push_back(_ptr__7970_vals[_7974_i]);
  }
  auto _12726_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12724_.size()),_12724_.begin(),_12724_.end()));
  std::vector<double> _12727_;
  for (int32_t _7975_i = (int)0, _12728_ = _7971_n; _7975_i < _12728_ ; ++_7975_i)
  {
    _12727_.push_back(1.0);
  }
  auto _12729_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12727_.size()),_12727_.begin(),_12727_.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7971_n,_7971_n,_7972_subarr,_7972_subarr,_12726_,_7972_subarr,_7972_subarr,_12729_,1.0);
}
// End mosek.fusion.SymmetricMatrix.diag

// Begin mosek.fusion.SymmetricMatrix.add
// Method mosek.fusion.SymmetricMatrix.add @ src/fusion/SymmetricMatrix.monty:75:6-133:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7976_m) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_7976_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7976_m) { return __mosek_2fusion_2SymmetricMatrix__add(_7976_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7976_m)
{
  int32_t _7977_n = _pubthis->getdim();
  if ((_7976_m->getdim() != _7977_n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int32_t _7978_unnz = (int)((usubi)->size(0));
  int32_t _7979_munnz = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->usubi)->size(0));
  int32_t _7980_newunnz = safe_add( _7978_unnz,_7979_munnz );
  int32_t _7981_vnnz = (int)((vsubi)->size(0));
  int32_t _7982_mvnnz = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->vsubi)->size(0));
  int32_t _7983_newvnnz = safe_add( _7981_vnnz,_7982_mvnnz );
  std::shared_ptr< monty::ndarray< double,1 > > _7984_new_vval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7983_newvnnz)));
  _checked_ptr_1<double> _ptr__7984_new_vval(_7984_new_vval ? _7984_new_vval->raw() : nullptr,_7984_new_vval ? _7984_new_vval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7985_new_vsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7983_newvnnz)));
  _checked_ptr_1<int32_t> _ptr__7985_new_vsubj(_7985_new_vsubj ? _7985_new_vsubj->raw() : nullptr,_7985_new_vsubj ? _7985_new_vsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7986_new_vsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7983_newvnnz)));
  _checked_ptr_1<int32_t> _ptr__7986_new_vsubi(_7986_new_vsubi ? _7986_new_vsubi->raw() : nullptr,_7986_new_vsubi ? _7986_new_vsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7987_new_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7980_newunnz)));
  _checked_ptr_1<double> _ptr__7987_new_uval(_7987_new_uval ? _7987_new_uval->raw() : nullptr,_7987_new_uval ? _7987_new_uval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7988_new_usubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7980_newunnz)));
  _checked_ptr_1<int32_t> _ptr__7988_new_usubj(_7988_new_usubj ? _7988_new_usubj->raw() : nullptr,_7988_new_usubj ? _7988_new_usubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7989_new_usubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7980_newunnz)));
  _checked_ptr_1<int32_t> _ptr__7989_new_usubi(_7989_new_usubi ? _7989_new_usubi->raw() : nullptr,_7989_new_usubi ? _7989_new_usubi->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7989_new_usubi,(int)0,_7978_unnz);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->usubi,(int)0,_7989_new_usubi,_7978_unnz,_7979_munnz);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_7988_new_usubj,(int)0,_7978_unnz);
  int32_t _12730_ = (int)0;
  int32_t _12731_ = _7979_munnz;
  for (int32_t _7990_i = _12730_; _7990_i < _12731_; ++_7990_i)
  {
    {
      _ptr__7988_new_usubj[safe_add( _7990_i,_7978_unnz )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->usubj)(_7990_i)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_7987_new_uval,(int)0,_7978_unnz);
    }
  }
  else
  {
    {
      int32_t _12732_ = (int)0;
      int32_t _12733_ = _7978_unnz;
      for (int32_t _7991_i = _12732_; _7991_i < _12733_; ++_7991_i)
      {
        {
          _ptr__7987_new_uval[_7991_i] = (scale * ((*uval)(_7991_i)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->uval,(int)0,_7987_new_uval,_7978_unnz,_7979_munnz);
    }
  }
  else
  {
    {
      int32_t _12734_ = (int)0;
      int32_t _12735_ = _7979_munnz;
      for (int32_t _7992_i = _12734_; _7992_i < _12735_; ++_7992_i)
      {
        {
          _ptr__7987_new_uval[safe_add( _7992_i,_7978_unnz )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->uval)(_7992_i)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7989_new_usubi,(int)0,_7978_unnz);
  int32_t _12736_ = (int)0;
  int32_t _12737_ = _7982_mvnnz;
  for (int32_t _7993_i = _12736_; _7993_i < _12737_; ++_7993_i)
  {
    {
      _ptr__7986_new_vsubi[safe_add( _7993_i,_7981_vnnz )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->vsubi)(_7993_i)),mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_7985_new_vsubj,(int)0,_7981_vnnz);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->vsubj,_7981_vnnz,_7985_new_vsubj,_7981_vnnz,_7982_mvnnz);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_7984_new_vval,(int)0,_7981_vnnz);
    }
  }
  else
  {
    {
      int32_t _12738_ = (int)0;
      int32_t _12739_ = _7981_vnnz;
      for (int32_t _7994_i = _12738_; _7994_i < _12739_; ++_7994_i)
      {
        {
          _ptr__7984_new_vval[_7994_i] = (scale * ((*vval)(_7994_i)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->vval,(int)0,_7984_new_vval,_7981_vnnz,_7982_mvnnz);
    }
  }
  else
  {
    {
      int32_t _12740_ = (int)0;
      int32_t _12741_ = _7982_mvnnz;
      for (int32_t _7995_i = _12740_; _7995_i < _12741_; ++_7995_i)
      {
        {
          _ptr__7984_new_vval[safe_add( _7995_i,_7981_vnnz )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->vval)(_7995_i)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_7976_m)->d1 ),_7989_new_usubi,_7988_new_usubj,_7987_new_uval,_7986_new_vsubi,_7985_new_vsubj,_7984_new_vval,1.0);
}
// End mosek.fusion.SymmetricMatrix.add

// Begin mosek.fusion.SymmetricMatrix.sub
// Method mosek.fusion.SymmetricMatrix.sub @ src/fusion/SymmetricMatrix.monty:70:6-73:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7996_m) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_7996_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7996_m) { return __mosek_2fusion_2SymmetricMatrix__sub(_7996_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7996_m)
{
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_7996_m->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
// End mosek.fusion.SymmetricMatrix.sub

// Begin mosek.fusion.SymmetricMatrix.mul
// Method mosek.fusion.SymmetricMatrix.mul @ src/fusion/SymmetricMatrix.monty:65:6-68:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _7997_v) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_7997_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _7997_v) { return __mosek_2fusion_2SymmetricMatrix__mul(_7997_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _7997_v)
{
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _7997_v));
}
// End mosek.fusion.SymmetricMatrix.mul

// Begin mosek.fusion.SymmetricMatrix.getdim
// Method mosek.fusion.SymmetricMatrix.getdim @ src/fusion/SymmetricMatrix.monty:63:6-51
int32_t mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }
int32_t mosek::fusion::p_SymmetricMatrix::getdim()
{
  return d0;
}
// End mosek.fusion.SymmetricMatrix.getdim

void mosek::fusion::p_SymmetricMatrix::destroy()
{
  vval.reset();
  vsubj.reset();
  vsubi.reset();
  uval.reset();
  usubj.reset();
  usubi.reset();
}
void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }
// } class SymmetricMatrix
// class NDSparseArray { // @ src/fusion/Matrix.mbi:976:4-1151:5
mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }
mosek::fusion::p_NDSparseArray::p_NDSparseArray
  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.NDSparseArray.ctor @ src/fusion/Matrix.mbi:1072:6-1150:7
mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7998_dims_,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7999_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _8000_cof_)
{ return new mosek::fusion::NDSparseArray(_7998_dims_,_7999_sub,_8000_cof_); }
mosek::fusion::NDSparseArray::NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7998_dims_,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7999_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _8000_cof_) : 
   NDSparseArray(new mosek::fusion::p_NDSparseArray(this))
{ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7998_dims_,_7999_sub,_8000_cof_); }
void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7998_dims_,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7999_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _8000_cof_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7998_dims_(_7998_dims_ ? _7998_dims_->raw() : nullptr, _7998_dims_ ? _7998_dims_->size(0) : 0);
    _checked_ptr_1<double> _ptr__8000_cof_(_8000_cof_ ? _8000_cof_->raw() : nullptr, _8000_cof_ ? _8000_cof_->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8001_inst_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_7999_sub)->size(0)))));
    _checked_ptr_1<int64_t> _ptr__8001_inst_(_8001_inst_ ? _8001_inst_->raw() : nullptr,_8001_inst_ ? _8001_inst_->size(0) : 0);
    size = (int64_t)1;
    int32_t _12742_ = (int)0;
    int32_t _12743_ = (int)((_7998_dims_)->size(0));
    for (int32_t _8002_i = _12742_; _8002_i < _12743_; ++_8002_i)
    {
      {
        size = safe_mul( size,_ptr__7998_dims_[_8002_i] );
      }
    }
    int32_t _8003_nd = (int)((_7998_dims_)->size(0));
    if (((int)((_7999_sub)->size(0)) != (int)((_8000_cof_)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_7999_sub)->size(1)) != _8003_nd))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    bool _8004_outofbounds = false;
    int32_t _12744_ = (int)0;
    int32_t _12745_ = (int)((_7999_sub)->size(0));
    for (int32_t _8005_i = _12744_; _8005_i < _12745_; ++_8005_i)
    {
      {
        int32_t _12746_ = (int)0;
        int32_t _12747_ = (int)((_7999_sub)->size(1));
        for (int32_t _8006_j = _12746_; _8006_j < _12747_; ++_8006_j)
        {
          {
            if (((((*_7999_sub)(_8005_i,_8006_j)) < (int)0) || (((*_7999_sub)(_8005_i,_8006_j)) >= _ptr__7998_dims_[_8006_j])))
            {
              {
                _8004_outofbounds = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_8004_outofbounds)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
      }
    }
    {}
    int32_t _12748_ = (int)0;
    int32_t _12749_ = (int)((_7999_sub)->size(0));
    for (int32_t _8007_i = _12748_; _8007_i < _12749_; ++_8007_i)
    {
      {
        int64_t _8008_k = (int64_t)0;
        int32_t _12750_ = (int)0;
        int32_t _12751_ = (int)((_7999_sub)->size(1));
        for (int32_t _8009_j = _12750_; _8009_j < _12751_; ++_8009_j)
        {
          {
            _8008_k = safe_add( safe_mul( _8008_k,_ptr__7998_dims_[_8009_j] ),((*_7999_sub)(_8007_i,_8009_j)) );
          }
        }
        _ptr__8001_inst_[_8007_i] = _8008_k;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7998_dims_);
    bool _8010_issorted = true;
    int32_t _12752_ = (int)1;
    int32_t _12753_ = (int)((_8001_inst_)->size(0));
    for (int32_t _8011_i = _12752_; _8011_i < _12753_; ++_8011_i)
    {
      {
        _8010_issorted = (_8010_issorted && (_ptr__8001_inst_[_8011_i] >= _ptr__8001_inst_[(_8011_i - (int)1)]));
      }
    }
    if (_8010_issorted)
    {
      {
        int32_t _8012_nunique = (int)1;
        int32_t _12754_ = (int)1;
        int32_t _12755_ = (int)((_8001_inst_)->size(0));
        for (int32_t _8013_i = _12754_; _8013_i < _12755_; ++_8013_i)
        {
          {
            if ((_ptr__8001_inst_[(_8013_i - (int)1)] < _ptr__8001_inst_[_8013_i]))
            {
              {
                ++ _8012_nunique;
              }
            }
            {}
          }
        }
        if ((_8012_nunique == (int)((_8001_inst_)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_8001_inst_);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_8000_cof_);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_8012_nunique)));
            ((*inst)((int)0)) = _ptr__8001_inst_[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8012_nunique)));
            ((*cof)((int)0)) = _ptr__8000_cof_[(int)0];
            int32_t _8014_j = (int)0;
            int32_t _12756_ = (int)1;
            int32_t _12757_ = (int)((_8001_inst_)->size(0));
            for (int32_t _8015_i = _12756_; _8015_i < _12757_; ++_8015_i)
            {
              {
                if ((_ptr__8001_inst_[_8015_i] > _ptr__8001_inst_[(_8015_i - (int)1)]))
                {
                  {
                    ++ _8014_j;
                    ((*inst)(_8014_j)) = _ptr__8001_inst_[_8015_i];
                    ((*cof)(_8014_j)) = _ptr__8000_cof_[_8015_i];
                  }
                }
                else
                {
                  {
                    ((*cof)(_8014_j)) = (((*cof)(_8014_j)) + _ptr__8000_cof_[_8015_i]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< int64_t,1 > > _8016_perm = ::mosek::fusion::Utils::Tools::range((int64_t)((_8001_inst_)->size(0)));
        _checked_ptr_1<int64_t> _ptr__8016_perm(_8016_perm ? _8016_perm->raw() : nullptr,_8016_perm ? _8016_perm->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_8016_perm,_8001_inst_,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)0,(int64_t)((_8001_inst_)->size(0)));
        int32_t _8017_nunique = (int)1;
        int32_t _12758_ = (int)1;
        int32_t _12759_ = (int)((_8001_inst_)->size(0));
        for (int32_t _8018_i = _12758_; _8018_i < _12759_; ++_8018_i)
        {
          {
            if ((_ptr__8001_inst_[_ptr__8016_perm[(_8018_i - (int)1)]] < _ptr__8001_inst_[_ptr__8016_perm[_8018_i]]))
            {
              {
                ++ _8017_nunique;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_8017_nunique)));
        ((*inst)((int)0)) = _ptr__8001_inst_[_ptr__8016_perm[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8017_nunique)));
        ((*cof)((int)0)) = _ptr__8000_cof_[_ptr__8016_perm[(int)0]];
        int32_t _8019_j = (int)0;
        int32_t _12760_ = (int)1;
        int32_t _12761_ = (int)((_8001_inst_)->size(0));
        for (int32_t _8020_i = _12760_; _8020_i < _12761_; ++_8020_i)
        {
          {
            if ((_ptr__8001_inst_[_ptr__8016_perm[_8020_i]] > _ptr__8001_inst_[_ptr__8016_perm[(_8020_i - (int)1)]]))
            {
              {
                ++ _8019_j;
                ((*inst)(_8019_j)) = _ptr__8001_inst_[_ptr__8016_perm[_8020_i]];
                ((*cof)(_8019_j)) = _ptr__8000_cof_[_ptr__8016_perm[_8020_i]];
              }
            }
            else
            {
              {
                ((*cof)(_8019_j)) = (((*cof)(_8019_j)) + _ptr__8000_cof_[_ptr__8016_perm[_8020_i]]);
              }
            }
          }
        }
      }
    }
  }
}
// mosek.fusion.NDSparseArray.ctor

// mosek.fusion.NDSparseArray.ctor @ src/fusion/Matrix.mbi:1004:6-1070:7
mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _8021_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8022_inst_,
    std::shared_ptr< monty::ndarray< double,1 > > _8023_cof_)
{ return new mosek::fusion::NDSparseArray(_8021_dims_,_8022_inst_,_8023_cof_); }
mosek::fusion::NDSparseArray::NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _8021_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8022_inst_,
    std::shared_ptr< monty::ndarray< double,1 > > _8023_cof_) : 
   NDSparseArray(new mosek::fusion::p_NDSparseArray(this))
{ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_8021_dims_,_8022_inst_,_8023_cof_); }
void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _8021_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8022_inst_,
    std::shared_ptr< monty::ndarray< double,1 > > _8023_cof_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__8021_dims_(_8021_dims_ ? _8021_dims_->raw() : nullptr, _8021_dims_ ? _8021_dims_->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__8022_inst_(_8022_inst_ ? _8022_inst_->raw() : nullptr, _8022_inst_ ? _8022_inst_->size(0) : 0);
    _checked_ptr_1<double> _ptr__8023_cof_(_8023_cof_ ? _8023_cof_->raw() : nullptr, _8023_cof_ ? _8023_cof_->size(0) : 0);
    size = (int64_t)1;
    int32_t _12762_ = (int)0;
    int32_t _12763_ = (int)((_8021_dims_)->size(0));
    for (int32_t _8024_i = _12762_; _8024_i < _12763_; ++_8024_i)
    {
      {
        size = safe_mul( size,_ptr__8021_dims_[_8024_i] );
      }
    }
    int32_t _8025_n = (int)((_8022_inst_)->size(0));
    if ((_8025_n != (int)((_8023_cof_)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    {
      bool _8026_err = false;
      int32_t _12764_ = (int)0;
      int32_t _12765_ = _8025_n;
      for (int32_t _8027_i = _12764_; _8027_i < _12765_; ++_8027_i)
      {
        {
          _8026_err = (_8026_err || ((_ptr__8022_inst_[_8027_i] < (int)0) || (_ptr__8022_inst_[_8027_i] >= size)));
        }
      }
      if (_8026_err)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
        }
      }
      {}
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_8021_dims_);
    bool _8028_issorted = true;
    int32_t _12766_ = (int)1;
    int32_t _12767_ = (int)((_8022_inst_)->size(0));
    for (int32_t _8029_i = _12766_; _8029_i < _12767_; ++_8029_i)
    {
      {
        _8028_issorted = (_8028_issorted && (_ptr__8022_inst_[_8029_i] >= _ptr__8022_inst_[(_8029_i - (int)1)]));
      }
    }
    if (_8028_issorted)
    {
      {
        int32_t _8030_nunique = (int)1;
        int32_t _12768_ = (int)1;
        int32_t _12769_ = (int)((_8022_inst_)->size(0));
        for (int32_t _8031_i = _12768_; _8031_i < _12769_; ++_8031_i)
        {
          {
            if ((_ptr__8022_inst_[(_8031_i - (int)1)] < _ptr__8022_inst_[_8031_i]))
            {
              {
                ++ _8030_nunique;
              }
            }
            {}
          }
        }
        if ((_8030_nunique == (int)((_8022_inst_)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_8022_inst_);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_8023_cof_);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_8030_nunique)));
            ((*inst)((int)0)) = _ptr__8022_inst_[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8030_nunique)));
            ((*cof)((int)0)) = _ptr__8023_cof_[(int)0];
            int32_t _8032_j = (int)0;
            int32_t _12770_ = (int)1;
            int32_t _12771_ = (int)((_8022_inst_)->size(0));
            for (int32_t _8033_i = _12770_; _8033_i < _12771_; ++_8033_i)
            {
              {
                if ((_ptr__8022_inst_[_8033_i] > _ptr__8022_inst_[(_8033_i - (int)1)]))
                {
                  {
                    ++ _8032_j;
                    ((*inst)(_8032_j)) = _ptr__8022_inst_[_8033_i];
                    ((*cof)(_8032_j)) = _ptr__8023_cof_[_8033_i];
                  }
                }
                else
                {
                  {
                    ((*cof)(_8032_j)) = (((*cof)(_8032_j)) + _ptr__8023_cof_[_8033_i]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< int64_t,1 > > _8034_perm = ::mosek::fusion::Utils::Tools::range((int64_t)((_8022_inst_)->size(0)));
        _checked_ptr_1<int64_t> _ptr__8034_perm(_8034_perm ? _8034_perm->raw() : nullptr,_8034_perm ? _8034_perm->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_8034_perm,_8022_inst_,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)0,(int64_t)((_8022_inst_)->size(0)));
        int32_t _8035_nunique = (int)1;
        int32_t _12772_ = (int)1;
        int32_t _12773_ = (int)((_8022_inst_)->size(0));
        for (int32_t _8036_i = _12772_; _8036_i < _12773_; ++_8036_i)
        {
          {
            if ((_ptr__8022_inst_[_ptr__8034_perm[(_8036_i - (int)1)]] < _ptr__8022_inst_[_ptr__8034_perm[_8036_i]]))
            {
              {
                ++ _8035_nunique;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_8035_nunique)));
        ((*inst)((int)0)) = _ptr__8022_inst_[_ptr__8034_perm[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8035_nunique)));
        ((*cof)((int)0)) = _ptr__8023_cof_[_ptr__8034_perm[(int)0]];
        int32_t _8037_j = (int)0;
        int32_t _12774_ = (int)1;
        int32_t _12775_ = (int)((_8022_inst_)->size(0));
        for (int32_t _8038_i = _12774_; _8038_i < _12775_; ++_8038_i)
        {
          {
            if ((_ptr__8022_inst_[_ptr__8034_perm[_8038_i]] > ((*inst)(_ptr__8034_perm[(_8038_i - (int)1)]))))
            {
              {
                ++ _8037_j;
                ((*inst)(_8037_j)) = _ptr__8022_inst_[_ptr__8034_perm[_8038_i]];
                ((*cof)(_8037_j)) = _ptr__8023_cof_[_ptr__8034_perm[_8038_i]];
              }
            }
            else
            {
              {
                ((*cof)(_8037_j)) = (((*cof)(_8037_j)) + _ptr__8023_cof_[_ptr__8034_perm[_8038_i]]);
              }
            }
          }
        }
      }
    }
  }
}
// mosek.fusion.NDSparseArray.ctor

// mosek.fusion.NDSparseArray.ctor @ src/fusion/Matrix.mbi:987:6-1001:7
mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8039_m)
{ return new mosek::fusion::NDSparseArray(_8039_m); }
mosek::fusion::NDSparseArray::NDSparseArray
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8039_m) : 
   NDSparseArray(new mosek::fusion::p_NDSparseArray(this))
{ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_8039_m); }
void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _8039_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    int64_t _8040_nnz = _8039_m->numNonzeros();
    int32_t _8041_dim1 = _8039_m->numColumns();
    int32_t _8042_dim0 = _8039_m->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _8043_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8040_nnz)));
    _checked_ptr_1<double> _ptr__8043_val(_8043_val ? _8043_val->raw() : nullptr,_8043_val ? _8043_val->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8044_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8040_nnz)));
    _checked_ptr_1<int32_t> _ptr__8044_subj(_8044_subj ? _8044_subj->raw() : nullptr,_8044_subj ? _8044_subj->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8045_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8040_nnz)));
    _checked_ptr_1<int32_t> _ptr__8045_subi(_8045_subi ? _8045_subi->raw() : nullptr,_8045_subi ? _8045_subi->size(0) : 0);
    _8039_m->getDataAsTriplets(_8045_subi,_8044_subj,_8043_val);
    size = safe_mul( (int64_t)_8039_m->numRows(),(int64_t)_8039_m->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_8042_dim0),(int32_t)(_8041_dim1)});
    std::vector<int64_t> _12776_;
    for (int64_t _8046_i = (int64_t)0, _12777_ = _8040_nnz; _8046_i < _12777_ ; ++_8046_i)
    {
      _12776_.push_back(safe_add( safe_mul( (int64_t)_ptr__8045_subi[_8046_i],_8041_dim1 ),(int64_t)_ptr__8044_subj[_8046_i] ));
    }
    auto _12778_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12776_.size()),_12776_.begin(),_12776_.end()));
    inst = _12778_;
    cof = _8043_val;
  }
}
// mosek.fusion.NDSparseArray.ctor

// Begin mosek.fusion.NDSparseArray.make
// Method mosek.fusion.NDSparseArray.make @ src/fusion/Matrix.mbi:985:6-88
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _8047_m) { return mosek::fusion::p_NDSparseArray::make(_8047_m); }
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _8047_m)
{
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_8047_m);
}
// End mosek.fusion.NDSparseArray.make

// Begin mosek.fusion.NDSparseArray.make
// Method mosek.fusion.NDSparseArray.make @ src/fusion/Matrix.mbi:984:6-133
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8048_dims,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8049_inst,
    std::shared_ptr< monty::ndarray< double,1 > > _8050_cof) { return mosek::fusion::p_NDSparseArray::make(_8048_dims,_8049_inst,_8050_cof); }
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _8048_dims,std::shared_ptr< monty::ndarray< int64_t,1 > > _8049_inst,std::shared_ptr< monty::ndarray< double,1 > > _8050_cof)
{
  _checked_ptr_1<int32_t> _ptr__8048_dims(_8048_dims ? _8048_dims->raw() : nullptr, _8048_dims ? _8048_dims->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__8049_inst(_8049_inst ? _8049_inst->raw() : nullptr, _8049_inst ? _8049_inst->size(0) : 0);
  _checked_ptr_1<double> _ptr__8050_cof(_8050_cof ? _8050_cof->raw() : nullptr, _8050_cof ? _8050_cof->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_8048_dims,_8049_inst,_8050_cof);
}
// End mosek.fusion.NDSparseArray.make

// Begin mosek.fusion.NDSparseArray.make
// Method mosek.fusion.NDSparseArray.make @ src/fusion/Matrix.mbi:983:6-131
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8051_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _8052_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _8053_cof) { return mosek::fusion::p_NDSparseArray::make(_8051_dims,_8052_sub,_8053_cof); }
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _8051_dims,std::shared_ptr< monty::ndarray< int32_t,2 > > _8052_sub,std::shared_ptr< monty::ndarray< double,1 > > _8053_cof)
{
  _checked_ptr_1<int32_t> _ptr__8051_dims(_8051_dims ? _8051_dims->raw() : nullptr, _8051_dims ? _8051_dims->size(0) : 0);
  _checked_ptr_1<double> _ptr__8053_cof(_8053_cof ? _8053_cof->raw() : nullptr, _8053_cof ? _8053_cof->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_8051_dims,_8052_sub,_8053_cof);
}
// End mosek.fusion.NDSparseArray.make

void mosek::fusion::p_NDSparseArray::destroy()
{
  cof.reset();
  inst.reset();
  dims.reset();
}
void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }
// } class NDSparseArray
// class DenseMatrix { // @ src/fusion/Matrix.mbi:796:4-959:5
mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }
mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }
mosek::fusion::p_DenseMatrix::p_DenseMatrix
  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.DenseMatrix.ctor @ src/fusion/Matrix.mbi:907:6-916:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (int32_t _8054_dimi_,
    int32_t _8055_dimj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8056_cof)
{ return new mosek::fusion::DenseMatrix(_8054_dimi_,_8055_dimj_,_8056_cof); }
mosek::fusion::DenseMatrix::DenseMatrix
  (int32_t _8054_dimi_,
    int32_t _8055_dimj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8056_cof) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8054_dimi_,_8055_dimj_,_8056_cof); }
void mosek::fusion::p_DenseMatrix::_initialize  (int32_t _8054_dimi_,
    int32_t _8055_dimj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8056_cof)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__8056_cof(_8056_cof ? _8056_cof->raw() : nullptr, _8056_cof ? _8056_cof->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_8054_dimi_,_8055_dimj_);
    nnz = (int64_t)safe_mul( _8054_dimi_,_8055_dimj_ );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _8054_dimi_,_8055_dimj_ ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_8056_cof,(int)0,data,(int)0,safe_mul( _8054_dimi_,_8055_dimj_ ));
  }
}
// mosek.fusion.DenseMatrix.ctor

// mosek.fusion.DenseMatrix.ctor @ src/fusion/Matrix.mbi:873:6-895:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8057_m_)
{ return new mosek::fusion::DenseMatrix(_8057_m_); }
mosek::fusion::DenseMatrix::DenseMatrix
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8057_m_) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8057_m_); }
void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _8057_m_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_8057_m_)->dimi,mosek::fusion::p_Matrix::_get_impl(_8057_m_)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _12779_ = _8057_m_;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12779_.get()))
    {
      ::mosek::fusion::DenseMatrix::t _8058_m (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12779_.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_8058_m)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12779_.get()))
    {
      ::mosek::fusion::SparseMatrix::t _8059_m (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12779_.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_8059_m)->dimi,mosek::fusion::p_Matrix::_get_impl(_8059_m)->dimj ));
        int64_t _12780_ = (int64_t)0;
        int64_t _12781_ = mosek::fusion::p_SparseMatrix::_get_impl(_8059_m)->nnz;
        for (int64_t _8061_i = _12780_; _8061_i < _12781_; ++_8061_i)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_8059_m)->subi)(_8061_i)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_8059_m)->subj)(_8061_i)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_8059_m)->val)(_8061_i));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _8060_m = _12779_;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (int64_t)safe_mul( dimi,dimj );
  }
}
// mosek.fusion.DenseMatrix.ctor

// mosek.fusion.DenseMatrix.ctor @ src/fusion/Matrix.mbi:862:6-867:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (std::shared_ptr< monty::ndarray< double,2 > > _8062_d)
{ return new mosek::fusion::DenseMatrix(_8062_d); }
mosek::fusion::DenseMatrix::DenseMatrix
  (std::shared_ptr< monty::ndarray< double,2 > > _8062_d) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8062_d); }
void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _8062_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Matrix::_initialize((int)((_8062_d)->size(0)),(int)((_8062_d)->size(1)));
    std::vector<double> _12782_;
    for (int32_t _8063_i = (int)0, _12783_ = dimi; _8063_i < _12783_ ; ++_8063_i)
    {
      for (int32_t _8064_j = (int)0, _12784_ = dimj; _8064_j < _12784_ ; ++_8064_j)
      {
        _12782_.push_back(((*_8062_d)(_8063_i,_8064_j)));
      }
    }
    auto _12785_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12782_.size()),_12782_.begin(),_12782_.end()));
    data = _12785_;
    nnz = (int64_t)safe_mul( dimi,dimj );
  }
}
// mosek.fusion.DenseMatrix.ctor

// mosek.fusion.DenseMatrix.ctor @ src/fusion/Matrix.mbi:851:6-856:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (int32_t _8065_dimi_,
    int32_t _8066_dimj_,
    double _8067_value_)
{ return new mosek::fusion::DenseMatrix(_8065_dimi_,_8066_dimj_,_8067_value_); }
mosek::fusion::DenseMatrix::DenseMatrix
  (int32_t _8065_dimi_,
    int32_t _8066_dimj_,
    double _8067_value_) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8065_dimi_,_8066_dimj_,_8067_value_); }
void mosek::fusion::p_DenseMatrix::_initialize  (int32_t _8065_dimi_,
    int32_t _8066_dimj_,
    double _8067_value_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Matrix::_initialize(_8065_dimi_,_8066_dimj_);
    std::vector<double> _12786_;
    for (int32_t _8068_i = (int)0, _12787_ = _8065_dimi_; _8068_i < _12787_ ; ++_8068_i)
    {
      for (int32_t _8069_j = (int)0, _12788_ = _8066_dimj_; _8069_j < _12788_ ; ++_8069_j)
      {
        _12786_.push_back(_8067_value_);
      }
    }
    auto _12789_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12786_.size()),_12786_.begin(),_12786_.end()));
    data = _12789_;
    nnz = (int64_t)safe_mul( _8065_dimi_,_8066_dimj_ );
  }
}
// mosek.fusion.DenseMatrix.ctor

// Begin mosek.fusion.DenseMatrix.toString
// Method mosek.fusion.DenseMatrix.toString @ src/fusion/Matrix.mbi:940:6-958:7
std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }
std::string mosek::fusion::p_DenseMatrix::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _8070_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int32_t _8071_k = (int)0;
  {
    int32_t _8072_i = (int)0;
    for(;(_8072_i < dimi);++ _8072_i)
    {
      {
        if ((_8072_i > (int)0))
        {
          {
            _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_8071_k)));
        ++ _8071_k;
        {
          int32_t _8073_j = (int)1;
          for(;(_8073_j < dimj);++ _8073_j)
          {
            {
              _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_8071_k)));
              ++ _8071_k;
            }
          }
        }
        _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _8070_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _8070_sb->toString();
}
// End mosek.fusion.DenseMatrix.toString

// Begin mosek.fusion.DenseMatrix.transpose
// Method mosek.fusion.DenseMatrix.transpose @ src/fusion/Matrix.mbi:919:6-938:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
/* override: mosek.fusion.Matrix.transpose*/
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose()
{
  std::shared_ptr< monty::ndarray< double,1 > > _8074_newdata = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__8074_newdata(_8074_newdata ? _8074_newdata->raw() : nullptr,_8074_newdata ? _8074_newdata->size(0) : 0);
  int32_t _8075_srci = (int)0;
  int32_t _8076_step = dimi;
  int32_t _12790_ = (int)0;
  int32_t _12791_ = dimi;
  for (int32_t _8077_i = _12790_; _8077_i < _12791_; ++_8077_i)
  {
    {
      int32_t _8078_dsti = _8077_i;
      int32_t _12792_ = (int)0;
      int32_t _12793_ = dimj;
      for (int32_t _8079_j = _12792_; _8079_j < _12793_; ++_8079_j)
      {
        {
          _ptr__8074_newdata[_8078_dsti] = ((*data)(_8075_srci));
          _8078_dsti = safe_add( _8078_dsti,_8076_step );
          ++ _8075_srci;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_8074_newdata)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.DenseMatrix.transpose

// Begin mosek.fusion.DenseMatrix.isSparse
// Method mosek.fusion.DenseMatrix.isSparse @ src/fusion/Matrix.mbi:842:6-54
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }
bool mosek::fusion::p_DenseMatrix::isSparse()
{
  return false;
}
// End mosek.fusion.DenseMatrix.isSparse

// Begin mosek.fusion.DenseMatrix.getDataAsArray
// Method mosek.fusion.DenseMatrix.getDataAsArray @ src/fusion/Matrix.mbi:837:6-840:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
// End mosek.fusion.DenseMatrix.getDataAsArray

// Begin mosek.fusion.DenseMatrix.getDataAsTriplets
// Method mosek.fusion.DenseMatrix.getDataAsTriplets @ src/fusion/Matrix.mbi:812:6-835:7
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8080_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8081_subj,std::shared_ptr< monty::ndarray< double,1 > > _8082_cof) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_8080_subi,_8081_subj,_8082_cof); }
void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8080_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8081_subj,std::shared_ptr< monty::ndarray< double,1 > > _8082_cof)
{
  _checked_ptr_1<int32_t> _ptr__8080_subi(_8080_subi ? _8080_subi->raw() : nullptr, _8080_subi ? _8080_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8081_subj(_8081_subj ? _8081_subj->raw() : nullptr, _8081_subj ? _8081_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__8082_cof(_8082_cof ? _8082_cof->raw() : nullptr, _8082_cof ? _8082_cof->size(0) : 0);
  if ((((int)((_8080_subi)->size(0)) < nnz) || (((int)((_8081_subj)->size(0)) < nnz) || ((int)((_8082_cof)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_8082_cof,(int)0,(int)((data)->size(0)));
  int32_t _8083_k = (int)0;
  int32_t _12794_ = (int)0;
  int32_t _12795_ = dimi;
  for (int32_t _8084_i = _12794_; _8084_i < _12795_; ++_8084_i)
  {
    {
      int32_t _12796_ = (int)0;
      int32_t _12797_ = dimj;
      for (int32_t _8085_j = _12796_; _8085_j < _12797_; ++_8085_j)
      {
        {
          _ptr__8080_subi[_8083_k] = _8084_i;
          _ptr__8081_subj[_8083_k] = _8085_j;
          ++ _8083_k;
        }
      }
    }
  }
}
// End mosek.fusion.DenseMatrix.getDataAsTriplets

// Begin mosek.fusion.DenseMatrix.get
// Method mosek.fusion.DenseMatrix.get @ src/fusion/Matrix.mbi:810:6-82
double mosek::fusion::DenseMatrix :: get(int32_t _8086_i,int32_t _8087_j) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_8086_i,_8087_j); }
double mosek::fusion::p_DenseMatrix::get(int32_t _8086_i,int32_t _8087_j)
{
  return ((*data)(safe_add( safe_mul( _8086_i,dimj ),_8087_j )));
}
// End mosek.fusion.DenseMatrix.get

// Begin mosek.fusion.DenseMatrix.numNonzeros
// Method mosek.fusion.DenseMatrix.numNonzeros @ src/fusion/Matrix.mbi:805:6-808:7
int64_t mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }
int64_t mosek::fusion::p_DenseMatrix::numNonzeros()
{
  return (int64_t)safe_mul( dimi,dimj );
}
// End mosek.fusion.DenseMatrix.numNonzeros

void mosek::fusion::p_DenseMatrix::destroy()
{
  data.reset();
}
void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }
// } class DenseMatrix
// class SparseMatrix { // @ src/fusion/Matrix.mbi:575:4-790:5
mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }
mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SparseMatrix::p_SparseMatrix
  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SparseMatrix.ctor @ src/fusion/Matrix.mbi:668:6-713:7
mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix
  (int32_t _8088_dimi_,
    int32_t _8089_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8090_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8091_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8092_val_,
    int64_t _8093_nelm)
{ return new mosek::fusion::SparseMatrix(_8088_dimi_,_8089_dimj_,_8090_subi_,_8091_subj_,_8092_val_,_8093_nelm); }
mosek::fusion::SparseMatrix::SparseMatrix
  (int32_t _8088_dimi_,
    int32_t _8089_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8090_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8091_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8092_val_,
    int64_t _8093_nelm) : 
   SparseMatrix(new mosek::fusion::p_SparseMatrix(this))
{ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_8088_dimi_,_8089_dimj_,_8090_subi_,_8091_subj_,_8092_val_,_8093_nelm); }
void mosek::fusion::p_SparseMatrix::_initialize  (int32_t _8088_dimi_,
    int32_t _8089_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8090_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8091_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8092_val_,
    int64_t _8093_nelm)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__8090_subi_(_8090_subi_ ? _8090_subi_->raw() : nullptr, _8090_subi_ ? _8090_subi_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__8091_subj_(_8091_subj_ ? _8091_subj_->raw() : nullptr, _8091_subj_ ? _8091_subj_->size(0) : 0);
    _checked_ptr_1<double> _ptr__8092_val_(_8092_val_ ? _8092_val_->raw() : nullptr, _8092_val_ ? _8092_val_->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_8088_dimi_,_8089_dimj_);
    if ((_8093_nelm > (int)0))
    {
      {
        if ((((int)((_8090_subi_)->size(0)) < _8093_nelm) || (((int)((_8091_subj_)->size(0)) < _8093_nelm) || ((int)((_8092_val_)->size(0)) < _8093_nelm))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        bool _8094_outofbounds = false;
        int64_t _12798_ = (int64_t)0;
        int64_t _12799_ = _8093_nelm;
        for (int64_t _8095_i = _12798_; _8095_i < _12799_; ++_8095_i)
        {
          {
            if (((_ptr__8090_subi_[_8095_i] < (int)0) || ((_ptr__8090_subi_[_8095_i] >= dimi) || ((_ptr__8091_subj_[_8095_i] < (int)0) || (_ptr__8091_subj_[_8095_i] >= dimj)))))
            {
              {
                _8094_outofbounds = true;
              }
            }
            {}
          }
        }
        if (_8094_outofbounds)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
          }
        }
        {}
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _8096_ressubi = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _8097_ressubj = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _8098_resval = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_8090_subi_,_8091_subj_,_8092_val_,_8096_ressubi,_8097_ressubj,_8098_resval,_8093_nelm,dimi,dimj);
        subi = ((*_8096_ressubi)((int)0));
        subj = ((*_8097_ressubj)((int)0));
        val = ((*_8098_resval)((int)0));
        nnz = (int64_t)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (int64_t)0;
      }
    }
  }
}
// mosek.fusion.SparseMatrix.ctor

// mosek.fusion.SparseMatrix.ctor @ src/fusion/Matrix.mbi:617:6-653:7
mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix
  (int32_t _8099_dimi_,
    int32_t _8100_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8101_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8102_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8103_val_)
{ return new mosek::fusion::SparseMatrix(_8099_dimi_,_8100_dimj_,_8101_subi_,_8102_subj_,_8103_val_); }
mosek::fusion::SparseMatrix::SparseMatrix
  (int32_t _8099_dimi_,
    int32_t _8100_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8101_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8102_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8103_val_) : 
   SparseMatrix(new mosek::fusion::p_SparseMatrix(this))
{ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_8099_dimi_,_8100_dimj_,_8101_subi_,_8102_subj_,_8103_val_); }
void mosek::fusion::p_SparseMatrix::_initialize  (int32_t _8099_dimi_,
    int32_t _8100_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8101_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8102_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8103_val_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__8101_subi_(_8101_subi_ ? _8101_subi_->raw() : nullptr, _8101_subi_ ? _8101_subi_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__8102_subj_(_8102_subj_ ? _8102_subj_->raw() : nullptr, _8102_subj_ ? _8102_subj_->size(0) : 0);
    _checked_ptr_1<double> _ptr__8103_val_(_8103_val_ ? _8103_val_->raw() : nullptr, _8103_val_ ? _8103_val_->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_8099_dimi_,_8100_dimj_);
    int32_t _8104_n = (int)0;
    int32_t _12800_ = (int)0;
    int32_t _12801_ = (int)((_8103_val_)->size(0));
    for (int32_t _8105_i = _12800_; _8105_i < _12801_; ++_8105_i)
    {
      {
        if (((_ptr__8103_val_[_8105_i] > (int)0) || (_ptr__8103_val_[_8105_i] < (int)0)))
        {
          {
            ++ _8104_n;
          }
        }
        {}
      }
    }
    if (((_8104_n > (int)0) && (_8104_n < (int)((_8101_subi_)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8104_n)));
        subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8104_n)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8104_n)));
        nnz = _8104_n;
        int32_t _8106_j = (int)0;
        int32_t _12802_ = (int)0;
        int32_t _12803_ = (int)((_8103_val_)->size(0));
        for (int32_t _8107_i = _12802_; _8107_i < _12803_; ++_8107_i)
        {
          {
            if (((_ptr__8103_val_[_8107_i] < (int)0) || (_ptr__8103_val_[_8107_i] > (int)0)))
            {
              {
                ((*val)(_8106_j)) = _ptr__8103_val_[_8107_i];
                ((*subj)(_8106_j)) = _ptr__8102_subj_[_8107_i];
                ((*subi)(_8106_j)) = _ptr__8101_subi_[_8107_i];
                ++ _8106_j;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _8101_subi_;
        subj = _8102_subj_;
        val = _8103_val_;
        if ((NULL == _8101_subi_.get()))
        {
          {
            nnz = (int64_t)0;
          }
        }
        else
        {
          {
            nnz = (int64_t)((subi)->size(0));
          }
        }
      }
    }
  }
}
// mosek.fusion.SparseMatrix.ctor

// Begin mosek.fusion.SparseMatrix.formPtrb
// Method mosek.fusion.SparseMatrix.formPtrb @ src/fusion/Matrix.mbi:775:6-789:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_SparseMatrix::formPtrb()
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _8108_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__8108_ptrb(_8108_ptrb ? _8108_ptrb->raw() : nullptr,_8108_ptrb ? _8108_ptrb->size(0) : 0);
  int64_t _8109_pos = (int64_t)0;
  int32_t _12804_ = (int)0;
  int32_t _12805_ = dimi;
  for (int32_t _8110_row = _12804_; _8110_row < _12805_; ++_8110_row)
  {
    {
      _ptr__8108_ptrb[_8110_row] = _8109_pos;
      {
        for(;((_8109_pos < nnz) && (((*subi)(_8109_pos)) == _8110_row));++ _8109_pos)
        {
          {
          }
        }
      }
    }
  }
  _ptr__8108_ptrb[dimi] = _8109_pos;
  return _8108_ptrb;
}
// End mosek.fusion.SparseMatrix.formPtrb

// Begin mosek.fusion.SparseMatrix.toString
// Method mosek.fusion.SparseMatrix.toString @ src/fusion/Matrix.mbi:760:6-772:7
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }
std::string mosek::fusion::p_SparseMatrix::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _8111_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _8111_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _8111_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int32_t _12806_ = (int)1;
      int32_t _12807_ = (int)((subi)->size(0));
      for (int32_t _8112_i = _12806_; _8112_i < _12807_; ++_8112_i)
      {
        {
          _8111_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_8112_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_8112_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_8112_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _8111_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _8111_sb->toString();
}
// End mosek.fusion.SparseMatrix.toString

// Begin mosek.fusion.SparseMatrix.numNonzeros
// Method mosek.fusion.SparseMatrix.numNonzeros @ src/fusion/Matrix.mbi:755:6-758:7
int64_t mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }
int64_t mosek::fusion::p_SparseMatrix::numNonzeros()
{
  return nnz;
}
// End mosek.fusion.SparseMatrix.numNonzeros

// Begin mosek.fusion.SparseMatrix.transpose
// Method mosek.fusion.SparseMatrix.transpose @ src/fusion/Matrix.mbi:748:6-752:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
/* override: mosek.fusion.Matrix.transpose*/
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose()
{
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
// End mosek.fusion.SparseMatrix.transpose

// Begin mosek.fusion.SparseMatrix.isSparse
// Method mosek.fusion.SparseMatrix.isSparse @ src/fusion/Matrix.mbi:745:6-53
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }
bool mosek::fusion::p_SparseMatrix::isSparse()
{
  return true;
}
// End mosek.fusion.SparseMatrix.isSparse

// Begin mosek.fusion.SparseMatrix.getDataAsArray
// Method mosek.fusion.SparseMatrix.getDataAsArray @ src/fusion/Matrix.mbi:737:6-743:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray()
{
  std::shared_ptr< monty::ndarray< double,1 > > _8113_r = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__8113_r(_8113_r ? _8113_r->raw() : nullptr,_8113_r ? _8113_r->size(0) : 0);
  int32_t _12808_ = (int)0;
  int32_t _12809_ = (int)((subi)->size(0));
  for (int32_t _8114_i = _12808_; _8114_i < _12809_; ++_8114_i)
  {
    {
      _ptr__8113_r[safe_add( safe_mul( ((*subi)(_8114_i)),dimj ),((*subj)(_8114_i)) )] = ((*val)(_8114_i));
    }
  }
  return _8113_r;
}
// End mosek.fusion.SparseMatrix.getDataAsArray

// Begin mosek.fusion.SparseMatrix.getDataAsTriplets
// Method mosek.fusion.SparseMatrix.getDataAsTriplets @ src/fusion/Matrix.mbi:717:6-735:7
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8115_subi_,std::shared_ptr< monty::ndarray< int32_t,1 > > _8116_subj_,std::shared_ptr< monty::ndarray< double,1 > > _8117_cof_) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_8115_subi_,_8116_subj_,_8117_cof_); }
void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8115_subi_,std::shared_ptr< monty::ndarray< int32_t,1 > > _8116_subj_,std::shared_ptr< monty::ndarray< double,1 > > _8117_cof_)
{
  _checked_ptr_1<int32_t> _ptr__8115_subi_(_8115_subi_ ? _8115_subi_->raw() : nullptr, _8115_subi_ ? _8115_subi_->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8116_subj_(_8116_subj_ ? _8116_subj_->raw() : nullptr, _8116_subj_ ? _8116_subj_->size(0) : 0);
  _checked_ptr_1<double> _ptr__8117_cof_(_8117_cof_ ? _8117_cof_->raw() : nullptr, _8117_cof_ ? _8117_cof_->size(0) : 0);
  if ((((int64_t)((_8115_subi_)->size(0)) < nnz) || (((int64_t)((_8116_subj_)->size(0)) < nnz) || ((int64_t)((_8117_cof_)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(int64_t)0,_8115_subi_,(int64_t)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(int64_t)0,_8116_subj_,(int64_t)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(int64_t)0,_8117_cof_,(int64_t)0,nnz);
    }
  }
  {}
}
// End mosek.fusion.SparseMatrix.getDataAsTriplets

// Begin mosek.fusion.SparseMatrix.get
// Method mosek.fusion.SparseMatrix.get @ src/fusion/Matrix.mbi:588:6-606:7
double mosek::fusion::SparseMatrix :: get(int32_t _8118_i,int32_t _8119_j) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_8118_i,_8119_j); }
double mosek::fusion::p_SparseMatrix::get(int32_t _8118_i,int32_t _8119_j)
{
  if (((_8118_i < (int)0) || ((_8118_i >= dimi) || ((_8119_j < (int)0) || (_8119_j >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int32_t _8120_e = (int)((subi)->size(0));
  int32_t _8121_b = (int)0;
  while ( ((_8120_e - _8121_b) > (int)1) )
  {
    {
      int32_t _8122_p = (safe_add( _8121_b,_8120_e ) / (int)2);
      if (((((*subi)(_8122_p)) < _8118_i) || ((((*subi)(_8122_p)) == _8118_i) && (((*subj)(_8122_p)) < _8119_j))))
      {
        {
          _8121_b = _8122_p;
        }
      }
      else if(((((*subi)(_8122_p)) > _8118_i) || ((((*subi)(_8122_p)) == _8118_i) && (((*subj)(_8122_p)) > _8119_j))))
      {
        {
          _8120_e = _8122_p;
        }
      }
      else
      {
        {
          return ((*val)(_8122_p));
        }
      }
    }
  }
  if (((((*subi)(_8121_b)) == _8118_i) && (((*subj)(_8121_b)) == _8119_j)))
  {
    {
      return ((*val)(_8121_b));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
// End mosek.fusion.SparseMatrix.get

void mosek::fusion::p_SparseMatrix::destroy()
{
  val.reset();
  subj.reset();
  subi.reset();
}
void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }
// } class SparseMatrix
// class Matrix { // @ src/fusion/Matrix.mbi:58:4-569:5
mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Matrix::p_Matrix
  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Matrix.ctor @ src/fusion/Matrix.mbi:65:6-71:7
void mosek::fusion::p_Matrix::_initialize  (int32_t _8123_di,
    int32_t _8124_dj)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    if (((_8123_di < (int)0) || (_8124_dj < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _8123_di;
    dimj = _8124_dj;
  }
}
// mosek.fusion.Matrix.ctor

// Begin mosek.fusion.Matrix.toString
// Method mosek.fusion.Matrix.toString @ src/fusion/Matrix.mbi:568:6-52
std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }
std::string mosek::fusion::p_Matrix::toString()
{
  return std::string ("");
}
// End mosek.fusion.Matrix.toString

// Begin mosek.fusion.Matrix.switchDims
// Method mosek.fusion.Matrix.switchDims @ src/fusion/Matrix.mbi:560:6-564:7
void mosek::fusion::p_Matrix::switchDims()
{
  int32_t _8125_tmp = dimi;
  dimi = dimj;
  dimj = _8125_tmp;
}
// End mosek.fusion.Matrix.switchDims

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:556:6-107
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( int32_t _8126_num,
    monty::rc_ptr< ::mosek::fusion::Matrix > _8127_mv) { return mosek::fusion::p_Matrix::diag(_8126_num,_8127_mv); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int32_t _8126_num,monty::rc_ptr< ::mosek::fusion::Matrix > _8127_mv)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _12810_;
  for (int32_t _8128_i = (int)0, _12811_ = _8126_num; _8128_i < _12811_ ; ++_8128_i)
  {
    _12810_.push_back(_8127_mv);
  }
  auto _12812_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_12810_.size()),_12810_.begin(),_12810_.end()));
  return ::mosek::fusion::p_Matrix::diag(_12812_);
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:505:6-548:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _8129_md) { return mosek::fusion::p_Matrix::diag(_8129_md); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _8129_md)
{
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _8130_d = _8129_md;
  int64_t _8131_numelm = (int64_t)0;
  int32_t _8132_dimj = (int)0;
  int32_t _8133_dimi = (int)0;
  int32_t _12813_ = (int)0;
  int32_t _12814_ = (int)((_8129_md)->size(0));
  for (int32_t _8134_i = _12813_; _8134_i < _12814_; ++_8134_i)
  {
    {
      _8133_dimi = safe_add( _8133_dimi,mosek::fusion::p_Matrix::_get_impl(((*_8129_md)(_8134_i)))->dimi );
      _8132_dimj = safe_add( _8132_dimj,mosek::fusion::p_Matrix::_get_impl(((*_8129_md)(_8134_i)))->dimj );
      _8131_numelm = safe_add( _8131_numelm,((*_8129_md)(_8134_i))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8135_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8131_numelm)));
  _checked_ptr_1<int32_t> _ptr__8135_subi(_8135_subi ? _8135_subi->raw() : nullptr,_8135_subi ? _8135_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8136_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8131_numelm)));
  _checked_ptr_1<int32_t> _ptr__8136_subj(_8136_subj ? _8136_subj->raw() : nullptr,_8136_subj ? _8136_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8137_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8131_numelm)));
  _checked_ptr_1<double> _ptr__8137_val(_8137_val ? _8137_val->raw() : nullptr,_8137_val ? _8137_val->size(0) : 0);
  {
    int32_t _8138_offsetj = (int)0;
    int32_t _8139_offseti = (int)0;
    int64_t _8140_k = (int64_t)0;
    int32_t _12815_ = (int)0;
    int32_t _12816_ = (int)((_8129_md)->size(0));
    for (int32_t _8141_i = _12815_; _8141_i < _12816_; ++_8141_i)
    {
      {
        int64_t _8142_N = ((*_8129_md)(_8141_i))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _8143_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8142_N)));
        _checked_ptr_1<double> _ptr__8143_mval(_8143_mval ? _8143_mval->raw() : nullptr,_8143_mval ? _8143_mval->size(0) : 0);
        std::shared_ptr< monty::ndarray< int32_t,1 > > _8144_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8142_N)));
        _checked_ptr_1<int32_t> _ptr__8144_msubj(_8144_msubj ? _8144_msubj->raw() : nullptr,_8144_msubj ? _8144_msubj->size(0) : 0);
        std::shared_ptr< monty::ndarray< int32_t,1 > > _8145_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8142_N)));
        _checked_ptr_1<int32_t> _ptr__8145_msubi(_8145_msubi ? _8145_msubi->raw() : nullptr,_8145_msubi ? _8145_msubi->size(0) : 0);
        ((*_8129_md)(_8141_i))->getDataAsTriplets(_8145_msubi,_8144_msubj,_8143_mval);
        ::mosek::fusion::Utils::Tools::arraycopy(_8143_mval,(int64_t)0,_8137_val,_8140_k,_8142_N);
        int64_t _12817_ = (int64_t)0;
        int64_t _12818_ = _8142_N;
        for (int64_t _8146_j = _12817_; _8146_j < _12818_; ++_8146_j)
        {
          {
            _ptr__8135_subi[safe_add( _8140_k,_8146_j )] = safe_add( _ptr__8145_msubi[_8146_j],_8139_offseti );
            _ptr__8136_subj[safe_add( _8140_k,_8146_j )] = safe_add( _ptr__8145_msubi[_8146_j],_8138_offsetj );
          }
        }
        _8140_k = safe_add( _8140_k,_8142_N );
        _8139_offseti = safe_add( _8139_offseti,mosek::fusion::p_Matrix::_get_impl(((*_8129_md)(_8141_i)))->dimi );
        _8138_offsetj = safe_add( _8138_offsetj,mosek::fusion::p_Matrix::_get_impl(((*_8129_md)(_8141_i)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8133_dimi,_8132_dimj,_8135_subi,_8136_subj,_8137_val)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ src/fusion/Matrix.mbi:485:6-494:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( int32_t _8147_n,
    double _8148_val,
    int32_t _8149_k) { return mosek::fusion::p_Matrix::antidiag(_8147_n,_8148_val,_8149_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int32_t _8147_n,double _8148_val,int32_t _8149_k)
{
  if (((_8149_k < _8147_n) && (_8149_k >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_8148_val,(_8147_n - _8149_k)),_8149_k);
    }
  }
  else if(((_8149_k > (-_8147_n)) && (_8149_k < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_8148_val,safe_add( _8147_n,_8149_k )),_8149_k);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ src/fusion/Matrix.mbi:480:6-483:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( int32_t _8150_n,
    double _8151_val) { return mosek::fusion::p_Matrix::antidiag(_8150_n,_8151_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int32_t _8150_n,double _8151_val)
{
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_8151_val,_8150_n),(int)0);
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:469:6-478:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( int32_t _8152_n,
    double _8153_val,
    int32_t _8154_k) { return mosek::fusion::p_Matrix::diag(_8152_n,_8153_val,_8154_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int32_t _8152_n,double _8153_val,int32_t _8154_k)
{
  if (((_8154_k < _8152_n) && (_8154_k >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_8153_val,(_8152_n - _8154_k)),_8154_k);
    }
  }
  else if(((_8154_k > (-_8152_n)) && (_8154_k < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_8153_val,safe_add( _8152_n,_8154_k )),_8154_k);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:464:6-467:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( int32_t _8155_n,
    double _8156_val) { return mosek::fusion::p_Matrix::diag(_8155_n,_8156_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int32_t _8155_n,double _8156_val)
{
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_8156_val,_8155_n),(int)0);
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ src/fusion/Matrix.mbi:442:6-461:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8157_d,
    int32_t _8158_k) { return mosek::fusion::p_Matrix::antidiag(_8157_d,_8158_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _8157_d,int32_t _8158_k)
{
  _checked_ptr_1<double> _ptr__8157_d(_8157_d ? _8157_d->raw() : nullptr, _8157_d ? _8157_d->size(0) : 0);
  int32_t _12819_;
  bool _12820_ = (_8158_k > (int)0);
  if (_12820_)
  {
    _12819_ = _8158_k;
  }
  else
  {
    _12819_ = (-_8158_k);
  }
  int32_t _8159_absk = _12819_;
  int32_t _8160_dimi = safe_add( (int)((_8157_d)->size(0)),_8159_absk );
  int32_t _8161_n = (int)((_8157_d)->size(0));
  if ((_8158_k >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8162_subi = ::mosek::fusion::Utils::Tools::range(_8158_k,safe_add( _8161_n,_8158_k ));
      _checked_ptr_1<int32_t> _ptr__8162_subi(_8162_subi ? _8162_subi->raw() : nullptr,_8162_subi ? _8162_subi->size(0) : 0);
      std::vector<int32_t> _12821_;
      for (int32_t _8164_i = (int)1, _12822_ = safe_add( _8161_n,(int)1 ); _8164_i < _12822_ ; ++_8164_i)
      {
        _12821_.push_back((safe_add( _8161_n,_8158_k ) - _8164_i));
      }
      auto _12823_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12821_.size()),_12821_.begin(),_12821_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8163_subj = _12823_;
      _checked_ptr_1<int32_t> _ptr__8163_subj(_8163_subj ? _8163_subj->raw() : nullptr,_8163_subj ? _8163_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8160_dimi,_8160_dimi,_8162_subi,_8163_subj,_8157_d)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8165_subi = ::mosek::fusion::Utils::Tools::range((int)0,_8161_n);
      _checked_ptr_1<int32_t> _ptr__8165_subi(_8165_subi ? _8165_subi->raw() : nullptr,_8165_subi ? _8165_subi->size(0) : 0);
      std::vector<int32_t> _12824_;
      for (int32_t _8167_i = (int)1, _12825_ = safe_add( _8161_n,(int)1 ); _8167_i < _12825_ ; ++_8167_i)
      {
        _12824_.push_back((_8161_n - _8167_i));
      }
      auto _12826_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12824_.size()),_12824_.begin(),_12824_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8166_subj = _12826_;
      _checked_ptr_1<int32_t> _ptr__8166_subj(_8166_subj ? _8166_subj->raw() : nullptr,_8166_subj ? _8166_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8160_dimi,_8160_dimi,_8165_subi,_8166_subj,_8157_d)).as<::mosek::fusion::Matrix>();
    }
  }
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ src/fusion/Matrix.mbi:437:6-440:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8168_d) { return mosek::fusion::p_Matrix::antidiag(_8168_d); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _8168_d)
{
  _checked_ptr_1<double> _ptr__8168_d(_8168_d ? _8168_d->raw() : nullptr, _8168_d ? _8168_d->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_8168_d,(int)0);
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:416:6-435:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8169_d,
    int32_t _8170_k) { return mosek::fusion::p_Matrix::diag(_8169_d,_8170_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _8169_d,int32_t _8170_k)
{
  _checked_ptr_1<double> _ptr__8169_d(_8169_d ? _8169_d->raw() : nullptr, _8169_d ? _8169_d->size(0) : 0);
  int32_t _12827_;
  bool _12828_ = (_8170_k > (int)0);
  if (_12828_)
  {
    _12827_ = _8170_k;
  }
  else
  {
    _12827_ = (-_8170_k);
  }
  int32_t _8171_absk = _12827_;
  int32_t _8172_dimi = safe_add( (int)((_8169_d)->size(0)),_8171_absk );
  int32_t _8173_n = (int)((_8169_d)->size(0));
  if ((_8170_k >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8174_subi = ::mosek::fusion::Utils::Tools::range((int)0,_8173_n);
      _checked_ptr_1<int32_t> _ptr__8174_subi(_8174_subi ? _8174_subi->raw() : nullptr,_8174_subi ? _8174_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8175_subj = ::mosek::fusion::Utils::Tools::range(_8171_absk,safe_add( _8173_n,_8171_absk ));
      _checked_ptr_1<int32_t> _ptr__8175_subj(_8175_subj ? _8175_subj->raw() : nullptr,_8175_subj ? _8175_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8172_dimi,_8172_dimi,_8174_subi,_8175_subj,_8169_d)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8176_subi = ::mosek::fusion::Utils::Tools::range(_8171_absk,safe_add( _8173_n,_8171_absk ));
      _checked_ptr_1<int32_t> _ptr__8176_subi(_8176_subi ? _8176_subi->raw() : nullptr,_8176_subi ? _8176_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8177_subj = ::mosek::fusion::Utils::Tools::range((int)0,_8173_n);
      _checked_ptr_1<int32_t> _ptr__8177_subj(_8177_subj ? _8177_subj->raw() : nullptr,_8177_subj ? _8177_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8172_dimi,_8172_dimi,_8176_subi,_8177_subj,_8169_d)).as<::mosek::fusion::Matrix>();
    }
  }
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:411:6-414:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8178_d) { return mosek::fusion::p_Matrix::diag(_8178_d); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _8178_d)
{
  _checked_ptr_1<double> _ptr__8178_d(_8178_d ? _8178_d->raw() : nullptr, _8178_d ? _8178_d->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_8178_d,(int)0);
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.ones
// Method mosek.fusion.Matrix.ones @ src/fusion/Matrix.mbi:408:6-83
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones
  ( int32_t _8179_n,
    int32_t _8180_m) { return mosek::fusion::p_Matrix::ones(_8179_n,_8180_m); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int32_t _8179_n,int32_t _8180_m)
{
  return ::mosek::fusion::p_Matrix::dense(_8179_n,_8180_m,1.0);
}
// End mosek.fusion.Matrix.ones

// Begin mosek.fusion.Matrix.eye
// Method mosek.fusion.Matrix.eye @ src/fusion/Matrix.mbi:398:6-90
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye
  ( int32_t _8181_n) { return mosek::fusion::p_Matrix::eye(_8181_n); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int32_t _8181_n)
{
  std::vector<double> _12829_;
  for (int32_t _8182_i = (int)0, _12830_ = _8181_n; _8182_i < _12830_ ; ++_8182_i)
  {
    _12829_.push_back(1.0);
  }
  auto _12831_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12829_.size()),_12829_.begin(),_12829_.end()));
  return ::mosek::fusion::p_Matrix::diag(_12831_);
}
// End mosek.fusion.Matrix.eye

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ src/fusion/Matrix.mbi:388:6-114
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _8183_other) { return mosek::fusion::p_Matrix::dense(_8183_other); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _8183_other)
{
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8183_other)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ src/fusion/Matrix.mbi:387:6-126
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( int32_t _8184_dimi,
    int32_t _8185_dimj,
    double _8186_value) { return mosek::fusion::p_Matrix::dense(_8184_dimi,_8185_dimj,_8186_value); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int32_t _8184_dimi,int32_t _8185_dimj,double _8186_value)
{
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8184_dimi,_8185_dimj,_8186_value)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ src/fusion/Matrix.mbi:386:6-125
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( int32_t _8187_dimi,
    int32_t _8188_dimj,
    std::shared_ptr< monty::ndarray< double,1 > > _8189_data) { return mosek::fusion::p_Matrix::dense(_8187_dimi,_8188_dimj,_8189_data); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int32_t _8187_dimi,int32_t _8188_dimj,std::shared_ptr< monty::ndarray< double,1 > > _8189_data)
{
  _checked_ptr_1<double> _ptr__8189_data(_8189_data ? _8189_data->raw() : nullptr, _8189_data ? _8189_data->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8187_dimi,_8188_dimj,_8189_data)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ src/fusion/Matrix.mbi:385:6-113
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( std::shared_ptr< monty::ndarray< double,2 > > _8190_data) { return mosek::fusion::p_Matrix::dense(_8190_data); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _8190_data)
{
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8190_data)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:374:6-382:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _8191_mx) { return mosek::fusion::p_Matrix::sparse(_8191_mx); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _8191_mx)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8192_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8191_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__8192_subi(_8192_subi ? _8192_subi->raw() : nullptr,_8192_subi ? _8192_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8193_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8191_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__8193_subj(_8193_subj ? _8193_subj->raw() : nullptr,_8193_subj ? _8193_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8194_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8191_mx->numNonzeros())));
  _checked_ptr_1<double> _ptr__8194_val(_8194_val ? _8194_val->raw() : nullptr,_8194_val ? _8194_val->size(0) : 0);
  _8191_mx->getDataAsTriplets(_8192_subi,_8193_subj,_8194_val);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8191_mx->numRows(),_8191_mx->numColumns(),_8192_subi,_8193_subj,_8194_val)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:231:6-371:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _8195_blocks) { return mosek::fusion::p_Matrix::sparse(_8195_blocks); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _8195_blocks)
{
  int32_t _8196_maxi = (int)((_8195_blocks)->size(0));
  int32_t _8197_maxj = (int)((((*_8195_blocks)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8198_idims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8196_maxi)));
  _checked_ptr_1<int32_t> _ptr__8198_idims(_8198_idims ? _8198_idims->raw() : nullptr,_8198_idims ? _8198_idims->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8199_jdims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8197_maxj)));
  _checked_ptr_1<int32_t> _ptr__8199_jdims(_8199_jdims ? _8199_jdims->raw() : nullptr,_8199_jdims ? _8199_jdims->size(0) : 0);
  int64_t _8200_nelm = (int64_t)0;
  int32_t _8201_k = (int)0;
  {
    int32_t _8202_i = (int)0;
    for(;(_8202_i < _8196_maxi);++ _8202_i)
    {
      {
        {
          int32_t _8203_j = (int)0;
          for(;(_8203_j < _8197_maxj);++ _8203_j)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _8204_m = ((*((*_8195_blocks)(_8202_i)))(_8203_j));
              if ((NULL != _8204_m.get()))
              {
                {
                  if ((_ptr__8199_jdims[_8203_j] == (int)0))
                  {
                    {
                      _ptr__8199_jdims[_8203_j] = mosek::fusion::p_Matrix::_get_impl(_8204_m)->dimj;
                    }
                  }
                  else if((_ptr__8199_jdims[_8203_j] != mosek::fusion::p_Matrix::_get_impl(_8204_m)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__8198_idims[_8202_i] == (int)0))
                  {
                    {
                      _ptr__8198_idims[_8202_i] = mosek::fusion::p_Matrix::_get_impl(_8204_m)->dimi;
                    }
                  }
                  else if((_ptr__8198_idims[_8202_i] != mosek::fusion::p_Matrix::_get_impl(_8204_m)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _8200_nelm = safe_add( _8200_nelm,_8204_m->numNonzeros() );
                }
              }
              {}
              ++ _8201_k;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _8205_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8200_nelm)));
  _checked_ptr_1<double> _ptr__8205_cof(_8205_cof ? _8205_cof->raw() : nullptr,_8205_cof ? _8205_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8206_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8200_nelm)));
  _checked_ptr_1<int32_t> _ptr__8206_subi(_8206_subi ? _8206_subi->raw() : nullptr,_8206_subi ? _8206_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8207_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8200_nelm)));
  _checked_ptr_1<int32_t> _ptr__8207_subj(_8207_subj ? _8207_subj->raw() : nullptr,_8207_subj ? _8207_subj->size(0) : 0);
  int32_t _8208_dstp = (int)0;
  int32_t _8209_offseti = (int)0;
  {
    int32_t _8210_i = (int)0;
    for(;(_8210_i < _8196_maxi);++ _8210_i)
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _8211_lidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8197_maxj)));
        _checked_ptr_1<int32_t> _ptr__8211_lidxs(_8211_lidxs ? _8211_lidxs->raw() : nullptr,_8211_lidxs ? _8211_lidxs->size(0) : 0);
        {
          int32_t _8212_ii = (int)0;
          for(;(_8212_ii < _ptr__8198_idims[_8210_i]);++ _8212_ii)
          {
            {
              int32_t _8213_offsetj = (int)0;
              {
                int32_t _8214_j = (int)0;
                for(;(_8214_j < _8197_maxj);++ _8214_j)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _8215_m_ = ((*((*_8195_blocks)(_8210_i)))(_8214_j));
                    if ((NULL != _8215_m_.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _12832_ = _8215_m_;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12832_.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _8216_m (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12832_.get()));
                          {
                            int32_t _8219_kk = _ptr__8211_lidxs[_8214_j];
                            {
                              int32_t _8220_jj = (int)0;
                              for(;(_8220_jj < mosek::fusion::p_Matrix::_get_impl(_8216_m)->dimj);++ _8220_jj)
                              {
                                {
                                  _ptr__8205_cof[_8208_dstp] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_8216_m)->data)(_8219_kk));
                                  _ptr__8206_subi[_8208_dstp] = safe_add( _8209_offseti,_8212_ii );
                                  _ptr__8207_subj[_8208_dstp] = safe_add( _8213_offsetj,_8220_jj );
                                  ++ _8219_kk;
                                  ++ _8208_dstp;
                                }
                              }
                            }
                            _ptr__8211_lidxs[_8214_j] = _8219_kk;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12832_.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _8217_m (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12832_.get()));
                          {
                            int32_t _8221_kk;
                            {
                              _8221_kk = _ptr__8211_lidxs[_8214_j];
                              for(;((_8221_kk < mosek::fusion::p_SparseMatrix::_get_impl(_8217_m)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_8217_m)->subi)(_8221_kk)) == _8212_ii));++ _8221_kk)
                              {
                                {
                                  _ptr__8205_cof[_8208_dstp] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_8217_m)->val)(_8221_kk));
                                  _ptr__8207_subj[_8208_dstp] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_8217_m)->subj)(_8221_kk)),_8213_offsetj );
                                  _ptr__8206_subi[_8208_dstp] = safe_add( _8209_offseti,_8212_ii );
                                  ++ _8208_dstp;
                                }
                              }
                            }
                            _ptr__8211_lidxs[_8214_j] = _8221_kk;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _8218_m = _12832_;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _8213_offsetj = safe_add( _8213_offsetj,_ptr__8199_jdims[_8214_j] );
                  }
                }
              }
            }
          }
        }
        _8209_offseti = safe_add( _8209_offseti,_ptr__8198_idims[_8210_i] );
      }
    }
  }
  int32_t _8222_dimi = (int)0;
  int32_t _8223_dimj = (int)0;
  {
    int32_t _8224_i = (int)0;
    for(;(_8224_i < _8196_maxi);++ _8224_i)
    {
      {
        _8222_dimi = safe_add( _8222_dimi,_ptr__8198_idims[_8224_i] );
      }
    }
  }
  {
    int32_t _8225_j = (int)0;
    for(;(_8225_j < _8197_maxj);++ _8225_j)
    {
      {
        _8223_dimj = safe_add( _8223_dimj,_ptr__8199_jdims[_8225_j] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8222_dimi,_8223_dimj,_8206_subi,_8207_subj,_8205_cof)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:208:6-228:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< double,2 > > _8226_data) { return mosek::fusion::p_Matrix::sparse(_8226_data); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _8226_data)
{
  int32_t _8227_dimi = (int)((_8226_data)->size(0));
  int32_t _8228_dimj = (int)((_8226_data)->size(1));
  int64_t _8229_nelem = (int64_t)safe_mul( _8227_dimi,_8228_dimj );
  int32_t _8230_k = (int)0;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8231_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8229_nelem)));
  _checked_ptr_1<int32_t> _ptr__8231_subi(_8231_subi ? _8231_subi->raw() : nullptr,_8231_subi ? _8231_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8232_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8229_nelem)));
  _checked_ptr_1<int32_t> _ptr__8232_subj(_8232_subj ? _8232_subj->raw() : nullptr,_8232_subj ? _8232_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8233_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8229_nelem)));
  _checked_ptr_1<double> _ptr__8233_val(_8233_val ? _8233_val->raw() : nullptr,_8233_val ? _8233_val->size(0) : 0);
  {
    int32_t _8234_i = (int)0;
    for(;(_8234_i < _8227_dimi);++ _8234_i)
    {
      {
        {
          int32_t _8235_j = (int)0;
          for(;(_8235_j < _8228_dimj);++ _8235_j)
          {
            {
              _ptr__8231_subi[_8230_k] = _8234_i;
              _ptr__8232_subj[_8230_k] = _8235_j;
              _ptr__8233_val[_8230_k] = ((*_8226_data)(_8234_i,_8235_j));
              ++ _8230_k;
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8227_dimi,_8228_dimj,_8231_subi,_8232_subj,_8233_val)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:202:6-205:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( int32_t _8236_nrow,
    int32_t _8237_ncol) { return mosek::fusion::p_Matrix::sparse(_8236_nrow,_8237_ncol); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int32_t _8236_nrow,int32_t _8237_ncol)
{
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8236_nrow,_8237_ncol,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(int64_t)0)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:188:6-199:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( int32_t _8238_nrow,
    int32_t _8239_ncol,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8240_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8241_subj,
    double _8242_val) { return mosek::fusion::p_Matrix::sparse(_8238_nrow,_8239_ncol,_8240_subi,_8241_subj,_8242_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int32_t _8238_nrow,int32_t _8239_ncol,std::shared_ptr< monty::ndarray< int32_t,1 > > _8240_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8241_subj,double _8242_val)
{
  _checked_ptr_1<int32_t> _ptr__8240_subi(_8240_subi ? _8240_subi->raw() : nullptr, _8240_subi ? _8240_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8241_subj(_8241_subj ? _8241_subj->raw() : nullptr, _8241_subj ? _8241_subj->size(0) : 0);
  int32_t _8243_sz = (int)0;
  if ((NULL != _8240_subi.get()))
  {
    {
      _8243_sz = (int)((_8240_subi)->size(0));
    }
  }
  else if((NULL != _8241_subj.get()))
  {
    {
      _8243_sz = (int)((_8241_subj)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_8238_nrow,_8239_ncol,_8240_subi,_8241_subj,::mosek::fusion::Utils::Tools::makevector(_8242_val,_8243_sz));
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:170:6-185:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8244_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8245_subj,
    double _8246_val) { return mosek::fusion::p_Matrix::sparse(_8244_subi,_8245_subj,_8246_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _8244_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8245_subj,double _8246_val)
{
  _checked_ptr_1<int32_t> _ptr__8244_subi(_8244_subi ? _8244_subi->raw() : nullptr, _8244_subi ? _8244_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8245_subj(_8245_subj ? _8245_subj->raw() : nullptr, _8245_subj ? _8245_subj->size(0) : 0);
  int32_t _8247_maxj = (int)0;
  int32_t _8248_maxi = (int)0;
  int32_t _8249_num = (int)((_8244_subi)->size(0));
  if ((_8249_num > (int)((_8245_subj)->size(0))))
  {
    {
      _8249_num = (int)((_8245_subj)->size(0));
    }
  }
  {}
  int32_t _12833_ = (int)0;
  int32_t _12834_ = _8249_num;
  for (int32_t _8250_i = _12833_; _8250_i < _12834_; ++_8250_i)
  {
    {
      if ((_8248_maxi < _ptr__8244_subi[_8250_i]))
      {
        {
          _8248_maxi = _ptr__8244_subi[_8250_i];
        }
      }
      {}
      if ((_8247_maxj < _ptr__8245_subj[_8250_i]))
      {
        {
          _8247_maxj = _ptr__8245_subj[_8250_i];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _8248_maxi,(int)1 ),safe_add( _8247_maxj,(int)1 ),_8244_subi,_8245_subj,_8246_val);
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:151:6-167:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8251_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8252_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _8253_val) { return mosek::fusion::p_Matrix::sparse(_8251_subi,_8252_subj,_8253_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _8251_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8252_subj,std::shared_ptr< monty::ndarray< double,1 > > _8253_val)
{
  _checked_ptr_1<int32_t> _ptr__8251_subi(_8251_subi ? _8251_subi->raw() : nullptr, _8251_subi ? _8251_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8252_subj(_8252_subj ? _8252_subj->raw() : nullptr, _8252_subj ? _8252_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__8253_val(_8253_val ? _8253_val->raw() : nullptr, _8253_val ? _8253_val->size(0) : 0);
  int32_t _8254_maxj = (int)0;
  int32_t _8255_maxi = (int)0;
  int32_t _8256_num = (int)((_8251_subi)->size(0));
  if ((_8256_num > (int)((_8252_subj)->size(0))))
  {
    {
      _8256_num = (int)((_8252_subj)->size(0));
    }
  }
  {}
  if ((_8256_num > (int)((_8253_val)->size(0))))
  {
    {
      _8256_num = (int)((_8253_val)->size(0));
    }
  }
  {}
  int32_t _12835_ = (int)0;
  int32_t _12836_ = _8256_num;
  for (int32_t _8257_i = _12835_; _8257_i < _12836_; ++_8257_i)
  {
    {
      if ((_8255_maxi < _ptr__8251_subi[_8257_i]))
      {
        {
          _8255_maxi = _ptr__8251_subi[_8257_i];
        }
      }
      {}
      if ((_8254_maxj < _ptr__8252_subj[_8257_i]))
      {
        {
          _8254_maxj = _ptr__8252_subj[_8257_i];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _8255_maxi,(int)1 ),safe_add( _8254_maxj,(int)1 ),_8251_subi,_8252_subj,_8253_val);
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:128:6-148:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( int32_t _8258_nrow,
    int32_t _8259_ncol,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8260_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8261_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _8262_val) { return mosek::fusion::p_Matrix::sparse(_8258_nrow,_8259_ncol,_8260_subi,_8261_subj,_8262_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int32_t _8258_nrow,int32_t _8259_ncol,std::shared_ptr< monty::ndarray< int32_t,1 > > _8260_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8261_subj,std::shared_ptr< monty::ndarray< double,1 > > _8262_val)
{
  _checked_ptr_1<int32_t> _ptr__8260_subi(_8260_subi ? _8260_subi->raw() : nullptr, _8260_subi ? _8260_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8261_subj(_8261_subj ? _8261_subj->raw() : nullptr, _8261_subj ? _8261_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__8262_val(_8262_val ? _8262_val->raw() : nullptr, _8262_val ? _8262_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12837_;
  bool _12838_ = (NULL != _8262_val.get());
  if (_12838_)
  {
    _12837_ = _8262_val;
  }
  else
  {
    _12837_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _8263_vl = _12837_;
  _checked_ptr_1<double> _ptr__8263_vl(_8263_vl ? _8263_vl->raw() : nullptr,_8263_vl ? _8263_vl->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _12839_;
  bool _12840_ = (NULL != _8261_subj.get());
  if (_12840_)
  {
    _12839_ = _8261_subj;
  }
  else
  {
    _12839_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8264_sj = _12839_;
  _checked_ptr_1<int32_t> _ptr__8264_sj(_8264_sj ? _8264_sj->raw() : nullptr,_8264_sj ? _8264_sj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _12841_;
  bool _12842_ = (NULL != _8260_subi.get());
  if (_12842_)
  {
    _12841_ = _8260_subi;
  }
  else
  {
    _12841_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8265_si = _12841_;
  _checked_ptr_1<int32_t> _ptr__8265_si(_8265_si ? _8265_si->raw() : nullptr,_8265_si ? _8265_si->size(0) : 0);
  int64_t _8266_nnz = (int64_t)((_8265_si)->size(0));
  if ((((int64_t)((_8264_sj)->size(0)) != _8266_nnz) || ((int64_t)((_8263_vl)->size(0)) != _8266_nnz)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8258_nrow,_8259_ncol,_8265_si,_8264_sj,_8263_vl,_8266_nnz)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.get
// End mosek.fusion.Matrix.get

// Begin mosek.fusion.Matrix.isSparse
// End mosek.fusion.Matrix.isSparse

// Begin mosek.fusion.Matrix.getDataAsArray
// End mosek.fusion.Matrix.getDataAsArray

// Begin mosek.fusion.Matrix.getDataAsTriplets
// End mosek.fusion.Matrix.getDataAsTriplets

// Begin mosek.fusion.Matrix.transpose
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
// End mosek.fusion.Matrix.transpose

// Begin mosek.fusion.Matrix.numNonzeros
// End mosek.fusion.Matrix.numNonzeros

// Begin mosek.fusion.Matrix.numColumns
// Method mosek.fusion.Matrix.numColumns @ src/fusion/Matrix.mbi:79:6-54
int32_t mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }
int32_t mosek::fusion::p_Matrix::numColumns()
{
  return dimj;
}
// End mosek.fusion.Matrix.numColumns

// Begin mosek.fusion.Matrix.numRows
// Method mosek.fusion.Matrix.numRows @ src/fusion/Matrix.mbi:75:6-51
int32_t mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }
int32_t mosek::fusion::p_Matrix::numRows()
{
  return dimi;
}
// End mosek.fusion.Matrix.numRows

void mosek::fusion::p_Matrix::destroy()
{
}
void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }
// } class Matrix
// class UnimplementedError { // @ src/fusion/Errors.mbi:284:4-292:5
// mosek.fusion.UnimplementedError.ctor @ src/fusion/Errors.mbi:288:8-291:9
mosek::fusion::UnimplementedError::UnimplementedError
  ( const std::string &  _8272_msg)
 : RuntimeException(_8272_msg)
  {
  }
// mosek.fusion.UnimplementedError.ctor

// } class UnimplementedError
// class FatalError { // @ src/fusion/Errors.mbi:273:4-281:5
// mosek.fusion.FatalError.ctor @ src/fusion/Errors.mbi:277:8-280:9
mosek::fusion::FatalError::FatalError
  ( const std::string &  _8273_msg)
 : RuntimeException(_8273_msg)
  {
  }
// mosek.fusion.FatalError.ctor

// } class FatalError
// class UnexpectedError { // @ src/fusion/Errors.mbi:257:4-270:5
// mosek.fusion.UnexpectedError.ctor @ src/fusion/Errors.mbi:266:8-269:9
mosek::fusion::UnexpectedError::UnexpectedError
  ( ::mosek::fusion::FusionException _8274_e)
 : RuntimeException(_8274_e.toString())
  {
  }
// mosek.fusion.UnexpectedError.ctor

// mosek.fusion.UnexpectedError.ctor @ src/fusion/Errors.mbi:261:8-264:9
mosek::fusion::UnexpectedError::UnexpectedError
  ( const std::string &  _8275_msg)
 : RuntimeException(_8275_msg)
  {
  }
// mosek.fusion.UnexpectedError.ctor

// } class UnexpectedError
// class SparseFormatError { // @ src/fusion/Errors.mbi:245:4-253:5
// mosek.fusion.SparseFormatError.ctor @ src/fusion/Errors.mbi:249:8-252:9
mosek::fusion::SparseFormatError::SparseFormatError
  ( const std::string &  _8276_msg)
 : mosek::fusion::FusionRuntimeException(_8276_msg)
  {
  }
// mosek.fusion.SparseFormatError.ctor

// } class SparseFormatError
// class SolutionError { // @ src/fusion/Errors.mbi:229:4-242:5
// mosek.fusion.SolutionError.ctor @ src/fusion/Errors.mbi:238:8-241:9
mosek::fusion::SolutionError::SolutionError
  ( )
 : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))
  {
  }
// mosek.fusion.SolutionError.ctor

// mosek.fusion.SolutionError.ctor @ src/fusion/Errors.mbi:233:8-236:9
mosek::fusion::SolutionError::SolutionError
  ( const std::string &  _8277_msg)
 : mosek::fusion::FusionException(_8277_msg)
  {
  }
// mosek.fusion.SolutionError.ctor

// } class SolutionError
// class SliceError { // @ src/fusion/Errors.mbi:213:4-226:5
// mosek.fusion.SliceError.ctor @ src/fusion/Errors.mbi:222:8-225:9
mosek::fusion::SliceError::SliceError
  ( )
 : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))
  {
  }
// mosek.fusion.SliceError.ctor

// mosek.fusion.SliceError.ctor @ src/fusion/Errors.mbi:217:8-220:9
mosek::fusion::SliceError::SliceError
  ( const std::string &  _8278_msg)
 : mosek::fusion::FusionRuntimeException(_8278_msg)
  {
  }
// mosek.fusion.SliceError.ctor

// } class SliceError
// class UpdateError { // @ src/fusion/Errors.mbi:196:4-209:5
// mosek.fusion.UpdateError.ctor @ src/fusion/Errors.mbi:205:8-208:9
mosek::fusion::UpdateError::UpdateError
  ( )
 : mosek::fusion::FusionRuntimeException(std::string ("Cannot update parameterized item"))
  {
  }
// mosek.fusion.UpdateError.ctor

// mosek.fusion.UpdateError.ctor @ src/fusion/Errors.mbi:200:8-203:9
mosek::fusion::UpdateError::UpdateError
  ( const std::string &  _8279_msg)
 : mosek::fusion::FusionRuntimeException(_8279_msg)
  {
  }
// mosek.fusion.UpdateError.ctor

// } class UpdateError
// class SetDefinitionError { // @ src/fusion/Errors.mbi:185:4-193:5
// mosek.fusion.SetDefinitionError.ctor @ src/fusion/Errors.mbi:189:8-192:9
mosek::fusion::SetDefinitionError::SetDefinitionError
  ( const std::string &  _8280_msg)
 : mosek::fusion::FusionRuntimeException(_8280_msg)
  {
  }
// mosek.fusion.SetDefinitionError.ctor

// } class SetDefinitionError
// class OptimizeError { // @ src/fusion/Errors.mbi:173:4-181:5
// mosek.fusion.OptimizeError.ctor @ src/fusion/Errors.mbi:177:8-180:9
mosek::fusion::OptimizeError::OptimizeError
  ( const std::string &  _8281_msg)
 : mosek::fusion::FusionRuntimeException(_8281_msg)
  {
  }
// mosek.fusion.OptimizeError.ctor

// } class OptimizeError
// class NameError { // @ src/fusion/Errors.mbi:162:4-170:5
// mosek.fusion.NameError.ctor @ src/fusion/Errors.mbi:166:8-169:9
mosek::fusion::NameError::NameError
  ( const std::string &  _8282_msg)
 : mosek::fusion::FusionRuntimeException(_8282_msg)
  {
  }
// mosek.fusion.NameError.ctor

// } class NameError
// class DeletionError { // @ src/fusion/Errors.mbi:151:4-159:5
// mosek.fusion.DeletionError.ctor @ src/fusion/Errors.mbi:155:8-158:9
mosek::fusion::DeletionError::DeletionError
  ( const std::string &  _8283_msg)
 : mosek::fusion::FusionRuntimeException(_8283_msg)
  {
  }
// mosek.fusion.DeletionError.ctor

// } class DeletionError
// class ModelError { // @ src/fusion/Errors.mbi:138:4-147:5
// mosek.fusion.ModelError.ctor @ src/fusion/Errors.mbi:143:8-146:9
mosek::fusion::ModelError::ModelError
  ( const std::string &  _8284_msg)
 : mosek::fusion::FusionRuntimeException(_8284_msg)
  {
  }
// mosek.fusion.ModelError.ctor

// } class ModelError
// class MatrixError { // @ src/fusion/Errors.mbi:128:4-133:5
// mosek.fusion.MatrixError.ctor @ src/fusion/Errors.mbi:132:8-55
mosek::fusion::MatrixError::MatrixError
  ( const std::string &  _8285_msg)
 : mosek::fusion::FusionRuntimeException(_8285_msg)
  {
  }
// mosek.fusion.MatrixError.ctor

// } class MatrixError
// class DimensionError { // @ src/fusion/Errors.mbi:117:4-122:5
// mosek.fusion.DimensionError.ctor @ src/fusion/Errors.mbi:121:8-56
mosek::fusion::DimensionError::DimensionError
  ( const std::string &  _8286_msg)
 : mosek::fusion::FusionRuntimeException(_8286_msg)
  {
  }
// mosek.fusion.DimensionError.ctor

// } class DimensionError
// class LengthError { // @ src/fusion/Errors.mbi:105:4-110:5
// mosek.fusion.LengthError.ctor @ src/fusion/Errors.mbi:109:8-56
mosek::fusion::LengthError::LengthError
  ( const std::string &  _8287_msg)
 : mosek::fusion::FusionRuntimeException(_8287_msg)
  {
  }
// mosek.fusion.LengthError.ctor

// } class LengthError
// class RangeError { // @ src/fusion/Errors.mbi:96:4-100:5
// mosek.fusion.RangeError.ctor @ src/fusion/Errors.mbi:99:8-56
mosek::fusion::RangeError::RangeError
  ( const std::string &  _8288_msg)
 : mosek::fusion::FusionRuntimeException(_8288_msg)
  {
  }
// mosek.fusion.RangeError.ctor

// } class RangeError
// class IndexError { // @ src/fusion/Errors.mbi:88:4-93:5
// mosek.fusion.IndexError.ctor @ src/fusion/Errors.mbi:92:8-56
mosek::fusion::IndexError::IndexError
  ( const std::string &  _8289_msg)
 : mosek::fusion::FusionRuntimeException(_8289_msg)
  {
  }
// mosek.fusion.IndexError.ctor

// } class IndexError
// class DomainError { // @ src/fusion/Errors.mbi:80:4-85:5
// mosek.fusion.DomainError.ctor @ src/fusion/Errors.mbi:84:6-54
mosek::fusion::DomainError::DomainError
  ( const std::string &  _8290_msg)
 : mosek::fusion::FusionRuntimeException(_8290_msg)
  {
  }
// mosek.fusion.DomainError.ctor

// } class DomainError
// class ValueConversionError { // @ src/fusion/Errors.mbi:68:4-76:5
// mosek.fusion.ValueConversionError.ctor @ src/fusion/Errors.mbi:72:6-75:7
mosek::fusion::ValueConversionError::ValueConversionError
  ( const std::string &  _8291_msg)
 : mosek::fusion::FusionRuntimeException(_8291_msg)
  {
  }
// mosek.fusion.ValueConversionError.ctor

// } class ValueConversionError
// class ParameterError { // @ src/fusion/Errors.mbi:57:4-65:5
// mosek.fusion.ParameterError.ctor @ src/fusion/Errors.mbi:61:6-64:7
mosek::fusion::ParameterError::ParameterError
  ( const std::string &  _8292_msg)
 : mosek::fusion::FusionRuntimeException(_8292_msg)
  {
  }
// mosek.fusion.ParameterError.ctor

// } class ParameterError
// class ExpressionError { // @ src/fusion/Errors.mbi:46:4-54:5
// mosek.fusion.ExpressionError.ctor @ src/fusion/Errors.mbi:50:6-53:7
mosek::fusion::ExpressionError::ExpressionError
  ( const std::string &  _8293_msg)
 : mosek::fusion::FusionRuntimeException(_8293_msg)
  {
  }
// mosek.fusion.ExpressionError.ctor

// } class ExpressionError
// class IOError { // @ src/fusion/Errors.mbi:38:4-43:5
// mosek.fusion.IOError.ctor @ src/fusion/Errors.mbi:42:8-56
mosek::fusion::IOError::IOError
  ( const std::string &  _8294_msg)
 : mosek::fusion::FusionRuntimeException(_8294_msg)
  {
  }
// mosek.fusion.IOError.ctor

// } class IOError
// class FusionRuntimeException { // @ src/fusion/Errors.mbi:24:4-34:5
// mosek.fusion.FusionRuntimeException.ctor @ src/fusion/Errors.mbi:28:6-68
mosek::fusion::FusionRuntimeException::FusionRuntimeException
  ( const std::string &  _8295_msg_)
 : RuntimeException(_8295_msg_)
  {
    msg = _8295_msg_;
  }
// mosek.fusion.FusionRuntimeException.ctor

// Begin mosek.fusion.FusionRuntimeException.toString
// Method mosek.fusion.FusionRuntimeException.toString @ src/fusion/Errors.mbi:33:6-53
std::string mosek::fusion::FusionRuntimeException::toString()
{
  return msg;
}
// End mosek.fusion.FusionRuntimeException.toString

// } class FusionRuntimeException
// class FusionException { // @ src/fusion/Errors.mbi:9:4-18:5
// mosek.fusion.FusionException.ctor @ src/fusion/Errors.mbi:13:6-67
mosek::fusion::FusionException::FusionException
  ( const std::string &  _8296_msg_)
 : Exception(_8296_msg_)
  {
    msg = _8296_msg_;
  }
// mosek.fusion.FusionException.ctor

// Begin mosek.fusion.FusionException.toString
// Method mosek.fusion.FusionException.toString @ src/fusion/Errors.mbi:17:6-53
std::string mosek::fusion::FusionException::toString()
{
  return msg;
}
// End mosek.fusion.FusionException.toString

// } class FusionException
// class LinkedBlocks { // @ src/fusion/LinkedList.monty:203:4-269:5
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }
mosek::fusion::p_LinkedBlocks::p_LinkedBlocks
  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.LinkedBlocks.ctor @ src/fusion/LinkedList.monty:223:6-32
mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks
  ()
{ return new mosek::fusion::LinkedBlocks(); }
mosek::fusion::LinkedBlocks::LinkedBlocks
  () : 
   LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this))
{ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }
void mosek::fusion::p_LinkedBlocks::_initialize  ()
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}
// mosek.fusion.LinkedBlocks.ctor

// mosek.fusion.LinkedBlocks.ctor @ src/fusion/LinkedList.monty:216:6-221:7
mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks
  (int32_t _8297_n)
{ return new mosek::fusion::LinkedBlocks(_8297_n); }
mosek::fusion::LinkedBlocks::LinkedBlocks
  (int32_t _8297_n) : 
   LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this))
{ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_8297_n); }
void mosek::fusion::p_LinkedBlocks::_initialize  (int32_t _8297_n)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_8297_n);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts((int)128);
    bsize = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)128)));
    bfirst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)128)));
  }
}
// mosek.fusion.LinkedBlocks.ctor

// mosek.fusion.LinkedBlocks.ctor @ src/fusion/LinkedList.monty:209:6-214:7
mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks
  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _8298_other)
{ return new mosek::fusion::LinkedBlocks(_8298_other); }
mosek::fusion::LinkedBlocks::LinkedBlocks
  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _8298_other) : 
   LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this))
{ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_8298_other); }
void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _8298_other)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_8298_other)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_8298_other)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_8298_other)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_8298_other)->bfirst);
  }
}
// mosek.fusion.LinkedBlocks.ctor

// Begin mosek.fusion.LinkedBlocks.free
// Method mosek.fusion.LinkedBlocks.free @ src/fusion/LinkedList.monty:262:6-268:7
void mosek::fusion::LinkedBlocks :: free(int32_t _8299_bkey) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_8299_bkey); }
void mosek::fusion::p_LinkedBlocks::free(int32_t _8299_bkey)
{
  int32_t _8300_key = ((*bfirst)(_8299_bkey));
  ints->free(_8300_key,((*bsize)(_8299_bkey)));
  ((*bsize)(_8299_bkey)) = (-(int)1);
  ((*bfirst)(_8299_bkey)) = (-(int)1);
  blocks->free(_8299_bkey,(int)1);
}
// End mosek.fusion.LinkedBlocks.free

// Begin mosek.fusion.LinkedBlocks.alloc
// Method mosek.fusion.LinkedBlocks.alloc @ src/fusion/LinkedList.monty:244:6-260:7
int32_t mosek::fusion::LinkedBlocks :: alloc(int32_t _8301_size) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_8301_size); }
int32_t mosek::fusion::p_LinkedBlocks::alloc(int32_t _8301_size)
{
  int32_t _12843_;
  bool _12844_ = (_8301_size > (int)0);
  if (_12844_)
  {
    _12843_ = ints->alloc(_8301_size);
  }
  else
  {
    _12843_ = (-(int)1);
  }
  int32_t _8302_key = _12843_;
  int32_t _8303_bkey = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8304_nbsize = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__8304_nbsize(_8304_nbsize ? _8304_nbsize->raw() : nullptr,_8304_nbsize ? _8304_nbsize->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8305_nbfirst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__8305_nbfirst(_8305_nbfirst ? _8305_nbfirst->raw() : nullptr,_8305_nbfirst ? _8305_nbfirst->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_8304_nbsize,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_8305_nbfirst,(int)0,(int)((bfirst)->size(0)));
      bsize = _8304_nbsize;
      bfirst = _8305_nbfirst;
    }
  }
  {}
  ((*bfirst)(_8303_bkey)) = _8302_key;
  ((*bsize)(_8303_bkey)) = _8301_size;
  return _8303_bkey;
}
// End mosek.fusion.LinkedBlocks.alloc

// Begin mosek.fusion.LinkedBlocks.maxidx
// Method mosek.fusion.LinkedBlocks.maxidx @ src/fusion/LinkedList.monty:240:6-242:7
int32_t mosek::fusion::LinkedBlocks :: maxidx(int32_t _8306_bkey) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_8306_bkey); }
int32_t mosek::fusion::p_LinkedBlocks::maxidx(int32_t _8306_bkey)
{
  return ints->maxidx(((*bfirst)(_8306_bkey)),((*bsize)(_8306_bkey)));
}
// End mosek.fusion.LinkedBlocks.maxidx

// Begin mosek.fusion.LinkedBlocks.numallocated
// Method mosek.fusion.LinkedBlocks.numallocated @ src/fusion/LinkedList.monty:238:6-72
int32_t mosek::fusion::LinkedBlocks :: numallocated() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numallocated(); }
int32_t mosek::fusion::p_LinkedBlocks::numallocated()
{
  return ints->numallocated();
}
// End mosek.fusion.LinkedBlocks.numallocated

// Begin mosek.fusion.LinkedBlocks.get
// Method mosek.fusion.LinkedBlocks.get @ src/fusion/LinkedList.monty:232:6-236:7
void mosek::fusion::LinkedBlocks :: get(int32_t _8307_bkey,std::shared_ptr< monty::ndarray< int32_t,1 > > _8308_target,int32_t _8309_offset) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_8307_bkey,_8308_target,_8309_offset); }
void mosek::fusion::p_LinkedBlocks::get(int32_t _8307_bkey,std::shared_ptr< monty::ndarray< int32_t,1 > > _8308_target,int32_t _8309_offset)
{
  _checked_ptr_1<int32_t> _ptr__8308_target(_8308_target ? _8308_target->raw() : nullptr, _8308_target ? _8308_target->size(0) : 0);
  ints->get(((*bfirst)(_8307_bkey)),((*bsize)(_8307_bkey)),_8308_target,_8309_offset);
}
// End mosek.fusion.LinkedBlocks.get

// Begin mosek.fusion.LinkedBlocks.numblocks
// Method mosek.fusion.LinkedBlocks.numblocks @ src/fusion/LinkedList.monty:230:6-60
int32_t mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }
int32_t mosek::fusion::p_LinkedBlocks::numblocks()
{
  return (int)((bsize)->size(0));
}
// End mosek.fusion.LinkedBlocks.numblocks

// Begin mosek.fusion.LinkedBlocks.blocksize
// Method mosek.fusion.LinkedBlocks.blocksize @ src/fusion/LinkedList.monty:229:6-71
int32_t mosek::fusion::LinkedBlocks :: blocksize(int32_t _8310_bkey) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_8310_bkey); }
int32_t mosek::fusion::p_LinkedBlocks::blocksize(int32_t _8310_bkey)
{
  return ((*bsize)(_8310_bkey));
}
// End mosek.fusion.LinkedBlocks.blocksize

// Begin mosek.fusion.LinkedBlocks.block_capacity
// Method mosek.fusion.LinkedBlocks.block_capacity @ src/fusion/LinkedList.monty:228:6-73
int32_t mosek::fusion::LinkedBlocks :: block_capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->block_capacity(); }
int32_t mosek::fusion::p_LinkedBlocks::block_capacity()
{
  return blocks->capacity();
}
// End mosek.fusion.LinkedBlocks.block_capacity

// Begin mosek.fusion.LinkedBlocks.capacity
// Method mosek.fusion.LinkedBlocks.capacity @ src/fusion/LinkedList.monty:227:6-65
int32_t mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }
int32_t mosek::fusion::p_LinkedBlocks::capacity()
{
  return ints->capacity();
}
// End mosek.fusion.LinkedBlocks.capacity

// Begin mosek.fusion.LinkedBlocks.validate
// Method mosek.fusion.LinkedBlocks.validate @ src/fusion/LinkedList.monty:225:6-86
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }
bool mosek::fusion::p_LinkedBlocks::validate()
{
  return (ints->validate() && blocks->validate());
}
// End mosek.fusion.LinkedBlocks.validate

void mosek::fusion::p_LinkedBlocks::destroy()
{
bfirst.reset();
bsize.reset();
blocks.reset();
ints.reset();
}
void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }
// } class LinkedBlocks
// class LinkedInts { // @ src/fusion/LinkedList.monty:4:4-200:5
mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }
mosek::fusion::p_LinkedInts::p_LinkedInts
  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.LinkedInts.ctor @ src/fusion/LinkedList.monty:72:6-84:7
mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts
  (int32_t _8311_cap_)
{ return new mosek::fusion::LinkedInts(_8311_cap_); }
mosek::fusion::LinkedInts::LinkedInts
  (int32_t _8311_cap_) : 
   LinkedInts(new mosek::fusion::p_LinkedInts(this))
{ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_8311_cap_); }
void mosek::fusion::p_LinkedInts::_initialize  (int32_t _8311_cap_)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    int32_t _12845_;
    bool _12846_ = (_8311_cap_ > (int)0);
    if (_12846_)
    {
      _12845_ = _8311_cap_;
    }
    else
    {
      _12845_ = (int)128;
    }
    int32_t _8312_cap = _12845_;
    next = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8312_cap)));
    prev = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8312_cap)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_8312_cap - (int)1);
    int32_t _12847_ = (int)1;
    int32_t _12848_ = _8312_cap;
    for (int32_t _8313_i = _12847_; _8313_i < _12848_; ++_8313_i)
    {
      {
        ((*prev)(_8313_i)) = (_8313_i - (int)1);
        ((*next)((_8313_i - (int)1))) = _8313_i;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_8312_cap - (int)1))) = (-(int)1);
    nfree = _8312_cap;
  }
}
// mosek.fusion.LinkedInts.ctor

// mosek.fusion.LinkedInts.ctor @ src/fusion/LinkedList.monty:71:6-34
mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts
  ()
{ return new mosek::fusion::LinkedInts(); }
mosek::fusion::LinkedInts::LinkedInts
  () : 
   LinkedInts(new mosek::fusion::p_LinkedInts(this))
{ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }
void mosek::fusion::p_LinkedInts::_initialize  ()
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}
// mosek.fusion.LinkedInts.ctor

// mosek.fusion.LinkedInts.ctor @ src/fusion/LinkedList.monty:62:6-69:7
mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts
  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _8314_other)
{ return new mosek::fusion::LinkedInts(_8314_other); }
mosek::fusion::LinkedInts::LinkedInts
  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _8314_other) : 
   LinkedInts(new mosek::fusion::p_LinkedInts(this))
{ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_8314_other); }
void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _8314_other)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_8314_other)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_8314_other)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_8314_other)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_8314_other)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_8314_other)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_8314_other)->nfree;
  }
}
// mosek.fusion.LinkedInts.ctor

// Begin mosek.fusion.LinkedInts.free
// Method mosek.fusion.LinkedInts.free @ src/fusion/LinkedList.monty:180:6-199:7
void mosek::fusion::LinkedInts :: free(int32_t _8315_i,int32_t _8316_num) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_8315_i,_8316_num); }
void mosek::fusion::p_LinkedInts::free(int32_t _8315_i,int32_t _8316_num)
{
  int32_t _8317_i0 = _8315_i;
  int32_t _8318_i1 = _8317_i0;
  int32_t _12849_ = (int)0;
  int32_t _12850_ = (_8316_num - (int)1);
  for (int32_t _8319_k = _12849_; _8319_k < _12850_; ++_8319_k)
  {
    {
      _8318_i1 = ((*next)(_8318_i1));
    }
  }
  int32_t _8320_p0 = ((*prev)(_8317_i0));
  int32_t _8321_n1 = ((*next)(_8318_i1));
  if ((_8320_p0 >= (int)0))
  {
    {
      ((*next)(_8320_p0)) = _8321_n1;
    }
  }
  else
  {
    {
      first_used = _8321_n1;
    }
  }
  if ((_8321_n1 >= (int)0))
  {
    {
      ((*prev)(_8321_n1)) = _8320_p0;
    }
  }
  {}
  ((*prev)(_8317_i0)) = (-(int)1);
  ((*next)(_8318_i1)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _8318_i1;
    }
  }
  {}
  first_free = _8317_i0;
  nfree += _8316_num;
}
// End mosek.fusion.LinkedInts.free

// Begin mosek.fusion.LinkedInts.alloc
// Method mosek.fusion.LinkedInts.alloc @ src/fusion/LinkedList.monty:176:6-178:7
int32_t mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }
int32_t mosek::fusion::p_LinkedInts::alloc()
{
  return allocblock((int)1);
}
// End mosek.fusion.LinkedInts.alloc

// Begin mosek.fusion.LinkedInts.alloc
// Method mosek.fusion.LinkedInts.alloc @ src/fusion/LinkedList.monty:172:6-174:7
int32_t mosek::fusion::LinkedInts :: alloc(int32_t _8322_n) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_8322_n); }
int32_t mosek::fusion::p_LinkedInts::alloc(int32_t _8322_n)
{
  return allocblock(_8322_n);
}
// End mosek.fusion.LinkedInts.alloc

// Begin mosek.fusion.LinkedInts.alloc
// Method mosek.fusion.LinkedInts.alloc @ src/fusion/LinkedList.monty:164:6-170:7
void mosek::fusion::LinkedInts :: alloc(int32_t _8323_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8324_target,int32_t _8325_offset) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_8323_num,_8324_target,_8325_offset); }
void mosek::fusion::p_LinkedInts::alloc(int32_t _8323_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8324_target,int32_t _8325_offset)
{
  _checked_ptr_1<int32_t> _ptr__8324_target(_8324_target ? _8324_target->raw() : nullptr, _8324_target ? _8324_target->size(0) : 0);
  int32_t _8326_i = allocblock(_8323_num);
  int32_t _12851_ = (int)0;
  int32_t _12852_ = _8323_num;
  for (int32_t _8327_j = _12851_; _8327_j < _12852_; ++_8327_j)
  {
    {
      _ptr__8324_target[safe_add( _8327_j,_8325_offset )] = _8326_i;
      _8326_i = ((*next)(_8326_i));
    }
  }
}
// End mosek.fusion.LinkedInts.alloc

// Begin mosek.fusion.LinkedInts.get
// Method mosek.fusion.LinkedInts.get @ src/fusion/LinkedList.monty:156:6-162:7
void mosek::fusion::LinkedInts :: get(int32_t _8328_i,int32_t _8329_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8330_target,int32_t _8331_offset) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_8328_i,_8329_num,_8330_target,_8331_offset); }
void mosek::fusion::p_LinkedInts::get(int32_t _8328_i,int32_t _8329_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8330_target,int32_t _8331_offset)
{
  _checked_ptr_1<int32_t> _ptr__8330_target(_8330_target ? _8330_target->raw() : nullptr, _8330_target ? _8330_target->size(0) : 0);
  int32_t _8332_ii = _8328_i;
  int32_t _12853_ = (int)0;
  int32_t _12854_ = _8329_num;
  for (int32_t _8333_j = _12853_; _8333_j < _12854_; ++_8333_j)
  {
    {
      _ptr__8330_target[safe_add( _8333_j,_8331_offset )] = _8332_ii;
      _8332_ii = ((*next)(_8332_ii));
    }
  }
}
// End mosek.fusion.LinkedInts.get

// Begin mosek.fusion.LinkedInts.numallocated
// Method mosek.fusion.LinkedInts.numallocated @ src/fusion/LinkedList.monty:154:6-68
int32_t mosek::fusion::LinkedInts :: numallocated() { return mosek::fusion::p_LinkedInts::_get_impl(this)->numallocated(); }
int32_t mosek::fusion::p_LinkedInts::numallocated()
{
  return ((int)((next)->size(0)) - nfree);
}
// End mosek.fusion.LinkedInts.numallocated

// Begin mosek.fusion.LinkedInts.maxidx
// Method mosek.fusion.LinkedInts.maxidx @ src/fusion/LinkedList.monty:143:6-151:7
int32_t mosek::fusion::LinkedInts :: maxidx(int32_t _8334_i,int32_t _8335_num) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_8334_i,_8335_num); }
int32_t mosek::fusion::p_LinkedInts::maxidx(int32_t _8334_i,int32_t _8335_num)
{
  int32_t _8336_maxi = _8334_i;
  int32_t _8337_ii = _8334_i;
  int32_t _12855_ = (int)1;
  int32_t _12856_ = _8335_num;
  for (int32_t _8338_j = _12855_; _8338_j < _12856_; ++_8338_j)
  {
    {
      _8337_ii = ((*next)(_8337_ii));
      if ((_8336_maxi < _8337_ii))
      {
        {
          _8336_maxi = _8337_ii;
        }
      }
      {}
    }
  }
  return _8336_maxi;
}
// End mosek.fusion.LinkedInts.maxidx

// Begin mosek.fusion.LinkedInts.allocblock
// Method mosek.fusion.LinkedInts.allocblock @ src/fusion/LinkedList.monty:115:6-140:7
int32_t mosek::fusion::p_LinkedInts::allocblock(int32_t _8339_num)
{
  int32_t _8340_cap = (int)((next)->size(0));
  if ((nfree < _8339_num))
  {
    {
      int32_t _8341_nalloc = (_8339_num - nfree);
      if ((_8341_nalloc < _8340_cap))
      {
        {
          _8341_nalloc = _8340_cap;
        }
      }
      {}
      recap(safe_add( _8341_nalloc,_8340_cap ));
    }
  }
  {}
  int32_t _8342_i0 = first_free;
  int32_t _8343_i1 = _8342_i0;
  int32_t _12857_ = (int)0;
  int32_t _12858_ = (_8339_num - (int)1);
  for (int32_t _8344_i = _12857_; _8344_i < _12858_; ++_8344_i)
  {
    {
      _8343_i1 = ((*next)(_8343_i1));
    }
  }
  first_free = ((*next)(_8343_i1));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_8343_i1)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _8343_i1;
    }
  }
  {}
  first_used = _8342_i0;
  nfree -= _8339_num;
  return _8342_i0;
}
// End mosek.fusion.LinkedInts.allocblock

// Begin mosek.fusion.LinkedInts.recap
// Method mosek.fusion.LinkedInts.recap @ src/fusion/LinkedList.monty:88:6-112:7
void mosek::fusion::p_LinkedInts::recap(int32_t _8345_ncap)
{
  int32_t _8346_cap = (int)((next)->size(0));
  if ((_8345_ncap > _8346_cap))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_8345_ncap);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_8345_ncap);
      int32_t _12859_ = _8346_cap;
      int32_t _12860_ = (_8345_ncap - (int)1);
      for (int32_t _8347_i = _12859_; _8347_i < _12860_; ++_8347_i)
      {
        {
          ((*next)(_8347_i)) = safe_add( _8347_i,(int)1 );
          ((*prev)(safe_add( _8347_i,(int)1 ))) = _8347_i;
        }
      }
      ((*next)((_8345_ncap - (int)1))) = (-(int)1);
      ((*prev)(_8346_cap)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _8346_cap;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _8346_cap;
        }
      }
      last_free = (_8345_ncap - (int)1);
      nfree += (_8345_ncap - _8346_cap);
    }
  }
  {}
}
// End mosek.fusion.LinkedInts.recap

// Begin mosek.fusion.LinkedInts.capacity
// Method mosek.fusion.LinkedInts.capacity @ src/fusion/LinkedList.monty:86:6-58
int32_t mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }
int32_t mosek::fusion::p_LinkedInts::capacity()
{
  return (int)((next)->size(0));
}
// End mosek.fusion.LinkedInts.capacity

// Begin mosek.fusion.LinkedInts.validate
// Method mosek.fusion.LinkedInts.validate @ src/fusion/LinkedList.monty:16:6-60:7
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }
bool mosek::fusion::p_LinkedInts::validate()
{
  std::shared_ptr< monty::ndarray< bool,1 > > _8348_flags = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int32_t _8349_p = first_used;
  while ( (_8349_p >= (int)0) )
  {
    {
      ((*_8348_flags)(_8349_p)) = true;
      _8349_p = ((*next)(_8349_p));
      if (((_8349_p >= (int)0) && ((*_8348_flags)(_8349_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _8349_p = first_free;
  int32_t _8350_n = (int)0;
  while ( (_8349_p >= (int)0) )
  {
    {
      ++ _8350_n;
      ((*_8348_flags)(_8349_p)) = true;
      _8349_p = ((*next)(_8349_p));
      if (((_8349_p >= (int)0) && ((*_8348_flags)(_8349_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_8350_n != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int32_t _12861_ = (int)0;
  int32_t _12862_ = (int)((_8348_flags)->size(0));
  for (int32_t _8351_i = _12861_; _8351_i < _12862_; ++_8351_i)
  {
    {
      if ((!((*_8348_flags)(_8349_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int32_t _12863_ = (int)0;
  int32_t _12864_ = (int)((_8348_flags)->size(0));
  for (int32_t _8352_i = _12863_; _8352_i < _12864_; ++_8352_i)
  {
    {
      ((*_8348_flags)(_8352_i)) = false;
    }
  }
  _8349_p = last_free;
  int32_t _8353_n = (int)0;
  while ( (_8349_p >= (int)0) )
  {
    {
      ++ _8353_n;
      ((*_8348_flags)(_8349_p)) = true;
      _8349_p = ((*prev)(_8349_p));
      if (((_8349_p >= (int)0) && ((*_8348_flags)(_8349_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_8353_n != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
// End mosek.fusion.LinkedInts.validate

void mosek::fusion::p_LinkedInts::destroy()
{
prev.reset();
next.reset();
}
void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }
// } class LinkedInts
// class Parameters { // @ bld/herlev/final/default/src/fusion/Parameters.mbi:4:4-6092:4
mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Parameters::p_Parameters
  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Parameters.setParameter
// Method mosek.fusion.Parameters.setParameter @ bld/herlev/final/default/src/fusion/Parameters.mbi:4700:0-6089:1
void mosek::fusion::Parameters::setParameter
  ( monty::rc_ptr< ::mosek::fusion::Model > _8354_M,
    const std::string & _8355_name,
    double _8356_value) { mosek::fusion::p_Parameters::setParameter(_8354_M,_8355_name,_8356_value); }
void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8354_M,const std::string & _8355_name,double _8356_value)
{
  if (false)
  {
    {
    }
  }
  else if((_8355_name == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8355_name == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8355_name == std::string ("numThreads")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8357_v = _8356_value;
          if (((int)0 <= _8357_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8357_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mtSpincount")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8358_v = _8356_value;
          if ((((int)0 <= _8358_v) && (_8358_v <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8358_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8355_name == std::string ("biMaxIterations")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8359_v = _8356_value;
          if (((int)0 <= _8359_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8359_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8360_v = _8356_value;
          if (((int)0 <= _8360_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8360_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logCutSecondOpt")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8361_v = _8356_value;
          if (((int)0 <= _8361_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8361_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logResponse")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8362_v = _8356_value;
          if (((int)0 <= _8362_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8362_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8355_name == std::string ("logBi")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8363_v = _8356_value;
          if (((int)0 <= _8363_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8363_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logBiFreq")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8364_v = _8356_value;
          if (((int)0 <= _8364_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8364_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8355_name == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8355_name == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8355_name == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8355_name == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8355_name == std::string ("logIntpnt")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8365_v = _8356_value;
          if (((int)0 <= _8365_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8365_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntMaxIterations")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8366_v = _8356_value;
          if (((int)0 <= _8366_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8366_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntOffColTrh")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8367_v = _8356_value;
          if (((int)0 <= _8367_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8367_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8355_name == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8368_v = _8356_value;
          if (((int)0 <= _8368_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8368_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8355_name == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8355_name == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8355_name == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8369_v = _8356_value;
          if (((-(int)1) <= _8369_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8369_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8355_name == std::string ("presolveLevel")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8370_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8370_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logPresolve")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8371_v = _8356_value;
          if (((int)0 <= _8371_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8371_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8355_name == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8372_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8372_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8373_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8373_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8374_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8374_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("simPrimalCrash")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8375_v = _8356_value;
          if (((int)0 <= _8375_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8375_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logSim")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8376_v = _8356_value;
          if (((int)0 <= _8376_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8376_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logSimMinor")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8377_v = _8356_value;
          if (((int)0 <= _8377_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8377_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logSimFreq")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8378_v = _8356_value;
          if (((int)0 <= _8378_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8378_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8379_v = _8356_value;
          if ((((int)0 <= _8379_v) && (_8379_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8379_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8355_name == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8380_v = _8356_value;
          if ((((int)0 <= _8380_v) && (_8380_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8380_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8355_name == std::string ("simMaxIterations")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8381_v = _8356_value;
          if (((int)0 <= _8381_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8381_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8355_name == std::string ("simRefactorFreq")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8382_v = _8356_value;
          if (((int)0 <= _8382_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8382_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("simSeed")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8383_v = _8356_value;
          if ((((int)0 <= _8383_v) && (_8383_v <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8383_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8355_name == std::string ("logMio")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8384_v = _8356_value;
          if (((int)0 <= _8384_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8384_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logMioFreq")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8385_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8385_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8386_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8386_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8387_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8387_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8388_v = _8356_value;
          if (((int)0 <= _8388_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8388_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8389_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8389_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8355_name == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8390_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8390_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioProbingLevel")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8391_v = _8356_value;
          if ((((-(int)1) <= _8391_v) && (_8391_v <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8391_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioSymmetryLevel")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8392_v = _8356_value;
          if ((((-(int)1) <= _8392_v) && (_8392_v <= (int)4)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SYMMETRY_LEVEL"),_8392_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("mioPresolveAggregatorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPresolveAggregatorUse)"));
    }
  }
  {}
  if ((_8355_name == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8393_v = _8356_value;
          if ((((int)0 <= _8393_v) && (_8393_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NUMERICAL_EMPHASIS_LEVEL"),_8393_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8394_v = _8356_value;
          if ((((int)0 <= _8394_v) && (_8394_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MEMORY_EMPHASIS_LEVEL"),_8394_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8395_v = _8356_value;
          if ((((-(int)1) <= _8395_v) && (_8395_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8395_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8396_v = _8356_value;
          if ((((-(int)1) <= _8396_v) && (_8396_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8396_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8355_name == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8355_name == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8355_name == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8355_name == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8355_name == std::string ("mioSeed")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8397_v = _8356_value;
          if (((int)0 <= _8397_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8397_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8355_name == std::string ("mioQcqoReformulationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioQcqoReformulationMethod)"));
    }
  }
  else if((_8355_name == std::string ("mioDataPermutationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDataPermutationMethod)"));
    }
  }
  {}
  if ((_8355_name == std::string ("writeLpLineWidth")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8398_v = _8356_value;
          if (((int)40 <= _8398_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8398_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  else if((_8355_name == std::string ("writeJsonIndentation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeJsonIndentation)"));
    }
  }
  else if((_8355_name == std::string ("infeasReportAuto")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasReportAuto)"));
    }
  }
  {}
  if ((_8355_name == std::string ("logInfeasAna")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8399_v = _8356_value;
          if (((int)0 <= _8399_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8399_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8355_name == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8355_name == std::string ("licensePauseTime")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8400_v = _8356_value;
          if ((((int)0 <= _8400_v) && (_8400_v <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8400_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8355_name == std::string ("log")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8401_v = _8356_value;
          if (((int)0 <= _8401_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8401_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logExpand")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8402_v = _8356_value;
          if (((int)0 <= _8402_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8402_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logFile")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8403_v = _8356_value;
          if (((int)0 <= _8403_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8403_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("logOrder")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8404_v = _8356_value;
          if (((int)0 <= _8404_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8404_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8355_name == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8355_name == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8405_v = _8356_value;
          if ((((int)0 <= _8405_v) && (_8405_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8405_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8406_v = _8356_value;
          if ((((int)0 <= _8406_v) && (_8406_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8406_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8407_v = _8356_value;
          if (((int)0 <= _8407_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8407_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8355_name == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8355_name == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8355_name == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8355_name == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8355_name == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8355_name == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8355_name == std::string ("simDualCrash")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8408_v = _8356_value;
          if (((int)0 <= _8408_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8408_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8355_name == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8409_v = _8356_value;
          if ((((-(int)1) <= _8409_v) && (_8409_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8409_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8355_name == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8355_name == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8355_name == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8355_name == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  else if((_8355_name == std::string ("mioCutLipro")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutLipro)"));
    }
  }
  else if((_8355_name == std::string ("mioConstructSol")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));
    }
  }
  {}
  if ((_8355_name == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8410_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8410_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8411_v = _8356_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8411_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8355_name == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8355_name == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8355_name == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8355_name == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8412_v = _8356_value;
          if (((-(int)1) <= _8412_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8412_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_8356_value - (int32_t)_8356_value) == 0.0))
      {
        {
          double _8413_v = _8356_value;
          if ((((-(int)1) <= _8413_v) && (_8413_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8413_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("remoteUseCompression")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteUseCompression)"));
    }
  }
  {}
  if ((_8355_name == std::string ("optimizerMaxTime")))
  {
    {
      double _8414_v = _8356_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8414_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("lowerObjCut")))
  {
    {
      double _8415_v = _8356_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8415_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("upperObjCut")))
  {
    {
      double _8416_v = _8356_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8416_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8417_v = _8356_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8417_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8418_v = _8356_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8418_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntTolRelGap")))
  {
    {
      double _8419_v = _8356_value;
      if ((1.000000e-14 <= _8419_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8419_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntTolStepSize")))
  {
    {
      double _8420_v = _8356_value;
      if (((0.000000e+00 <= _8420_v) && (_8420_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8420_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("simLuTolRelPiv")))
  {
    {
      double _8421_v = _8356_value;
      if (((1.000000e-06 <= _8421_v) && (_8421_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8421_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntTolRelStep")))
  {
    {
      double _8422_v = _8356_value;
      if (((1.000000e-04 <= _8422_v) && (_8422_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8422_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntTolPath")))
  {
    {
      double _8423_v = _8356_value;
      if (((0.000000e+00 <= _8423_v) && (_8423_v <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8423_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntTolPfeas")))
  {
    {
      double _8424_v = _8356_value;
      if (((0.000000e+00 <= _8424_v) && (_8424_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8424_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntTolDfeas")))
  {
    {
      double _8425_v = _8356_value;
      if (((0.000000e+00 <= _8425_v) && (_8425_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8425_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntTolMuRed")))
  {
    {
      double _8426_v = _8356_value;
      if (((0.000000e+00 <= _8426_v) && (_8426_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8426_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntTolInfeas")))
  {
    {
      double _8427_v = _8356_value;
      if (((0.000000e+00 <= _8427_v) && (_8427_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8427_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8428_v = _8356_value;
      if (((0.000000e+00 <= _8428_v) && (_8428_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8428_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8429_v = _8356_value;
      if (((0.000000e+00 <= _8429_v) && (_8429_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8429_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8430_v = _8356_value;
      if (((0.000000e+00 <= _8430_v) && (_8430_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8430_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8431_v = _8356_value;
      if (((0.000000e+00 <= _8431_v) && (_8431_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8431_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8432_v = _8356_value;
      if ((1.000000e+00 <= _8432_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8432_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8433_v = _8356_value;
      if (((0.000000e+00 <= _8433_v) && (_8433_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8433_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntTolPsafe")))
  {
    {
      double _8434_v = _8356_value;
      if ((1.000000e-04 <= _8434_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8434_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("intpntTolDsafe")))
  {
    {
      double _8435_v = _8356_value;
      if ((1.000000e-04 <= _8435_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8435_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioMaxTime")))
  {
    {
      double _8436_v = _8356_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8436_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioRelGapConst")))
  {
    {
      double _8437_v = _8356_value;
      if ((1.000000e-15 <= _8437_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8437_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioTolRelGap")))
  {
    {
      double _8438_v = _8356_value;
      if ((0.000000e+00 <= _8438_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8438_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioTolAbsGap")))
  {
    {
      double _8439_v = _8356_value;
      if ((0.000000e+00 <= _8439_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8439_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8440_v = _8356_value;
      if ((1.000000e-09 <= _8440_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8440_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioDjcMaxBigm")))
  {
    {
      double _8441_v = _8356_value;
      if ((0.000000e+00 <= _8441_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_DJC_MAX_BIGM"),_8441_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("basisTolX")))
  {
    {
      double _8442_v = _8356_value;
      if ((1.000000e-09 <= _8442_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8442_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("basisTolS")))
  {
    {
      double _8443_v = _8356_value;
      if ((1.000000e-09 <= _8443_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8443_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("basisRelTolS")))
  {
    {
      double _8444_v = _8356_value;
      if ((0.000000e+00 <= _8444_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8444_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("presolveTolX")))
  {
    {
      double _8445_v = _8356_value;
      if ((0.000000e+00 <= _8445_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8445_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      double _8446_v = _8356_value;
      if ((0.000000e+00 <= _8446_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_PRIMAL_INFEAS_PERTURBATION"),_8446_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("presolveTolS")))
  {
    {
      double _8447_v = _8356_value;
      if ((0.000000e+00 <= _8447_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8447_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("presolveTolAij")))
  {
    {
      double _8448_v = _8356_value;
      if ((1.000000e-15 <= _8448_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8448_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8449_v = _8356_value;
      if ((0.000000e+00 <= _8449_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8449_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("presolveTolRelLindep")))
  {
    {
      double _8450_v = _8356_value;
      if ((0.000000e+00 <= _8450_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8450_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8451_v = _8356_value;
      if ((1.000000e-12 <= _8451_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8451_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioTolFeas")))
  {
    {
      double _8452_v = _8356_value;
      if (((1.000000e-09 <= _8452_v) && (_8452_v <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8452_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8355_name == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8453_v = _8356_value;
      if (((0.000000e+00 <= _8453_v) && (_8453_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8354_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8453_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8355_name == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8355_name == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8355_name == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8355_name == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8355_name == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8355_name == std::string ("remoteOptserverHost")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteOptserverHost)"));
    }
  }
  else if((_8355_name == std::string ("remoteTlsCertPath")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCertPath)"));
    }
  }
  else if((_8355_name == std::string ("remoteTlsCert")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCert)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
// End mosek.fusion.Parameters.setParameter

// Begin mosek.fusion.Parameters.setParameter
// Method mosek.fusion.Parameters.setParameter @ bld/herlev/final/default/src/fusion/Parameters.mbi:3594:0-4698:1
void mosek::fusion::Parameters::setParameter
  ( monty::rc_ptr< ::mosek::fusion::Model > _8454_M,
    const std::string & _8455_name,
    int32_t _8456_value) { mosek::fusion::p_Parameters::setParameter(_8454_M,_8455_name,_8456_value); }
void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8454_M,const std::string & _8455_name,int32_t _8456_value)
{
  if (false)
  {
    {
    }
  }
  else if((_8455_name == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8455_name == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8455_name == std::string ("numThreads")))
  {
    {
      int32_t _8457_v = _8456_value;
      if (((int)0 <= _8457_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8457_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mtSpincount")))
  {
    {
      int32_t _8458_v = _8456_value;
      if ((((int)0 <= _8458_v) && (_8458_v <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8458_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8455_name == std::string ("biMaxIterations")))
  {
    {
      int32_t _8459_v = _8456_value;
      if (((int)0 <= _8459_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8459_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int32_t _8460_v = _8456_value;
      if (((int)0 <= _8460_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8460_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logCutSecondOpt")))
  {
    {
      int32_t _8461_v = _8456_value;
      if (((int)0 <= _8461_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8461_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logResponse")))
  {
    {
      int32_t _8462_v = _8456_value;
      if (((int)0 <= _8462_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8462_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8455_name == std::string ("logBi")))
  {
    {
      int32_t _8463_v = _8456_value;
      if (((int)0 <= _8463_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8463_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logBiFreq")))
  {
    {
      int32_t _8464_v = _8456_value;
      if (((int)0 <= _8464_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8464_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8455_name == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8455_name == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8455_name == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8455_name == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8455_name == std::string ("logIntpnt")))
  {
    {
      int32_t _8465_v = _8456_value;
      if (((int)0 <= _8465_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8465_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntMaxIterations")))
  {
    {
      int32_t _8466_v = _8456_value;
      if (((int)0 <= _8466_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8466_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntOffColTrh")))
  {
    {
      int32_t _8467_v = _8456_value;
      if (((int)0 <= _8467_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8467_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8455_name == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int32_t _8468_v = _8456_value;
      if (((int)0 <= _8468_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8468_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8455_name == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8455_name == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8455_name == std::string ("intpntMaxNumCor")))
  {
    {
      int32_t _8469_v = _8456_value;
      if (((-(int)1) <= _8469_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8469_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8455_name == std::string ("presolveLevel")))
  {
    {
      int32_t _8470_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8470_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logPresolve")))
  {
    {
      int32_t _8471_v = _8456_value;
      if (((int)0 <= _8471_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8471_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8455_name == std::string ("presolveMaxNumPass")))
  {
    {
      int32_t _8472_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8472_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int32_t _8473_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8473_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int32_t _8474_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8474_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("simPrimalCrash")))
  {
    {
      int32_t _8475_v = _8456_value;
      if (((int)0 <= _8475_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8475_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logSim")))
  {
    {
      int32_t _8476_v = _8456_value;
      if (((int)0 <= _8476_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8476_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logSimMinor")))
  {
    {
      int32_t _8477_v = _8456_value;
      if (((int)0 <= _8477_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8477_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logSimFreq")))
  {
    {
      int32_t _8478_v = _8456_value;
      if (((int)0 <= _8478_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8478_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("simPrimalRestrictSelection")))
  {
    {
      int32_t _8479_v = _8456_value;
      if ((((int)0 <= _8479_v) && (_8479_v <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8479_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8455_name == std::string ("simDualRestrictSelection")))
  {
    {
      int32_t _8480_v = _8456_value;
      if ((((int)0 <= _8480_v) && (_8480_v <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8480_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8455_name == std::string ("simMaxIterations")))
  {
    {
      int32_t _8481_v = _8456_value;
      if (((int)0 <= _8481_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8481_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8455_name == std::string ("simRefactorFreq")))
  {
    {
      int32_t _8482_v = _8456_value;
      if (((int)0 <= _8482_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8482_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("simSeed")))
  {
    {
      int32_t _8483_v = _8456_value;
      if ((((int)0 <= _8483_v) && (_8483_v <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8483_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8455_name == std::string ("logMio")))
  {
    {
      int32_t _8484_v = _8456_value;
      if (((int)0 <= _8484_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8484_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logMioFreq")))
  {
    {
      int32_t _8485_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8485_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioMaxNumRelaxs")))
  {
    {
      int32_t _8486_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8486_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioMaxNumBranches")))
  {
    {
      int32_t _8487_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8487_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int32_t _8488_v = _8456_value;
      if (((int)0 <= _8488_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8488_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioMaxNumSolutions")))
  {
    {
      int32_t _8489_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8489_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8455_name == std::string ("mioHeuristicLevel")))
  {
    {
      int32_t _8490_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8490_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioProbingLevel")))
  {
    {
      int32_t _8491_v = _8456_value;
      if ((((-(int)1) <= _8491_v) && (_8491_v <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8491_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioSymmetryLevel")))
  {
    {
      int32_t _8492_v = _8456_value;
      if ((((-(int)1) <= _8492_v) && (_8492_v <= (int)4)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SYMMETRY_LEVEL"),_8492_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("mioPresolveAggregatorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPresolveAggregatorUse)"));
    }
  }
  {}
  if ((_8455_name == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      int32_t _8493_v = _8456_value;
      if ((((int)0 <= _8493_v) && (_8493_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NUMERICAL_EMPHASIS_LEVEL"),_8493_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      int32_t _8494_v = _8456_value;
      if ((((int)0 <= _8494_v) && (_8494_v <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MEMORY_EMPHASIS_LEVEL"),_8494_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioCutSelectionLevel")))
  {
    {
      int32_t _8495_v = _8456_value;
      if ((((-(int)1) <= _8495_v) && (_8495_v <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8495_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioVbDetectionLevel")))
  {
    {
      int32_t _8496_v = _8456_value;
      if ((((-(int)1) <= _8496_v) && (_8496_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8496_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8455_name == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8455_name == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8455_name == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8455_name == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8455_name == std::string ("mioSeed")))
  {
    {
      int32_t _8497_v = _8456_value;
      if (((int)0 <= _8497_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8497_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8455_name == std::string ("mioQcqoReformulationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioQcqoReformulationMethod)"));
    }
  }
  else if((_8455_name == std::string ("mioDataPermutationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDataPermutationMethod)"));
    }
  }
  {}
  if ((_8455_name == std::string ("writeLpLineWidth")))
  {
    {
      int32_t _8498_v = _8456_value;
      if (((int)40 <= _8498_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8498_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  else if((_8455_name == std::string ("writeJsonIndentation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeJsonIndentation)"));
    }
  }
  else if((_8455_name == std::string ("infeasReportAuto")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasReportAuto)"));
    }
  }
  {}
  if ((_8455_name == std::string ("logInfeasAna")))
  {
    {
      int32_t _8499_v = _8456_value;
      if (((int)0 <= _8499_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8499_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8455_name == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8455_name == std::string ("licensePauseTime")))
  {
    {
      int32_t _8500_v = _8456_value;
      if ((((int)0 <= _8500_v) && (_8500_v <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8500_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8455_name == std::string ("log")))
  {
    {
      int32_t _8501_v = _8456_value;
      if (((int)0 <= _8501_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8501_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logExpand")))
  {
    {
      int32_t _8502_v = _8456_value;
      if (((int)0 <= _8502_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8502_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logFile")))
  {
    {
      int32_t _8503_v = _8456_value;
      if (((int)0 <= _8503_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8503_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("logOrder")))
  {
    {
      int32_t _8504_v = _8456_value;
      if (((int)0 <= _8504_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8504_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8455_name == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8455_name == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int32_t _8505_v = _8456_value;
      if ((((int)0 <= _8505_v) && (_8505_v <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8505_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("simDualPhaseoneMethod")))
  {
    {
      int32_t _8506_v = _8456_value;
      if ((((int)0 <= _8506_v) && (_8506_v <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8506_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("simMaxNumSetbacks")))
  {
    {
      int32_t _8507_v = _8456_value;
      if (((int)0 <= _8507_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8507_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8455_name == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8455_name == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8455_name == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8455_name == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8455_name == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8455_name == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8455_name == std::string ("simDualCrash")))
  {
    {
      int32_t _8508_v = _8456_value;
      if (((int)0 <= _8508_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8508_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8455_name == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      int32_t _8509_v = _8456_value;
      if ((((-(int)1) <= _8509_v) && (_8509_v <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8509_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8455_name == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8455_name == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8455_name == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8455_name == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  else if((_8455_name == std::string ("mioCutLipro")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutLipro)"));
    }
  }
  else if((_8455_name == std::string ("mioConstructSol")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));
    }
  }
  {}
  if ((_8455_name == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int32_t _8510_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8510_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int32_t _8511_v = _8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8511_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8455_name == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8455_name == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8455_name == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8455_name == std::string ("mioRinsMaxNodes")))
  {
    {
      int32_t _8512_v = _8456_value;
      if (((-(int)1) <= _8512_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8512_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioFeaspumpLevel")))
  {
    {
      int32_t _8513_v = _8456_value;
      if ((((-(int)1) <= _8513_v) && (_8513_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8513_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("remoteUseCompression")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteUseCompression)"));
    }
  }
  {}
  if ((_8455_name == std::string ("optimizerMaxTime")))
  {
    {
      double _8514_v = (double)_8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8514_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("lowerObjCut")))
  {
    {
      double _8515_v = (double)_8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8515_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("upperObjCut")))
  {
    {
      double _8516_v = (double)_8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8516_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8517_v = (double)_8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8517_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8518_v = (double)_8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8518_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntTolRelGap")))
  {
    {
      double _8519_v = (double)_8456_value;
      if ((1.000000e-14 <= _8519_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8519_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntTolStepSize")))
  {
    {
      double _8520_v = (double)_8456_value;
      if (((0.000000e+00 <= _8520_v) && (_8520_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8520_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("simLuTolRelPiv")))
  {
    {
      double _8521_v = (double)_8456_value;
      if (((1.000000e-06 <= _8521_v) && (_8521_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8521_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntTolRelStep")))
  {
    {
      double _8522_v = (double)_8456_value;
      if (((1.000000e-04 <= _8522_v) && (_8522_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8522_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntTolPath")))
  {
    {
      double _8523_v = (double)_8456_value;
      if (((0.000000e+00 <= _8523_v) && (_8523_v <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8523_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntTolPfeas")))
  {
    {
      double _8524_v = (double)_8456_value;
      if (((0.000000e+00 <= _8524_v) && (_8524_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8524_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntTolDfeas")))
  {
    {
      double _8525_v = (double)_8456_value;
      if (((0.000000e+00 <= _8525_v) && (_8525_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8525_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntTolMuRed")))
  {
    {
      double _8526_v = (double)_8456_value;
      if (((0.000000e+00 <= _8526_v) && (_8526_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8526_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntTolInfeas")))
  {
    {
      double _8527_v = (double)_8456_value;
      if (((0.000000e+00 <= _8527_v) && (_8527_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8527_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8528_v = (double)_8456_value;
      if (((0.000000e+00 <= _8528_v) && (_8528_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8528_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8529_v = (double)_8456_value;
      if (((0.000000e+00 <= _8529_v) && (_8529_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8529_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8530_v = (double)_8456_value;
      if (((0.000000e+00 <= _8530_v) && (_8530_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8530_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8531_v = (double)_8456_value;
      if (((0.000000e+00 <= _8531_v) && (_8531_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8531_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8532_v = (double)_8456_value;
      if ((1.000000e+00 <= _8532_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8532_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8533_v = (double)_8456_value;
      if (((0.000000e+00 <= _8533_v) && (_8533_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8533_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntTolPsafe")))
  {
    {
      double _8534_v = (double)_8456_value;
      if ((1.000000e-04 <= _8534_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8534_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("intpntTolDsafe")))
  {
    {
      double _8535_v = (double)_8456_value;
      if ((1.000000e-04 <= _8535_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8535_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioMaxTime")))
  {
    {
      double _8536_v = (double)_8456_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8536_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioRelGapConst")))
  {
    {
      double _8537_v = (double)_8456_value;
      if ((1.000000e-15 <= _8537_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8537_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioTolRelGap")))
  {
    {
      double _8538_v = (double)_8456_value;
      if ((0.000000e+00 <= _8538_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8538_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioTolAbsGap")))
  {
    {
      double _8539_v = (double)_8456_value;
      if ((0.000000e+00 <= _8539_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8539_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8540_v = (double)_8456_value;
      if ((1.000000e-09 <= _8540_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8540_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioDjcMaxBigm")))
  {
    {
      double _8541_v = (double)_8456_value;
      if ((0.000000e+00 <= _8541_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_DJC_MAX_BIGM"),_8541_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("basisTolX")))
  {
    {
      double _8542_v = (double)_8456_value;
      if ((1.000000e-09 <= _8542_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8542_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("basisTolS")))
  {
    {
      double _8543_v = (double)_8456_value;
      if ((1.000000e-09 <= _8543_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8543_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("basisRelTolS")))
  {
    {
      double _8544_v = (double)_8456_value;
      if ((0.000000e+00 <= _8544_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8544_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("presolveTolX")))
  {
    {
      double _8545_v = (double)_8456_value;
      if ((0.000000e+00 <= _8545_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8545_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      double _8546_v = (double)_8456_value;
      if ((0.000000e+00 <= _8546_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_PRIMAL_INFEAS_PERTURBATION"),_8546_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("presolveTolS")))
  {
    {
      double _8547_v = (double)_8456_value;
      if ((0.000000e+00 <= _8547_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8547_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("presolveTolAij")))
  {
    {
      double _8548_v = (double)_8456_value;
      if ((1.000000e-15 <= _8548_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8548_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8549_v = (double)_8456_value;
      if ((0.000000e+00 <= _8549_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8549_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("presolveTolRelLindep")))
  {
    {
      double _8550_v = (double)_8456_value;
      if ((0.000000e+00 <= _8550_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8550_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8551_v = (double)_8456_value;
      if ((1.000000e-12 <= _8551_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8551_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioTolFeas")))
  {
    {
      double _8552_v = (double)_8456_value;
      if (((1.000000e-09 <= _8552_v) && (_8552_v <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8552_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8455_name == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8553_v = (double)_8456_value;
      if (((0.000000e+00 <= _8553_v) && (_8553_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8454_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8553_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8455_name == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8455_name == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8455_name == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8455_name == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8455_name == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8455_name == std::string ("remoteOptserverHost")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteOptserverHost)"));
    }
  }
  else if((_8455_name == std::string ("remoteTlsCertPath")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCertPath)"));
    }
  }
  else if((_8455_name == std::string ("remoteTlsCert")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCert)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
// End mosek.fusion.Parameters.setParameter

// Begin mosek.fusion.Parameters.setParameter
// Method mosek.fusion.Parameters.setParameter @ bld/herlev/final/default/src/fusion/Parameters.mbi:1848:0-3592:1
void mosek::fusion::Parameters::setParameter
  ( monty::rc_ptr< ::mosek::fusion::Model > _8554_M,
    const std::string & _8555_name,
    const std::string & _8556_value) { mosek::fusion::p_Parameters::setParameter(_8554_M,_8555_name,_8556_value); }
void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8554_M,const std::string & _8555_name,const std::string & _8556_value)
{
  if (false)
  {
    {
    }
  }
  {}
  if ((_8555_name == std::string ("autoUpdateSolInfo")))
  {
    {
      int32_t _8557_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8557_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_8557_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("removeUnusedSolutions")))
  {
    {
      int32_t _8558_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8558_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_8558_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("numThreads")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:1869:4-1877:108 */
      try
      {
        {
          int32_t _8560_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8560_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8560_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8559_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mtSpincount")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:1881:4-1889:109 */
      try
      {
        {
          int32_t _8562_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((int)0 <= _8562_v) && (_8562_v <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8562_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8561_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("optimizer")))
  {
    {
      int32_t _8563_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8556_value);
      if ((_8563_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_8563_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("biMaxIterations")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:1901:4-1909:113 */
      try
      {
        {
          int32_t _8565_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8565_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8565_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8564_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("licenseTrhExpiryWrn")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:1913:4-1921:117 */
      try
      {
        {
          int32_t _8567_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8567_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8567_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8566_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logCutSecondOpt")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:1925:4-1933:113 */
      try
      {
        {
          int32_t _8569_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8569_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8569_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8568_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logResponse")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:1937:4-1945:109 */
      try
      {
        {
          int32_t _8571_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8571_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8571_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8570_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logLocalInfo")))
  {
    {
      int32_t _8572_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8572_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_8572_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("logBi")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:1957:4-1965:103 */
      try
      {
        {
          int32_t _8574_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8574_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8574_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8573_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logBiFreq")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:1969:4-1977:107 */
      try
      {
        {
          int32_t _8576_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8576_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8576_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8575_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("biCleanOptimizer")))
  {
    {
      int32_t _8577_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8556_value);
      if ((_8577_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_8577_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("intpntStartingPoint")))
  {
    {
      int32_t _8578_v = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_8556_value);
      if ((_8578_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_8578_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("intpntDiffStep")))
  {
    {
      int32_t _8579_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8579_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_8579_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("intpntScaling")))
  {
    {
      int32_t _8580_v = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8556_value);
      if ((_8580_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_8580_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("intpntSolveForm")))
  {
    {
      int32_t _8581_v = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8556_value);
      if ((_8581_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_8581_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("logIntpnt")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2021:4-2029:107 */
      try
      {
        {
          int32_t _8583_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8583_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8583_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8582_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntMaxIterations")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2033:4-2041:117 */
      try
      {
        {
          int32_t _8585_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8585_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8585_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8584_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntOffColTrh")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2045:4-2053:113 */
      try
      {
        {
          int32_t _8587_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8587_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8587_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8586_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntOrderMethod")))
  {
    {
      int32_t _8588_v = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_8556_value);
      if ((_8588_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_8588_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2065:4-2073:119 */
      try
      {
        {
          int32_t _8590_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8590_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8590_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8589_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntBasis")))
  {
    {
      int32_t _8591_v = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_8556_value);
      if ((_8591_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_8591_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("biIgnoreMaxIter")))
  {
    {
      int32_t _8592_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8592_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_8592_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("biIgnoreNumError")))
  {
    {
      int32_t _8593_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8593_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_8593_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("intpntMaxNumCor")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2101:4-2109:113 */
      try
      {
        {
          int32_t _8595_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((-(int)1) <= _8595_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8595_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8594_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveUse")))
  {
    {
      int32_t _8596_v = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_8556_value);
      if ((_8596_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_8596_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("presolveLevel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2121:4-2129:111 */
      try
      {
        {
          int32_t _8598_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8598_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8597_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logPresolve")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2133:4-2141:109 */
      try
      {
        {
          int32_t _8600_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8600_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8600_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8599_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveLindepUse")))
  {
    {
      int32_t _8601_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8601_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_8601_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("presolveMaxNumPass")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2153:4-2161:116 */
      try
      {
        {
          int32_t _8603_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8603_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8602_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2165:4-2173:127 */
      try
      {
        {
          int32_t _8605_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8605_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8604_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveEliminatorMaxFill")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2177:4-2185:123 */
      try
      {
        {
          int32_t _8607_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8607_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8606_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simPrimalCrash")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2189:4-2197:112 */
      try
      {
        {
          int32_t _8609_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8609_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8609_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8608_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logSim")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2201:4-2209:104 */
      try
      {
        {
          int32_t _8611_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8611_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8611_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8610_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logSimMinor")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2213:4-2221:109 */
      try
      {
        {
          int32_t _8613_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8613_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8613_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8612_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logSimFreq")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2225:4-2233:108 */
      try
      {
        {
          int32_t _8615_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8615_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8615_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8614_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simPrimalRestrictSelection")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2237:4-2245:124 */
      try
      {
        {
          int32_t _8617_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((int)0 <= _8617_v) && (_8617_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8617_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8616_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simPrimalSelection")))
  {
    {
      int32_t _8618_v = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8556_value);
      if ((_8618_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_8618_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simDualRestrictSelection")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2257:4-2265:122 */
      try
      {
        {
          int32_t _8620_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((int)0 <= _8620_v) && (_8620_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8620_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8619_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simDualSelection")))
  {
    {
      int32_t _8621_v = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8556_value);
      if ((_8621_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_8621_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simMaxIterations")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2277:4-2285:114 */
      try
      {
        {
          int32_t _8623_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8623_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8623_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8622_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simHotstartLu")))
  {
    {
      int32_t _8624_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8624_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_8624_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simRefactorFreq")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2297:4-2305:113 */
      try
      {
        {
          int32_t _8626_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8626_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8626_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8625_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simSeed")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2309:4-2317:105 */
      try
      {
        {
          int32_t _8628_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((int)0 <= _8628_v) && (_8628_v <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8628_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8627_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioMode")))
  {
    {
      int32_t _8629_v = ::mosek::fusion::p_Parameters::string_to_miomode_value(_8556_value);
      if ((_8629_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_8629_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("logMio")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2329:4-2337:104 */
      try
      {
        {
          int32_t _8631_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8631_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8631_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8630_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logMioFreq")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2341:4-2349:108 */
      try
      {
        {
          int32_t _8633_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8633_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8632_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioMaxNumRelaxs")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2353:4-2361:113 */
      try
      {
        {
          int32_t _8635_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8635_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8634_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioMaxNumBranches")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2365:4-2373:115 */
      try
      {
        {
          int32_t _8637_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8637_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8636_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2377:4-2385:120 */
      try
      {
        {
          int32_t _8639_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8639_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8639_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8638_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioMaxNumSolutions")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2389:4-2397:116 */
      try
      {
        {
          int32_t _8641_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8641_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8640_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioNodeSelection")))
  {
    {
      int32_t _8642_v = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_8556_value);
      if ((_8642_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_8642_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioHeuristicLevel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2409:4-2417:115 */
      try
      {
        {
          int32_t _8644_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8644_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8643_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioProbingLevel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2421:4-2429:113 */
      try
      {
        {
          int32_t _8646_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((-(int)1) <= _8646_v) && (_8646_v <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8646_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8645_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioSymmetryLevel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2433:4-2441:114 */
      try
      {
        {
          int32_t _8648_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((-(int)1) <= _8648_v) && (_8648_v <= (int)4)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SYMMETRY_LEVEL"),_8648_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8647_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioPresolveAggregatorUse")))
  {
    {
      int32_t _8649_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8649_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPresolveAggregatorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PRESOLVE_AGGREGATOR_USE"),_8649_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2453:4-2461:123 */
      try
      {
        {
          int32_t _8651_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((int)0 <= _8651_v) && (_8651_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NUMERICAL_EMPHASIS_LEVEL"),_8651_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8650_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2465:4-2473:120 */
      try
      {
        {
          int32_t _8653_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((int)0 <= _8653_v) && (_8653_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MEMORY_EMPHASIS_LEVEL"),_8653_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8652_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioCutSelectionLevel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2477:4-2485:118 */
      try
      {
        {
          int32_t _8655_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((-(int)1) <= _8655_v) && (_8655_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8655_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8654_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioVbDetectionLevel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2489:4-2497:117 */
      try
      {
        {
          int32_t _8657_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((-(int)1) <= _8657_v) && (_8657_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8657_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8656_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioBranchDir")))
  {
    {
      int32_t _8658_v = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_8556_value);
      if ((_8658_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_8658_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioRootOptimizer")))
  {
    {
      int32_t _8659_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8556_value);
      if ((_8659_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_8659_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioNodeOptimizer")))
  {
    {
      int32_t _8660_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8556_value);
      if ((_8660_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_8660_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioPerspectiveReformulate")))
  {
    {
      int32_t _8661_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8661_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_8661_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int32_t _8662_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8662_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_8662_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioSeed")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2541:4-2549:105 */
      try
      {
        {
          int32_t _8664_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8664_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8664_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8663_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioConicOuterApproximation")))
  {
    {
      int32_t _8665_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8665_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_8665_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioQcqoReformulationMethod")))
  {
    {
      int32_t _8666_v = ::mosek::fusion::p_Parameters::string_to_miqcqoreformmethod_value(_8556_value);
      if ((_8666_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioQcqoReformulationMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_QCQO_REFORMULATION_METHOD"),_8666_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioDataPermutationMethod")))
  {
    {
      int32_t _8667_v = ::mosek::fusion::p_Parameters::string_to_miodatapermmethod_value(_8556_value);
      if ((_8667_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDataPermutationMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_DATA_PERMUTATION_METHOD"),_8667_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("writeLpLineWidth")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2577:4-2585:114 */
      try
      {
        {
          int32_t _8669_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)40 <= _8669_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8669_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8668_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("writeLpFullObj")))
  {
    {
      int32_t _8670_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8670_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_8670_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("writeJsonIndentation")))
  {
    {
      int32_t _8671_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8671_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeJsonIndentation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_JSON_INDENTATION"),_8671_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("infeasReportAuto")))
  {
    {
      int32_t _8672_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8672_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasReportAuto)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_REPORT_AUTO"),_8672_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("logInfeasAna")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2613:4-2621:110 */
      try
      {
        {
          int32_t _8674_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8674_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8674_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8673_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("licenseWait")))
  {
    {
      int32_t _8675_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8675_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_8675_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int32_t _8676_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8676_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_8676_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("licensePauseTime")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2641:4-2649:114 */
      try
      {
        {
          int32_t _8678_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((int)0 <= _8678_v) && (_8678_v <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8678_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8677_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("licenseDebug")))
  {
    {
      int32_t _8679_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8679_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_8679_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("log")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2661:4-2669:101 */
      try
      {
        {
          int32_t _8681_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8681_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8681_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8680_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logExpand")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2673:4-2681:107 */
      try
      {
        {
          int32_t _8683_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8683_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8683_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8682_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logFile")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2685:4-2693:105 */
      try
      {
        {
          int32_t _8685_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8685_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8685_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8684_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("logOrder")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2697:4-2705:106 */
      try
      {
        {
          int32_t _8687_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8687_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8687_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8686_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simScaling")))
  {
    {
      int32_t _8688_v = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8556_value);
      if ((_8688_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_8688_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simScalingMethod")))
  {
    {
      int32_t _8689_v = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_8556_value);
      if ((_8689_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_8689_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2725:4-2733:121 */
      try
      {
        {
          int32_t _8691_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((int)0 <= _8691_v) && (_8691_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8691_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8690_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simDualPhaseoneMethod")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2737:4-2745:119 */
      try
      {
        {
          int32_t _8693_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((int)0 <= _8693_v) && (_8693_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8693_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8692_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simMaxNumSetbacks")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2749:4-2757:115 */
      try
      {
        {
          int32_t _8695_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8695_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8695_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8694_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simHotstart")))
  {
    {
      int32_t _8696_v = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_8556_value);
      if ((_8696_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_8696_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simBasisFactorUse")))
  {
    {
      int32_t _8697_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8697_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_8697_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simDegen")))
  {
    {
      int32_t _8698_v = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_8556_value);
      if ((_8698_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_8698_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simReformulation")))
  {
    {
      int32_t _8699_v = ::mosek::fusion::p_Parameters::string_to_simreform_value(_8556_value);
      if ((_8699_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_8699_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simExploitDupvec")))
  {
    {
      int32_t _8700_v = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_8556_value);
      if ((_8700_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_8700_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simSaveLu")))
  {
    {
      int32_t _8701_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8701_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_8701_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simNonSingular")))
  {
    {
      int32_t _8702_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8702_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_8702_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simDualCrash")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2817:4-2825:110 */
      try
      {
        {
          int32_t _8704_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((int)0 <= _8704_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8704_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8703_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("infeasPreferPrimal")))
  {
    {
      int32_t _8705_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8705_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_8705_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2837:4-2845:124 */
      try
      {
        {
          int32_t _8707_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((-(int)1) <= _8707_v) && (_8707_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8707_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8706_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioCutCmir")))
  {
    {
      int32_t _8708_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8708_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_8708_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioCutClique")))
  {
    {
      int32_t _8709_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8709_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_8709_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioCutImpliedBound")))
  {
    {
      int32_t _8710_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8710_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_8710_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioCutKnapsackCover")))
  {
    {
      int32_t _8711_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8711_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_8711_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioCutGmi")))
  {
    {
      int32_t _8712_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8712_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_8712_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioCutLipro")))
  {
    {
      int32_t _8713_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8713_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutLipro)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_LIPRO"),_8713_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioConstructSol")))
  {
    {
      int32_t _8714_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8714_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONSTRUCT_SOL"),_8714_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2905:4-2913:122 */
      try
      {
        {
          int32_t _8716_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8716_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8715_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2917:4-2925:122 */
      try
      {
        {
          int32_t _8718_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8718_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8717_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("cacheLicense")))
  {
    {
      int32_t _8719_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8719_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_8719_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("intpntRegularizationUse")))
  {
    {
      int32_t _8720_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8720_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_8720_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simSolveForm")))
  {
    {
      int32_t _8721_v = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8556_value);
      if ((_8721_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_8721_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("simSwitchOptimizer")))
  {
    {
      int32_t _8722_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8556_value);
      if ((_8722_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_8722_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("mioRinsMaxNodes")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2961:4-2969:113 */
      try
      {
        {
          int32_t _8724_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if (((-(int)1) <= _8724_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8724_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8723_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioFeaspumpLevel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2973:4-2981:114 */
      try
      {
        {
          int32_t _8726_v = ::mosek::fusion::Utils::Tools::toInt(_8556_value);
          if ((((-(int)1) <= _8726_v) && (_8726_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8726_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8725_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("remoteUseCompression")))
  {
    {
      int32_t _8727_v = ::mosek::fusion::p_Parameters::string_to_compresstype_value(_8556_value);
      if ((_8727_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteUseCompression)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_IPAR_REMOTE_USE_COMPRESSION"),_8727_v);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("optimizerMaxTime")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:2993:4-3003:114 */
      try
      {
        {
          double _8729_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8729_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8728_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("lowerObjCut")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3007:4-3017:109 */
      try
      {
        {
          double _8731_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8731_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8730_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("upperObjCut")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3021:4-3031:109 */
      try
      {
        {
          double _8733_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8733_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8732_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("upperObjCutFiniteTrh")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3035:4-3045:118 */
      try
      {
        {
          double _8735_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8735_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8734_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3049:4-3059:118 */
      try
      {
        {
          double _8737_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8737_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8736_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntTolRelGap")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3063:4-3073:113 */
      try
      {
        {
          double _8739_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((1.000000e-14 <= _8739_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8739_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8738_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntTolStepSize")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3077:4-3087:115 */
      try
      {
        {
          double _8741_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8741_v) && (_8741_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8741_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8740_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simLuTolRelPiv")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3091:4-3101:112 */
      try
      {
        {
          double _8743_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((1.000000e-06 <= _8743_v) && (_8743_v <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8743_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8742_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntTolRelStep")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3105:4-3115:114 */
      try
      {
        {
          double _8745_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((1.000000e-04 <= _8745_v) && (_8745_v <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8745_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8744_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntTolPath")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3119:4-3129:111 */
      try
      {
        {
          double _8747_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8747_v) && (_8747_v <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8747_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8746_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntTolPfeas")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3133:4-3143:112 */
      try
      {
        {
          double _8749_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8749_v) && (_8749_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8749_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8748_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntTolDfeas")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3147:4-3157:112 */
      try
      {
        {
          double _8751_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8751_v) && (_8751_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8751_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8750_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntTolMuRed")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3161:4-3171:112 */
      try
      {
        {
          double _8753_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8753_v) && (_8753_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8753_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8752_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntTolInfeas")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3175:4-3185:113 */
      try
      {
        {
          double _8755_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8755_v) && (_8755_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8755_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8754_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntCoTolRelGap")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3189:4-3199:115 */
      try
      {
        {
          double _8757_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8757_v) && (_8757_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8757_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8756_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntCoTolPfeas")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3203:4-3213:114 */
      try
      {
        {
          double _8759_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8759_v) && (_8759_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8759_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8758_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntCoTolDfeas")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3217:4-3227:114 */
      try
      {
        {
          double _8761_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8761_v) && (_8761_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8761_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8760_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntCoTolMuRed")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3231:4-3241:114 */
      try
      {
        {
          double _8763_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8763_v) && (_8763_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8763_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8762_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntCoTolNearRel")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3245:4-3255:116 */
      try
      {
        {
          double _8765_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((1.000000e+00 <= _8765_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8765_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8764_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntCoTolInfeas")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3259:4-3269:115 */
      try
      {
        {
          double _8767_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8767_v) && (_8767_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8767_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8766_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntTolPsafe")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3273:4-3283:112 */
      try
      {
        {
          double _8769_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((1.000000e-04 <= _8769_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8769_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8768_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("intpntTolDsafe")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3287:4-3297:112 */
      try
      {
        {
          double _8771_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((1.000000e-04 <= _8771_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8771_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8770_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioMaxTime")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3301:4-3311:108 */
      try
      {
        {
          double _8773_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8773_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8772_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioRelGapConst")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3315:4-3325:112 */
      try
      {
        {
          double _8775_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((1.000000e-15 <= _8775_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8775_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8774_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioTolRelGap")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3329:4-3339:110 */
      try
      {
        {
          double _8777_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((0.000000e+00 <= _8777_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8777_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8776_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioTolAbsGap")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3343:4-3353:110 */
      try
      {
        {
          double _8779_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((0.000000e+00 <= _8779_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8779_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8778_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioTolAbsRelaxInt")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3357:4-3367:115 */
      try
      {
        {
          double _8781_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((1.000000e-09 <= _8781_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8781_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8780_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioDjcMaxBigm")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3371:4-3381:111 */
      try
      {
        {
          double _8783_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((0.000000e+00 <= _8783_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_DJC_MAX_BIGM"),_8783_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8782_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("basisTolX")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3385:4-3395:107 */
      try
      {
        {
          double _8785_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((1.000000e-09 <= _8785_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8785_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8784_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("basisTolS")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3399:4-3409:107 */
      try
      {
        {
          double _8787_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((1.000000e-09 <= _8787_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8787_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8786_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("basisRelTolS")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3413:4-3423:110 */
      try
      {
        {
          double _8789_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((0.000000e+00 <= _8789_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8789_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8788_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveTolX")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3427:4-3437:110 */
      try
      {
        {
          double _8791_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((0.000000e+00 <= _8791_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8791_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8790_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3441:4-3451:133 */
      try
      {
        {
          double _8793_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((0.000000e+00 <= _8793_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_PRIMAL_INFEAS_PERTURBATION"),_8793_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8792_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveTolS")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3455:4-3465:110 */
      try
      {
        {
          double _8795_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((0.000000e+00 <= _8795_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8795_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8794_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveTolAij")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3469:4-3479:112 */
      try
      {
        {
          double _8797_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((1.000000e-15 <= _8797_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8797_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8796_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveTolAbsLindep")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3483:4-3493:118 */
      try
      {
        {
          double _8799_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((0.000000e+00 <= _8799_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8799_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8798_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("presolveTolRelLindep")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3497:4-3507:118 */
      try
      {
        {
          double _8801_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((0.000000e+00 <= _8801_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8801_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8800_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("simplexAbsTolPiv")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3511:4-3521:114 */
      try
      {
        {
          double _8803_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if ((1.000000e-12 <= _8803_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8803_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8802_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioTolFeas")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3525:4-3535:108 */
      try
      {
        {
          double _8805_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((1.000000e-09 <= _8805_v) && (_8805_v <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8805_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8804_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      /* Try @ bld/herlev/final/default/src/fusion/Parameters.mbi:3539:4-3549:127 */
      try
      {
        {
          double _8807_v = ::mosek::fusion::Utils::Tools::toDouble(_8556_value);
          if (((0.000000e+00 <= _8807_v) && (_8807_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8807_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8806_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_8555_name == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_8556_value);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("basSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_SPAR_BAS_SOL_FILE_NAME"),_8556_value);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("itrSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_SPAR_ITR_SOL_FILE_NAME"),_8556_value);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("intSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_SPAR_INT_SOL_FILE_NAME"),_8556_value);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("writeLpGenVarName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_SPAR_WRITE_LP_GEN_VAR_NAME"),_8556_value);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("remoteOptserverHost")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_OPTSERVER_HOST"),_8556_value);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("remoteTlsCertPath")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_TLS_CERT_PATH"),_8556_value);
      return;
    }
  }
  {}
  if ((_8555_name == std::string ("remoteTlsCert")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8554_M.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_TLS_CERT"),_8556_value);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
// End mosek.fusion.Parameters.setParameter

// Begin mosek.fusion.Parameters.string_to_variabletype_value
// Method mosek.fusion.Parameters.string_to_variabletype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1841:0-1846:1
int32_t mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _8808_v)
{
  if ((_8808_v == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8808_v == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_variabletype_value

// Begin mosek.fusion.Parameters.string_to_value_value
// Method mosek.fusion.Parameters.string_to_value_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1835:0-1840:1
int32_t mosek::fusion::p_Parameters::string_to_value_value(const std::string & _8809_v)
{
  if ((_8809_v == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_8809_v == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_value_value

// Begin mosek.fusion.Parameters.string_to_streamtype_value
// Method mosek.fusion.Parameters.string_to_streamtype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1827:0-1834:1
int32_t mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _8810_v)
{
  if ((_8810_v == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8810_v == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8810_v == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8810_v == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_streamtype_value

// Begin mosek.fusion.Parameters.string_to_startpointtype_value
// Method mosek.fusion.Parameters.string_to_startpointtype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1819:0-1826:1
int32_t mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _8811_v)
{
  if ((_8811_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8811_v == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8811_v == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8811_v == std::string ("satisfyBounds")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_startpointtype_value

// Begin mosek.fusion.Parameters.string_to_stakey_value
// Method mosek.fusion.Parameters.string_to_stakey_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1808:0-1818:1
int32_t mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _8812_v)
{
  if ((_8812_v == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8812_v == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8812_v == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8812_v == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8812_v == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8812_v == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8812_v == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_stakey_value

// Begin mosek.fusion.Parameters.string_to_sparam_value
// Method mosek.fusion.Parameters.string_to_sparam_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1779:0-1807:1
int32_t mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _8813_v)
{
  if ((_8813_v == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8813_v == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8813_v == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8813_v == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8813_v == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8813_v == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8813_v == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8813_v == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8813_v == std::string ("solFilterXcLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8813_v == std::string ("solFilterXcUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8813_v == std::string ("solFilterXxLow")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8813_v == std::string ("solFilterXxUpr")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8813_v == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8813_v == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8813_v == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8813_v == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8813_v == std::string ("statName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8813_v == std::string ("statKey")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8813_v == std::string ("writeLpGenVarName")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8813_v == std::string ("sensitivityResFileName")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8813_v == std::string ("sensitivityFileName")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8813_v == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8813_v == std::string ("remoteOptserverHost")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8813_v == std::string ("remoteTlsCertPath")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8813_v == std::string ("remoteTlsCert")))
  {
    {
      return (int)14;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_sparam_value

// Begin mosek.fusion.Parameters.string_to_solveform_value
// Method mosek.fusion.Parameters.string_to_solveform_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1772:0-1778:1
int32_t mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _8814_v)
{
  if ((_8814_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8814_v == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8814_v == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solveform_value

// Begin mosek.fusion.Parameters.string_to_soltype_value
// Method mosek.fusion.Parameters.string_to_soltype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1765:0-1771:1
int32_t mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _8815_v)
{
  if ((_8815_v == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8815_v == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8815_v == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_soltype_value

// Begin mosek.fusion.Parameters.string_to_solsta_value
// Method mosek.fusion.Parameters.string_to_solsta_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1751:0-1764:1
int32_t mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _8816_v)
{
  if ((_8816_v == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8816_v == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8816_v == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8816_v == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8816_v == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8816_v == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8816_v == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8816_v == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8816_v == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8816_v == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solsta_value

// Begin mosek.fusion.Parameters.string_to_solitem_value
// Method mosek.fusion.Parameters.string_to_solitem_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1739:0-1750:1
int32_t mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _8817_v)
{
  if ((_8817_v == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8817_v == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8817_v == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8817_v == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8817_v == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8817_v == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8817_v == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8817_v == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solitem_value

// Begin mosek.fusion.Parameters.string_to_simseltype_value
// Method mosek.fusion.Parameters.string_to_simseltype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1729:0-1738:1
int32_t mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _8818_v)
{
  if ((_8818_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8818_v == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8818_v == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8818_v == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8818_v == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8818_v == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simseltype_value

// Begin mosek.fusion.Parameters.string_to_sensitivitytype_value
// Method mosek.fusion.Parameters.string_to_sensitivitytype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1724:0-1728:1
int32_t mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _8819_v)
{
  if ((_8819_v == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_sensitivitytype_value

// Begin mosek.fusion.Parameters.string_to_scalingmethod_value
// Method mosek.fusion.Parameters.string_to_scalingmethod_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1718:0-1723:1
int32_t mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _8820_v)
{
  if ((_8820_v == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8820_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_scalingmethod_value

// Begin mosek.fusion.Parameters.string_to_scalingtype_value
// Method mosek.fusion.Parameters.string_to_scalingtype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1712:0-1717:1
int32_t mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _8821_v)
{
  if ((_8821_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8821_v == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_scalingtype_value

// Begin mosek.fusion.Parameters.string_to_rescodetype_value
// Method mosek.fusion.Parameters.string_to_rescodetype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1703:0-1711:1
int32_t mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _8822_v)
{
  if ((_8822_v == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8822_v == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8822_v == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8822_v == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8822_v == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_rescodetype_value

// Begin mosek.fusion.Parameters.string_to_rescode_value
// Method mosek.fusion.Parameters.string_to_rescode_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1167:0-1702:1
int32_t mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _8823_v)
{
  if ((_8823_v == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnInvalidMpsName")))
  {
    {
      return (int)504;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnInvalidMpsObjName")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)509;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnPresolvePrimalPertubations")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)830;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)831;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnWriteLpInvalidVarNames")))
  {
    {
      return (int)854;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnWriteLpDuplicateVarNames")))
  {
    {
      return (int)855;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnWriteLpInvalidConNames")))
  {
    {
      return (int)856;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnWriteLpDuplicateConNames")))
  {
    {
      return (int)857;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnNoInfeasibilityReportWhenMatrixVariables")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnModifiedDoubleParameter")))
  {
    {
      return (int)970;
    }
  }
  {}
  if ((_8823_v == std::string ("wrnLargeFij")))
  {
    {
      return (int)980;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseOldServerVersion")))
  {
    {
      return (int)1003;
    }
  }
  {}
  if ((_8823_v == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_8823_v == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_8823_v == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_8823_v == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_8823_v == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_8823_v == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_8823_v == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_8823_v == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_8823_v == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_8823_v == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_8823_v == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_8823_v == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_8823_v == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_8823_v == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_8823_v == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_8823_v == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_8823_v == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_8823_v == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_8823_v == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_8823_v == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_8823_v == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_8823_v == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_8823_v == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_8823_v == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_8823_v == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_8823_v == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_8823_v == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_8823_v == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_8823_v == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_8823_v == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_8823_v == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_8823_v == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_8823_v == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_8823_v == std::string ("errSparsitySpecification")))
  {
    {
      return (int)1073;
    }
  }
  {}
  if ((_8823_v == std::string ("errMismatchingDimension")))
  {
    {
      return (int)1074;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_8823_v == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_8823_v == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_8823_v == std::string ("errDimensionSpecification")))
  {
    {
      return (int)1082;
    }
  }
  {}
  if ((_8823_v == std::string ("errAxisNameSpecification")))
  {
    {
      return (int)1083;
    }
  }
  {}
  if ((_8823_v == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvalidConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvalidBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvalidSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvalidKey")))
  {
    {
      return (int)1129;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvalidIndicatorConstraint")))
  {
    {
      return (int)1130;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvalidIndicatorVariable")))
  {
    {
      return (int)1131;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvalidIndicatorValue")))
  {
    {
      return (int)1132;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsInvalidIndicatorQuadraticConstraint")))
  {
    {
      return (int)1133;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfSyntax")))
  {
    {
      return (int)1134;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1136;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfMismatchedTag")))
  {
    {
      return (int)1137;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfDuplicateBound")))
  {
    {
      return (int)1138;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfDuplicateConstraintName")))
  {
    {
      return (int)1139;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfInvalidConeType")))
  {
    {
      return (int)1140;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfIncorrectTagParam")))
  {
    {
      return (int)1141;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfInvalidTag")))
  {
    {
      return (int)1142;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfDuplicateConeEntry")))
  {
    {
      return (int)1143;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfTooLarge")))
  {
    {
      return (int)1144;
    }
  }
  {}
  if ((_8823_v == std::string ("errOpfDualIntegerSolution")))
  {
    {
      return (int)1146;
    }
  }
  {}
  if ((_8823_v == std::string ("errLpIncompatible")))
  {
    {
      return (int)1150;
    }
  }
  {}
  if ((_8823_v == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_8823_v == std::string ("errLpDupSlackName")))
  {
    {
      return (int)1152;
    }
  }
  {}
  if ((_8823_v == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_8823_v == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_8823_v == std::string ("errLpFreeConstraint")))
  {
    {
      return (int)1155;
    }
  }
  {}
  if ((_8823_v == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_8823_v == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_8823_v == std::string ("errWriteLpFormat")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_8823_v == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_8823_v == std::string ("errLpIndicatorVar")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_8823_v == std::string ("errWriteLpNonUniqueName")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_8823_v == std::string ("errReadLpNonexistingName")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_8823_v == std::string ("errLpWriteConicProblem")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_8823_v == std::string ("errLpWriteGecoProblem")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_8823_v == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_8823_v == std::string ("errLpInvalidConName")))
  {
    {
      return (int)1171;
    }
  }
  {}
  if ((_8823_v == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_8823_v == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_8823_v == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_8823_v == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_8823_v == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_8823_v == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_8823_v == std::string ("errPtfIncompatibility")))
  {
    {
      return (int)1181;
    }
  }
  {}
  if ((_8823_v == std::string ("errPtfUndefinedItem")))
  {
    {
      return (int)1182;
    }
  }
  {}
  if ((_8823_v == std::string ("errPtfInconsistency")))
  {
    {
      return (int)1183;
    }
  }
  {}
  if ((_8823_v == std::string ("errPtfFormat")))
  {
    {
      return (int)1184;
    }
  }
  {}
  if ((_8823_v == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_8823_v == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_8823_v == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_8823_v == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_8823_v == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_8823_v == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_8823_v == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_8823_v == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_8823_v == std::string ("errIndexIsNotUnique")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_8823_v == std::string ("errParamName")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_8823_v == std::string ("errParamNameDou")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_8823_v == std::string ("errParamNameInt")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_8823_v == std::string ("errParamNameStr")))
  {
    {
      return (int)1209;
    }
  }
  {}
  if ((_8823_v == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_8823_v == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_8823_v == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_8823_v == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_8823_v == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_8823_v == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_8823_v == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_8823_v == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_8823_v == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_8823_v == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_8823_v == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_8823_v == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_8823_v == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_8823_v == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_8823_v == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_8823_v == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_8823_v == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_8823_v == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_8823_v == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_8823_v == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_8823_v == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_8823_v == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_8823_v == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_8823_v == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_8823_v == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_8823_v == std::string ("errUnallowedWhichsol")))
  {
    {
      return (int)1248;
    }
  }
  {}
  if ((_8823_v == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_8823_v == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_8823_v == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_8823_v == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_8823_v == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_8823_v == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_8823_v == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_8823_v == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_8823_v == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_8823_v == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_8823_v == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_8823_v == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_8823_v == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_8823_v == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_8823_v == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_8823_v == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_8823_v == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_8823_v == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_8823_v == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_8823_v == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_8823_v == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_8823_v == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_8823_v == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_8823_v == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_8823_v == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_8823_v == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_8823_v == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_8823_v == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_8823_v == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_8823_v == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_8823_v == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_8823_v == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_8823_v == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_8823_v == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_8823_v == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_8823_v == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_8823_v == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_8823_v == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_8823_v == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_8823_v == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_8823_v == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_8823_v == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_8823_v == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_8823_v == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_8823_v == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_8823_v == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_8823_v == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_8823_v == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_8823_v == std::string ("errInfInDoubleData")))
  {
    {
      return (int)1451;
    }
  }
  {}
  if ((_8823_v == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_8823_v == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidCfix")))
  {
    {
      return (int)1469;
    }
  }
  {}
  if ((_8823_v == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_8823_v == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_8823_v == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidCj")))
  {
    {
      return (int)1474;
    }
  }
  {}
  if ((_8823_v == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_8823_v == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_8823_v == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_8823_v == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_8823_v == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_8823_v == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_8823_v == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_8823_v == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_8823_v == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_8823_v == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_8823_v == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_8823_v == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_8823_v == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_8823_v == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_8823_v == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_8823_v == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_8823_v == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_8823_v == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_8823_v == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_8823_v == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_8823_v == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_8823_v == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_8823_v == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_8823_v == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_8823_v == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_8823_v == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_8823_v == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_8823_v == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_8823_v == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_8823_v == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_8823_v == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_8823_v == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_8823_v == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_8823_v == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_8823_v == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_8823_v == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_8823_v == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_8823_v == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_8823_v == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_8823_v == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_8823_v == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_8823_v == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_8823_v == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_8823_v == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_8823_v == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_8823_v == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_8823_v == std::string ("errXmlInvalidProblemType")))
  {
    {
      return (int)3600;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidAmplStub")))
  {
    {
      return (int)3700;
    }
  }
  {}
  if ((_8823_v == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_8823_v == std::string ("errSizeLicenseNumcores")))
  {
    {
      return (int)3900;
    }
  }
  {}
  if ((_8823_v == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_8823_v == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_8823_v == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_8823_v == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_8823_v == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_8823_v == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_8823_v == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFileFormatForQuadraticTerms")))
  {
    {
      return (int)4006;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFileFormatForDisjunctiveConstraints")))
  {
    {
      return (int)4011;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFileFormatForAffineConicConstraints")))
  {
    {
      return (int)4012;
    }
  }
  {}
  if ((_8823_v == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_8823_v == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_8823_v == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_8823_v == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_8823_v == std::string ("errDuplicateDomainNames")))
  {
    {
      return (int)4504;
    }
  }
  {}
  if ((_8823_v == std::string ("errDuplicateDjcNames")))
  {
    {
      return (int)4505;
    }
  }
  {}
  if ((_8823_v == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_8823_v == std::string ("errArgumentIsTooSmall")))
  {
    {
      return (int)5004;
    }
  }
  {}
  if ((_8823_v == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_8823_v == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_8823_v == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_8823_v == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_8823_v == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7127;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7140;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7141;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidNumPsdcon")))
  {
    {
      return (int)7200;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfDuplicatePsdcon")))
  {
    {
      return (int)7201;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidDimensionOfPsdcon")))
  {
    {
      return (int)7202;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidPsdconIndex")))
  {
    {
      return (int)7203;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidPsdconVariableIndex")))
  {
    {
      return (int)7204;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfInvalidPsdconBlockIndex")))
  {
    {
      return (int)7205;
    }
  }
  {}
  if ((_8823_v == std::string ("errCbfUnsupportedChange")))
  {
    {
      return (int)7210;
    }
  }
  {}
  if ((_8823_v == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_8823_v == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_8823_v == std::string ("errMpsWriteCplexInvalidConeType")))
  {
    {
      return (int)7750;
    }
  }
  {}
  if ((_8823_v == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_8823_v == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_8823_v == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_8823_v == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_8823_v == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_8823_v == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_8823_v == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_8823_v == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_8823_v == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_8823_v == std::string ("errServerAddress")))
  {
    {
      return (int)8004;
    }
  }
  {}
  if ((_8823_v == std::string ("errServerCertificate")))
  {
    {
      return (int)8005;
    }
  }
  {}
  if ((_8823_v == std::string ("errServerTlsClient")))
  {
    {
      return (int)8006;
    }
  }
  {}
  if ((_8823_v == std::string ("errServerAccessToken")))
  {
    {
      return (int)8007;
    }
  }
  {}
  if ((_8823_v == std::string ("errServerProblemSize")))
  {
    {
      return (int)8008;
    }
  }
  {}
  if ((_8823_v == std::string ("errDuplicateFij")))
  {
    {
      return (int)20100;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidFij")))
  {
    {
      return (int)20101;
    }
  }
  {}
  if ((_8823_v == std::string ("errHugeFij")))
  {
    {
      return (int)20102;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidG")))
  {
    {
      return (int)20103;
    }
  }
  {}
  if ((_8823_v == std::string ("errInvalidB")))
  {
    {
      return (int)20150;
    }
  }
  {}
  if ((_8823_v == std::string ("errDomainInvalidIndex")))
  {
    {
      return (int)20400;
    }
  }
  {}
  if ((_8823_v == std::string ("errDomainDimension")))
  {
    {
      return (int)20401;
    }
  }
  {}
  if ((_8823_v == std::string ("errDomainDimensionPsd")))
  {
    {
      return (int)20402;
    }
  }
  {}
  if ((_8823_v == std::string ("errNotPowerDomain")))
  {
    {
      return (int)20403;
    }
  }
  {}
  if ((_8823_v == std::string ("errDomainPowerInvalidAlpha")))
  {
    {
      return (int)20404;
    }
  }
  {}
  if ((_8823_v == std::string ("errDomainPowerNegativeAlpha")))
  {
    {
      return (int)20405;
    }
  }
  {}
  if ((_8823_v == std::string ("errDomainPowerNleft")))
  {
    {
      return (int)20406;
    }
  }
  {}
  if ((_8823_v == std::string ("errAfeInvalidIndex")))
  {
    {
      return (int)20500;
    }
  }
  {}
  if ((_8823_v == std::string ("errAccInvalidIndex")))
  {
    {
      return (int)20600;
    }
  }
  {}
  if ((_8823_v == std::string ("errAccInvalidEntryIndex")))
  {
    {
      return (int)20601;
    }
  }
  {}
  if ((_8823_v == std::string ("errAccAfeDomainMismatch")))
  {
    {
      return (int)20602;
    }
  }
  {}
  if ((_8823_v == std::string ("errDjcInvalidIndex")))
  {
    {
      return (int)20700;
    }
  }
  {}
  if ((_8823_v == std::string ("errDjcUnsupportedDomainType")))
  {
    {
      return (int)20701;
    }
  }
  {}
  if ((_8823_v == std::string ("errDjcAfeDomainMismatch")))
  {
    {
      return (int)20702;
    }
  }
  {}
  if ((_8823_v == std::string ("errDjcInvalidTermSize")))
  {
    {
      return (int)20703;
    }
  }
  {}
  if ((_8823_v == std::string ("errDjcDomainTermsizeMismatch")))
  {
    {
      return (int)20704;
    }
  }
  {}
  if ((_8823_v == std::string ("errDjcTotalNumTermsMismatch")))
  {
    {
      return (int)20705;
    }
  }
  {}
  if ((_8823_v == std::string ("errUndefSolution")))
  {
    {
      return (int)22000;
    }
  }
  {}
  if ((_8823_v == std::string ("errNoDoty")))
  {
    {
      return (int)22010;
    }
  }
  {}
  if ((_8823_v == std::string ("trmMaxIterations")))
  {
    {
      return (int)100000;
    }
  }
  {}
  if ((_8823_v == std::string ("trmMaxTime")))
  {
    {
      return (int)100001;
    }
  }
  {}
  if ((_8823_v == std::string ("trmObjectiveRange")))
  {
    {
      return (int)100002;
    }
  }
  {}
  if ((_8823_v == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)100008;
    }
  }
  {}
  if ((_8823_v == std::string ("trmMioNumBranches")))
  {
    {
      return (int)100009;
    }
  }
  {}
  if ((_8823_v == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)100015;
    }
  }
  {}
  if ((_8823_v == std::string ("trmStall")))
  {
    {
      return (int)100006;
    }
  }
  {}
  if ((_8823_v == std::string ("trmUserCallback")))
  {
    {
      return (int)100007;
    }
  }
  {}
  if ((_8823_v == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)100020;
    }
  }
  {}
  if ((_8823_v == std::string ("trmNumericalProblem")))
  {
    {
      return (int)100025;
    }
  }
  {}
  if ((_8823_v == std::string ("trmLostRace")))
  {
    {
      return (int)100027;
    }
  }
  {}
  if ((_8823_v == std::string ("trmInternal")))
  {
    {
      return (int)100030;
    }
  }
  {}
  if ((_8823_v == std::string ("trmInternalStop")))
  {
    {
      return (int)100031;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_rescode_value

// Begin mosek.fusion.Parameters.string_to_xmlwriteroutputtype_value
// Method mosek.fusion.Parameters.string_to_xmlwriteroutputtype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1161:0-1166:1
int32_t mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value(const std::string & _8824_v)
{
  if ((_8824_v == std::string ("row")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8824_v == std::string ("col")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_xmlwriteroutputtype_value

// Begin mosek.fusion.Parameters.string_to_prosta_value
// Method mosek.fusion.Parameters.string_to_prosta_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1148:0-1160:1
int32_t mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _8825_v)
{
  if ((_8825_v == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8825_v == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8825_v == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8825_v == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8825_v == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8825_v == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8825_v == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8825_v == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8825_v == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_prosta_value

// Begin mosek.fusion.Parameters.string_to_problemtype_value
// Method mosek.fusion.Parameters.string_to_problemtype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1139:0-1147:1
int32_t mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _8826_v)
{
  if ((_8826_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8826_v == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8826_v == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8826_v == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8826_v == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_problemtype_value

// Begin mosek.fusion.Parameters.string_to_problemitem_value
// Method mosek.fusion.Parameters.string_to_problemitem_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1132:0-1138:1
int32_t mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _8827_v)
{
  if ((_8827_v == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8827_v == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8827_v == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_problemitem_value

// Begin mosek.fusion.Parameters.string_to_parametertype_value
// Method mosek.fusion.Parameters.string_to_parametertype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1124:0-1131:1
int32_t mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _8828_v)
{
  if ((_8828_v == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8828_v == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8828_v == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8828_v == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_parametertype_value

// Begin mosek.fusion.Parameters.string_to_presolvemode_value
// Method mosek.fusion.Parameters.string_to_presolvemode_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1117:0-1123:1
int32_t mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _8829_v)
{
  if ((_8829_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8829_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8829_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_presolvemode_value

// Begin mosek.fusion.Parameters.string_to_orderingtype_value
// Method mosek.fusion.Parameters.string_to_orderingtype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1107:0-1116:1
int32_t mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _8830_v)
{
  if ((_8830_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8830_v == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8830_v == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8830_v == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8830_v == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8830_v == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_orderingtype_value

// Begin mosek.fusion.Parameters.string_to_optimizertype_value
// Method mosek.fusion.Parameters.string_to_optimizertype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1096:0-1106:1
int32_t mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _8831_v)
{
  if ((_8831_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8831_v == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8831_v == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8831_v == std::string ("primalSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8831_v == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8831_v == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8831_v == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_optimizertype_value

// Begin mosek.fusion.Parameters.string_to_onoffkey_value
// Method mosek.fusion.Parameters.string_to_onoffkey_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1090:0-1095:1
int32_t mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _8832_v)
{
  if ((_8832_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8832_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_onoffkey_value

// Begin mosek.fusion.Parameters.string_to_objsense_value
// Method mosek.fusion.Parameters.string_to_objsense_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1084:0-1089:1
int32_t mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _8833_v)
{
  if ((_8833_v == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8833_v == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_objsense_value

// Begin mosek.fusion.Parameters.string_to_mpsformat_value
// Method mosek.fusion.Parameters.string_to_mpsformat_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1076:0-1083:1
int32_t mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _8834_v)
{
  if ((_8834_v == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8834_v == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8834_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8834_v == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_mpsformat_value

// Begin mosek.fusion.Parameters.string_to_mionodeseltype_value
// Method mosek.fusion.Parameters.string_to_mionodeseltype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1068:0-1075:1
int32_t mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _8835_v)
{
  if ((_8835_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8835_v == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8835_v == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8835_v == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_mionodeseltype_value

// Begin mosek.fusion.Parameters.string_to_miomode_value
// Method mosek.fusion.Parameters.string_to_miomode_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1062:0-1067:1
int32_t mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _8836_v)
{
  if ((_8836_v == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8836_v == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miomode_value

// Begin mosek.fusion.Parameters.string_to_miocontsoltype_value
// Method mosek.fusion.Parameters.string_to_miocontsoltype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1054:0-1061:1
int32_t mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _8837_v)
{
  if ((_8837_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8837_v == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8837_v == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8837_v == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miocontsoltype_value

// Begin mosek.fusion.Parameters.string_to_miodatapermmethod_value
// Method mosek.fusion.Parameters.string_to_miodatapermmethod_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1047:0-1053:1
int32_t mosek::fusion::p_Parameters::string_to_miodatapermmethod_value(const std::string & _8838_v)
{
  if ((_8838_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8838_v == std::string ("cyclicShift")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8838_v == std::string ("random")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miodatapermmethod_value

// Begin mosek.fusion.Parameters.string_to_miqcqoreformmethod_value
// Method mosek.fusion.Parameters.string_to_miqcqoreformmethod_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1037:0-1046:1
int32_t mosek::fusion::p_Parameters::string_to_miqcqoreformmethod_value(const std::string & _8839_v)
{
  if ((_8839_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8839_v == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8839_v == std::string ("linearization")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8839_v == std::string ("eigenValMethod")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8839_v == std::string ("diagSdp")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8839_v == std::string ("relaxSdp")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miqcqoreformmethod_value

// Begin mosek.fusion.Parameters.string_to_branchdir_value
// Method mosek.fusion.Parameters.string_to_branchdir_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:1025:0-1036:1
int32_t mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _8840_v)
{
  if ((_8840_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8840_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8840_v == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8840_v == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8840_v == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8840_v == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8840_v == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8840_v == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_branchdir_value

// Begin mosek.fusion.Parameters.string_to_iparam_value
// Method mosek.fusion.Parameters.string_to_iparam_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:834:0-1024:1
int32_t mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _8841_v)
{
  if ((_8841_v == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8841_v == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntHotstart")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntPurify")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8841_v == std::string ("numThreads")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8841_v == std::string ("timingLevel")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_8841_v == std::string ("mtSpincount")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8841_v == std::string ("maxNumWarnings")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8841_v == std::string ("optimizer")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_8841_v == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8841_v == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8841_v == std::string ("logIncludeSummary")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8841_v == std::string ("logCutSecondOpt")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8841_v == std::string ("logAnaPro")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8841_v == std::string ("logResponse")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8841_v == std::string ("logLocalInfo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8841_v == std::string ("logBi")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8841_v == std::string ("logBiFreq")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8841_v == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntMaxNumRefinementSteps")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntStartingPoint")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntDiffStep")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntScaling")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntSolveForm")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8841_v == std::string ("logIntpnt")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntMaxIterations")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntOffColTrh")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntOrderMethod")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntBasis")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8841_v == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8841_v == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8841_v == std::string ("presolveUse")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_8841_v == std::string ("presolveLevel")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_8841_v == std::string ("logPresolve")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8841_v == std::string ("presolveLindepUse")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_8841_v == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_8841_v == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_8841_v == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_8841_v == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_8841_v == std::string ("simDetectPwl")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_8841_v == std::string ("simStabilityPriority")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_8841_v == std::string ("simPrimalCrash")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_8841_v == std::string ("logSim")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8841_v == std::string ("logSimMinor")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8841_v == std::string ("logSimFreq")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8841_v == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_8841_v == std::string ("simPrimalSelection")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_8841_v == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_8841_v == std::string ("simDualSelection")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_8841_v == std::string ("simMaxIterations")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_8841_v == std::string ("simHotstartLu")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_8841_v == std::string ("simRefactorFreq")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_8841_v == std::string ("simSeed")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_8841_v == std::string ("mioMode")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8841_v == std::string ("logMio")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8841_v == std::string ("logMioFreq")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8841_v == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8841_v == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8841_v == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8841_v == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8841_v == std::string ("mioNodeSelection")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8841_v == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8841_v == std::string ("mioProbingLevel")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8841_v == std::string ("mioSymmetryLevel")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8841_v == std::string ("mioPresolveAggregatorUse")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8841_v == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8841_v == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8841_v == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8841_v == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8841_v == std::string ("mioBranchDir")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8841_v == std::string ("mioRootOptimizer")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8841_v == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8841_v == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8841_v == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8841_v == std::string ("mioSeed")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8841_v == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8841_v == std::string ("mioQcqoReformulationMethod")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8841_v == std::string ("mioDataPermutationMethod")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8841_v == std::string ("readKeepFreeCon")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_8841_v == std::string ("readMpsFormat")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_8841_v == std::string ("writeMpsFormat")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_8841_v == std::string ("readMpsWidth")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_8841_v == std::string ("readDebug")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_8841_v == std::string ("writeDataParam")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_8841_v == std::string ("writeFreeCon")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_8841_v == std::string ("writeGenericNames")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_8841_v == std::string ("writeGenericNamesIo")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_8841_v == std::string ("writeCompression")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_8841_v == std::string ("writeMpsInt")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_8841_v == std::string ("writeLpLineWidth")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_8841_v == std::string ("writeLpFullObj")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_8841_v == std::string ("writeJsonIndentation")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_8841_v == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)183;
    }
  }
  {}
  if ((_8841_v == std::string ("writeSolHead")))
  {
    {
      return (int)182;
    }
  }
  {}
  if ((_8841_v == std::string ("writeSolConstraints")))
  {
    {
      return (int)181;
    }
  }
  {}
  if ((_8841_v == std::string ("writeSolVariables")))
  {
    {
      return (int)184;
    }
  }
  {}
  if ((_8841_v == std::string ("writeSolBarvariables")))
  {
    {
      return (int)180;
    }
  }
  {}
  if ((_8841_v == std::string ("writeBasHead")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_8841_v == std::string ("writeBasConstraints")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_8841_v == std::string ("writeBasVariables")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_8841_v == std::string ("writeIntHead")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_8841_v == std::string ("writeIntConstraints")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_8841_v == std::string ("writeIntVariables")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_8841_v == std::string ("solReadNameWidth")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_8841_v == std::string ("solReadWidth")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_8841_v == std::string ("infeasReportAuto")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8841_v == std::string ("infeasReportLevel")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8841_v == std::string ("infeasGenericNames")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8841_v == std::string ("logInfeasAna")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8841_v == std::string ("licenseWait")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8841_v == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8841_v == std::string ("licensePauseTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8841_v == std::string ("licenseDebug")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8841_v == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_8841_v == std::string ("solFilterKeepRanged")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_8841_v == std::string ("log")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8841_v == std::string ("logExpand")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8841_v == std::string ("logFile")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8841_v == std::string ("logOrder")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8841_v == std::string ("logSensitivity")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8841_v == std::string ("logSensitivityOpt")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8841_v == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_8841_v == std::string ("writeTaskIncSol")))
  {
    {
      return (int)185;
    }
  }
  {}
  if ((_8841_v == std::string ("paramReadCaseName")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_8841_v == std::string ("paramReadIgnError")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_8841_v == std::string ("solutionCallback")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_8841_v == std::string ("simScaling")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_8841_v == std::string ("simScalingMethod")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_8841_v == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_8841_v == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_8841_v == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_8841_v == std::string ("simHotstart")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_8841_v == std::string ("simBasisFactorUse")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_8841_v == std::string ("simDegen")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_8841_v == std::string ("simReformulation")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_8841_v == std::string ("simExploitDupvec")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_8841_v == std::string ("simSaveLu")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_8841_v == std::string ("simNonSingular")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_8841_v == std::string ("simDualCrash")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_8841_v == std::string ("logStorage")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8841_v == std::string ("infeasPreferPrimal")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8841_v == std::string ("opfWriteLineLength")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8841_v == std::string ("opfWriteHints")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8841_v == std::string ("opfWriteParameters")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8841_v == std::string ("opfWriteProblem")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8841_v == std::string ("opfWriteHeader")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8841_v == std::string ("opfWriteSolutions")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_8841_v == std::string ("opfWriteSolBas")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_8841_v == std::string ("opfWriteSolItg")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_8841_v == std::string ("opfWriteSolItr")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_8841_v == std::string ("ptfWriteTransform")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_8841_v == std::string ("ptfWriteSolutions")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_8841_v == std::string ("ptfWriteParameters")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_8841_v == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_8841_v == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8841_v == std::string ("mioCutCmir")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8841_v == std::string ("mioCutClique")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8841_v == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8841_v == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8841_v == std::string ("mioCutGmi")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8841_v == std::string ("mioCutLipro")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8841_v == std::string ("sensitivityType")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_8841_v == std::string ("mioConstructSol")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8841_v == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_8841_v == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_8841_v == std::string ("sensitivityAll")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_8841_v == std::string ("logFeasRepair")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8841_v == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8841_v == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8841_v == std::string ("simSolveForm")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_8841_v == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_8841_v == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_8841_v == std::string ("checkConvexity")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8841_v == std::string ("logCheckConvexity")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8841_v == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8841_v == std::string ("sensitivityOptimizer")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_8841_v == std::string ("writeXmlMode")))
  {
    {
      return (int)186;
    }
  }
  {}
  if ((_8841_v == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8841_v == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8841_v == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8841_v == std::string ("compressStatfile")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8841_v == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8841_v == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8841_v == std::string ("ng")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8841_v == std::string ("remoteUseCompression")))
  {
    {
      return (int)126;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_iparam_value

// Begin mosek.fusion.Parameters.string_to_iomode_value
// Method mosek.fusion.Parameters.string_to_iomode_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:827:0-833:1
int32_t mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _8842_v)
{
  if ((_8842_v == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8842_v == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8842_v == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_iomode_value

// Begin mosek.fusion.Parameters.string_to_internal_iinf_value
// Method mosek.fusion.Parameters.string_to_internal_iinf_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:701:0-826:1
int32_t mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _8843_v)
{
  if ((_8843_v == std::string ("versionMajor")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_8843_v == std::string ("versionMinor")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_8843_v == std::string ("versionRevision")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveLindepWork")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveLindepPivots")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveOutofspace")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8843_v == std::string ("optObjectiveSense")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8843_v == std::string ("optimizer")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFirRefIter")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorSchurNumDup")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorSchurNumBlk")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorSchurMinBlkDim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorSchurMaxBlkDim")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorDim")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorLDim")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorOrderMlLNumDense")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorOrderMlLMaxHeight")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorOrderGpLMaxHeight")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumcon")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumvar")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumbarvar")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumblo")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumbup")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumbfr")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumbfx")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumcone")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumconevar")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumbndcone")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumrqcones")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumqcones")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntNumppowcones")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntMinconedim")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntMaxconedim")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumcon")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumcfr")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumcfx")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumclo")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumcup")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumcra")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumcnl")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumvar")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumvfr")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumvfx")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumvlo")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumvup")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumvra")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumvnl")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumnza")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumcon")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumcfr")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumcfx")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumclo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumcup")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumcra")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumcnl")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumvar")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumvfr")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumvfx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumvlo")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumvup")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumvra")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumvnl")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveFnumnza")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumElimns")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveEliNumTries")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveLindepNum")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveForceConNum")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveForceVarNum")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8843_v == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveAccNumDupVarInNrmtwo")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveAccNumDoubletonChainInNrmtwo")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorNum")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPrimalHotstartNumBasics")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPrimalHotstartBasisRank")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexDualHotstartNumBasics")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexDualHotstartBasisRank")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_8843_v == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8843_v == std::string ("numLuFactorizations")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPwlNumPotential")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPwlNumUsed")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPwlNumVariables")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPwlMinNumBreakpoints")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPwlMaxNumBreakpoints")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPwlMaxNz")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPwlNzReduction")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPrimalNumSetbacks")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexDualNumSetbacks")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPrimalFeasNa")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexDualFeasNa")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexPrimalObjNa")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_8843_v == std::string ("simplexDualObjNa")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_8843_v == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_8843_v == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8843_v == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8843_v == std::string ("purifyNumRow")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8843_v == std::string ("purifyPNumNullRow")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8843_v == std::string ("purifyPNumSingletonCol")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8843_v == std::string ("purifyCrashL11NumRow")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8843_v == std::string ("purifyCrashL22NumRow")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8843_v == std::string ("purifyCrashL33NumRow")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8843_v == std::string ("purifyCrashL33NumCol")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8843_v == std::string ("purifyCrashSingularity")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8843_v == std::string ("biPrimalInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8843_v == std::string ("biDualInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8843_v == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)66;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_internal_iinf_value

// Begin mosek.fusion.Parameters.string_to_internal_dinf_value
// Method mosek.fusion.Parameters.string_to_internal_dinf_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:602:0-700:1
int32_t mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _8844_v)
{
  if ((_8844_v == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8844_v == std::string ("sensitivityDualTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntGfeas")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntMu")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntInitIterTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntCorrectorTime")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntUpdateTime")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurUpdateTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurUpdateCompressedETime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurUpdateSparseTime")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurUpdateSparseSyr2kTime")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurUpdateSparseDotTime")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurUpdateDenseTime")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurUpdateDenseSyr2kTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurUpdateDenseDotTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurPushTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntSolveTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntIterRefTime")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8844_v == std::string ("presolveAcoltTime")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8844_v == std::string ("presolveSetupTime")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8844_v == std::string ("presolveCheckproTime")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8844_v == std::string ("presolveDupconTime")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8844_v == std::string ("presolveDupvarTime")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8844_v == std::string ("presolveFinalTime")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8844_v == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8844_v == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8844_v == std::string ("primalSimplexInftime")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8844_v == std::string ("dualSimplexInftime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntFactorSetupGpOrderPostTime")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8844_v == std::string ("biCrashTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8844_v == std::string ("biCrashLuTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8844_v == std::string ("biFactorTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8844_v == std::string ("biFactorWork")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8844_v == std::string ("biPrimalDone")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8844_v == std::string ("biDualDone")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8844_v == std::string ("simplexPrimalObj")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8844_v == std::string ("simplexPrimalFeas")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8844_v == std::string ("simplexDualObj")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8844_v == std::string ("simplexDualFeas")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8844_v == std::string ("biInitialBasisCond")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8844_v == std::string ("biPrimalObj")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8844_v == std::string ("biDualObj")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8844_v == std::string ("biPrimalFeas")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8844_v == std::string ("biDualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8844_v == std::string ("intpntPurifyTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_internal_dinf_value

// Begin mosek.fusion.Parameters.string_to_inftype_value
// Method mosek.fusion.Parameters.string_to_inftype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:595:0-601:1
int32_t mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _8845_v)
{
  if ((_8845_v == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8845_v == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8845_v == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_inftype_value

// Begin mosek.fusion.Parameters.string_to_iinfitem_value
// Method mosek.fusion.Parameters.string_to_iinfitem_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:485:0-594:1
int32_t mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _8846_v)
{
  if ((_8846_v == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8846_v == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8846_v == std::string ("optimizeResponse")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8846_v == std::string ("presolveNumPrimalPerturbations")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8846_v == std::string ("intpntIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8846_v == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8846_v == std::string ("intpntSolveDual")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNodeDepth")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumvar")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumbin")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumint")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumcont")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumcon")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumcone")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumqcones")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumrqcones")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumpexpcones")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumdexpcones")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumppowcones")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumdpowcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumconevar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumbinconevar")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumintconevar")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumcontconevar")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumdjc")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8846_v == std::string ("mioPresolvedNumdjc")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8846_v == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8846_v == std::string ("mioConstructSolution")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8846_v == std::string ("mioInitialFeasibleSolution")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8846_v == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumRelax")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumBranch")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8846_v == std::string ("mioTotalNumCuts")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumCmirCuts")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumCliqueCuts")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumImpliedBoundCuts")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumKnapsackCoverCuts")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumGomoryCuts")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumLiproCuts")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8846_v == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8846_v == std::string ("mioUserObjCut")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8846_v == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8846_v == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8846_v == std::string ("rdProtype")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8846_v == std::string ("rdNumcon")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8846_v == std::string ("rdNumvar")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8846_v == std::string ("rdNumbarvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8846_v == std::string ("rdNumintvar")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8846_v == std::string ("rdNumq")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8846_v == std::string ("simDualDegIter")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8846_v == std::string ("simDualInfIter")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8846_v == std::string ("simDualHotstartLu")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8846_v == std::string ("simPrimalIter")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8846_v == std::string ("simDualIter")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8846_v == std::string ("intpntNumThreads")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8846_v == std::string ("simPrimalInfIter")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8846_v == std::string ("simPrimalDegIter")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8846_v == std::string ("simPrimalHotstart")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8846_v == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8846_v == std::string ("simDualHotstart")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8846_v == std::string ("solItrProsta")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_8846_v == std::string ("solItrSolsta")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_8846_v == std::string ("solBasProsta")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8846_v == std::string ("solBasSolsta")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8846_v == std::string ("solItgProsta")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_8846_v == std::string ("solItgSolsta")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_8846_v == std::string ("simNumcon")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8846_v == std::string ("simNumvar")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8846_v == std::string ("optNumcon")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8846_v == std::string ("optNumvar")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8846_v == std::string ("stoNumARealloc")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_8846_v == std::string ("rdNumcone")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8846_v == std::string ("simSolveDual")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8846_v == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8846_v == std::string ("purifyDualSuccess")))
  {
    {
      return (int)77;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_iinfitem_value

// Begin mosek.fusion.Parameters.string_to_internal_liinf_value
// Method mosek.fusion.Parameters.string_to_internal_liinf_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:471:0-484:1
int32_t mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _8847_v)
{
  if ((_8847_v == std::string ("intpntLenbarvar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8847_v == std::string ("presolveStackSize")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8847_v == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8847_v == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8847_v == std::string ("intpntFactorGpOrderSavedNzs")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8847_v == std::string ("simplexPrimalIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8847_v == std::string ("simplexDualIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8847_v == std::string ("simplexPrimalNumTicks")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8847_v == std::string ("simplexDualNumTicks")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8847_v == std::string ("simplexDualNumIllposedCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_internal_liinf_value

// Begin mosek.fusion.Parameters.string_to_liinfitem_value
// Method mosek.fusion.Parameters.string_to_liinfitem_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:446:0-470:1
int32_t mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _8848_v)
{
  if ((_8848_v == std::string ("anaProScalarizedConstraintMatrixNumRows")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8848_v == std::string ("anaProScalarizedConstraintMatrixNumColumns")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8848_v == std::string ("anaProScalarizedConstraintMatrixNumNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8848_v == std::string ("mioAnz")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8848_v == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8848_v == std::string ("mioSimplexIter")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8848_v == std::string ("mioIntpntIter")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8848_v == std::string ("mioNumPrimIllposedCer")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8848_v == std::string ("mioNumDualIllposedCer")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8848_v == std::string ("biPrimalIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8848_v == std::string ("biDualIter")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8848_v == std::string ("biCleanPrimalIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8848_v == std::string ("biCleanDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8848_v == std::string ("biCleanPrimalDegIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8848_v == std::string ("biCleanDualDegIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8848_v == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8848_v == std::string ("rdNumacc")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8848_v == std::string ("rdNumdjc")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8848_v == std::string ("rdNumanz")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8848_v == std::string ("rdNumqnz")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8848_v == std::string ("simplexIter")))
  {
    {
      return (int)20;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_liinfitem_value

// Begin mosek.fusion.Parameters.string_to_dparam_value
// Method mosek.fusion.Parameters.string_to_dparam_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:381:0-445:1
int32_t mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _8849_v)
{
  if ((_8849_v == std::string ("dataTolCjLarge")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8849_v == std::string ("dataTolCHuge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8849_v == std::string ("dataTolAijLarge")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8849_v == std::string ("dataTolAijHuge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8849_v == std::string ("dataSymMatTol")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8849_v == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8849_v == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8849_v == std::string ("dataTolBoundInf")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8849_v == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8849_v == std::string ("dataTolQij")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8849_v == std::string ("dataTolX")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8849_v == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8849_v == std::string ("optimizerMaxTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8849_v == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8849_v == std::string ("upperObjCut")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8849_v == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8849_v == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8849_v == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8849_v == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8849_v == std::string ("mioMaxTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8849_v == std::string ("mioRelGapConst")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8849_v == std::string ("mioTolRelGap")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8849_v == std::string ("mioTolAbsGap")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8849_v == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8849_v == std::string ("mioDjcMaxBigm")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8849_v == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8849_v == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8849_v == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8849_v == std::string ("presolveTolX")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8849_v == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8849_v == std::string ("presolveTolS")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8849_v == std::string ("presolveTolAij")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8849_v == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8849_v == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8849_v == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8849_v == std::string ("mioTolFeas")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8849_v == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8849_v == std::string ("checkConvexityRelTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8849_v == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8849_v == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)46;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_dparam_value

// Begin mosek.fusion.Parameters.string_to_feature_value
// Method mosek.fusion.Parameters.string_to_feature_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:375:0-380:1
int32_t mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _8850_v)
{
  if ((_8850_v == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8850_v == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_feature_value

// Begin mosek.fusion.Parameters.string_to_dinfitem_value
// Method mosek.fusion.Parameters.string_to_dinfitem_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:270:0-374:1
int32_t mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _8851_v)
{
  if ((_8851_v == std::string ("anaProScalarizedConstraintMatrixDensity")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8851_v == std::string ("biTime")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8851_v == std::string ("biPrimalTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8851_v == std::string ("biDualTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8851_v == std::string ("biCleanTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8851_v == std::string ("biCleanPrimalTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8851_v == std::string ("biCleanDualTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8851_v == std::string ("intpntTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8851_v == std::string ("intpntOrderTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8851_v == std::string ("intpntPrimalObj")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8851_v == std::string ("intpntDualObj")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8851_v == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8851_v == std::string ("intpntDualFeas")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8851_v == std::string ("intpntOptStatus")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8851_v == std::string ("simTime")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8851_v == std::string ("simPrimalTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8851_v == std::string ("simDualTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8851_v == std::string ("simObj")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8851_v == std::string ("simFeas")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8851_v == std::string ("mioTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8851_v == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8851_v == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8851_v == std::string ("mioRootTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8851_v == std::string ("toConicTime")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8851_v == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8851_v == std::string ("mioInitialFeasibleSolutionObj")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8851_v == std::string ("mioObjInt")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8851_v == std::string ("mioObjBound")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8851_v == std::string ("mioObjRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8851_v == std::string ("mioObjAbsGap")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8851_v == std::string ("mioUserObjCut")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8851_v == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8851_v == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8851_v == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8851_v == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8851_v == std::string ("mioImpliedBoundTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8851_v == std::string ("mioLiproSeparationTime")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8851_v == std::string ("mioRootCutgenTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8851_v == std::string ("mioProbingTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8851_v == std::string ("optimizerTime")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8851_v == std::string ("presolveTime")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8851_v == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8851_v == std::string ("presolveEliTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8851_v == std::string ("presolveLindepTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8851_v == std::string ("readDataTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8851_v == std::string ("writeDataTime")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrPrimalObj")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrPviolcon")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrPviolvar")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrPviolcones")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrPviolacc")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrDualObj")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrDviolcon")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrDviolvar")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrDviolcones")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrDviolacc")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrNrmXc")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrNrmXx")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrNrmBarx")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrNrmY")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrNrmSlc")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrNrmSuc")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrNrmSlx")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrNrmSux")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrNrmSnx")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8851_v == std::string ("solItrNrmBars")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasPrimalObj")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasPviolcon")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasPviolvar")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasDualObj")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasDviolcon")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasDviolvar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasNrmXc")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasNrmXx")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasNrmBarx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasNrmY")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasNrmSlc")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasNrmSuc")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasNrmSlx")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8851_v == std::string ("solBasNrmSux")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgPrimalObj")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgPviolcon")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgPviolvar")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgPviolcones")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgPviolacc")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgPviolitg")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgPvioldjc")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgNrmXc")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgNrmXx")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8851_v == std::string ("solItgNrmBarx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8851_v == std::string ("presolveTotalPrimalPerturbation")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8851_v == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8851_v == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8851_v == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8851_v == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8851_v == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8851_v == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8851_v == std::string ("remoteTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_dinfitem_value

// Begin mosek.fusion.Parameters.string_to_solformat_value
// Method mosek.fusion.Parameters.string_to_solformat_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:262:0-269:1
int32_t mosek::fusion::p_Parameters::string_to_solformat_value(const std::string & _8852_v)
{
  if ((_8852_v == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8852_v == std::string ("b")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8852_v == std::string ("task")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8852_v == std::string ("jsonTask")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solformat_value

// Begin mosek.fusion.Parameters.string_to_dataformat_value
// Method mosek.fusion.Parameters.string_to_dataformat_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:249:0-261:1
int32_t mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _8853_v)
{
  if ((_8853_v == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8853_v == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8853_v == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8853_v == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8853_v == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8853_v == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8853_v == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8853_v == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8853_v == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_dataformat_value

// Begin mosek.fusion.Parameters.string_to_symmattype_value
// Method mosek.fusion.Parameters.string_to_symmattype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:244:0-248:1
int32_t mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _8854_v)
{
  if ((_8854_v == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_symmattype_value

// Begin mosek.fusion.Parameters.string_to_nametype_value
// Method mosek.fusion.Parameters.string_to_nametype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:237:0-243:1
int32_t mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _8855_v)
{
  if ((_8855_v == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8855_v == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8855_v == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_nametype_value

// Begin mosek.fusion.Parameters.string_to_domaintype_value
// Method mosek.fusion.Parameters.string_to_domaintype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:220:0-236:1
int32_t mosek::fusion::p_Parameters::string_to_domaintype_value(const std::string & _8856_v)
{
  if ((_8856_v == std::string ("r")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8856_v == std::string ("rzero")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8856_v == std::string ("rplus")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8856_v == std::string ("rminus")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8856_v == std::string ("quadraticCone")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8856_v == std::string ("rquadraticCone")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8856_v == std::string ("primalExpCone")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8856_v == std::string ("dualExpCone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8856_v == std::string ("primalPowerCone")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8856_v == std::string ("dualPowerCone")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8856_v == std::string ("primalGeoMeanCone")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8856_v == std::string ("dualGeoMeanCone")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8856_v == std::string ("svecPsdCone")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_domaintype_value

// Begin mosek.fusion.Parameters.string_to_conetype_value
// Method mosek.fusion.Parameters.string_to_conetype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:209:0-219:1
int32_t mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _8857_v)
{
  if ((_8857_v == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8857_v == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8857_v == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8857_v == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8857_v == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8857_v == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8857_v == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_conetype_value

// Begin mosek.fusion.Parameters.string_to_compresstype_value
// Method mosek.fusion.Parameters.string_to_compresstype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:201:0-208:1
int32_t mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _8858_v)
{
  if ((_8858_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8858_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8858_v == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8858_v == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_compresstype_value

// Begin mosek.fusion.Parameters.string_to_checkconvexitytype_value
// Method mosek.fusion.Parameters.string_to_checkconvexitytype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:194:0-200:1
int32_t mosek::fusion::p_Parameters::string_to_checkconvexitytype_value(const std::string & _8859_v)
{
  if ((_8859_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8859_v == std::string ("simple")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8859_v == std::string ("full")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_checkconvexitytype_value

// Begin mosek.fusion.Parameters.string_to_callbackcode_value
// Method mosek.fusion.Parameters.string_to_callbackcode_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:97:0-193:1
int32_t mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _8860_v)
{
  if ((_8860_v == std::string ("beginRootCutgen")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8860_v == std::string ("imRootCutgen")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8860_v == std::string ("endRootCutgen")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8860_v == std::string ("beginSolveRootRelax")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8860_v == std::string ("endSolveRootRelax")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8860_v == std::string ("beginOptimizer")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8860_v == std::string ("endOptimizer")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8860_v == std::string ("beginPresolve")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8860_v == std::string ("updatePresolve")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8860_v == std::string ("imPresolve")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8860_v == std::string ("endPresolve")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8860_v == std::string ("beginIntpnt")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8860_v == std::string ("intpnt")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8860_v == std::string ("imIntpnt")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8860_v == std::string ("endIntpnt")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8860_v == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8860_v == std::string ("conic")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8860_v == std::string ("imConic")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8860_v == std::string ("endConic")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8860_v == std::string ("primalSimplex")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8860_v == std::string ("dualSimplex")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8860_v == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8860_v == std::string ("imBi")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8860_v == std::string ("endBi")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8860_v == std::string ("beginPrimalBi")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8860_v == std::string ("imPrimalBi")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8860_v == std::string ("updatePrimalBi")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8860_v == std::string ("endPrimalBi")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8860_v == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8860_v == std::string ("imDualBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8860_v == std::string ("updateDualBi")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8860_v == std::string ("endDualBi")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8860_v == std::string ("beginSimplexBi")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8860_v == std::string ("imSimplexBi")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8860_v == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8860_v == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8860_v == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8860_v == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8860_v == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8860_v == std::string ("endDualSimplexBi")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8860_v == std::string ("endSimplexBi")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8860_v == std::string ("beginMio")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8860_v == std::string ("imMio")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8860_v == std::string ("newIntMio")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8860_v == std::string ("endMio")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8860_v == std::string ("beginSimplex")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8860_v == std::string ("imSimplex")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8860_v == std::string ("updateSimplex")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8860_v == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8860_v == std::string ("imDualSimplex")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8860_v == std::string ("updateDualSimplex")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8860_v == std::string ("endDualSimplex")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8860_v == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8860_v == std::string ("imPrimalSimplex")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8860_v == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8860_v == std::string ("endPrimalSimplex")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8860_v == std::string ("endSimplex")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8860_v == std::string ("beginInfeasAna")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8860_v == std::string ("endInfeasAna")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8860_v == std::string ("imPrimalSensivity")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8860_v == std::string ("imDualSensivity")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8860_v == std::string ("imMioIntpnt")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8860_v == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8860_v == std::string ("imMioDualSimplex")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8860_v == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8860_v == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8860_v == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8860_v == std::string ("endDualSetupBi")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8860_v == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8860_v == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8860_v == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8860_v == std::string ("endDualSensitivity")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8860_v == std::string ("beginLicenseWait")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8860_v == std::string ("endLicenseWait")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8860_v == std::string ("imLicenseWait")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8860_v == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8860_v == std::string ("endQcqoReformulate")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8860_v == std::string ("imQoReformulate")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8860_v == std::string ("beginToConic")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8860_v == std::string ("endToConic")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8860_v == std::string ("beginPrimalRepair")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8860_v == std::string ("endPrimalRepair")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8860_v == std::string ("beginRead")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8860_v == std::string ("imRead")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8860_v == std::string ("endRead")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8860_v == std::string ("beginWrite")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8860_v == std::string ("endWrite")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8860_v == std::string ("readOpfSection")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8860_v == std::string ("imLu")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8860_v == std::string ("imOrder")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8860_v == std::string ("readOpf")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8860_v == std::string ("writeOpf")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8860_v == std::string ("solvingRemote")))
  {
    {
      return (int)83;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_callbackcode_value

// Begin mosek.fusion.Parameters.string_to_purify_value
// Method mosek.fusion.Parameters.string_to_purify_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:88:0-96:1
int32_t mosek::fusion::p_Parameters::string_to_purify_value(const std::string & _8861_v)
{
  if ((_8861_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8861_v == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8861_v == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8861_v == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8861_v == std::string ("auto")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_purify_value

// Begin mosek.fusion.Parameters.string_to_intpnthotstart_value
// Method mosek.fusion.Parameters.string_to_intpnthotstart_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:80:0-87:1
int32_t mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _8862_v)
{
  if ((_8862_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8862_v == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8862_v == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8862_v == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_intpnthotstart_value

// Begin mosek.fusion.Parameters.string_to_simhotstart_value
// Method mosek.fusion.Parameters.string_to_simhotstart_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:73:0-79:1
int32_t mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _8863_v)
{
  if ((_8863_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8863_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8863_v == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simhotstart_value

// Begin mosek.fusion.Parameters.string_to_simdupvec_value
// Method mosek.fusion.Parameters.string_to_simdupvec_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:66:0-72:1
int32_t mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _8864_v)
{
  if ((_8864_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8864_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8864_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simdupvec_value

// Begin mosek.fusion.Parameters.string_to_simreform_value
// Method mosek.fusion.Parameters.string_to_simreform_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:58:0-65:1
int32_t mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _8865_v)
{
  if ((_8865_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8865_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8865_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8865_v == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simreform_value

// Begin mosek.fusion.Parameters.string_to_uplo_value
// Method mosek.fusion.Parameters.string_to_uplo_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:52:0-57:1
int32_t mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _8866_v)
{
  if ((_8866_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8866_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_uplo_value

// Begin mosek.fusion.Parameters.string_to_transpose_value
// Method mosek.fusion.Parameters.string_to_transpose_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:46:0-51:1
int32_t mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _8867_v)
{
  if ((_8867_v == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8867_v == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_transpose_value

// Begin mosek.fusion.Parameters.string_to_simdegen_value
// Method mosek.fusion.Parameters.string_to_simdegen_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:37:0-45:1
int32_t mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _8868_v)
{
  if ((_8868_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8868_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8868_v == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8868_v == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8868_v == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simdegen_value

// Begin mosek.fusion.Parameters.string_to_mark_value
// Method mosek.fusion.Parameters.string_to_mark_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:31:0-36:1
int32_t mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _8869_v)
{
  if ((_8869_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8869_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_mark_value

// Begin mosek.fusion.Parameters.string_to_boundkey_value
// Method mosek.fusion.Parameters.string_to_boundkey_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:22:0-30:1
int32_t mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _8870_v)
{
  if ((_8870_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8870_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8870_v == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8870_v == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8870_v == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_boundkey_value

// Begin mosek.fusion.Parameters.string_to_basindtype_value
// Method mosek.fusion.Parameters.string_to_basindtype_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:13:0-21:1
int32_t mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _8871_v)
{
  if ((_8871_v == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8871_v == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8871_v == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8871_v == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8871_v == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_basindtype_value

// Begin mosek.fusion.Parameters.string_to_language_value
// Method mosek.fusion.Parameters.string_to_language_value @ bld/herlev/final/default/src/fusion/Parameters.mbi:7:0-12:1
int32_t mosek::fusion::p_Parameters::string_to_language_value(const std::string & _8872_v)
{
  if ((_8872_v == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8872_v == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_language_value

void mosek::fusion::p_Parameters::destroy()
{
}
void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }
// } class Parameters
